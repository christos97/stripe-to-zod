// Generated by ts-to-zod
import { z } from "zod";
import {
  Account,
  AccountBrandingSettings,
  AccountSettings,
  ApiErrors,
  ApplicationFee,
  BalanceTransaction,
  BankAccount,
  BankConnectionsResourceAccountholder,
  Capability,
  Card,
  Charge,
  ChargeTransferData,
  CheckoutSession,
  ConnectCollectionTransfer,
  CreditNote,
  CreditNoteLineItem,
  Customer,
  CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft,
  CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction,
  CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction,
  CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction,
  CustomerBalanceTransaction,
  CustomerCashBalanceTransaction,
  DeletedDiscount,
  Discount,
  DiscountsResourceDiscountAmount,
  Dispute,
  DisputeEvidence,
  Error,
  ExternalAccount,
  FeeRefund,
  File,
  FileLink,
  FinancialConnectionsAccount,
  FinancialConnectionsSession,
  Invoice,
  InvoiceSettingCustomerSetting,
  InvoiceTransferData,
  Invoiceitem,
  InvoicesFromInvoice,
  IssuingAuthorization,
  IssuingCard,
  IssuingCardholder,
  IssuingDispute,
  IssuingTransaction,
  IssuingCardholderIdDocument,
  IssuingCardholderIndividual,
  IssuingCardholderVerification,
  IssuingDisputeCanceledEvidence,
  IssuingDisputeDuplicateEvidence,
  IssuingDisputeEvidence,
  IssuingDisputeFraudulentEvidence,
  IssuingDisputeMerchandiseNotAsDescribedEvidence,
  IssuingDisputeNotReceivedEvidence,
  IssuingDisputeOtherEvidence,
  IssuingDisputeServiceNotAsDescribedEvidence,
  Item,
  LegalEntityCompany,
  LegalEntityCompanyVerification,
  LegalEntityCompanyVerificationDocument,
  LegalEntityPersonVerification,
  LegalEntityPersonVerificationDocument,
  LineItem,
  LineItemsDiscountAmount,
  Mandate,
  PaymentIntent,
  PaymentLink,
  PaymentLinksResourceInvoiceCreation,
  PaymentLinksResourceInvoiceSettings,
  PaymentLinksResourceTransferData,
  PaymentMethod,
  PaymentMethodCard,
  PaymentMethodCardGeneratedCard,
  PaymentMethodDetails,
  PaymentMethodDetailsBancontact,
  PaymentMethodDetailsIdeal,
  PaymentMethodDetailsSofort,
  PaymentMethodSepaDebit,
  PaymentPagesCheckoutSessionInvoiceCreation,
  PaymentPagesCheckoutSessionInvoiceSettings,
  PaymentPagesCheckoutSessionTotalDetails,
  PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown,
  PaymentSource,
  Payout,
  Person,
  Plan,
  Price,
  Product,
  PromotionCode,
  Quote,
  QuotesResourceComputed,
  QuotesResourceFromQuote,
  QuotesResourceRecurring,
  QuotesResourceTotalDetails,
  QuotesResourceTotalDetailsResourceBreakdown,
  QuotesResourceTransferData,
  QuotesResourceUpfront,
  RadarEarlyFraudWarning,
  Refund,
  ReportingReportRun,
  Review,
  ScheduledQueryRun,
  SepaDebitGeneratedFrom,
  SetupAttempt,
  SetupAttemptPaymentMethodDetails,
  SetupAttemptPaymentMethodDetailsBancontact,
  SetupAttemptPaymentMethodDetailsCardPresent,
  SetupAttemptPaymentMethodDetailsIdeal,
  SetupAttemptPaymentMethodDetailsSofort,
  SetupIntent,
  Subscription,
  SubscriptionItem,
  SubscriptionSchedule,
  SubscriptionScheduleAddInvoiceItem,
  SubscriptionScheduleConfigurationItem,
  SubscriptionSchedulePhaseConfiguration,
  SubscriptionSchedulesResourceDefaultSettings,
  SubscriptionTransferData,
  SubscriptionsResourcePendingUpdate,
  TaxId,
  TerminalConfiguration,
  TerminalReader,
  TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig,
  TerminalReaderReaderResourceProcessPaymentIntentAction,
  TerminalReaderReaderResourceProcessSetupIntentAction,
  TerminalReaderReaderResourceReaderAction,
  TerminalReaderReaderResourceRefundPaymentAction,
  Token,
  Topup,
  Transfer,
  TransferData,
  TransferReversal,
  TreasuryCreditReversal,
  TreasuryDebitReversal,
  TreasuryInboundTransfer,
  TreasuryOutboundPayment,
  TreasuryOutboundTransfer,
  TreasuryReceivedCredit,
  TreasuryReceivedDebit,
  TreasuryTransaction,
  TreasuryTransactionEntry,
  TreasuryOutboundPaymentsResourceReturnedStatus,
  TreasuryOutboundTransfersResourceReturnedDetails,
  TreasuryReceivedCreditsResourceLinkedFlows,
  TreasuryReceivedCreditsResourceSourceFlowsDetails,
  TreasuryTransactionsResourceFlowDetails,
} from "./stripeSchemas";

export const accountBacsDebitPaymentsSettingsSchema = z.object({
  display_name: z.string().optional(),
});

export const accountCapabilitiesSchema = z.object({
  acss_debit_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  affirm_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  afterpay_clearpay_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  au_becs_debit_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  bacs_debit_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  bancontact_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  bank_transfer_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  blik_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  boleto_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  card_issuing: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  card_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  cartes_bancaires_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  cashapp_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  eps_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  fpx_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  giropay_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  grabpay_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  ideal_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  india_international_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  jcb_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  klarna_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  konbini_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  legacy_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  link_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  oxxo_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  p24_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  paynow_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  promptpay_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  sepa_debit_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  sofort_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  tax_reporting_us_1099_k: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  tax_reporting_us_1099_misc: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  transfers: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  treasury: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  us_bank_account_ach_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
  zip_payments: z
    .union([z.literal("active"), z.literal("inactive"), z.literal("pending")])
    .optional(),
});

export const accountDashboardSettingsSchema = z.object({
  display_name: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
});

export const accountDeclineChargeOnSchema = z.object({
  avs_failure: z.boolean(),
  cvc_failure: z.boolean(),
});

export const accountLinkSchema = z.object({
  created: z.number(),
  expires_at: z.number(),
  object: z.literal("account_link"),
  url: z.string(),
});

export const accountMonthlyEstimatedRevenueSchema = z.object({
  amount: z.number(),
  currency: z.string(),
});

export const accountPaymentsSettingsSchema = z.object({
  statement_descriptor: z.string().optional().nullable(),
  statement_descriptor_kana: z.string().optional().nullable(),
  statement_descriptor_kanji: z.string().optional().nullable(),
  statement_descriptor_prefix_kana: z.string().optional().nullable(),
  statement_descriptor_prefix_kanji: z.string().optional().nullable(),
});

export const accountRequirementsAlternativeSchema = z.object({
  alternative_fields_due: z.array(z.string()),
  original_fields_due: z.array(z.string()),
});

export const accountRequirementsErrorSchema = z.object({
  code: z.union([
    z.literal("invalid_address_city_state_postal_code"),
    z.literal("invalid_dob_age_under_18"),
    z.literal("invalid_representative_country"),
    z.literal("invalid_street_address"),
    z.literal("invalid_tos_acceptance"),
    z.literal("invalid_value_other"),
    z.literal("verification_document_address_mismatch"),
    z.literal("verification_document_address_missing"),
    z.literal("verification_document_corrupt"),
    z.literal("verification_document_country_not_supported"),
    z.literal("verification_document_dob_mismatch"),
    z.literal("verification_document_duplicate_type"),
    z.literal("verification_document_expired"),
    z.literal("verification_document_failed_copy"),
    z.literal("verification_document_failed_greyscale"),
    z.literal("verification_document_failed_other"),
    z.literal("verification_document_failed_test_mode"),
    z.literal("verification_document_fraudulent"),
    z.literal("verification_document_id_number_mismatch"),
    z.literal("verification_document_id_number_missing"),
    z.literal("verification_document_incomplete"),
    z.literal("verification_document_invalid"),
    z.literal("verification_document_issue_or_expiry_date_missing"),
    z.literal("verification_document_manipulated"),
    z.literal("verification_document_missing_back"),
    z.literal("verification_document_missing_front"),
    z.literal("verification_document_name_mismatch"),
    z.literal("verification_document_name_missing"),
    z.literal("verification_document_nationality_mismatch"),
    z.literal("verification_document_not_readable"),
    z.literal("verification_document_not_signed"),
    z.literal("verification_document_not_uploaded"),
    z.literal("verification_document_photo_mismatch"),
    z.literal("verification_document_too_large"),
    z.literal("verification_document_type_not_supported"),
    z.literal("verification_failed_address_match"),
    z.literal("verification_failed_business_iec_number"),
    z.literal("verification_failed_document_match"),
    z.literal("verification_failed_id_number_match"),
    z.literal("verification_failed_keyed_identity"),
    z.literal("verification_failed_keyed_match"),
    z.literal("verification_failed_name_match"),
    z.literal("verification_failed_other"),
    z.literal("verification_failed_residential_address"),
    z.literal("verification_failed_tax_id_match"),
    z.literal("verification_failed_tax_id_not_issued"),
    z.literal("verification_missing_executives"),
    z.literal("verification_missing_owners"),
    z.literal("verification_requires_additional_memorandum_of_associations"),
  ]),
  reason: z.string(),
  requirement: z.string(),
});

export const accountSepaDebitPaymentsSettingsSchema = z.object({
  creditor_id: z.string().optional(),
});

export const accountTermsOfServiceSchema = z.object({
  date: z.number().optional().nullable(),
  ip: z.string().optional().nullable(),
  user_agent: z.string().optional(),
});

export const accountTosAcceptanceSchema = z.object({
  date: z.number().optional().nullable(),
  ip: z.string().optional().nullable(),
  service_agreement: z.string().optional(),
  user_agent: z.string().optional().nullable(),
});

export const accountTreasurySettingsSchema = z.object({
  tos_acceptance: accountTermsOfServiceSchema.optional(),
});

export const accountUnificationAccountControllerSchema = z.object({
  is_controller: z.boolean().optional(),
  type: z.union([z.literal("account"), z.literal("application")]),
});

export const addressSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  line1: z.string().optional().nullable(),
  line2: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
});

export const applePayDomainSchema = z.object({
  created: z.number(),
  domain_name: z.string(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("apple_pay_domain"),
});

export const applicationSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  object: z.literal("application"),
});

export const automaticTaxSchema = z.object({
  enabled: z.boolean(),
  status: z
    .union([
      z.literal("complete"),
      z.literal("failed"),
      z.literal("requires_location_inputs"),
    ])
    .optional(),
});

export const balanceAmountBySourceTypeSchema = z.object({
  bank_account: z.number().optional(),
  card: z.number().optional(),
  fpx: z.number().optional(),
});

export const bankConnectionsResourceBalanceApiResourceCashBalanceSchema = z.object(
  {
    available: z.record(z.number()).optional().nullable(),
  }
);

export const bankConnectionsResourceBalanceApiResourceCreditBalanceSchema = z.object(
  {
    used: z.record(z.number()).optional().nullable(),
  }
);

export const bankConnectionsResourceBalanceRefreshSchema = z.object({
  last_attempted_at: z.number(),
  status: z.union([
    z.literal("failed"),
    z.literal("pending"),
    z.literal("succeeded"),
  ]),
});

export const bankConnectionsResourceLinkAccountSessionFiltersSchema = z.object({
  countries: z.array(z.string()).optional().nullable(),
});

export const bankConnectionsResourceOwnershipRefreshSchema = z.object({
  last_attempted_at: z.number(),
  status: z.union([
    z.literal("failed"),
    z.literal("pending"),
    z.literal("succeeded"),
  ]),
});

export const billingDetailsSchema = z.object({
  address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
});

export const cancellationDetailsSchema = z.object({
  comment: z.string().optional().nullable(),
  feedback: z
    .union([
      z.literal("customer_service"),
      z.literal("low_quality"),
      z.literal("missing_features"),
      z.literal("other"),
      z.literal("switched_service"),
      z.literal("too_complex"),
      z.literal("too_expensive"),
      z.literal("unused"),
    ])
    .optional(),
  reason: z
    .union([
      z.literal("cancellation_requested"),
      z.literal("payment_disputed"),
      z.literal("payment_failed"),
    ])
    .optional(),
});

export const cardIssuingAccountTermsOfServiceSchema = z.object({
  date: z.number().optional().nullable(),
  ip: z.string().optional().nullable(),
  user_agent: z.string().optional(),
});

export const cardMandatePaymentMethodDetailsSchema = z.object({});

export const chargeFraudDetailsSchema = z.object({
  stripe_report: z.string().optional(),
  user_report: z.string().optional(),
});

export const checkoutAcssDebitMandateOptionsSchema = z.object({
  custom_mandate_url: z.string().optional(),
  default_for: z
    .array(z.union([z.literal("invoice"), z.literal("subscription")]))
    .optional(),
  interval_description: z.string().optional().nullable(),
  payment_schedule: z
    .union([
      z.literal("combined"),
      z.literal("interval"),
      z.literal("sporadic"),
    ])
    .optional(),
  transaction_type: z
    .union([z.literal("business"), z.literal("personal")])
    .optional(),
});

export const checkoutAcssDebitPaymentMethodOptionsSchema = z.object({
  currency: z.union([z.literal("cad"), z.literal("usd")]).optional(),
  mandate_options: checkoutAcssDebitMandateOptionsSchema.optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const checkoutAffirmPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutAfterpayClearpayPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutAlipayPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutAuBecsDebitPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutBacsDebitPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const checkoutBancontactPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutBoletoPaymentMethodOptionsSchema = z.object({
  expires_after_days: z.number(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const checkoutCardInstallmentsOptionsSchema = z.object({
  enabled: z.boolean().optional(),
});

export const checkoutCardPaymentMethodOptionsSchema = z.object({
  installments: checkoutCardInstallmentsOptionsSchema.optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  statement_descriptor_suffix_kana: z.string().optional(),
  statement_descriptor_suffix_kanji: z.string().optional(),
});

export const checkoutCashappPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutEpsPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutFpxPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutGiropayPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutGrabPayPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutIdealPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutKlarnaPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const checkoutKonbiniPaymentMethodOptionsSchema = z.object({
  expires_after_days: z.number().optional().nullable(),
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutLinkPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const checkoutOxxoPaymentMethodOptionsSchema = z.object({
  expires_after_days: z.number(),
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutP24PaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutPaynowPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutPixPaymentMethodOptionsSchema = z.object({
  expires_after_seconds: z.number().optional().nullable(),
});

export const checkoutSepaDebitPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const checkoutSofortPaymentMethodOptionsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const countrySpecVerificationFieldDetailsSchema = z.object({
  additional: z.array(z.string()),
  minimum: z.array(z.string()),
});

export const countrySpecVerificationFieldsSchema = z.object({
  company: countrySpecVerificationFieldDetailsSchema,
  individual: countrySpecVerificationFieldDetailsSchema,
});

export const couponAppliesToSchema = z.object({
  products: z.array(z.string()),
});

export const couponCurrencyOptionSchema = z.object({
  amount_off: z.number(),
});

export const customUnitAmountSchema = z.object({
  maximum: z.number().optional().nullable(),
  minimum: z.number().optional().nullable(),
  preset: z.number().optional().nullable(),
});

export const customerBalanceCustomerBalanceSettingsSchema = z.object({
  reconciliation_mode: z.union([z.literal("automatic"), z.literal("manual")]),
  using_merchant_default: z.boolean(),
});

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransferSchema = z.object(
  {
    bic: z.string().optional().nullable(),
    iban_last4: z.string().optional().nullable(),
    sender_name: z.string().optional().nullable(),
  }
);

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransferSchema = z.object(
  {
    account_number_last4: z.string().optional().nullable(),
    sender_name: z.string().optional().nullable(),
    sort_code: z.string().optional().nullable(),
  }
);

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransferSchema = z.object(
  {
    sender_bank: z.string().optional().nullable(),
    sender_branch: z.string().optional().nullable(),
    sender_name: z.string().optional().nullable(),
  }
);

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferSchema = z.object(
  {
    network: z
      .union([
        z.literal("ach"),
        z.literal("domestic_wire_us"),
        z.literal("swift"),
      ])
      .optional(),
    sender_name: z.string().optional().nullable(),
  }
);

export const customerTaxLocationSchema = z.object({
  country: z.string(),
  source: z.union([
    z.literal("billing_address"),
    z.literal("ip_address"),
    z.literal("payment_method"),
    z.literal("shipping_destination"),
  ]),
  state: z.string().optional().nullable(),
});

export const deletedAccountSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("account"),
});

export const deletedApplePayDomainSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("apple_pay_domain"),
});

export const deletedApplicationSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  name: z.string().optional().nullable(),
  object: z.literal("application"),
});

export const deletedBankAccountSchema = z.object({
  currency: z.string().optional().nullable(),
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("bank_account"),
});

export const deletedCardSchema = z.object({
  currency: z.string().optional().nullable(),
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("card"),
});

export const deletedCouponSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("coupon"),
});

export const deletedCustomerSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("customer"),
});

export const deletedExternalAccountSchema = z.union([
  deletedBankAccountSchema,
  deletedCardSchema,
]);

export const deletedInvoiceSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("invoice"),
});

export const deletedInvoiceitemSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("invoiceitem"),
});

export const deletedPaymentSourceSchema = z.union([
  deletedBankAccountSchema,
  deletedCardSchema,
]);

export const deletedPersonSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("person"),
});

export const deletedPlanSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("plan"),
});

export const deletedPriceSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("price"),
});

export const deletedProductSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("product"),
});

export const deletedRadarValueListSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("radar.value_list"),
});

export const deletedRadarValueListItemSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("radar.value_list_item"),
});

export const deletedSubscriptionItemSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("subscription_item"),
});

export const deletedTaxIdSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("tax_id"),
});

export const deletedTerminalConfigurationSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("terminal.configuration"),
});

export const deletedTerminalLocationSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("terminal.location"),
});

export const deletedTerminalReaderSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("terminal.reader"),
});

export const deletedTestHelpersTestClockSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("test_helpers.test_clock"),
});

export const deletedWebhookEndpointSchema = z.object({
  deleted: z.literal(true),
  id: z.string(),
  object: z.literal("webhook_endpoint"),
});

export const disputeEvidenceDetailsSchema = z.object({
  due_by: z.number().optional().nullable(),
  has_evidence: z.boolean(),
  past_due: z.boolean(),
  submission_count: z.number(),
});

export const emailSentSchema = z.object({
  email_sent_at: z.number(),
  email_sent_to: z.string(),
});

export const ephemeralKeySchema = z.object({
  created: z.number(),
  expires: z.number(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("ephemeral_key"),
  secret: z.string().optional(),
});

export const exchangeRateSchema = z.object({
  id: z.string(),
  object: z.literal("exchange_rate"),
  rates: z.record(z.number()),
});

export const externalAccountRequirementsSchema = z.object({
  currently_due: z.array(z.string()).optional().nullable(),
  errors: z.array(accountRequirementsErrorSchema).optional().nullable(),
  past_due: z.array(z.string()).optional().nullable(),
  pending_verification: z.array(z.string()).optional().nullable(),
});

export const feeSchema = z.object({
  amount: z.number(),
  application: z.string().optional().nullable(),
  currency: z.string(),
  description: z.string().optional().nullable(),
  type: z.string(),
});

export const financialConnectionsAccountOwnerSchema = z.object({
  email: z.string().optional().nullable(),
  id: z.string(),
  name: z.string(),
  object: z.literal("financial_connections.account_owner"),
  ownership: z.string(),
  phone: z.string().optional().nullable(),
  raw_address: z.string().optional().nullable(),
  refreshed_at: z.number().optional().nullable(),
});

export const financialConnectionsAccountOwnershipSchema = z.object({
  created: z.number(),
  id: z.string(),
  object: z.literal("financial_connections.account_ownership"),
  owners: z.object({
    data: z.array(financialConnectionsAccountOwnerSchema),
    has_more: z.boolean(),
    object: z.literal("list"),
    url: z.string(),
  }),
});

export const financialReportingFinanceReportRunRunParametersSchema = z.object({
  columns: z.array(z.string()).optional(),
  connected_account: z.string().optional(),
  currency: z.string().optional(),
  interval_end: z.number().optional(),
  interval_start: z.number().optional(),
  payout: z.string().optional(),
  reporting_category: z.string().optional(),
  timezone: z.string().optional(),
});

export const fundingInstructionsBankTransferIbanRecordSchema = z.object({
  account_holder_name: z.string(),
  bic: z.string(),
  country: z.string(),
  iban: z.string(),
});

export const fundingInstructionsBankTransferSortCodeRecordSchema = z.object({
  account_holder_name: z.string(),
  account_number: z.string(),
  sort_code: z.string(),
});

export const fundingInstructionsBankTransferSpeiRecordSchema = z.object({
  bank_code: z.string(),
  bank_name: z.string(),
  clabe: z.string(),
});

export const fundingInstructionsBankTransferZenginRecordSchema = z.object({
  account_holder_name: z.string().optional().nullable(),
  account_number: z.string().optional().nullable(),
  account_type: z.string().optional().nullable(),
  bank_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  branch_code: z.string().optional().nullable(),
  branch_name: z.string().optional().nullable(),
});

export const gelatoDataDocumentReportDateOfBirthSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const gelatoDataDocumentReportExpirationDateSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const gelatoDataDocumentReportIssuedDateSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const gelatoDataIdNumberReportDateSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const gelatoDataVerifiedOutputsDateSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const gelatoDocumentReportErrorSchema = z.object({
  code: z
    .union([
      z.literal("document_expired"),
      z.literal("document_type_not_supported"),
      z.literal("document_unverified_other"),
    ])
    .optional(),
  reason: z.string().optional().nullable(),
});

export const gelatoIdNumberReportErrorSchema = z.object({
  code: z
    .union([
      z.literal("id_number_insufficient_document_data"),
      z.literal("id_number_mismatch"),
      z.literal("id_number_unverified_other"),
    ])
    .optional(),
  reason: z.string().optional().nullable(),
});

export const gelatoReportDocumentOptionsSchema = z.object({
  allowed_types: z
    .array(
      z.union([
        z.literal("driving_license"),
        z.literal("id_card"),
        z.literal("passport"),
      ])
    )
    .optional(),
  require_id_number: z.boolean().optional(),
  require_live_capture: z.boolean().optional(),
  require_matching_selfie: z.boolean().optional(),
});

export const gelatoReportIdNumberOptionsSchema = z.object({});

export const gelatoSelfieReportErrorSchema = z.object({
  code: z
    .union([
      z.literal("selfie_document_missing_photo"),
      z.literal("selfie_face_mismatch"),
      z.literal("selfie_manipulated"),
      z.literal("selfie_unverified_other"),
    ])
    .optional(),
  reason: z.string().optional().nullable(),
});

export const gelatoSessionDocumentOptionsSchema = z.object({
  allowed_types: z
    .array(
      z.union([
        z.literal("driving_license"),
        z.literal("id_card"),
        z.literal("passport"),
      ])
    )
    .optional(),
  require_id_number: z.boolean().optional(),
  require_live_capture: z.boolean().optional(),
  require_matching_selfie: z.boolean().optional(),
});

export const gelatoSessionIdNumberOptionsSchema = z.object({});

export const gelatoSessionLastErrorSchema = z.object({
  code: z
    .union([
      z.literal("abandoned"),
      z.literal("consent_declined"),
      z.literal("country_not_supported"),
      z.literal("device_not_supported"),
      z.literal("document_expired"),
      z.literal("document_type_not_supported"),
      z.literal("document_unverified_other"),
      z.literal("id_number_insufficient_document_data"),
      z.literal("id_number_mismatch"),
      z.literal("id_number_unverified_other"),
      z.literal("selfie_document_missing_photo"),
      z.literal("selfie_face_mismatch"),
      z.literal("selfie_manipulated"),
      z.literal("selfie_unverified_other"),
      z.literal("under_supported_age"),
    ])
    .optional(),
  reason: z.string().optional().nullable(),
});

export const gelatoVerificationReportOptionsSchema = z.object({
  document: gelatoReportDocumentOptionsSchema.optional(),
  id_number: gelatoReportIdNumberOptionsSchema.optional(),
});

export const gelatoVerificationSessionOptionsSchema = z.object({
  document: gelatoSessionDocumentOptionsSchema.optional(),
  id_number: gelatoSessionIdNumberOptionsSchema.optional(),
});

export const gelatoVerifiedOutputsSchema = z.object({
  address: addressSchema.optional().nullable(),
  dob: gelatoDataVerifiedOutputsDateSchema.optional().nullable(),
  first_name: z.string().optional().nullable(),
  id_number: z.string().optional().nullable(),
  id_number_type: z
    .union([z.literal("br_cpf"), z.literal("sg_nric"), z.literal("us_ssn")])
    .optional(),
  last_name: z.string().optional().nullable(),
});

export const inboundTransfersPaymentMethodDetailsUsBankAccountSchema = z.object(
  {
    account_holder_type: z
      .union([z.literal("company"), z.literal("individual")])
      .optional(),
    account_type: z
      .union([z.literal("checking"), z.literal("savings")])
      .optional(),
    bank_name: z.string().optional().nullable(),
    fingerprint: z.string().optional().nullable(),
    last4: z.string().optional().nullable(),
    network: z.literal("ach"),
    routing_number: z.string().optional().nullable(),
  }
);

export const invoiceInstallmentsCardSchema = z.object({
  enabled: z.boolean().optional().nullable(),
});

export const invoiceItemThresholdReasonSchema = z.object({
  line_item_ids: z.array(z.string()),
  usage_gte: z.number(),
});

export const invoiceLineItemPeriodSchema = z.object({
  end: z.number(),
  start: z.number(),
});

export const invoiceMandateOptionsCardSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_type: z.union([z.literal("fixed"), z.literal("maximum")]).optional(),
  description: z.string().optional().nullable(),
});

export const invoicePaymentMethodOptionsAcssDebitMandateOptionsSchema = z.object(
  {
    transaction_type: z
      .union([z.literal("business"), z.literal("personal")])
      .optional(),
  }
);

export const invoicePaymentMethodOptionsBancontactSchema = z.object({
  preferred_language: z.union([
    z.literal("de"),
    z.literal("en"),
    z.literal("fr"),
    z.literal("nl"),
  ]),
});

export const invoicePaymentMethodOptionsCardSchema = z.object({
  installments: invoiceInstallmentsCardSchema.optional(),
  request_three_d_secure: z
    .union([z.literal("any"), z.literal("automatic")])
    .optional(),
});

export const invoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferSchema = z.object(
  {
    country: z.union([
      z.literal("BE"),
      z.literal("DE"),
      z.literal("ES"),
      z.literal("FR"),
      z.literal("IE"),
      z.literal("NL"),
    ]),
  }
);

export const invoicePaymentMethodOptionsKonbiniSchema = z.object({});

export const invoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsSchema = z.object(
  {
    permissions: z
      .array(
        z.union([
          z.literal("balances"),
          z.literal("payment_method"),
          z.literal("transactions"),
        ])
      )
      .optional(),
  }
);

export const invoiceSettingCustomFieldSchema = z.object({
  name: z.string(),
  value: z.string(),
});

export const invoiceSettingPhaseSettingSchema = z.object({
  days_until_due: z.number().optional().nullable(),
});

export const invoiceSettingQuoteSettingSchema = z.object({
  days_until_due: z.number().optional().nullable(),
});

export const invoiceSettingRenderingOptionsSchema = z.object({
  amount_tax_display: z.string().optional().nullable(),
});

export const invoiceSettingSubscriptionScheduleSettingSchema = z.object({
  days_until_due: z.number().optional().nullable(),
});

export const invoiceThresholdReasonSchema = z.object({
  amount_gte: z.number().optional().nullable(),
  item_reasons: z.array(invoiceItemThresholdReasonSchema),
});

export const invoicesResourceInvoiceTaxIdSchema = z.object({
  type: z.union([
    z.literal("ad_nrt"),
    z.literal("ae_trn"),
    z.literal("ar_cuit"),
    z.literal("au_abn"),
    z.literal("au_arn"),
    z.literal("bg_uic"),
    z.literal("bo_tin"),
    z.literal("br_cnpj"),
    z.literal("br_cpf"),
    z.literal("ca_bn"),
    z.literal("ca_gst_hst"),
    z.literal("ca_pst_bc"),
    z.literal("ca_pst_mb"),
    z.literal("ca_pst_sk"),
    z.literal("ca_qst"),
    z.literal("ch_vat"),
    z.literal("cl_tin"),
    z.literal("cn_tin"),
    z.literal("co_nit"),
    z.literal("cr_tin"),
    z.literal("do_rcn"),
    z.literal("ec_ruc"),
    z.literal("eg_tin"),
    z.literal("es_cif"),
    z.literal("eu_oss_vat"),
    z.literal("eu_vat"),
    z.literal("gb_vat"),
    z.literal("ge_vat"),
    z.literal("hk_br"),
    z.literal("hu_tin"),
    z.literal("id_npwp"),
    z.literal("il_vat"),
    z.literal("in_gst"),
    z.literal("is_vat"),
    z.literal("jp_cn"),
    z.literal("jp_rn"),
    z.literal("jp_trn"),
    z.literal("ke_pin"),
    z.literal("kr_brn"),
    z.literal("li_uid"),
    z.literal("mx_rfc"),
    z.literal("my_frp"),
    z.literal("my_itn"),
    z.literal("my_sst"),
    z.literal("no_vat"),
    z.literal("nz_gst"),
    z.literal("pe_ruc"),
    z.literal("ph_tin"),
    z.literal("ro_tin"),
    z.literal("rs_pib"),
    z.literal("ru_inn"),
    z.literal("ru_kpp"),
    z.literal("sa_vat"),
    z.literal("sg_gst"),
    z.literal("sg_uen"),
    z.literal("si_tin"),
    z.literal("sv_nit"),
    z.literal("th_vat"),
    z.literal("tr_tin"),
    z.literal("tw_vat"),
    z.literal("ua_vat"),
    z.literal("unknown"),
    z.literal("us_ein"),
    z.literal("uy_ruc"),
    z.literal("ve_rif"),
    z.literal("vn_tin"),
    z.literal("za_vat"),
  ]),
  value: z.string().optional().nullable(),
});

export const invoicesResourceLineItemsCreditedItemsSchema = z.object({
  invoice: z.string(),
  invoice_line_items: z.array(z.string()),
});

export const invoicesResourceLineItemsProrationDetailsSchema = z.object({
  credited_items: invoicesResourceLineItemsCreditedItemsSchema
    .optional()
    .nullable(),
});

export const invoicesStatusTransitionsSchema = z.object({
  finalized_at: z.number().optional().nullable(),
  marked_uncollectible_at: z.number().optional().nullable(),
  paid_at: z.number().optional().nullable(),
  voided_at: z.number().optional().nullable(),
});

export const issuingSettlementSchema = z.object({
  bin: z.string(),
  clearing_date: z.number(),
  created: z.number(),
  currency: z.string(),
  id: z.string(),
  interchange_fees: z.number(),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  net_total: z.number(),
  network: z.literal("visa"),
  network_fees: z.number(),
  network_settlement_identifier: z.string(),
  object: z.literal("issuing.settlement"),
  settlement_service: z.string(),
  transaction_count: z.number(),
  transaction_volume: z.number(),
});

export const issuingAuthorizationAmountDetailsSchema = z.object({
  atm_fee: z.number().optional().nullable(),
});

export const issuingAuthorizationMerchantDataSchema = z.object({
  category: z.string(),
  category_code: z.string(),
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  network_id: z.string(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  terminal_id: z.string().optional().nullable(),
});

export const issuingAuthorizationNetworkDataSchema = z.object({
  acquiring_institution_id: z.string().optional().nullable(),
});

export const issuingAuthorizationPendingRequestSchema = z.object({
  amount: z.number(),
  amount_details: issuingAuthorizationAmountDetailsSchema.optional().nullable(),
  currency: z.string(),
  is_amount_controllable: z.boolean(),
  merchant_amount: z.number(),
  merchant_currency: z.string(),
});

export const issuingAuthorizationRequestSchema = z.object({
  amount: z.number(),
  amount_details: issuingAuthorizationAmountDetailsSchema.optional().nullable(),
  approved: z.boolean(),
  created: z.number(),
  currency: z.string(),
  merchant_amount: z.number(),
  merchant_currency: z.string(),
  reason: z.union([
    z.literal("account_disabled"),
    z.literal("card_active"),
    z.literal("card_inactive"),
    z.literal("cardholder_inactive"),
    z.literal("cardholder_verification_required"),
    z.literal("insufficient_funds"),
    z.literal("not_allowed"),
    z.literal("spending_controls"),
    z.literal("suspected_fraud"),
    z.literal("verification_failed"),
    z.literal("webhook_approved"),
    z.literal("webhook_declined"),
    z.literal("webhook_error"),
    z.literal("webhook_timeout"),
  ]),
  reason_message: z.string().optional().nullable(),
});

export const issuingAuthorizationTreasurySchema = z.object({
  received_credits: z.array(z.string()),
  received_debits: z.array(z.string()),
  transaction: z.string().optional().nullable(),
});

export const issuingAuthorizationVerificationDataSchema = z.object({
  address_line1_check: z.union([
    z.literal("match"),
    z.literal("mismatch"),
    z.literal("not_provided"),
  ]),
  address_postal_code_check: z.union([
    z.literal("match"),
    z.literal("mismatch"),
    z.literal("not_provided"),
  ]),
  cvc_check: z.union([
    z.literal("match"),
    z.literal("mismatch"),
    z.literal("not_provided"),
  ]),
  expiry_check: z.union([
    z.literal("match"),
    z.literal("mismatch"),
    z.literal("not_provided"),
  ]),
});

export const issuingCardApplePaySchema = z.object({
  eligible: z.boolean(),
  ineligible_reason: z
    .union([
      z.literal("missing_agreement"),
      z.literal("missing_cardholder_contact"),
      z.literal("unsupported_region"),
    ])
    .optional(),
});

export const issuingCardGooglePaySchema = z.object({
  eligible: z.boolean(),
  ineligible_reason: z
    .union([
      z.literal("missing_agreement"),
      z.literal("missing_cardholder_contact"),
      z.literal("unsupported_region"),
    ])
    .optional(),
});

export const issuingCardShippingCustomsSchema = z.object({
  eori_number: z.string().optional().nullable(),
});

export const issuingCardSpendingLimitSchema = z.object({
  amount: z.number(),
  categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  interval: z.union([
    z.literal("all_time"),
    z.literal("daily"),
    z.literal("monthly"),
    z.literal("per_authorization"),
    z.literal("weekly"),
    z.literal("yearly"),
  ]),
});

export const issuingCardWalletsSchema = z.object({
  apple_pay: issuingCardApplePaySchema,
  google_pay: issuingCardGooglePaySchema,
  primary_account_identifier: z.string().optional().nullable(),
});

export const issuingCardholderAddressSchema = z.object({
  address: addressSchema,
});

export const issuingCardholderCompanySchema = z.object({
  tax_id_provided: z.boolean(),
});

export const issuingCardholderIndividualDobSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const issuingCardholderRequirementsSchema = z.object({
  disabled_reason: z
    .union([
      z.literal("listed"),
      z.literal("rejected.listed"),
      z.literal("requirements.past_due"),
      z.literal("under_review"),
    ])
    .optional(),
  past_due: z
    .array(
      z.union([
        z.literal("company.tax_id"),
        z.literal("individual.card_issuing.user_terms_acceptance.date"),
        z.literal("individual.card_issuing.user_terms_acceptance.ip"),
        z.literal("individual.dob.day"),
        z.literal("individual.dob.month"),
        z.literal("individual.dob.year"),
        z.literal("individual.first_name"),
        z.literal("individual.last_name"),
        z.literal("individual.verification.document"),
      ])
    )
    .optional()
    .nullable(),
});

export const issuingCardholderSpendingLimitSchema = z.object({
  amount: z.number(),
  categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  interval: z.union([
    z.literal("all_time"),
    z.literal("daily"),
    z.literal("monthly"),
    z.literal("per_authorization"),
    z.literal("weekly"),
    z.literal("yearly"),
  ]),
});

export const issuingCardholderUserTermsAcceptanceSchema = z.object({
  date: z.number().optional().nullable(),
  ip: z.string().optional().nullable(),
  user_agent: z.string().optional().nullable(),
});

export const issuingDisputeTreasurySchema = z.object({
  debit_reversal: z.string().optional().nullable(),
  received_debit: z.string(),
});

export const issuingTransactionAmountDetailsSchema = z.object({
  atm_fee: z.number().optional().nullable(),
});

export const issuingTransactionFlightDataLegSchema = z.object({
  arrival_airport_code: z.string().optional().nullable(),
  carrier: z.string().optional().nullable(),
  departure_airport_code: z.string().optional().nullable(),
  flight_number: z.string().optional().nullable(),
  service_class: z.string().optional().nullable(),
  stopover_allowed: z.boolean().optional().nullable(),
});

export const issuingTransactionFuelDataSchema = z.object({
  type: z.string(),
  unit: z.string(),
  unit_cost_decimal: z.string(),
  volume_decimal: z.string().optional().nullable(),
});

export const issuingTransactionLodgingDataSchema = z.object({
  check_in_at: z.number().optional().nullable(),
  nights: z.number().optional().nullable(),
});

export const issuingTransactionReceiptDataSchema = z.object({
  description: z.string().optional().nullable(),
  quantity: z.number().optional().nullable(),
  total: z.number().optional().nullable(),
  unit_cost: z.number().optional().nullable(),
});

export const issuingTransactionTreasurySchema = z.object({
  received_credit: z.string().optional().nullable(),
  received_debit: z.string().optional().nullable(),
});

export const legalEntityDobSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const legalEntityJapanAddressSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  line1: z.string().optional().nullable(),
  line2: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  town: z.string().optional().nullable(),
});

export const legalEntityUboDeclarationSchema = z.object({
  date: z.number().optional().nullable(),
  ip: z.string().optional().nullable(),
  user_agent: z.string().optional().nullable(),
});

export const linkedAccountOptionsUsBankAccountSchema = z.object({
  permissions: z
    .array(
      z.union([
        z.literal("balances"),
        z.literal("ownership"),
        z.literal("payment_method"),
        z.literal("transactions"),
      ])
    )
    .optional(),
  return_url: z.string().optional(),
});

export const loginLinkSchema = z.object({
  created: z.number(),
  object: z.literal("login_link"),
  url: z.string(),
});

export const mandateAcssDebitSchema = z.object({
  default_for: z
    .array(z.union([z.literal("invoice"), z.literal("subscription")]))
    .optional(),
  interval_description: z.string().optional().nullable(),
  payment_schedule: z.union([
    z.literal("combined"),
    z.literal("interval"),
    z.literal("sporadic"),
  ]),
  transaction_type: z.union([z.literal("business"), z.literal("personal")]),
});

export const mandateAuBecsDebitSchema = z.object({
  url: z.string(),
});

export const mandateBacsDebitSchema = z.object({
  network_status: z.union([
    z.literal("accepted"),
    z.literal("pending"),
    z.literal("refused"),
    z.literal("revoked"),
  ]),
  reference: z.string(),
  url: z.string(),
});

export const mandateCashappSchema = z.object({});

export const mandateLinkSchema = z.object({});

export const mandateMultiUseSchema = z.object({});

export const mandateOptionsOffSessionDetailsBlikSchema = z.object({
  amount: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  interval: z
    .union([
      z.literal("day"),
      z.literal("month"),
      z.literal("week"),
      z.literal("year"),
    ])
    .optional(),
  interval_count: z.number().optional().nullable(),
});

export const mandatePaypalSchema = z.object({
  billing_agreement_id: z.string().optional().nullable(),
  payer_id: z.string().optional().nullable(),
});

export const mandateSepaDebitSchema = z.object({
  reference: z.string(),
  url: z.string(),
});

export const mandateSingleUseSchema = z.object({
  amount: z.number(),
  currency: z.string(),
});

export const mandateUsBankAccountSchema = z.object({});

export const networksSchema = z.object({
  available: z.array(z.string()),
  preferred: z.string().optional().nullable(),
});

export const notificationEventDataSchema = z.object({
  object: z.record(z.any()),
  previous_attributes: z.record(z.any()).optional(),
});

export const notificationEventRequestSchema = z.object({
  id: z.string().optional().nullable(),
  idempotency_key: z.string().optional().nullable(),
});

export const offlineAcceptanceSchema = z.object({});

export const onlineAcceptanceSchema = z.object({
  ip_address: z.string().optional().nullable(),
  user_agent: z.string().optional().nullable(),
});

export const outboundPaymentsPaymentMethodDetailsFinancialAccountSchema = z.object(
  {
    id: z.string(),
    network: z.literal("stripe"),
  }
);

export const outboundPaymentsPaymentMethodDetailsUsBankAccountSchema = z.object(
  {
    account_holder_type: z
      .union([z.literal("company"), z.literal("individual")])
      .optional(),
    account_type: z
      .union([z.literal("checking"), z.literal("savings")])
      .optional(),
    bank_name: z.string().optional().nullable(),
    fingerprint: z.string().optional().nullable(),
    last4: z.string().optional().nullable(),
    network: z.union([z.literal("ach"), z.literal("us_domestic_wire")]),
    routing_number: z.string().optional().nullable(),
  }
);

export const outboundTransfersPaymentMethodDetailsUsBankAccountSchema = z.object(
  {
    account_holder_type: z
      .union([z.literal("company"), z.literal("individual")])
      .optional(),
    account_type: z
      .union([z.literal("checking"), z.literal("savings")])
      .optional(),
    bank_name: z.string().optional().nullable(),
    fingerprint: z.string().optional().nullable(),
    last4: z.string().optional().nullable(),
    network: z.union([z.literal("ach"), z.literal("us_domestic_wire")]),
    routing_number: z.string().optional().nullable(),
  }
);

export const packageDimensionsSchema = z.object({
  height: z.number(),
  length: z.number(),
  weight: z.number(),
  width: z.number(),
});

export const paymentFlowsAmountDetailsResourceTipSchema = z.object({
  amount: z.number().optional(),
});

export const paymentFlowsAutomaticPaymentMethodsPaymentIntentSchema = z.object({
  allow_redirects: z
    .union([z.literal("always"), z.literal("never")])
    .optional(),
  enabled: z.boolean(),
});

export const paymentFlowsAutomaticPaymentMethodsSetupIntentSchema = z.object({
  allow_redirects: z
    .union([z.literal("always"), z.literal("never")])
    .optional(),
  enabled: z.boolean().optional().nullable(),
});

export const paymentFlowsPrivatePaymentMethodsAlipaySchema = z.object({});

export const paymentFlowsPrivatePaymentMethodsAlipayDetailsSchema = z.object({
  buyer_id: z.string().optional(),
  fingerprint: z.string().optional().nullable(),
  transaction_id: z.string().optional().nullable(),
});

export const paymentFlowsPrivatePaymentMethodsKlarnaDobSchema = z.object({
  day: z.number().optional().nullable(),
  month: z.number().optional().nullable(),
  year: z.number().optional().nullable(),
});

export const paymentIntentNextActionAlipayHandleRedirectSchema = z.object({
  native_data: z.string().optional().nullable(),
  native_url: z.string().optional().nullable(),
  return_url: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
});

export const paymentIntentNextActionBoletoSchema = z.object({
  expires_at: z.number().optional().nullable(),
  hosted_voucher_url: z.string().optional().nullable(),
  number: z.string().optional().nullable(),
  pdf: z.string().optional().nullable(),
});

export const paymentIntentNextActionCardAwaitNotificationSchema = z.object({
  charge_attempt_at: z.number().optional().nullable(),
  customer_approval_required: z.boolean().optional().nullable(),
});

export const paymentIntentNextActionCashappQrCodeSchema = z.object({
  expires_at: z.number(),
  image_url_png: z.string(),
  image_url_svg: z.string(),
});

export const paymentIntentNextActionDisplayOxxoDetailsSchema = z.object({
  expires_after: z.number().optional().nullable(),
  hosted_voucher_url: z.string().optional().nullable(),
  number: z.string().optional().nullable(),
});

export const paymentIntentNextActionKonbiniFamilymartSchema = z.object({
  confirmation_number: z.string().optional(),
  payment_code: z.string(),
});

export const paymentIntentNextActionKonbiniLawsonSchema = z.object({
  confirmation_number: z.string().optional(),
  payment_code: z.string(),
});

export const paymentIntentNextActionKonbiniMinistopSchema = z.object({
  confirmation_number: z.string().optional(),
  payment_code: z.string(),
});

export const paymentIntentNextActionKonbiniSeicomartSchema = z.object({
  confirmation_number: z.string().optional(),
  payment_code: z.string(),
});

export const paymentIntentNextActionKonbiniStoresSchema = z.object({
  familymart: paymentIntentNextActionKonbiniFamilymartSchema
    .optional()
    .nullable(),
  lawson: paymentIntentNextActionKonbiniLawsonSchema.optional().nullable(),
  ministop: paymentIntentNextActionKonbiniMinistopSchema.optional().nullable(),
  seicomart: paymentIntentNextActionKonbiniSeicomartSchema
    .optional()
    .nullable(),
});

export const paymentIntentNextActionPaynowDisplayQrCodeSchema = z.object({
  data: z.string(),
  hosted_instructions_url: z.string().optional().nullable(),
  image_url_png: z.string(),
  image_url_svg: z.string(),
});

export const paymentIntentNextActionPixDisplayQrCodeSchema = z.object({
  data: z.string().optional(),
  expires_at: z.number().optional(),
  hosted_instructions_url: z.string().optional(),
  image_url_png: z.string().optional(),
  image_url_svg: z.string().optional(),
});

export const paymentIntentNextActionPromptpayDisplayQrCodeSchema = z.object({
  data: z.string(),
  hosted_instructions_url: z.string(),
  image_url_png: z.string(),
  image_url_svg: z.string(),
});

export const paymentIntentNextActionRedirectToUrlSchema = z.object({
  return_url: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
});

export const paymentIntentNextActionVerifyWithMicrodepositsSchema = z.object({
  arrival_date: z.number(),
  hosted_verification_url: z.string(),
  microdeposit_type: z
    .union([z.literal("amounts"), z.literal("descriptor_code")])
    .optional(),
});

export const paymentIntentNextActionWechatPayDisplayQrCodeSchema = z.object({
  data: z.string(),
  hosted_instructions_url: z.string(),
  image_data_url: z.string(),
  image_url_png: z.string(),
  image_url_svg: z.string(),
});

export const paymentIntentNextActionWechatPayRedirectToAndroidAppSchema = z.object(
  {
    app_id: z.string(),
    nonce_str: z.string(),
    package: z.string(),
    partner_id: z.string(),
    prepay_id: z.string(),
    sign: z.string(),
    timestamp: z.string(),
  }
);

export const paymentIntentNextActionWechatPayRedirectToIosAppSchema = z.object({
  native_url: z.string(),
});

export const paymentIntentPaymentMethodOptionsAuBecsDebitSchema = z.object({
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const paymentIntentPaymentMethodOptionsEpsSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentIntentPaymentMethodOptionsLinkSchema = z.object({
  capture_method: z.literal("manual").optional(),
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema = z.object(
  {
    custom_mandate_url: z.string().optional(),
    interval_description: z.string().optional().nullable(),
    payment_schedule: z
      .union([
        z.literal("combined"),
        z.literal("interval"),
        z.literal("sporadic"),
      ])
      .optional(),
    transaction_type: z
      .union([z.literal("business"), z.literal("personal")])
      .optional(),
  }
);

export const paymentIntentPaymentMethodOptionsMandateOptionsBlikSchema = z.object(
  {
    expires_after: z.number().optional().nullable(),
    off_session: mandateOptionsOffSessionDetailsBlikSchema.optional(),
    type: z
      .union([z.literal("off_session"), z.literal("on_session")])
      .optional(),
  }
);

export const paymentIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema = z.object(
  {}
);

export const paymentIntentPaymentMethodOptionsSepaDebitSchema = z.object({
  mandate_options: paymentIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema.optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const paymentIntentPaymentMethodOptionsUsBankAccountSchema = z.object({
  financial_connections: linkedAccountOptionsUsBankAccountSchema.optional(),
  preferred_settlement_speed: z
    .union([z.literal("fastest"), z.literal("standard")])
    .optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const paymentIntentProcessingCustomerNotificationSchema = z.object({
  approval_requested: z.boolean().optional().nullable(),
  completes_at: z.number().optional().nullable(),
});

export const paymentLinksResourceAutomaticTaxSchema = z.object({
  enabled: z.boolean(),
});

export const paymentLinksResourceCompletionBehaviorConfirmationPageSchema = z.object(
  {
    custom_message: z.string().optional().nullable(),
  }
);

export const paymentLinksResourceCompletionBehaviorRedirectSchema = z.object({
  url: z.string(),
});

export const paymentLinksResourceConsentCollectionSchema = z.object({
  promotions: z.union([z.literal("auto"), z.literal("none")]).optional(),
  terms_of_service: z
    .union([z.literal("none"), z.literal("required")])
    .optional(),
});

export const paymentLinksResourceCustomFieldsDropdownOptionSchema = z.object({
  label: z.string(),
  value: z.string(),
});

export const paymentLinksResourceCustomFieldsLabelSchema = z.object({
  custom: z.string().optional().nullable(),
  type: z.literal("custom"),
});

export const paymentLinksResourceCustomFieldsNumericSchema = z.object({
  maximum_length: z.number().optional().nullable(),
  minimum_length: z.number().optional().nullable(),
});

export const paymentLinksResourceCustomFieldsTextSchema = z.object({
  maximum_length: z.number().optional().nullable(),
  minimum_length: z.number().optional().nullable(),
});

export const paymentLinksResourceCustomTextPositionSchema = z.object({
  message: z.string(),
});

export const paymentLinksResourcePaymentIntentDataSchema = z.object({
  capture_method: z
    .union([
      z.literal("automatic"),
      z.literal("automatic_async"),
      z.literal("manual"),
    ])
    .optional(),
  setup_future_usage: z
    .union([z.literal("off_session"), z.literal("on_session")])
    .optional(),
});

export const paymentLinksResourcePhoneNumberCollectionSchema = z.object({
  enabled: z.boolean(),
});

export const paymentLinksResourceShippingAddressCollectionSchema = z.object({
  allowed_countries: z.array(
    z.union([
      z.literal("AC"),
      z.literal("AD"),
      z.literal("AE"),
      z.literal("AF"),
      z.literal("AG"),
      z.literal("AI"),
      z.literal("AL"),
      z.literal("AM"),
      z.literal("AO"),
      z.literal("AQ"),
      z.literal("AR"),
      z.literal("AT"),
      z.literal("AU"),
      z.literal("AW"),
      z.literal("AX"),
      z.literal("AZ"),
      z.literal("BA"),
      z.literal("BB"),
      z.literal("BD"),
      z.literal("BE"),
      z.literal("BF"),
      z.literal("BG"),
      z.literal("BH"),
      z.literal("BI"),
      z.literal("BJ"),
      z.literal("BL"),
      z.literal("BM"),
      z.literal("BN"),
      z.literal("BO"),
      z.literal("BQ"),
      z.literal("BR"),
      z.literal("BS"),
      z.literal("BT"),
      z.literal("BV"),
      z.literal("BW"),
      z.literal("BY"),
      z.literal("BZ"),
      z.literal("CA"),
      z.literal("CD"),
      z.literal("CF"),
      z.literal("CG"),
      z.literal("CH"),
      z.literal("CI"),
      z.literal("CK"),
      z.literal("CL"),
      z.literal("CM"),
      z.literal("CN"),
      z.literal("CO"),
      z.literal("CR"),
      z.literal("CV"),
      z.literal("CW"),
      z.literal("CY"),
      z.literal("CZ"),
      z.literal("DE"),
      z.literal("DJ"),
      z.literal("DK"),
      z.literal("DM"),
      z.literal("DO"),
      z.literal("DZ"),
      z.literal("EC"),
      z.literal("EE"),
      z.literal("EG"),
      z.literal("EH"),
      z.literal("ER"),
      z.literal("ES"),
      z.literal("ET"),
      z.literal("FI"),
      z.literal("FJ"),
      z.literal("FK"),
      z.literal("FO"),
      z.literal("FR"),
      z.literal("GA"),
      z.literal("GB"),
      z.literal("GD"),
      z.literal("GE"),
      z.literal("GF"),
      z.literal("GG"),
      z.literal("GH"),
      z.literal("GI"),
      z.literal("GL"),
      z.literal("GM"),
      z.literal("GN"),
      z.literal("GP"),
      z.literal("GQ"),
      z.literal("GR"),
      z.literal("GS"),
      z.literal("GT"),
      z.literal("GU"),
      z.literal("GW"),
      z.literal("GY"),
      z.literal("HK"),
      z.literal("HN"),
      z.literal("HR"),
      z.literal("HT"),
      z.literal("HU"),
      z.literal("ID"),
      z.literal("IE"),
      z.literal("IL"),
      z.literal("IM"),
      z.literal("IN"),
      z.literal("IO"),
      z.literal("IQ"),
      z.literal("IS"),
      z.literal("IT"),
      z.literal("JE"),
      z.literal("JM"),
      z.literal("JO"),
      z.literal("JP"),
      z.literal("KE"),
      z.literal("KG"),
      z.literal("KH"),
      z.literal("KI"),
      z.literal("KM"),
      z.literal("KN"),
      z.literal("KR"),
      z.literal("KW"),
      z.literal("KY"),
      z.literal("KZ"),
      z.literal("LA"),
      z.literal("LB"),
      z.literal("LC"),
      z.literal("LI"),
      z.literal("LK"),
      z.literal("LR"),
      z.literal("LS"),
      z.literal("LT"),
      z.literal("LU"),
      z.literal("LV"),
      z.literal("LY"),
      z.literal("MA"),
      z.literal("MC"),
      z.literal("MD"),
      z.literal("ME"),
      z.literal("MF"),
      z.literal("MG"),
      z.literal("MK"),
      z.literal("ML"),
      z.literal("MM"),
      z.literal("MN"),
      z.literal("MO"),
      z.literal("MQ"),
      z.literal("MR"),
      z.literal("MS"),
      z.literal("MT"),
      z.literal("MU"),
      z.literal("MV"),
      z.literal("MW"),
      z.literal("MX"),
      z.literal("MY"),
      z.literal("MZ"),
      z.literal("NA"),
      z.literal("NC"),
      z.literal("NE"),
      z.literal("NG"),
      z.literal("NI"),
      z.literal("NL"),
      z.literal("NO"),
      z.literal("NP"),
      z.literal("NR"),
      z.literal("NU"),
      z.literal("NZ"),
      z.literal("OM"),
      z.literal("PA"),
      z.literal("PE"),
      z.literal("PF"),
      z.literal("PG"),
      z.literal("PH"),
      z.literal("PK"),
      z.literal("PL"),
      z.literal("PM"),
      z.literal("PN"),
      z.literal("PR"),
      z.literal("PS"),
      z.literal("PT"),
      z.literal("PY"),
      z.literal("QA"),
      z.literal("RE"),
      z.literal("RO"),
      z.literal("RS"),
      z.literal("RU"),
      z.literal("RW"),
      z.literal("SA"),
      z.literal("SB"),
      z.literal("SC"),
      z.literal("SE"),
      z.literal("SG"),
      z.literal("SH"),
      z.literal("SI"),
      z.literal("SJ"),
      z.literal("SK"),
      z.literal("SL"),
      z.literal("SM"),
      z.literal("SN"),
      z.literal("SO"),
      z.literal("SR"),
      z.literal("SS"),
      z.literal("ST"),
      z.literal("SV"),
      z.literal("SX"),
      z.literal("SZ"),
      z.literal("TA"),
      z.literal("TC"),
      z.literal("TD"),
      z.literal("TF"),
      z.literal("TG"),
      z.literal("TH"),
      z.literal("TJ"),
      z.literal("TK"),
      z.literal("TL"),
      z.literal("TM"),
      z.literal("TN"),
      z.literal("TO"),
      z.literal("TR"),
      z.literal("TT"),
      z.literal("TV"),
      z.literal("TW"),
      z.literal("TZ"),
      z.literal("UA"),
      z.literal("UG"),
      z.literal("US"),
      z.literal("UY"),
      z.literal("UZ"),
      z.literal("VA"),
      z.literal("VC"),
      z.literal("VE"),
      z.literal("VG"),
      z.literal("VN"),
      z.literal("VU"),
      z.literal("WF"),
      z.literal("WS"),
      z.literal("XK"),
      z.literal("YE"),
      z.literal("YT"),
      z.literal("ZA"),
      z.literal("ZM"),
      z.literal("ZW"),
      z.literal("ZZ"),
    ])
  ),
});

export const paymentLinksResourceSubscriptionDataSchema = z.object({
  description: z.string().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
});

export const paymentLinksResourceTaxIdCollectionSchema = z.object({
  enabled: z.boolean(),
});

export const paymentMethodAcssDebitSchema = z.object({
  bank_name: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  institution_number: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  transit_number: z.string().optional().nullable(),
});

export const paymentMethodAffirmSchema = z.object({});

export const paymentMethodAfterpayClearpaySchema = z.object({});

export const paymentMethodAuBecsDebitSchema = z.object({
  bsb_number: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
});

export const paymentMethodBacsDebitSchema = z.object({
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  sort_code: z.string().optional().nullable(),
});

export const paymentMethodBancontactSchema = z.object({});

export const paymentMethodBlikSchema = z.object({});

export const paymentMethodBoletoSchema = z.object({
  tax_id: z.string(),
});

export const paymentMethodCardChecksSchema = z.object({
  address_line1_check: z.string().optional().nullable(),
  address_postal_code_check: z.string().optional().nullable(),
  cvc_check: z.string().optional().nullable(),
});

export const paymentMethodCardPresentNetworksSchema = z.object({
  available: z.array(z.string()),
  preferred: z.string().optional().nullable(),
});

export const paymentMethodCardWalletAmexExpressCheckoutSchema = z.object({});

export const paymentMethodCardWalletApplePaySchema = z.object({});

export const paymentMethodCardWalletGooglePaySchema = z.object({});

export const paymentMethodCardWalletLinkSchema = z.object({});

export const paymentMethodCardWalletMasterpassSchema = z.object({
  billing_address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  shipping_address: addressSchema.optional().nullable(),
});

export const paymentMethodCardWalletSamsungPaySchema = z.object({});

export const paymentMethodCardWalletVisaCheckoutSchema = z.object({
  billing_address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  shipping_address: addressSchema.optional().nullable(),
});

export const paymentMethodCashappSchema = z.object({
  buyer_id: z.string().optional().nullable(),
  cashtag: z.string().optional().nullable(),
});

export const paymentMethodCustomerBalanceSchema = z.object({});

export const paymentMethodDetailsAchCreditTransferSchema = z.object({
  account_number: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
  swift_code: z.string().optional().nullable(),
});

export const paymentMethodDetailsAchDebitSchema = z.object({
  account_holder_type: z
    .union([z.literal("company"), z.literal("individual")])
    .optional(),
  bank_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
});

export const paymentMethodDetailsAcssDebitSchema = z.object({
  bank_name: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  institution_number: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  mandate: z.string().optional(),
  transit_number: z.string().optional().nullable(),
});

export const paymentMethodDetailsAffirmSchema = z.object({});

export const paymentMethodDetailsAfterpayClearpaySchema = z.object({
  order_id: z.string().optional().nullable(),
  reference: z.string().optional().nullable(),
});

export const paymentMethodDetailsAuBecsDebitSchema = z.object({
  bsb_number: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  mandate: z.string().optional(),
});

export const paymentMethodDetailsBacsDebitSchema = z.object({
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  mandate: z.string().optional().nullable(),
  sort_code: z.string().optional().nullable(),
});

export const paymentMethodDetailsBlikSchema = z.object({});

export const paymentMethodDetailsBoletoSchema = z.object({
  tax_id: z.string(),
});

export const paymentMethodDetailsCardChecksSchema = z.object({
  address_line1_check: z.string().optional().nullable(),
  address_postal_code_check: z.string().optional().nullable(),
  cvc_check: z.string().optional().nullable(),
});

export const paymentMethodDetailsCardInstallmentsPlanSchema = z.object({
  count: z.number().optional().nullable(),
  interval: z.literal("month").optional(),
  type: z.literal("fixed_count"),
});

export const paymentMethodDetailsCardNetworkTokenSchema = z.object({
  used: z.boolean(),
});

export const paymentMethodDetailsCardPresentReceiptSchema = z.object({
  account_type: z
    .union([
      z.literal("checking"),
      z.literal("credit"),
      z.literal("prepaid"),
      z.literal("unknown"),
    ])
    .optional(),
  application_cryptogram: z.string().optional().nullable(),
  application_preferred_name: z.string().optional().nullable(),
  authorization_code: z.string().optional().nullable(),
  authorization_response_code: z.string().optional().nullable(),
  cardholder_verification_method: z.string().optional().nullable(),
  dedicated_file_name: z.string().optional().nullable(),
  terminal_verification_results: z.string().optional().nullable(),
  transaction_status_information: z.string().optional().nullable(),
});

export const paymentMethodDetailsCardWalletAmexExpressCheckoutSchema = z.object(
  {}
);

export const paymentMethodDetailsCardWalletApplePaySchema = z.object({});

export const paymentMethodDetailsCardWalletGooglePaySchema = z.object({});

export const paymentMethodDetailsCardWalletLinkSchema = z.object({});

export const paymentMethodDetailsCardWalletMasterpassSchema = z.object({
  billing_address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  shipping_address: addressSchema.optional().nullable(),
});

export const paymentMethodDetailsCardWalletSamsungPaySchema = z.object({});

export const paymentMethodDetailsCardWalletVisaCheckoutSchema = z.object({
  billing_address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  shipping_address: addressSchema.optional().nullable(),
});

export const paymentMethodDetailsCashappSchema = z.object({
  buyer_id: z.string().optional().nullable(),
  cashtag: z.string().optional().nullable(),
});

export const paymentMethodDetailsCustomerBalanceSchema = z.object({});

export const paymentMethodDetailsEpsSchema = z.object({
  bank: z
    .union([
      z.literal("arzte_und_apotheker_bank"),
      z.literal("austrian_anadi_bank_ag"),
      z.literal("bank_austria"),
      z.literal("bankhaus_carl_spangler"),
      z.literal("bankhaus_schelhammer_und_schattera_ag"),
      z.literal("bawag_psk_ag"),
      z.literal("bks_bank_ag"),
      z.literal("brull_kallmus_bank_ag"),
      z.literal("btv_vier_lander_bank"),
      z.literal("capital_bank_grawe_gruppe_ag"),
      z.literal("deutsche_bank_ag"),
      z.literal("dolomitenbank"),
      z.literal("easybank_ag"),
      z.literal("erste_bank_und_sparkassen"),
      z.literal("hypo_alpeadriabank_international_ag"),
      z.literal("hypo_bank_burgenland_aktiengesellschaft"),
      z.literal("hypo_noe_lb_fur_niederosterreich_u_wien"),
      z.literal("hypo_oberosterreich_salzburg_steiermark"),
      z.literal("hypo_tirol_bank_ag"),
      z.literal("hypo_vorarlberg_bank_ag"),
      z.literal("marchfelder_bank"),
      z.literal("oberbank_ag"),
      z.literal("raiffeisen_bankengruppe_osterreich"),
      z.literal("schoellerbank_ag"),
      z.literal("sparda_bank_wien"),
      z.literal("volksbank_gruppe"),
      z.literal("volkskreditbank_ag"),
      z.literal("vr_bank_braunau"),
    ])
    .optional(),
  verified_name: z.string().optional().nullable(),
});

export const paymentMethodDetailsFpxSchema = z.object({
  bank: z.union([
    z.literal("affin_bank"),
    z.literal("agrobank"),
    z.literal("alliance_bank"),
    z.literal("ambank"),
    z.literal("bank_islam"),
    z.literal("bank_muamalat"),
    z.literal("bank_of_china"),
    z.literal("bank_rakyat"),
    z.literal("bsn"),
    z.literal("cimb"),
    z.literal("deutsche_bank"),
    z.literal("hong_leong_bank"),
    z.literal("hsbc"),
    z.literal("kfh"),
    z.literal("maybank2e"),
    z.literal("maybank2u"),
    z.literal("ocbc"),
    z.literal("pb_enterprise"),
    z.literal("public_bank"),
    z.literal("rhb"),
    z.literal("standard_chartered"),
    z.literal("uob"),
  ]),
  transaction_id: z.string().optional().nullable(),
});

export const paymentMethodDetailsGiropaySchema = z.object({
  bank_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  bic: z.string().optional().nullable(),
  verified_name: z.string().optional().nullable(),
});

export const paymentMethodDetailsGrabpaySchema = z.object({
  transaction_id: z.string().optional().nullable(),
});

export const paymentMethodDetailsInteracPresentReceiptSchema = z.object({
  account_type: z
    .union([z.literal("checking"), z.literal("savings"), z.literal("unknown")])
    .optional(),
  application_cryptogram: z.string().optional().nullable(),
  application_preferred_name: z.string().optional().nullable(),
  authorization_code: z.string().optional().nullable(),
  authorization_response_code: z.string().optional().nullable(),
  cardholder_verification_method: z.string().optional().nullable(),
  dedicated_file_name: z.string().optional().nullable(),
  terminal_verification_results: z.string().optional().nullable(),
  transaction_status_information: z.string().optional().nullable(),
});

export const paymentMethodDetailsKlarnaSchema = z.object({
  payment_method_category: z.string().optional().nullable(),
  preferred_locale: z.string().optional().nullable(),
});

export const paymentMethodDetailsKonbiniStoreSchema = z.object({
  chain: z
    .union([
      z.literal("familymart"),
      z.literal("lawson"),
      z.literal("ministop"),
      z.literal("seicomart"),
    ])
    .optional(),
});

export const paymentMethodDetailsLinkSchema = z.object({
  country: z.string().optional().nullable(),
});

export const paymentMethodDetailsMultibancoSchema = z.object({
  entity: z.string().optional().nullable(),
  reference: z.string().optional().nullable(),
});

export const paymentMethodDetailsOxxoSchema = z.object({
  number: z.string().optional().nullable(),
});

export const paymentMethodDetailsP24Schema = z.object({
  bank: z
    .union([
      z.literal("alior_bank"),
      z.literal("bank_millennium"),
      z.literal("bank_nowy_bfg_sa"),
      z.literal("bank_pekao_sa"),
      z.literal("banki_spbdzielcze"),
      z.literal("blik"),
      z.literal("bnp_paribas"),
      z.literal("boz"),
      z.literal("citi_handlowy"),
      z.literal("credit_agricole"),
      z.literal("envelobank"),
      z.literal("etransfer_pocztowy24"),
      z.literal("getin_bank"),
      z.literal("ideabank"),
      z.literal("ing"),
      z.literal("inteligo"),
      z.literal("mbank_mtransfer"),
      z.literal("nest_przelew"),
      z.literal("noble_pay"),
      z.literal("pbac_z_ipko"),
      z.literal("plus_bank"),
      z.literal("santander_przelew24"),
      z.literal("tmobile_usbugi_bankowe"),
      z.literal("toyota_bank"),
      z.literal("volkswagen_bank"),
    ])
    .optional(),
  reference: z.string().optional().nullable(),
  verified_name: z.string().optional().nullable(),
});

export const paymentMethodDetailsPaynowSchema = z.object({
  reference: z.string().optional().nullable(),
});

export const paymentMethodDetailsPixSchema = z.object({
  bank_transaction_id: z.string().optional().nullable(),
});

export const paymentMethodDetailsPromptpaySchema = z.object({
  reference: z.string().optional().nullable(),
});

export const paymentMethodDetailsSepaDebitSchema = z.object({
  bank_code: z.string().optional().nullable(),
  branch_code: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  mandate: z.string().optional().nullable(),
});

export const paymentMethodDetailsStripeAccountSchema = z.object({});

export const paymentMethodDetailsUsBankAccountSchema = z.object({
  account_holder_type: z
    .union([z.literal("company"), z.literal("individual")])
    .optional(),
  account_type: z
    .union([z.literal("checking"), z.literal("savings")])
    .optional(),
  bank_name: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
});

export const paymentMethodDetailsWechatSchema = z.object({});

export const paymentMethodDetailsWechatPaySchema = z.object({
  fingerprint: z.string().optional().nullable(),
  transaction_id: z.string().optional().nullable(),
});

export const paymentMethodDetailsZipSchema = z.object({});

export const paymentMethodEpsSchema = z.object({
  bank: z
    .union([
      z.literal("arzte_und_apotheker_bank"),
      z.literal("austrian_anadi_bank_ag"),
      z.literal("bank_austria"),
      z.literal("bankhaus_carl_spangler"),
      z.literal("bankhaus_schelhammer_und_schattera_ag"),
      z.literal("bawag_psk_ag"),
      z.literal("bks_bank_ag"),
      z.literal("brull_kallmus_bank_ag"),
      z.literal("btv_vier_lander_bank"),
      z.literal("capital_bank_grawe_gruppe_ag"),
      z.literal("deutsche_bank_ag"),
      z.literal("dolomitenbank"),
      z.literal("easybank_ag"),
      z.literal("erste_bank_und_sparkassen"),
      z.literal("hypo_alpeadriabank_international_ag"),
      z.literal("hypo_bank_burgenland_aktiengesellschaft"),
      z.literal("hypo_noe_lb_fur_niederosterreich_u_wien"),
      z.literal("hypo_oberosterreich_salzburg_steiermark"),
      z.literal("hypo_tirol_bank_ag"),
      z.literal("hypo_vorarlberg_bank_ag"),
      z.literal("marchfelder_bank"),
      z.literal("oberbank_ag"),
      z.literal("raiffeisen_bankengruppe_osterreich"),
      z.literal("schoellerbank_ag"),
      z.literal("sparda_bank_wien"),
      z.literal("volksbank_gruppe"),
      z.literal("volkskreditbank_ag"),
      z.literal("vr_bank_braunau"),
    ])
    .optional(),
});

export const paymentMethodFpxSchema = z.object({
  bank: z.union([
    z.literal("affin_bank"),
    z.literal("agrobank"),
    z.literal("alliance_bank"),
    z.literal("ambank"),
    z.literal("bank_islam"),
    z.literal("bank_muamalat"),
    z.literal("bank_of_china"),
    z.literal("bank_rakyat"),
    z.literal("bsn"),
    z.literal("cimb"),
    z.literal("deutsche_bank"),
    z.literal("hong_leong_bank"),
    z.literal("hsbc"),
    z.literal("kfh"),
    z.literal("maybank2e"),
    z.literal("maybank2u"),
    z.literal("ocbc"),
    z.literal("pb_enterprise"),
    z.literal("public_bank"),
    z.literal("rhb"),
    z.literal("standard_chartered"),
    z.literal("uob"),
  ]),
});

export const paymentMethodGiropaySchema = z.object({});

export const paymentMethodGrabpaySchema = z.object({});

export const paymentMethodIdealSchema = z.object({
  bank: z
    .union([
      z.literal("abn_amro"),
      z.literal("asn_bank"),
      z.literal("bunq"),
      z.literal("handelsbanken"),
      z.literal("ing"),
      z.literal("knab"),
      z.literal("moneyou"),
      z.literal("rabobank"),
      z.literal("regiobank"),
      z.literal("revolut"),
      z.literal("sns_bank"),
      z.literal("triodos_bank"),
      z.literal("van_lanschot"),
      z.literal("yoursafe"),
    ])
    .optional(),
  bic: z
    .union([
      z.literal("ABNANL2A"),
      z.literal("ASNBNL21"),
      z.literal("BITSNL2A"),
      z.literal("BUNQNL2A"),
      z.literal("FVLBNL22"),
      z.literal("HANDNL2A"),
      z.literal("INGBNL2A"),
      z.literal("KNABNL2H"),
      z.literal("MOYONL21"),
      z.literal("RABONL2U"),
      z.literal("RBRBNL21"),
      z.literal("REVOIE23"),
      z.literal("REVOLT21"),
      z.literal("SNSBNL2A"),
      z.literal("TRIONL2U"),
    ])
    .optional(),
});

export const paymentMethodInteracPresentSchema = z.object({
  brand: z.string().optional().nullable(),
  cardholder_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  networks: paymentMethodCardPresentNetworksSchema.optional().nullable(),
  preferred_locales: z.array(z.string()).optional().nullable(),
  read_method: z
    .union([
      z.literal("contact_emv"),
      z.literal("contactless_emv"),
      z.literal("contactless_magstripe_mode"),
      z.literal("magnetic_stripe_fallback"),
      z.literal("magnetic_stripe_track2"),
    ])
    .optional(),
});

export const paymentMethodKlarnaSchema = z.object({
  dob: paymentFlowsPrivatePaymentMethodsKlarnaDobSchema.optional().nullable(),
});

export const paymentMethodKonbiniSchema = z.object({});

export const paymentMethodLinkSchema = z.object({
  email: z.string().optional().nullable(),
});

export const paymentMethodOptionsAffirmSchema = z.object({
  capture_method: z.literal("manual").optional(),
  preferred_locale: z.string().optional(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsAfterpayClearpaySchema = z.object({
  capture_method: z.literal("manual").optional(),
  reference: z.string().optional().nullable(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsAlipaySchema = z.object({
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentMethodOptionsBacsDebitSchema = z.object({
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const paymentMethodOptionsBancontactSchema = z.object({
  preferred_language: z.union([
    z.literal("de"),
    z.literal("en"),
    z.literal("fr"),
    z.literal("nl"),
  ]),
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentMethodOptionsBoletoSchema = z.object({
  expires_after_days: z.number(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const paymentMethodOptionsCardInstallmentsSchema = z.object({
  available_plans: z
    .array(paymentMethodDetailsCardInstallmentsPlanSchema)
    .optional()
    .nullable(),
  enabled: z.boolean(),
  plan: paymentMethodDetailsCardInstallmentsPlanSchema.optional().nullable(),
});

export const paymentMethodOptionsCardMandateOptionsSchema = z.object({
  amount: z.number(),
  amount_type: z.union([z.literal("fixed"), z.literal("maximum")]),
  description: z.string().optional().nullable(),
  end_date: z.number().optional().nullable(),
  interval: z.union([
    z.literal("day"),
    z.literal("month"),
    z.literal("sporadic"),
    z.literal("week"),
    z.literal("year"),
  ]),
  interval_count: z.number().optional().nullable(),
  reference: z.string(),
  start_date: z.number(),
  supported_types: z.array(z.literal("india")).optional().nullable(),
});

export const paymentMethodOptionsCardPresentSchema = z.object({
  request_extended_authorization: z.boolean().optional().nullable(),
  request_incremental_authorization_support: z.boolean().optional().nullable(),
});

export const paymentMethodOptionsCashappSchema = z.object({
  capture_method: z.literal("manual").optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
});

export const paymentMethodOptionsCustomerBalanceEuBankAccountSchema = z.object({
  country: z.union([
    z.literal("BE"),
    z.literal("DE"),
    z.literal("ES"),
    z.literal("FR"),
    z.literal("IE"),
    z.literal("NL"),
  ]),
});

export const paymentMethodOptionsFpxSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsGiropaySchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsGrabpaySchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsIdealSchema = z.object({
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentMethodOptionsInteracPresentSchema = z.object({});

export const paymentMethodOptionsKlarnaSchema = z.object({
  capture_method: z.literal("manual").optional(),
  preferred_locale: z.string().optional().nullable(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsKonbiniSchema = z.object({
  confirmation_number: z.string().optional().nullable(),
  expires_after_days: z.number().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  product_description: z.string().optional().nullable(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsOxxoSchema = z.object({
  expires_after_days: z.number(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsP24Schema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsPaynowSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsPaypalSchema = z.object({
  capture_method: z.literal("manual").optional(),
  preferred_locale: z.string().optional().nullable(),
  reference: z.string().optional().nullable(),
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentMethodOptionsPixSchema = z.object({
  expires_after_seconds: z.number().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsPromptpaySchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsSofortSchema = z.object({
  preferred_language: z
    .union([
      z.literal("de"),
      z.literal("en"),
      z.literal("es"),
      z.literal("fr"),
      z.literal("it"),
      z.literal("nl"),
      z.literal("pl"),
    ])
    .optional(),
  setup_future_usage: z
    .union([z.literal("none"), z.literal("off_session")])
    .optional(),
});

export const paymentMethodOptionsWechatPaySchema = z.object({
  app_id: z.string().optional().nullable(),
  client: z
    .union([z.literal("android"), z.literal("ios"), z.literal("web")])
    .optional(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOptionsZipSchema = z.object({
  setup_future_usage: z.literal("none").optional(),
});

export const paymentMethodOxxoSchema = z.object({});

export const paymentMethodP24Schema = z.object({
  bank: z
    .union([
      z.literal("alior_bank"),
      z.literal("bank_millennium"),
      z.literal("bank_nowy_bfg_sa"),
      z.literal("bank_pekao_sa"),
      z.literal("banki_spbdzielcze"),
      z.literal("blik"),
      z.literal("bnp_paribas"),
      z.literal("boz"),
      z.literal("citi_handlowy"),
      z.literal("credit_agricole"),
      z.literal("envelobank"),
      z.literal("etransfer_pocztowy24"),
      z.literal("getin_bank"),
      z.literal("ideabank"),
      z.literal("ing"),
      z.literal("inteligo"),
      z.literal("mbank_mtransfer"),
      z.literal("nest_przelew"),
      z.literal("noble_pay"),
      z.literal("pbac_z_ipko"),
      z.literal("plus_bank"),
      z.literal("santander_przelew24"),
      z.literal("tmobile_usbugi_bankowe"),
      z.literal("toyota_bank"),
      z.literal("volkswagen_bank"),
    ])
    .optional(),
});

export const paymentMethodPaynowSchema = z.object({});

export const paymentMethodPaypalSchema = z.object({
  payer_email: z.string().optional().nullable(),
  payer_id: z.string().optional().nullable(),
});

export const paymentMethodPixSchema = z.object({});

export const paymentMethodPromptpaySchema = z.object({});

export const paymentMethodSofortSchema = z.object({
  country: z.string().optional().nullable(),
});

export const paymentMethodUsBankAccountBlockedSchema = z.object({
  network_code: z
    .union([
      z.literal("R02"),
      z.literal("R03"),
      z.literal("R04"),
      z.literal("R05"),
      z.literal("R07"),
      z.literal("R08"),
      z.literal("R10"),
      z.literal("R11"),
      z.literal("R16"),
      z.literal("R20"),
      z.literal("R29"),
      z.literal("R31"),
    ])
    .optional(),
  reason: z
    .union([
      z.literal("bank_account_closed"),
      z.literal("bank_account_frozen"),
      z.literal("bank_account_invalid_details"),
      z.literal("bank_account_restricted"),
      z.literal("bank_account_unusable"),
      z.literal("debit_not_authorized"),
    ])
    .optional(),
});

export const paymentMethodUsBankAccountStatusDetailsSchema = z.object({
  blocked: paymentMethodUsBankAccountBlockedSchema.optional(),
});

export const paymentMethodWechatPaySchema = z.object({});

export const paymentMethodZipSchema = z.object({});

export const paymentPagesCheckoutSessionAfterExpirationRecoverySchema = z.object(
  {
    allow_promotion_codes: z.boolean(),
    enabled: z.boolean(),
    expires_at: z.number().optional().nullable(),
    url: z.string().optional().nullable(),
  }
);

export const paymentPagesCheckoutSessionAutomaticTaxSchema = z.object({
  enabled: z.boolean(),
  status: z
    .union([
      z.literal("complete"),
      z.literal("failed"),
      z.literal("requires_location_inputs"),
    ])
    .optional(),
});

export const paymentPagesCheckoutSessionConsentSchema = z.object({
  promotions: z.union([z.literal("opt_in"), z.literal("opt_out")]).optional(),
  terms_of_service: z.literal("accepted").optional(),
});

export const paymentPagesCheckoutSessionConsentCollectionSchema = z.object({
  promotions: z.union([z.literal("auto"), z.literal("none")]).optional(),
  terms_of_service: z
    .union([z.literal("none"), z.literal("required")])
    .optional(),
});

export const paymentPagesCheckoutSessionCurrencyConversionSchema = z.object({
  amount_subtotal: z.number(),
  amount_total: z.number(),
  fx_rate: z.string(),
  source_currency: z.string(),
});

export const paymentPagesCheckoutSessionCustomFieldsLabelSchema = z.object({
  custom: z.string().optional().nullable(),
  type: z.literal("custom"),
});

export const paymentPagesCheckoutSessionCustomFieldsNumericSchema = z.object({
  maximum_length: z.number().optional().nullable(),
  minimum_length: z.number().optional().nullable(),
  value: z.string().optional().nullable(),
});

export const paymentPagesCheckoutSessionCustomFieldsOptionSchema = z.object({
  label: z.string(),
  value: z.string(),
});

export const paymentPagesCheckoutSessionCustomFieldsTextSchema = z.object({
  maximum_length: z.number().optional().nullable(),
  minimum_length: z.number().optional().nullable(),
  value: z.string().optional().nullable(),
});

export const paymentPagesCheckoutSessionCustomTextPositionSchema = z.object({
  message: z.string(),
});

export const paymentPagesCheckoutSessionPhoneNumberCollectionSchema = z.object({
  enabled: z.boolean(),
});

export const paymentPagesCheckoutSessionShippingAddressCollectionSchema = z.object(
  {
    allowed_countries: z.array(
      z.union([
        z.literal("AC"),
        z.literal("AD"),
        z.literal("AE"),
        z.literal("AF"),
        z.literal("AG"),
        z.literal("AI"),
        z.literal("AL"),
        z.literal("AM"),
        z.literal("AO"),
        z.literal("AQ"),
        z.literal("AR"),
        z.literal("AT"),
        z.literal("AU"),
        z.literal("AW"),
        z.literal("AX"),
        z.literal("AZ"),
        z.literal("BA"),
        z.literal("BB"),
        z.literal("BD"),
        z.literal("BE"),
        z.literal("BF"),
        z.literal("BG"),
        z.literal("BH"),
        z.literal("BI"),
        z.literal("BJ"),
        z.literal("BL"),
        z.literal("BM"),
        z.literal("BN"),
        z.literal("BO"),
        z.literal("BQ"),
        z.literal("BR"),
        z.literal("BS"),
        z.literal("BT"),
        z.literal("BV"),
        z.literal("BW"),
        z.literal("BY"),
        z.literal("BZ"),
        z.literal("CA"),
        z.literal("CD"),
        z.literal("CF"),
        z.literal("CG"),
        z.literal("CH"),
        z.literal("CI"),
        z.literal("CK"),
        z.literal("CL"),
        z.literal("CM"),
        z.literal("CN"),
        z.literal("CO"),
        z.literal("CR"),
        z.literal("CV"),
        z.literal("CW"),
        z.literal("CY"),
        z.literal("CZ"),
        z.literal("DE"),
        z.literal("DJ"),
        z.literal("DK"),
        z.literal("DM"),
        z.literal("DO"),
        z.literal("DZ"),
        z.literal("EC"),
        z.literal("EE"),
        z.literal("EG"),
        z.literal("EH"),
        z.literal("ER"),
        z.literal("ES"),
        z.literal("ET"),
        z.literal("FI"),
        z.literal("FJ"),
        z.literal("FK"),
        z.literal("FO"),
        z.literal("FR"),
        z.literal("GA"),
        z.literal("GB"),
        z.literal("GD"),
        z.literal("GE"),
        z.literal("GF"),
        z.literal("GG"),
        z.literal("GH"),
        z.literal("GI"),
        z.literal("GL"),
        z.literal("GM"),
        z.literal("GN"),
        z.literal("GP"),
        z.literal("GQ"),
        z.literal("GR"),
        z.literal("GS"),
        z.literal("GT"),
        z.literal("GU"),
        z.literal("GW"),
        z.literal("GY"),
        z.literal("HK"),
        z.literal("HN"),
        z.literal("HR"),
        z.literal("HT"),
        z.literal("HU"),
        z.literal("ID"),
        z.literal("IE"),
        z.literal("IL"),
        z.literal("IM"),
        z.literal("IN"),
        z.literal("IO"),
        z.literal("IQ"),
        z.literal("IS"),
        z.literal("IT"),
        z.literal("JE"),
        z.literal("JM"),
        z.literal("JO"),
        z.literal("JP"),
        z.literal("KE"),
        z.literal("KG"),
        z.literal("KH"),
        z.literal("KI"),
        z.literal("KM"),
        z.literal("KN"),
        z.literal("KR"),
        z.literal("KW"),
        z.literal("KY"),
        z.literal("KZ"),
        z.literal("LA"),
        z.literal("LB"),
        z.literal("LC"),
        z.literal("LI"),
        z.literal("LK"),
        z.literal("LR"),
        z.literal("LS"),
        z.literal("LT"),
        z.literal("LU"),
        z.literal("LV"),
        z.literal("LY"),
        z.literal("MA"),
        z.literal("MC"),
        z.literal("MD"),
        z.literal("ME"),
        z.literal("MF"),
        z.literal("MG"),
        z.literal("MK"),
        z.literal("ML"),
        z.literal("MM"),
        z.literal("MN"),
        z.literal("MO"),
        z.literal("MQ"),
        z.literal("MR"),
        z.literal("MS"),
        z.literal("MT"),
        z.literal("MU"),
        z.literal("MV"),
        z.literal("MW"),
        z.literal("MX"),
        z.literal("MY"),
        z.literal("MZ"),
        z.literal("NA"),
        z.literal("NC"),
        z.literal("NE"),
        z.literal("NG"),
        z.literal("NI"),
        z.literal("NL"),
        z.literal("NO"),
        z.literal("NP"),
        z.literal("NR"),
        z.literal("NU"),
        z.literal("NZ"),
        z.literal("OM"),
        z.literal("PA"),
        z.literal("PE"),
        z.literal("PF"),
        z.literal("PG"),
        z.literal("PH"),
        z.literal("PK"),
        z.literal("PL"),
        z.literal("PM"),
        z.literal("PN"),
        z.literal("PR"),
        z.literal("PS"),
        z.literal("PT"),
        z.literal("PY"),
        z.literal("QA"),
        z.literal("RE"),
        z.literal("RO"),
        z.literal("RS"),
        z.literal("RU"),
        z.literal("RW"),
        z.literal("SA"),
        z.literal("SB"),
        z.literal("SC"),
        z.literal("SE"),
        z.literal("SG"),
        z.literal("SH"),
        z.literal("SI"),
        z.literal("SJ"),
        z.literal("SK"),
        z.literal("SL"),
        z.literal("SM"),
        z.literal("SN"),
        z.literal("SO"),
        z.literal("SR"),
        z.literal("SS"),
        z.literal("ST"),
        z.literal("SV"),
        z.literal("SX"),
        z.literal("SZ"),
        z.literal("TA"),
        z.literal("TC"),
        z.literal("TD"),
        z.literal("TF"),
        z.literal("TG"),
        z.literal("TH"),
        z.literal("TJ"),
        z.literal("TK"),
        z.literal("TL"),
        z.literal("TM"),
        z.literal("TN"),
        z.literal("TO"),
        z.literal("TR"),
        z.literal("TT"),
        z.literal("TV"),
        z.literal("TW"),
        z.literal("TZ"),
        z.literal("UA"),
        z.literal("UG"),
        z.literal("US"),
        z.literal("UY"),
        z.literal("UZ"),
        z.literal("VA"),
        z.literal("VC"),
        z.literal("VE"),
        z.literal("VG"),
        z.literal("VN"),
        z.literal("VU"),
        z.literal("WF"),
        z.literal("WS"),
        z.literal("XK"),
        z.literal("YE"),
        z.literal("YT"),
        z.literal("ZA"),
        z.literal("ZM"),
        z.literal("ZW"),
        z.literal("ZZ"),
      ])
    ),
  }
);

export const paymentPagesCheckoutSessionTaxIdSchema = z.object({
  type: z.union([
    z.literal("ad_nrt"),
    z.literal("ae_trn"),
    z.literal("ar_cuit"),
    z.literal("au_abn"),
    z.literal("au_arn"),
    z.literal("bg_uic"),
    z.literal("bo_tin"),
    z.literal("br_cnpj"),
    z.literal("br_cpf"),
    z.literal("ca_bn"),
    z.literal("ca_gst_hst"),
    z.literal("ca_pst_bc"),
    z.literal("ca_pst_mb"),
    z.literal("ca_pst_sk"),
    z.literal("ca_qst"),
    z.literal("ch_vat"),
    z.literal("cl_tin"),
    z.literal("cn_tin"),
    z.literal("co_nit"),
    z.literal("cr_tin"),
    z.literal("do_rcn"),
    z.literal("ec_ruc"),
    z.literal("eg_tin"),
    z.literal("es_cif"),
    z.literal("eu_oss_vat"),
    z.literal("eu_vat"),
    z.literal("gb_vat"),
    z.literal("ge_vat"),
    z.literal("hk_br"),
    z.literal("hu_tin"),
    z.literal("id_npwp"),
    z.literal("il_vat"),
    z.literal("in_gst"),
    z.literal("is_vat"),
    z.literal("jp_cn"),
    z.literal("jp_rn"),
    z.literal("jp_trn"),
    z.literal("ke_pin"),
    z.literal("kr_brn"),
    z.literal("li_uid"),
    z.literal("mx_rfc"),
    z.literal("my_frp"),
    z.literal("my_itn"),
    z.literal("my_sst"),
    z.literal("no_vat"),
    z.literal("nz_gst"),
    z.literal("pe_ruc"),
    z.literal("ph_tin"),
    z.literal("ro_tin"),
    z.literal("rs_pib"),
    z.literal("ru_inn"),
    z.literal("ru_kpp"),
    z.literal("sa_vat"),
    z.literal("sg_gst"),
    z.literal("sg_uen"),
    z.literal("si_tin"),
    z.literal("sv_nit"),
    z.literal("th_vat"),
    z.literal("tr_tin"),
    z.literal("tw_vat"),
    z.literal("ua_vat"),
    z.literal("unknown"),
    z.literal("us_ein"),
    z.literal("uy_ruc"),
    z.literal("ve_rif"),
    z.literal("vn_tin"),
    z.literal("za_vat"),
  ]),
  value: z.string().optional().nullable(),
});

export const paymentPagesCheckoutSessionTaxIdCollectionSchema = z.object({
  enabled: z.boolean(),
});

export const paypalSellerProtectionSchema = z.object({
  dispute_categories: z
    .array(
      z.union([z.literal("fraudulent"), z.literal("product_not_received")])
    )
    .optional()
    .nullable(),
  status: z.union([
    z.literal("eligible"),
    z.literal("not_eligible"),
    z.literal("partially_eligible"),
  ]),
});

export const periodSchema = z.object({
  end: z.number().optional().nullable(),
  start: z.number().optional().nullable(),
});

export const personFutureRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  currently_due: z.array(z.string()),
  errors: z.array(accountRequirementsErrorSchema),
  eventually_due: z.array(z.string()),
  past_due: z.array(z.string()),
  pending_verification: z.array(z.string()),
});

export const personRelationshipSchema = z.object({
  director: z.boolean().optional().nullable(),
  executive: z.boolean().optional().nullable(),
  owner: z.boolean().optional().nullable(),
  percent_ownership: z.number().optional().nullable(),
  representative: z.boolean().optional().nullable(),
  title: z.string().optional().nullable(),
});

export const personRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  currently_due: z.array(z.string()),
  errors: z.array(accountRequirementsErrorSchema),
  eventually_due: z.array(z.string()),
  past_due: z.array(z.string()),
  pending_verification: z.array(z.string()),
});

export const planTierSchema = z.object({
  flat_amount: z.number().optional().nullable(),
  flat_amount_decimal: z.string().optional().nullable(),
  unit_amount: z.number().optional().nullable(),
  unit_amount_decimal: z.string().optional().nullable(),
  up_to: z.number().optional().nullable(),
});

export const platformTaxFeeSchema = z.object({
  account: z.string(),
  id: z.string(),
  object: z.literal("platform_tax_fee"),
  source_transaction: z.string(),
  type: z.string(),
});

export const portalBusinessProfileSchema = z.object({
  headline: z.string().optional().nullable(),
  privacy_policy_url: z.string().optional().nullable(),
  terms_of_service_url: z.string().optional().nullable(),
});

export const portalCustomerUpdateSchema = z.object({
  allowed_updates: z.array(
    z.union([
      z.literal("address"),
      z.literal("email"),
      z.literal("name"),
      z.literal("phone"),
      z.literal("shipping"),
      z.literal("tax_id"),
    ])
  ),
  enabled: z.boolean(),
});

export const portalFlowsAfterCompletionHostedConfirmationSchema = z.object({
  custom_message: z.string().optional().nullable(),
});

export const portalFlowsAfterCompletionRedirectSchema = z.object({
  return_url: z.string(),
});

export const portalFlowsFlowAfterCompletionSchema = z.object({
  hosted_confirmation: portalFlowsAfterCompletionHostedConfirmationSchema
    .optional()
    .nullable(),
  redirect: portalFlowsAfterCompletionRedirectSchema.optional().nullable(),
  type: z.union([
    z.literal("hosted_confirmation"),
    z.literal("portal_homepage"),
    z.literal("redirect"),
  ]),
});

export const portalFlowsFlowSubscriptionCancelSchema = z.object({
  subscription: z.string(),
});

export const portalFlowsFlowSubscriptionUpdateSchema = z.object({
  subscription: z.string(),
});

export const portalFlowsSubscriptionUpdateConfirmDiscountSchema = z.object({
  coupon: z.string().optional().nullable(),
  promotion_code: z.string().optional().nullable(),
});

export const portalFlowsSubscriptionUpdateConfirmItemSchema = z.object({
  id: z.string().optional().nullable(),
  price: z.string().optional().nullable(),
  quantity: z.number().optional(),
});

export const portalInvoiceListSchema = z.object({
  enabled: z.boolean(),
});

export const portalLoginPageSchema = z.object({
  enabled: z.boolean(),
  url: z.string().optional().nullable(),
});

export const portalPaymentMethodUpdateSchema = z.object({
  enabled: z.boolean(),
});

export const portalSubscriptionCancellationReasonSchema = z.object({
  enabled: z.boolean(),
  options: z.array(
    z.union([
      z.literal("customer_service"),
      z.literal("low_quality"),
      z.literal("missing_features"),
      z.literal("other"),
      z.literal("switched_service"),
      z.literal("too_complex"),
      z.literal("too_expensive"),
      z.literal("unused"),
    ])
  ),
});

export const portalSubscriptionPauseSchema = z.object({
  enabled: z.boolean(),
});

export const portalSubscriptionUpdateProductSchema = z.object({
  prices: z.array(z.string()),
  product: z.string(),
});

export const priceTierSchema = z.object({
  flat_amount: z.number().optional().nullable(),
  flat_amount_decimal: z.string().optional().nullable(),
  unit_amount: z.number().optional().nullable(),
  unit_amount_decimal: z.string().optional().nullable(),
  up_to: z.number().optional().nullable(),
});

export const promotionCodeCurrencyOptionSchema = z.object({
  minimum_amount: z.number(),
});

export const promotionCodesResourceRestrictionsSchema = z.object({
  currency_options: z.record(promotionCodeCurrencyOptionSchema).optional(),
  first_time_transaction: z.boolean(),
  minimum_amount: z.number().optional().nullable(),
  minimum_amount_currency: z.string().optional().nullable(),
});

export const quotesResourceAutomaticTaxSchema = z.object({
  enabled: z.boolean(),
  status: z
    .union([
      z.literal("complete"),
      z.literal("failed"),
      z.literal("requires_location_inputs"),
    ])
    .optional(),
});

export const quotesResourceStatusTransitionsSchema = z.object({
  accepted_at: z.number().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  finalized_at: z.number().optional().nullable(),
});

export const quotesResourceSubscriptionDataSubscriptionDataSchema = z.object({
  description: z.string().optional().nullable(),
  effective_date: z.number().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
});

export const radarValueListItemSchema = z.object({
  created: z.number(),
  created_by: z.string(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("radar.value_list_item"),
  value: z.string(),
  value_list: z.string(),
});

export const radarRadarOptionsSchema = z.object({
  session: z.string().optional(),
});

export const radarReviewResourceLocationSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  region: z.string().optional().nullable(),
});

export const radarReviewResourceSessionSchema = z.object({
  browser: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  platform: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
});

export const receivedPaymentMethodDetailsFinancialAccountSchema = z.object({
  id: z.string(),
  network: z.literal("stripe"),
});

export const recurringSchema = z.object({
  aggregate_usage: z
    .union([
      z.literal("last_during_period"),
      z.literal("last_ever"),
      z.literal("max"),
      z.literal("sum"),
    ])
    .optional(),
  interval: z.union([
    z.literal("day"),
    z.literal("month"),
    z.literal("week"),
    z.literal("year"),
  ]),
  interval_count: z.number(),
  usage_type: z.union([z.literal("licensed"), z.literal("metered")]),
});

export const refundNextActionDisplayDetailsSchema = z.object({
  email_sent: emailSentSchema,
  expires_at: z.number(),
});

export const reportingReportTypeSchema = z.object({
  data_available_end: z.number(),
  data_available_start: z.number(),
  default_columns: z.array(z.string()).optional().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  name: z.string(),
  object: z.literal("reporting.report_type"),
  updated: z.number(),
  version: z.number(),
});

export const reserveTransactionSchema = z.object({
  amount: z.number(),
  currency: z.string(),
  description: z.string().optional().nullable(),
  id: z.string(),
  object: z.literal("reserve_transaction"),
});

export const ruleSchema = z.object({
  action: z.string(),
  id: z.string(),
  predicate: z.string(),
});

export const schedulesPhaseAutomaticTaxSchema = z.object({
  enabled: z.boolean(),
});

export const secretServiceResourceScopeSchema = z.object({
  type: z.union([z.literal("account"), z.literal("user")]),
  user: z.string().optional(),
});

export const setupAttemptPaymentMethodDetailsAcssDebitSchema = z.object({});

export const setupAttemptPaymentMethodDetailsAuBecsDebitSchema = z.object({});

export const setupAttemptPaymentMethodDetailsBacsDebitSchema = z.object({});

export const setupAttemptPaymentMethodDetailsBlikSchema = z.object({});

export const setupAttemptPaymentMethodDetailsBoletoSchema = z.object({});

export const setupAttemptPaymentMethodDetailsCardWalletSchema = z.object({
  apple_pay: paymentMethodDetailsCardWalletApplePaySchema.optional(),
  google_pay: paymentMethodDetailsCardWalletGooglePaySchema.optional(),
  type: z.union([
    z.literal("apple_pay"),
    z.literal("google_pay"),
    z.literal("link"),
  ]),
});

export const setupAttemptPaymentMethodDetailsCashappSchema = z.object({});

export const setupAttemptPaymentMethodDetailsKlarnaSchema = z.object({});

export const setupAttemptPaymentMethodDetailsLinkSchema = z.object({});

export const setupAttemptPaymentMethodDetailsPaypalSchema = z.object({});

export const setupAttemptPaymentMethodDetailsSepaDebitSchema = z.object({});

export const setupAttemptPaymentMethodDetailsUsBankAccountSchema = z.object({});

export const setupIntentNextActionRedirectToUrlSchema = z.object({
  return_url: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
});

export const setupIntentNextActionVerifyWithMicrodepositsSchema = z.object({
  arrival_date: z.number(),
  hosted_verification_url: z.string(),
  microdeposit_type: z
    .union([z.literal("amounts"), z.literal("descriptor_code")])
    .optional(),
});

export const setupIntentPaymentMethodOptionsCardMandateOptionsSchema = z.object(
  {
    amount: z.number(),
    amount_type: z.union([z.literal("fixed"), z.literal("maximum")]),
    currency: z.string(),
    description: z.string().optional().nullable(),
    end_date: z.number().optional().nullable(),
    interval: z.union([
      z.literal("day"),
      z.literal("month"),
      z.literal("sporadic"),
      z.literal("week"),
      z.literal("year"),
    ]),
    interval_count: z.number().optional().nullable(),
    reference: z.string(),
    start_date: z.number(),
    supported_types: z.array(z.literal("india")).optional().nullable(),
  }
);

export const setupIntentPaymentMethodOptionsLinkSchema = z.object({});

export const setupIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema = z.object(
  {
    custom_mandate_url: z.string().optional(),
    default_for: z
      .array(z.union([z.literal("invoice"), z.literal("subscription")]))
      .optional(),
    interval_description: z.string().optional().nullable(),
    payment_schedule: z
      .union([
        z.literal("combined"),
        z.literal("interval"),
        z.literal("sporadic"),
      ])
      .optional(),
    transaction_type: z
      .union([z.literal("business"), z.literal("personal")])
      .optional(),
  }
);

export const setupIntentPaymentMethodOptionsMandateOptionsBlikSchema = z.object(
  {
    expires_after: z.number().optional().nullable(),
    off_session: mandateOptionsOffSessionDetailsBlikSchema.optional(),
    type: z
      .union([z.literal("off_session"), z.literal("on_session")])
      .optional(),
  }
);

export const setupIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema = z.object(
  {}
);

export const setupIntentPaymentMethodOptionsPaypalSchema = z.object({
  billing_agreement_id: z.string().optional().nullable(),
});

export const setupIntentPaymentMethodOptionsSepaDebitSchema = z.object({
  mandate_options: setupIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema.optional(),
});

export const setupIntentPaymentMethodOptionsUsBankAccountSchema = z.object({
  financial_connections: linkedAccountOptionsUsBankAccountSchema.optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const setupIntentTypeSpecificPaymentMethodOptionsClientSchema = z.object(
  {
    verification_method: z
      .union([
        z.literal("automatic"),
        z.literal("instant"),
        z.literal("microdeposits"),
      ])
      .optional(),
  }
);

export const shippingSchema = z.object({
  address: addressSchema.optional(),
  carrier: z.string().optional().nullable(),
  name: z.string().optional(),
  phone: z.string().optional().nullable(),
  tracking_number: z.string().optional().nullable(),
});

export const shippingRateCurrencyOptionSchema = z.object({
  amount: z.number(),
  tax_behavior: z.union([
    z.literal("exclusive"),
    z.literal("inclusive"),
    z.literal("unspecified"),
  ]),
});

export const shippingRateDeliveryEstimateBoundSchema = z.object({
  unit: z.union([
    z.literal("business_day"),
    z.literal("day"),
    z.literal("hour"),
    z.literal("month"),
    z.literal("week"),
  ]),
  value: z.number(),
});

export const shippingRateFixedAmountSchema = z.object({
  amount: z.number(),
  currency: z.string(),
  currency_options: z.record(shippingRateCurrencyOptionSchema).optional(),
});

export const sigmaScheduledQueryRunErrorSchema = z.object({
  message: z.string(),
});

export const sourceCodeVerificationFlowSchema = z.object({
  attempts_remaining: z.number(),
  status: z.string(),
});

export const sourceMandateNotificationAcssDebitDataSchema = z.object({
  statement_descriptor: z.string().optional(),
});

export const sourceMandateNotificationBacsDebitDataSchema = z.object({
  last4: z.string().optional(),
});

export const sourceMandateNotificationSepaDebitDataSchema = z.object({
  creditor_identifier: z.string().optional(),
  last4: z.string().optional(),
  mandate_reference: z.string().optional(),
});

export const sourceOrderItemSchema = z.object({
  amount: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  parent: z.string().optional().nullable(),
  quantity: z.number().optional(),
  type: z.string().optional().nullable(),
});

export const sourceOwnerSchema = z.object({
  address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  verified_address: addressSchema.optional().nullable(),
  verified_email: z.string().optional().nullable(),
  verified_name: z.string().optional().nullable(),
  verified_phone: z.string().optional().nullable(),
});

export const sourceReceiverFlowSchema = z.object({
  address: z.string().optional().nullable(),
  amount_charged: z.number(),
  amount_received: z.number(),
  amount_returned: z.number(),
  refund_attributes_method: z.string(),
  refund_attributes_status: z.string(),
});

export const sourceRedirectFlowSchema = z.object({
  failure_reason: z.string().optional().nullable(),
  return_url: z.string(),
  status: z.string(),
  url: z.string(),
});

export const sourceTransactionAchCreditTransferDataSchema = z.object({
  customer_data: z.string().optional(),
  fingerprint: z.string().optional(),
  last4: z.string().optional(),
  routing_number: z.string().optional(),
});

export const sourceTransactionChfCreditTransferDataSchema = z.object({
  reference: z.string().optional(),
  sender_address_country: z.string().optional(),
  sender_address_line1: z.string().optional(),
  sender_iban: z.string().optional(),
  sender_name: z.string().optional(),
});

export const sourceTransactionGbpCreditTransferDataSchema = z.object({
  fingerprint: z.string().optional(),
  funding_method: z.string().optional(),
  last4: z.string().optional(),
  reference: z.string().optional(),
  sender_account_number: z.string().optional(),
  sender_name: z.string().optional(),
  sender_sort_code: z.string().optional(),
});

export const sourceTransactionPaperCheckDataSchema = z.object({
  available_at: z.string().optional(),
  invoices: z.string().optional(),
});

export const sourceTransactionSepaCreditTransferDataSchema = z.object({
  reference: z.string().optional(),
  sender_iban: z.string().optional(),
  sender_name: z.string().optional(),
});

export const sourceTypeAchCreditTransferSchema = z.object({
  account_number: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  refund_account_holder_name: z.string().optional().nullable(),
  refund_account_holder_type: z.string().optional().nullable(),
  refund_routing_number: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
  swift_code: z.string().optional().nullable(),
});

export const sourceTypeAchDebitSchema = z.object({
  bank_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const sourceTypeAcssDebitSchema = z.object({
  bank_address_city: z.string().optional().nullable(),
  bank_address_line_1: z.string().optional().nullable(),
  bank_address_line_2: z.string().optional().nullable(),
  bank_address_postal_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  routing_number: z.string().optional().nullable(),
});

export const sourceTypeAlipaySchema = z.object({
  data_string: z.string().optional().nullable(),
  native_url: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeAuBecsDebitSchema = z.object({
  bsb_number: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
});

export const sourceTypeBancontactSchema = z.object({
  bank_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  bic: z.string().optional().nullable(),
  iban_last4: z.string().optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeCardSchema = z.object({
  address_line1_check: z.string().optional().nullable(),
  address_zip_check: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  cvc_check: z.string().optional().nullable(),
  dynamic_last4: z.string().optional().nullable(),
  exp_month: z.number().optional().nullable(),
  exp_year: z.number().optional().nullable(),
  fingerprint: z.string().optional(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  three_d_secure: z.string().optional(),
  tokenization_method: z.string().optional().nullable(),
});

export const sourceTypeCardPresentSchema = z.object({
  application_cryptogram: z.string().optional(),
  application_preferred_name: z.string().optional(),
  authorization_code: z.string().optional().nullable(),
  authorization_response_code: z.string().optional(),
  brand: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  cvm_type: z.string().optional(),
  data_type: z.string().optional().nullable(),
  dedicated_file_name: z.string().optional(),
  emv_auth_data: z.string().optional(),
  evidence_customer_signature: z.string().optional().nullable(),
  evidence_transaction_certificate: z.string().optional().nullable(),
  exp_month: z.number().optional().nullable(),
  exp_year: z.number().optional().nullable(),
  fingerprint: z.string().optional(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  pos_device_id: z.string().optional().nullable(),
  pos_entry_mode: z.string().optional(),
  read_method: z.string().optional().nullable(),
  reader: z.string().optional().nullable(),
  terminal_verification_results: z.string().optional(),
  transaction_status_information: z.string().optional(),
});

export const sourceTypeEpsSchema = z.object({
  reference: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeGiropaySchema = z.object({
  bank_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  bic: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeIdealSchema = z.object({
  bank: z.string().optional().nullable(),
  bic: z.string().optional().nullable(),
  iban_last4: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeKlarnaSchema = z.object({
  background_image_url: z.string().optional(),
  client_token: z.string().optional().nullable(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  locale: z.string().optional(),
  logo_url: z.string().optional(),
  page_title: z.string().optional(),
  pay_later_asset_urls_descriptive: z.string().optional(),
  pay_later_asset_urls_standard: z.string().optional(),
  pay_later_name: z.string().optional(),
  pay_later_redirect_url: z.string().optional(),
  pay_now_asset_urls_descriptive: z.string().optional(),
  pay_now_asset_urls_standard: z.string().optional(),
  pay_now_name: z.string().optional(),
  pay_now_redirect_url: z.string().optional(),
  pay_over_time_asset_urls_descriptive: z.string().optional(),
  pay_over_time_asset_urls_standard: z.string().optional(),
  pay_over_time_name: z.string().optional(),
  pay_over_time_redirect_url: z.string().optional(),
  payment_method_categories: z.string().optional(),
  purchase_country: z.string().optional(),
  purchase_type: z.string().optional(),
  redirect_url: z.string().optional(),
  shipping_delay: z.number().optional(),
  shipping_first_name: z.string().optional(),
  shipping_last_name: z.string().optional(),
});

export const sourceTypeMultibancoSchema = z.object({
  entity: z.string().optional().nullable(),
  reference: z.string().optional().nullable(),
  refund_account_holder_address_city: z.string().optional().nullable(),
  refund_account_holder_address_country: z.string().optional().nullable(),
  refund_account_holder_address_line1: z.string().optional().nullable(),
  refund_account_holder_address_line2: z.string().optional().nullable(),
  refund_account_holder_address_postal_code: z.string().optional().nullable(),
  refund_account_holder_address_state: z.string().optional().nullable(),
  refund_account_holder_name: z.string().optional().nullable(),
  refund_iban: z.string().optional().nullable(),
});

export const sourceTypeP24Schema = z.object({
  reference: z.string().optional().nullable(),
});

export const sourceTypeSepaDebitSchema = z.object({
  bank_code: z.string().optional().nullable(),
  branch_code: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  mandate_reference: z.string().optional().nullable(),
  mandate_url: z.string().optional().nullable(),
});

export const sourceTypeSofortSchema = z.object({
  bank_code: z.string().optional().nullable(),
  bank_name: z.string().optional().nullable(),
  bic: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  iban_last4: z.string().optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
});

export const sourceTypeThreeDSecureSchema = z.object({
  address_line1_check: z.string().optional().nullable(),
  address_zip_check: z.string().optional().nullable(),
  authenticated: z.boolean().optional().nullable(),
  brand: z.string().optional().nullable(),
  card: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  cvc_check: z.string().optional().nullable(),
  dynamic_last4: z.string().optional().nullable(),
  exp_month: z.number().optional().nullable(),
  exp_year: z.number().optional().nullable(),
  fingerprint: z.string().optional(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  three_d_secure: z.string().optional(),
  tokenization_method: z.string().optional().nullable(),
});

export const sourceTypeWechatSchema = z.object({
  prepay_id: z.string().optional(),
  qr_code_url: z.string().optional().nullable(),
  statement_descriptor: z.string().optional(),
});

export const subscriptionAutomaticTaxSchema = z.object({
  enabled: z.boolean(),
});

export const subscriptionBillingThresholdsSchema = z.object({
  amount_gte: z.number().optional().nullable(),
  reset_billing_cycle_anchor: z.boolean().optional().nullable(),
});

export const subscriptionDetailsDataSchema = z.object({
  metadata: z.record(z.string()).optional().nullable(),
});

export const subscriptionItemBillingThresholdsSchema = z.object({
  usage_gte: z.number().optional().nullable(),
});

export const subscriptionPaymentMethodOptionsCardSchema = z.object({
  mandate_options: invoiceMandateOptionsCardSchema.optional(),
  network: z
    .union([
      z.literal("amex"),
      z.literal("cartes_bancaires"),
      z.literal("diners"),
      z.literal("discover"),
      z.literal("eftpos_au"),
      z.literal("interac"),
      z.literal("jcb"),
      z.literal("mastercard"),
      z.literal("unionpay"),
      z.literal("unknown"),
      z.literal("visa"),
    ])
    .optional(),
  request_three_d_secure: z
    .union([z.literal("any"), z.literal("automatic")])
    .optional(),
});

export const subscriptionPendingInvoiceItemIntervalSchema = z.object({
  interval: z.union([
    z.literal("day"),
    z.literal("month"),
    z.literal("week"),
    z.literal("year"),
  ]),
  interval_count: z.number(),
});

export const subscriptionScheduleCurrentPhaseSchema = z.object({
  end_date: z.number(),
  start_date: z.number(),
});

export const subscriptionSchedulesResourceDefaultSettingsAutomaticTaxSchema = z.object(
  {
    enabled: z.boolean(),
  }
);

export const subscriptionsResourcePauseCollectionSchema = z.object({
  behavior: z.union([
    z.literal("keep_as_draft"),
    z.literal("mark_uncollectible"),
    z.literal("void"),
  ]),
  resumes_at: z.number().optional().nullable(),
});

export const subscriptionsTrialsResourceEndBehaviorSchema = z.object({
  missing_payment_method: z.union([
    z.literal("cancel"),
    z.literal("create_invoice"),
    z.literal("pause"),
  ]),
});

export const subscriptionsTrialsResourceTrialSettingsSchema = z.object({
  end_behavior: subscriptionsTrialsResourceEndBehaviorSchema,
});

export const taxCodeSchema = z.object({
  description: z.string(),
  id: z.string(),
  name: z.string(),
  object: z.literal("tax_code"),
});

export const taxDeductedAtSourceSchema = z.object({
  id: z.string(),
  object: z.literal("tax_deducted_at_source"),
  period_end: z.number(),
  period_start: z.number(),
  tax_deduction_account_number: z.string(),
});

export const taxIdVerificationSchema = z.object({
  status: z.union([
    z.literal("pending"),
    z.literal("unavailable"),
    z.literal("unverified"),
    z.literal("verified"),
  ]),
  verified_address: z.string().optional().nullable(),
  verified_name: z.string().optional().nullable(),
});

export const taxProductResourceCustomerDetailsResourceTaxIdSchema = z.object({
  type: z.union([
    z.literal("ad_nrt"),
    z.literal("ae_trn"),
    z.literal("ar_cuit"),
    z.literal("au_abn"),
    z.literal("au_arn"),
    z.literal("bg_uic"),
    z.literal("bo_tin"),
    z.literal("br_cnpj"),
    z.literal("br_cpf"),
    z.literal("ca_bn"),
    z.literal("ca_gst_hst"),
    z.literal("ca_pst_bc"),
    z.literal("ca_pst_mb"),
    z.literal("ca_pst_sk"),
    z.literal("ca_qst"),
    z.literal("ch_vat"),
    z.literal("cl_tin"),
    z.literal("cn_tin"),
    z.literal("co_nit"),
    z.literal("cr_tin"),
    z.literal("do_rcn"),
    z.literal("ec_ruc"),
    z.literal("eg_tin"),
    z.literal("es_cif"),
    z.literal("eu_oss_vat"),
    z.literal("eu_vat"),
    z.literal("gb_vat"),
    z.literal("ge_vat"),
    z.literal("hk_br"),
    z.literal("hu_tin"),
    z.literal("id_npwp"),
    z.literal("il_vat"),
    z.literal("in_gst"),
    z.literal("is_vat"),
    z.literal("jp_cn"),
    z.literal("jp_rn"),
    z.literal("jp_trn"),
    z.literal("ke_pin"),
    z.literal("kr_brn"),
    z.literal("li_uid"),
    z.literal("mx_rfc"),
    z.literal("my_frp"),
    z.literal("my_itn"),
    z.literal("my_sst"),
    z.literal("no_vat"),
    z.literal("nz_gst"),
    z.literal("pe_ruc"),
    z.literal("ph_tin"),
    z.literal("ro_tin"),
    z.literal("rs_pib"),
    z.literal("ru_inn"),
    z.literal("ru_kpp"),
    z.literal("sa_vat"),
    z.literal("sg_gst"),
    z.literal("sg_uen"),
    z.literal("si_tin"),
    z.literal("sv_nit"),
    z.literal("th_vat"),
    z.literal("tr_tin"),
    z.literal("tw_vat"),
    z.literal("ua_vat"),
    z.literal("unknown"),
    z.literal("us_ein"),
    z.literal("uy_ruc"),
    z.literal("ve_rif"),
    z.literal("vn_tin"),
    z.literal("za_vat"),
  ]),
  value: z.string(),
});

export const taxProductResourceJurisdictionSchema = z.object({
  country: z.string(),
  display_name: z.string(),
  level: z.union([
    z.literal("city"),
    z.literal("country"),
    z.literal("county"),
    z.literal("district"),
    z.literal("state"),
  ]),
  state: z.string().optional().nullable(),
});

export const taxProductResourceLineItemTaxRateDetailsSchema = z.object({
  display_name: z.string(),
  percentage_decimal: z.string(),
  tax_type: z.union([
    z.literal("amusement_tax"),
    z.literal("communications_tax"),
    z.literal("gst"),
    z.literal("hst"),
    z.literal("igst"),
    z.literal("jct"),
    z.literal("lease_tax"),
    z.literal("pst"),
    z.literal("qst"),
    z.literal("rst"),
    z.literal("sales_tax"),
    z.literal("vat"),
  ]),
});

export const taxProductResourcePostalAddressSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string(),
  line1: z.string().optional().nullable(),
  line2: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
});

export const taxProductResourceTaxRateDetailsSchema = z.object({
  country: z.string().optional().nullable(),
  percentage_decimal: z.string(),
  state: z.string().optional().nullable(),
  tax_type: z
    .union([
      z.literal("amusement_tax"),
      z.literal("communications_tax"),
      z.literal("gst"),
      z.literal("hst"),
      z.literal("igst"),
      z.literal("jct"),
      z.literal("lease_tax"),
      z.literal("pst"),
      z.literal("qst"),
      z.literal("rst"),
      z.literal("sales_tax"),
      z.literal("vat"),
    ])
    .optional(),
});

export const taxProductResourceTaxSettingsDefaultsSchema = z.object({
  tax_behavior: z
    .union([
      z.literal("exclusive"),
      z.literal("inclusive"),
      z.literal("inferred_by_currency"),
    ])
    .optional(),
  tax_code: z.string().optional().nullable(),
});

export const taxProductResourceTaxSettingsHeadOfficeSchema = z.object({
  address: addressSchema,
});

export const taxProductResourceTaxSettingsStatusDetailsResourceActiveSchema = z.object(
  {}
);

export const taxProductResourceTaxSettingsStatusDetailsResourcePendingSchema = z.object(
  {
    missing_fields: z.array(z.string()).optional().nullable(),
  }
);

export const taxProductResourceTaxTransactionLineItemResourceReversalSchema = z.object(
  {
    original_line_item: z.string(),
  }
);

export const taxProductResourceTaxTransactionResourceReversalSchema = z.object({
  original_transaction: z.string().optional().nullable(),
});

export const taxProductResourceTaxTransactionShippingCostSchema = z.object({
  amount: z.number(),
  amount_tax: z.number(),
  shipping_rate: z.string().optional(),
  tax_behavior: z.union([z.literal("exclusive"), z.literal("inclusive")]),
  tax_code: z.string(),
});

export const taxRateSchema = z.object({
  active: z.boolean(),
  country: z.string().optional().nullable(),
  created: z.number(),
  description: z.string().optional().nullable(),
  display_name: z.string(),
  effective_percentage: z.number().optional().nullable(),
  id: z.string(),
  inclusive: z.boolean(),
  jurisdiction: z.string().optional().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string()).optional().nullable(),
  object: z.literal("tax_rate"),
  percentage: z.number(),
  state: z.string().optional().nullable(),
  tax_type: z
    .union([
      z.literal("amusement_tax"),
      z.literal("communications_tax"),
      z.literal("gst"),
      z.literal("hst"),
      z.literal("igst"),
      z.literal("jct"),
      z.literal("lease_tax"),
      z.literal("pst"),
      z.literal("qst"),
      z.literal("rst"),
      z.literal("sales_tax"),
      z.literal("service_tax"),
      z.literal("vat"),
    ])
    .optional(),
});

export const terminalConnectionTokenSchema = z.object({
  location: z.string().optional(),
  object: z.literal("terminal.connection_token"),
  secret: z.string(),
});

export const terminalLocationSchema = z.object({
  address: addressSchema,
  configuration_overrides: z.string().optional(),
  display_name: z.string(),
  id: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  object: z.literal("terminal.location"),
});

export const terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema = z.object(
  {
    fixed_amounts: z.array(z.number()).optional().nullable(),
    percentages: z.array(z.number()).optional().nullable(),
    smart_tip_threshold: z.number().optional(),
  }
);

export const terminalConfigurationConfigurationResourceTippingSchema = z.object(
  {
    aud: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    cad: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    chf: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    czk: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    dkk: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    eur: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    gbp: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    hkd: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    myr: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    nok: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    nzd: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    sek: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    sgd: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
    usd: terminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
  }
);

export const terminalReaderReaderResourceLineItemSchema = z.object({
  amount: z.number(),
  description: z.string(),
  quantity: z.number(),
});

export const terminalReaderReaderResourceProcessSetupConfigSchema = z.object(
  {}
);

export const terminalReaderReaderResourceTippingConfigSchema = z.object({
  amount_eligible: z.number().optional(),
});

export const testHelpersTestClockSchema = z.object({
  created: z.number(),
  deletes_after: z.number(),
  frozen_time: z.number(),
  id: z.string(),
  livemode: z.boolean(),
  name: z.string().optional().nullable(),
  object: z.literal("test_helpers.test_clock"),
  status: z.union([
    z.literal("advancing"),
    z.literal("internal_failure"),
    z.literal("ready"),
  ]),
});

export const threeDSecureDetailsSchema = z.object({
  authentication_flow: z
    .union([z.literal("challenge"), z.literal("frictionless")])
    .optional(),
  result: z
    .union([
      z.literal("attempt_acknowledged"),
      z.literal("authenticated"),
      z.literal("exempted"),
      z.literal("failed"),
      z.literal("not_supported"),
      z.literal("processing_error"),
    ])
    .optional(),
  result_reason: z
    .union([
      z.literal("abandoned"),
      z.literal("bypassed"),
      z.literal("canceled"),
      z.literal("card_not_enrolled"),
      z.literal("network_not_supported"),
      z.literal("protocol_error"),
      z.literal("rejected"),
    ])
    .optional(),
  version: z
    .union([z.literal("1.0.2"), z.literal("2.1.0"), z.literal("2.2.0")])
    .optional(),
});

export const threeDSecureDetailsChargeSchema = z.object({
  authentication_flow: z
    .union([z.literal("challenge"), z.literal("frictionless")])
    .optional(),
  result: z
    .union([
      z.literal("attempt_acknowledged"),
      z.literal("authenticated"),
      z.literal("exempted"),
      z.literal("failed"),
      z.literal("not_supported"),
      z.literal("processing_error"),
    ])
    .optional(),
  result_reason: z
    .union([
      z.literal("abandoned"),
      z.literal("bypassed"),
      z.literal("canceled"),
      z.literal("card_not_enrolled"),
      z.literal("network_not_supported"),
      z.literal("protocol_error"),
      z.literal("rejected"),
    ])
    .optional(),
  version: z
    .union([z.literal("1.0.2"), z.literal("2.1.0"), z.literal("2.2.0")])
    .optional(),
});

export const threeDSecureUsageSchema = z.object({
  supported: z.boolean(),
});

export const transferScheduleSchema = z.object({
  delay_days: z.number(),
  interval: z.string(),
  monthly_anchor: z.number().optional(),
  weekly_anchor: z.string().optional(),
});

export const transformQuantitySchema = z.object({
  divide_by: z.number(),
  round: z.union([z.literal("down"), z.literal("up")]),
});

export const transformUsageSchema = z.object({
  divide_by: z.number(),
  round: z.union([z.literal("down"), z.literal("up")]),
});

export const treasuryFinancialAccountsResourceAbaRecordSchema = z.object({
  account_holder_name: z.string(),
  account_number: z.string().optional().nullable(),
  account_number_last4: z.string(),
  bank_name: z.string(),
  routing_number: z.string(),
});

export const treasuryFinancialAccountsResourceBalanceSchema = z.object({
  cash: z.record(z.number()),
  inbound_pending: z.record(z.number()),
  outbound_pending: z.record(z.number()),
});

export const treasuryFinancialAccountsResourceClosedStatusDetailsSchema = z.object(
  {
    reasons: z.array(
      z.union([
        z.literal("account_rejected"),
        z.literal("closed_by_platform"),
        z.literal("other"),
      ])
    ),
  }
);

export const treasuryFinancialAccountsResourceFinancialAddressSchema = z.object(
  {
    aba: treasuryFinancialAccountsResourceAbaRecordSchema.optional(),
    supported_networks: z
      .array(z.union([z.literal("ach"), z.literal("us_domestic_wire")]))
      .optional(),
    type: z.literal("aba"),
  }
);

export const treasuryFinancialAccountsResourcePlatformRestrictionsSchema = z.object(
  {
    inbound_flows: z
      .union([z.literal("restricted"), z.literal("unrestricted")])
      .optional(),
    outbound_flows: z
      .union([z.literal("restricted"), z.literal("unrestricted")])
      .optional(),
  }
);

export const treasuryFinancialAccountsResourceStatusDetailsSchema = z.object({
  closed: treasuryFinancialAccountsResourceClosedStatusDetailsSchema
    .optional()
    .nullable(),
});

export const treasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema = z.object(
  {
    code: z.union([
      z.literal("activating"),
      z.literal("capability_not_requested"),
      z.literal("financial_account_closed"),
      z.literal("rejected_other"),
      z.literal("rejected_unsupported_business"),
      z.literal("requirements_past_due"),
      z.literal("requirements_pending_verification"),
      z.literal("restricted_by_platform"),
      z.literal("restricted_other"),
    ]),
    resolution: z
      .union([
        z.literal("contact_stripe"),
        z.literal("provide_information"),
        z.literal("remove_restriction"),
      ])
      .optional(),
    restriction: z
      .union([z.literal("inbound_flows"), z.literal("outbound_flows")])
      .optional(),
  }
);

export const treasuryInboundTransfersResourceFailureDetailsSchema = z.object({
  code: z.union([
    z.literal("account_closed"),
    z.literal("account_frozen"),
    z.literal("bank_account_restricted"),
    z.literal("bank_ownership_changed"),
    z.literal("debit_not_authorized"),
    z.literal("incorrect_account_holder_address"),
    z.literal("incorrect_account_holder_name"),
    z.literal("incorrect_account_holder_tax_id"),
    z.literal("insufficient_funds"),
    z.literal("invalid_account_number"),
    z.literal("invalid_currency"),
    z.literal("no_account"),
    z.literal("other"),
  ]),
});

export const treasuryInboundTransfersResourceInboundTransferResourceLinkedFlowsSchema = z.object(
  {
    received_debit: z.string().optional().nullable(),
  }
);

export const treasuryInboundTransfersResourceInboundTransferResourceStatusTransitionsSchema = z.object(
  {
    canceled_at: z.number().optional().nullable(),
    failed_at: z.number().optional().nullable(),
    succeeded_at: z.number().optional().nullable(),
  }
);

export const treasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsSchema = z.object(
  {
    ip_address: z.string().optional().nullable(),
    present: z.boolean(),
  }
);

export const treasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitionsSchema = z.object(
  {
    canceled_at: z.number().optional().nullable(),
    failed_at: z.number().optional().nullable(),
    posted_at: z.number().optional().nullable(),
    returned_at: z.number().optional().nullable(),
  }
);

export const treasuryOutboundTransfersResourceStatusTransitionsSchema = z.object(
  {
    canceled_at: z.number().optional().nullable(),
    failed_at: z.number().optional().nullable(),
    posted_at: z.number().optional().nullable(),
    returned_at: z.number().optional().nullable(),
  }
);

export const treasuryReceivedCreditsResourceReversalDetailsSchema = z.object({
  deadline: z.number().optional().nullable(),
  restricted_reason: z
    .union([
      z.literal("already_reversed"),
      z.literal("deadline_passed"),
      z.literal("network_restricted"),
      z.literal("other"),
      z.literal("source_flow_restricted"),
    ])
    .optional(),
});

export const treasuryReceivedCreditsResourceStatusTransitionsSchema = z.object({
  posted_at: z.number().optional().nullable(),
});

export const treasuryReceivedDebitsResourceDebitReversalLinkedFlowsSchema = z.object(
  {
    issuing_dispute: z.string().optional().nullable(),
  }
);

export const treasuryReceivedDebitsResourceLinkedFlowsSchema = z.object({
  debit_reversal: z.string().optional().nullable(),
  inbound_transfer: z.string().optional().nullable(),
  issuing_authorization: z.string().optional().nullable(),
  issuing_transaction: z.string().optional().nullable(),
});

export const treasuryReceivedDebitsResourceReversalDetailsSchema = z.object({
  deadline: z.number().optional().nullable(),
  restricted_reason: z
    .union([
      z.literal("already_reversed"),
      z.literal("deadline_passed"),
      z.literal("network_restricted"),
      z.literal("other"),
      z.literal("source_flow_restricted"),
    ])
    .optional(),
});

export const treasuryReceivedDebitsResourceStatusTransitionsSchema = z.object({
  completed_at: z.number().optional().nullable(),
});

export const treasurySharedResourceBillingDetailsSchema = z.object({
  address: addressSchema,
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
});

export const treasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccountSchema = z.object(
  {
    bank_name: z.string().optional().nullable(),
    last4: z.string().optional().nullable(),
    routing_number: z.string().optional().nullable(),
  }
);

export const treasuryTransactionsResourceAbstractTransactionResourceStatusTransitionsSchema = z.object(
  {
    posted_at: z.number().optional().nullable(),
    void_at: z.number().optional().nullable(),
  }
);

export const treasuryTransactionsResourceBalanceImpactSchema = z.object({
  cash: z.number(),
  inbound_pending: z.number(),
  outbound_pending: z.number(),
});

export const usBankAccountNetworksSchema = z.object({
  preferred: z.string().optional().nullable(),
  supported: z.array(
    z.union([z.literal("ach"), z.literal("us_domestic_wire")])
  ),
});

export const usageRecordSchema = z.object({
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("usage_record"),
  quantity: z.number(),
  subscription_item: z.string(),
  timestamp: z.number(),
});

export const usageRecordSummarySchema = z.object({
  id: z.string(),
  invoice: z.string().optional().nullable(),
  livemode: z.boolean(),
  object: z.literal("usage_record_summary"),
  period: periodSchema,
  subscription_item: z.string(),
  total_usage: z.number(),
});

export const verificationSessionRedactionSchema = z.object({
  status: z.union([z.literal("processing"), z.literal("redacted")]),
});

export const webhookEndpointSchema = z.object({
  api_version: z.string().optional().nullable(),
  application: z.string().optional().nullable(),
  created: z.number(),
  description: z.string().optional().nullable(),
  enabled_events: z.array(z.string()),
  id: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  object: z.literal("webhook_endpoint"),
  secret: z.string().optional(),
  status: z.string(),
  url: z.string(),
});

export const accountBusinessProfileSchema = z.object({
  mcc: z.string().optional().nullable(),
  monthly_estimated_revenue: accountMonthlyEstimatedRevenueSchema.optional(),
  name: z.string().optional().nullable(),
  product_description: z.string().optional().nullable(),
  support_address: addressSchema.optional().nullable(),
  support_email: z.string().optional().nullable(),
  support_phone: z.string().optional().nullable(),
  support_url: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
});

export const accountCapabilityFutureRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  current_deadline: z.number().optional().nullable(),
  currently_due: z.array(z.string()),
  disabled_reason: z.string().optional().nullable(),
  errors: z.array(accountRequirementsErrorSchema),
  eventually_due: z.array(z.string()),
  past_due: z.array(z.string()),
  pending_verification: z.array(z.string()),
});

export const accountCapabilityRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  current_deadline: z.number().optional().nullable(),
  currently_due: z.array(z.string()),
  disabled_reason: z.string().optional().nullable(),
  errors: z.array(accountRequirementsErrorSchema),
  eventually_due: z.array(z.string()),
  past_due: z.array(z.string()),
  pending_verification: z.array(z.string()),
});

export const accountCardIssuingSettingsSchema = z.object({
  tos_acceptance: cardIssuingAccountTermsOfServiceSchema.optional(),
});

export const accountCardPaymentsSettingsSchema = z.object({
  decline_on: accountDeclineChargeOnSchema.optional(),
  statement_descriptor_prefix: z.string().optional().nullable(),
  statement_descriptor_prefix_kana: z.string().optional().nullable(),
  statement_descriptor_prefix_kanji: z.string().optional().nullable(),
});

export const accountFutureRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  current_deadline: z.number().optional().nullable(),
  currently_due: z.array(z.string()).optional().nullable(),
  disabled_reason: z.string().optional().nullable(),
  errors: z.array(accountRequirementsErrorSchema).optional().nullable(),
  eventually_due: z.array(z.string()).optional().nullable(),
  past_due: z.array(z.string()).optional().nullable(),
  pending_verification: z.array(z.string()).optional().nullable(),
});

export const accountPayoutSettingsSchema = z.object({
  debit_negative_balances: z.boolean(),
  schedule: transferScheduleSchema,
  statement_descriptor: z.string().optional().nullable(),
});

export const accountRequirementsSchema = z.object({
  alternatives: z
    .array(accountRequirementsAlternativeSchema)
    .optional()
    .nullable(),
  current_deadline: z.number().optional().nullable(),
  currently_due: z.array(z.string()).optional().nullable(),
  disabled_reason: z.string().optional().nullable(),
  errors: z.array(accountRequirementsErrorSchema).optional().nullable(),
  eventually_due: z.array(z.string()).optional().nullable(),
  past_due: z.array(z.string()).optional().nullable(),
  pending_verification: z.array(z.string()).optional().nullable(),
});

export const appsSecretSchema = z.object({
  created: z.number(),
  deleted: z.boolean().optional(),
  expires_at: z.number().optional().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  name: z.string(),
  object: z.literal("apps.secret"),
  payload: z.string().optional().nullable(),
  scope: secretServiceResourceScopeSchema,
});

export const balanceAmountSchema = z.object({
  amount: z.number(),
  currency: z.string(),
  source_types: balanceAmountBySourceTypeSchema.optional(),
});

export const balanceDetailSchema = z.object({
  available: z.array(balanceAmountSchema),
});

export const bankConnectionsResourceBalanceSchema = z.object({
  as_of: z.number(),
  cash: bankConnectionsResourceBalanceApiResourceCashBalanceSchema.optional(),
  credit: bankConnectionsResourceBalanceApiResourceCreditBalanceSchema.optional(),
  current: z.record(z.number()),
  type: z.union([z.literal("cash"), z.literal("credit")]),
});

export const cashBalanceSchema = z.object({
  available: z.record(z.number()).optional().nullable(),
  customer: z.string(),
  livemode: z.boolean(),
  object: z.literal("cash_balance"),
  settings: customerBalanceCustomerBalanceSettingsSchema,
});

export const chargeOutcomeSchema = z.object({
  network_status: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  risk_level: z.string().optional(),
  risk_score: z.number().optional(),
  rule: z.union([z.string(), ruleSchema]).optional(),
  seller_message: z.string().optional().nullable(),
  type: z.string(),
});

export const checkoutCustomerBalanceBankTransferPaymentMethodOptionsSchema = z.object(
  {
    eu_bank_transfer: paymentMethodOptionsCustomerBalanceEuBankAccountSchema.optional(),
    requested_address_types: z
      .array(
        z.union([
          z.literal("aba"),
          z.literal("iban"),
          z.literal("sepa"),
          z.literal("sort_code"),
          z.literal("spei"),
          z.literal("swift"),
          z.literal("zengin"),
        ])
      )
      .optional(),
    type: z
      .union([
        z.literal("eu_bank_transfer"),
        z.literal("gb_bank_transfer"),
        z.literal("jp_bank_transfer"),
        z.literal("mx_bank_transfer"),
        z.literal("us_bank_transfer"),
      ])
      .optional(),
  }
);

export const checkoutCustomerBalancePaymentMethodOptionsSchema = z.object({
  bank_transfer: checkoutCustomerBalanceBankTransferPaymentMethodOptionsSchema.optional(),
  funding_type: z.literal("bank_transfer").optional(),
  setup_future_usage: z.literal("none").optional(),
});

export const checkoutUsBankAccountPaymentMethodOptionsSchema = z.object({
  financial_connections: linkedAccountOptionsUsBankAccountSchema.optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  verification_method: z
    .union([z.literal("automatic"), z.literal("instant")])
    .optional(),
});

export const countrySpecSchema = z.object({
  default_currency: z.string(),
  id: z.string(),
  object: z.literal("country_spec"),
  supported_bank_account_currencies: z.record(z.array(z.string())),
  supported_payment_currencies: z.array(z.string()),
  supported_payment_methods: z.array(z.string()),
  supported_transfer_countries: z.array(z.string()),
  verification_fields: countrySpecVerificationFieldsSchema,
});

export const couponSchema = z.object({
  amount_off: z.number().optional().nullable(),
  applies_to: couponAppliesToSchema.optional(),
  created: z.number(),
  currency: z.string().optional().nullable(),
  currency_options: z.record(couponCurrencyOptionSchema).optional(),
  duration: z.union([
    z.literal("forever"),
    z.literal("once"),
    z.literal("repeating"),
  ]),
  duration_in_months: z.number().optional().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  max_redemptions: z.number().optional().nullable(),
  metadata: z.record(z.string()).optional().nullable(),
  name: z.string().optional().nullable(),
  object: z.literal("coupon"),
  percent_off: z.number().optional().nullable(),
  redeem_by: z.number().optional().nullable(),
  times_redeemed: z.number(),
  valid: z.boolean(),
});

export const creditNoteTaxAmountSchema = z.object({
  amount: z.number(),
  inclusive: z.boolean(),
  tax_rate: z.union([z.string(), taxRateSchema]),
  taxability_reason: z
    .union([
      z.literal("customer_exempt"),
      z.literal("not_collecting"),
      z.literal("not_subject_to_tax"),
      z.literal("not_supported"),
      z.literal("portion_product_exempt"),
      z.literal("portion_reduced_rated"),
      z.literal("portion_standard_rated"),
      z.literal("product_exempt"),
      z.literal("product_exempt_holiday"),
      z.literal("proportionally_rated"),
      z.literal("reduced_rated"),
      z.literal("reverse_charge"),
      z.literal("standard_rated"),
      z.literal("taxable_basis_reduced"),
      z.literal("zero_rated"),
    ])
    .optional(),
  taxable_amount: z.number().optional().nullable(),
});

export const currencyOptionSchema = z.object({
  custom_unit_amount: customUnitAmountSchema.optional().nullable(),
  tax_behavior: z
    .union([
      z.literal("exclusive"),
      z.literal("inclusive"),
      z.literal("unspecified"),
    ])
    .optional(),
  tiers: z.array(priceTierSchema).optional(),
  unit_amount: z.number().optional().nullable(),
  unit_amount_decimal: z.string().optional().nullable(),
});

export const customerAcceptanceSchema = z.object({
  accepted_at: z.number().optional().nullable(),
  offline: offlineAcceptanceSchema.optional(),
  online: onlineAcceptanceSchema.optional(),
  type: z.union([z.literal("offline"), z.literal("online")]),
});

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferSchema = z.object(
  {
    eu_bank_transfer: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransferSchema.optional(),
    gb_bank_transfer: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransferSchema.optional(),
    jp_bank_transfer: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransferSchema.optional(),
    reference: z.string().optional().nullable(),
    type: z.union([
      z.literal("eu_bank_transfer"),
      z.literal("gb_bank_transfer"),
      z.literal("jp_bank_transfer"),
      z.literal("mx_bank_transfer"),
      z.literal("us_bank_transfer"),
    ]),
    us_bank_transfer: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferSchema.optional(),
  }
);

export const customerTaxSchema = z.object({
  automatic_tax: z.union([
    z.literal("failed"),
    z.literal("not_collecting"),
    z.literal("supported"),
    z.literal("unrecognized_location"),
  ]),
  ip_address: z.string().optional().nullable(),
  location: customerTaxLocationSchema.optional().nullable(),
});

export const eventSchema = z.object({
  account: z.string().optional(),
  api_version: z.string().optional().nullable(),
  created: z.number(),
  data: notificationEventDataSchema,
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("event"),
  pending_webhooks: z.number(),
  request: notificationEventRequestSchema.optional().nullable(),
  type: z.string(),
});

export const fundingInstructionsBankTransferFinancialAddressSchema = z.object({
  iban: fundingInstructionsBankTransferIbanRecordSchema.optional(),
  sort_code: fundingInstructionsBankTransferSortCodeRecordSchema.optional(),
  spei: fundingInstructionsBankTransferSpeiRecordSchema.optional(),
  supported_networks: z
    .array(
      z.union([
        z.literal("bacs"),
        z.literal("fps"),
        z.literal("sepa"),
        z.literal("spei"),
        z.literal("zengin"),
      ])
    )
    .optional(),
  type: z.union([
    z.literal("iban"),
    z.literal("sort_code"),
    z.literal("spei"),
    z.literal("zengin"),
  ]),
  zengin: fundingInstructionsBankTransferZenginRecordSchema.optional(),
});

export const gelatoDocumentReportSchema = z.object({
  address: addressSchema.optional().nullable(),
  dob: gelatoDataDocumentReportDateOfBirthSchema.optional().nullable(),
  error: gelatoDocumentReportErrorSchema.optional().nullable(),
  expiration_date: gelatoDataDocumentReportExpirationDateSchema
    .optional()
    .nullable(),
  files: z.array(z.string()).optional().nullable(),
  first_name: z.string().optional().nullable(),
  issued_date: gelatoDataDocumentReportIssuedDateSchema.optional().nullable(),
  issuing_country: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  number: z.string().optional().nullable(),
  status: z.union([z.literal("unverified"), z.literal("verified")]),
  type: z
    .union([
      z.literal("driving_license"),
      z.literal("id_card"),
      z.literal("passport"),
    ])
    .optional(),
});

export const gelatoIdNumberReportSchema = z.object({
  dob: gelatoDataIdNumberReportDateSchema.optional().nullable(),
  error: gelatoIdNumberReportErrorSchema.optional().nullable(),
  first_name: z.string().optional().nullable(),
  id_number: z.string().optional().nullable(),
  id_number_type: z
    .union([z.literal("br_cpf"), z.literal("sg_nric"), z.literal("us_ssn")])
    .optional(),
  last_name: z.string().optional().nullable(),
  status: z.union([z.literal("unverified"), z.literal("verified")]),
});

export const gelatoSelfieReportSchema = z.object({
  document: z.string().optional().nullable(),
  error: gelatoSelfieReportErrorSchema.optional().nullable(),
  selfie: z.string().optional().nullable(),
  status: z.union([z.literal("unverified"), z.literal("verified")]),
});

export const identityVerificationReportSchema = z.object({
  created: z.number(),
  document: gelatoDocumentReportSchema.optional(),
  id: z.string(),
  id_number: gelatoIdNumberReportSchema.optional(),
  livemode: z.boolean(),
  object: z.literal("identity.verification_report"),
  options: gelatoVerificationReportOptionsSchema.optional(),
  selfie: gelatoSelfieReportSchema.optional(),
  type: z.union([z.literal("document"), z.literal("id_number")]).optional(),
  verification_session: z.string().optional().nullable(),
});

export const identityVerificationSessionSchema = z.object({
  client_secret: z.string().optional().nullable(),
  created: z.number(),
  id: z.string(),
  last_error: gelatoSessionLastErrorSchema.optional().nullable(),
  last_verification_report: z
    .union([z.string(), identityVerificationReportSchema])
    .optional()
    .nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  object: z.literal("identity.verification_session"),
  options: gelatoVerificationSessionOptionsSchema.optional().nullable(),
  redaction: verificationSessionRedactionSchema.optional().nullable(),
  status: z.union([
    z.literal("canceled"),
    z.literal("processing"),
    z.literal("requires_input"),
    z.literal("verified"),
  ]),
  type: z.union([z.literal("document"), z.literal("id_number")]).optional(),
  url: z.string().optional().nullable(),
  verified_outputs: gelatoVerifiedOutputsSchema.optional().nullable(),
});

export const inboundTransfersSchema = z.object({
  billing_details: treasurySharedResourceBillingDetailsSchema,
  type: z.literal("us_bank_account"),
  us_bank_account: inboundTransfersPaymentMethodDetailsUsBankAccountSchema.optional(),
});

export const invoicePaymentMethodOptionsAcssDebitSchema = z.object({
  mandate_options: invoicePaymentMethodOptionsAcssDebitMandateOptionsSchema.optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const invoicePaymentMethodOptionsCustomerBalanceBankTransferSchema = z.object(
  {
    eu_bank_transfer: invoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferSchema.optional(),
    type: z.string().optional().nullable(),
  }
);

export const invoicePaymentMethodOptionsUsBankAccountSchema = z.object({
  financial_connections: invoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsSchema.optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const invoiceTaxAmountSchema = z.object({
  amount: z.number(),
  inclusive: z.boolean(),
  tax_rate: z.union([z.string(), taxRateSchema]),
  taxability_reason: z
    .union([
      z.literal("customer_exempt"),
      z.literal("not_collecting"),
      z.literal("not_subject_to_tax"),
      z.literal("not_supported"),
      z.literal("portion_product_exempt"),
      z.literal("portion_reduced_rated"),
      z.literal("portion_standard_rated"),
      z.literal("product_exempt"),
      z.literal("product_exempt_holiday"),
      z.literal("proportionally_rated"),
      z.literal("reduced_rated"),
      z.literal("reverse_charge"),
      z.literal("standard_rated"),
      z.literal("taxable_basis_reduced"),
      z.literal("zero_rated"),
    ])
    .optional(),
  taxable_amount: z.number().optional().nullable(),
});

export const issuingCardAuthorizationControlsSchema = z.object({
  allowed_categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  blocked_categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  spending_limits: z
    .array(issuingCardSpendingLimitSchema)
    .optional()
    .nullable(),
  spending_limits_currency: z.string().optional().nullable(),
});

export const issuingCardShippingSchema = z.object({
  address: addressSchema,
  carrier: z
    .union([
      z.literal("dhl"),
      z.literal("fedex"),
      z.literal("royal_mail"),
      z.literal("usps"),
    ])
    .optional(),
  customs: issuingCardShippingCustomsSchema.optional().nullable(),
  eta: z.number().optional().nullable(),
  name: z.string(),
  phone_number: z.string().optional().nullable(),
  require_signature: z.boolean().optional().nullable(),
  service: z.union([
    z.literal("express"),
    z.literal("priority"),
    z.literal("standard"),
  ]),
  status: z
    .union([
      z.literal("canceled"),
      z.literal("delivered"),
      z.literal("failure"),
      z.literal("pending"),
      z.literal("returned"),
      z.literal("shipped"),
    ])
    .optional(),
  tracking_number: z.string().optional().nullable(),
  tracking_url: z.string().optional().nullable(),
  type: z.union([z.literal("bulk"), z.literal("individual")]),
});

export const issuingCardholderAuthorizationControlsSchema = z.object({
  allowed_categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  blocked_categories: z
    .array(
      z.union([
        z.literal("ac_refrigeration_repair"),
        z.literal("accounting_bookkeeping_services"),
        z.literal("advertising_services"),
        z.literal("agricultural_cooperative"),
        z.literal("airlines_air_carriers"),
        z.literal("airports_flying_fields"),
        z.literal("ambulance_services"),
        z.literal("amusement_parks_carnivals"),
        z.literal("antique_reproductions"),
        z.literal("antique_shops"),
        z.literal("aquariums"),
        z.literal("architectural_surveying_services"),
        z.literal("art_dealers_and_galleries"),
        z.literal("artists_supply_and_craft_shops"),
        z.literal("auto_and_home_supply_stores"),
        z.literal("auto_body_repair_shops"),
        z.literal("auto_paint_shops"),
        z.literal("auto_service_shops"),
        z.literal("automated_cash_disburse"),
        z.literal("automated_fuel_dispensers"),
        z.literal("automobile_associations"),
        z.literal("automotive_parts_and_accessories_stores"),
        z.literal("automotive_tire_stores"),
        z.literal("bail_and_bond_payments"),
        z.literal("bakeries"),
        z.literal("bands_orchestras"),
        z.literal("barber_and_beauty_shops"),
        z.literal("betting_casino_gambling"),
        z.literal("bicycle_shops"),
        z.literal("billiard_pool_establishments"),
        z.literal("boat_dealers"),
        z.literal("boat_rentals_and_leases"),
        z.literal("book_stores"),
        z.literal("books_periodicals_and_newspapers"),
        z.literal("bowling_alleys"),
        z.literal("bus_lines"),
        z.literal("business_secretarial_schools"),
        z.literal("buying_shopping_services"),
        z.literal("cable_satellite_and_other_pay_television_and_radio"),
        z.literal("camera_and_photographic_supply_stores"),
        z.literal("candy_nut_and_confectionery_stores"),
        z.literal("car_and_truck_dealers_new_used"),
        z.literal("car_and_truck_dealers_used_only"),
        z.literal("car_rental_agencies"),
        z.literal("car_washes"),
        z.literal("carpentry_services"),
        z.literal("carpet_upholstery_cleaning"),
        z.literal("caterers"),
        z.literal("charitable_and_social_service_organizations_fundraising"),
        z.literal("chemicals_and_allied_products"),
        z.literal("child_care_services"),
        z.literal("childrens_and_infants_wear_stores"),
        z.literal("chiropodists_podiatrists"),
        z.literal("chiropractors"),
        z.literal("cigar_stores_and_stands"),
        z.literal("civic_social_fraternal_associations"),
        z.literal("cleaning_and_maintenance"),
        z.literal("clothing_rental"),
        z.literal("colleges_universities"),
        z.literal("commercial_equipment"),
        z.literal("commercial_footwear"),
        z.literal("commercial_photography_art_and_graphics"),
        z.literal("commuter_transport_and_ferries"),
        z.literal("computer_network_services"),
        z.literal("computer_programming"),
        z.literal("computer_repair"),
        z.literal("computer_software_stores"),
        z.literal("computers_peripherals_and_software"),
        z.literal("concrete_work_services"),
        z.literal("construction_materials"),
        z.literal("consulting_public_relations"),
        z.literal("correspondence_schools"),
        z.literal("cosmetic_stores"),
        z.literal("counseling_services"),
        z.literal("country_clubs"),
        z.literal("courier_services"),
        z.literal("court_costs"),
        z.literal("credit_reporting_agencies"),
        z.literal("cruise_lines"),
        z.literal("dairy_products_stores"),
        z.literal("dance_hall_studios_schools"),
        z.literal("dating_escort_services"),
        z.literal("dentists_orthodontists"),
        z.literal("department_stores"),
        z.literal("detective_agencies"),
        z.literal("digital_goods_applications"),
        z.literal("digital_goods_games"),
        z.literal("digital_goods_large_volume"),
        z.literal("digital_goods_media"),
        z.literal("direct_marketing_catalog_merchant"),
        z.literal("direct_marketing_combination_catalog_and_retail_merchant"),
        z.literal("direct_marketing_inbound_telemarketing"),
        z.literal("direct_marketing_insurance_services"),
        z.literal("direct_marketing_other"),
        z.literal("direct_marketing_outbound_telemarketing"),
        z.literal("direct_marketing_subscription"),
        z.literal("direct_marketing_travel"),
        z.literal("discount_stores"),
        z.literal("doctors"),
        z.literal("door_to_door_sales"),
        z.literal("drapery_window_covering_and_upholstery_stores"),
        z.literal("drinking_places"),
        z.literal("drug_stores_and_pharmacies"),
        z.literal("drugs_drug_proprietaries_and_druggist_sundries"),
        z.literal("dry_cleaners"),
        z.literal("durable_goods"),
        z.literal("duty_free_stores"),
        z.literal("eating_places_restaurants"),
        z.literal("educational_services"),
        z.literal("electric_razor_stores"),
        z.literal("electric_vehicle_charging"),
        z.literal("electrical_parts_and_equipment"),
        z.literal("electrical_services"),
        z.literal("electronics_repair_shops"),
        z.literal("electronics_stores"),
        z.literal("elementary_secondary_schools"),
        z.literal("emergency_services_gcas_visa_use_only"),
        z.literal("employment_temp_agencies"),
        z.literal("equipment_rental"),
        z.literal("exterminating_services"),
        z.literal("family_clothing_stores"),
        z.literal("fast_food_restaurants"),
        z.literal("financial_institutions"),
        z.literal("fines_government_administrative_entities"),
        z.literal("fireplace_fireplace_screens_and_accessories_stores"),
        z.literal("floor_covering_stores"),
        z.literal("florists"),
        z.literal("florists_supplies_nursery_stock_and_flowers"),
        z.literal("freezer_and_locker_meat_provisioners"),
        z.literal("fuel_dealers_non_automotive"),
        z.literal("funeral_services_crematories"),
        z.literal(
          "furniture_home_furnishings_and_equipment_stores_except_appliances"
        ),
        z.literal("furniture_repair_refinishing"),
        z.literal("furriers_and_fur_shops"),
        z.literal("general_services"),
        z.literal("gift_card_novelty_and_souvenir_shops"),
        z.literal("glass_paint_and_wallpaper_stores"),
        z.literal("glassware_crystal_stores"),
        z.literal("golf_courses_public"),
        z.literal("government_licensed_horse_dog_racing_us_region_only"),
        z.literal(
          "government_licensed_online_casions_online_gambling_us_region_only"
        ),
        z.literal("government_owned_lotteries_non_us_region"),
        z.literal("government_owned_lotteries_us_region_only"),
        z.literal("government_services"),
        z.literal("grocery_stores_supermarkets"),
        z.literal("hardware_equipment_and_supplies"),
        z.literal("hardware_stores"),
        z.literal("health_and_beauty_spas"),
        z.literal("hearing_aids_sales_and_supplies"),
        z.literal("heating_plumbing_a_c"),
        z.literal("hobby_toy_and_game_shops"),
        z.literal("home_supply_warehouse_stores"),
        z.literal("hospitals"),
        z.literal("hotels_motels_and_resorts"),
        z.literal("household_appliance_stores"),
        z.literal("industrial_supplies"),
        z.literal("information_retrieval_services"),
        z.literal("insurance_default"),
        z.literal("insurance_underwriting_premiums"),
        z.literal("intra_company_purchases"),
        z.literal("jewelry_stores_watches_clocks_and_silverware_stores"),
        z.literal("landscaping_services"),
        z.literal("laundries"),
        z.literal("laundry_cleaning_services"),
        z.literal("legal_services_attorneys"),
        z.literal("luggage_and_leather_goods_stores"),
        z.literal("lumber_building_materials_stores"),
        z.literal("manual_cash_disburse"),
        z.literal("marinas_service_and_supplies"),
        z.literal("marketplaces"),
        z.literal("masonry_stonework_and_plaster"),
        z.literal("massage_parlors"),
        z.literal("medical_and_dental_labs"),
        z.literal(
          "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        ),
        z.literal("medical_services"),
        z.literal("membership_organizations"),
        z.literal("mens_and_boys_clothing_and_accessories_stores"),
        z.literal("mens_womens_clothing_stores"),
        z.literal("metal_service_centers"),
        z.literal("miscellaneous"),
        z.literal("miscellaneous_apparel_and_accessory_shops"),
        z.literal("miscellaneous_auto_dealers"),
        z.literal("miscellaneous_business_services"),
        z.literal("miscellaneous_food_stores"),
        z.literal("miscellaneous_general_merchandise"),
        z.literal("miscellaneous_general_services"),
        z.literal("miscellaneous_home_furnishing_specialty_stores"),
        z.literal("miscellaneous_publishing_and_printing"),
        z.literal("miscellaneous_recreation_services"),
        z.literal("miscellaneous_repair_shops"),
        z.literal("miscellaneous_specialty_retail"),
        z.literal("mobile_home_dealers"),
        z.literal("motion_picture_theaters"),
        z.literal("motor_freight_carriers_and_trucking"),
        z.literal("motor_homes_dealers"),
        z.literal("motor_vehicle_supplies_and_new_parts"),
        z.literal("motorcycle_shops_and_dealers"),
        z.literal("motorcycle_shops_dealers"),
        z.literal("music_stores_musical_instruments_pianos_and_sheet_music"),
        z.literal("news_dealers_and_newsstands"),
        z.literal("non_fi_money_orders"),
        z.literal("non_fi_stored_value_card_purchase_load"),
        z.literal("nondurable_goods"),
        z.literal("nurseries_lawn_and_garden_supply_stores"),
        z.literal("nursing_personal_care"),
        z.literal("office_and_commercial_furniture"),
        z.literal("opticians_eyeglasses"),
        z.literal("optometrists_ophthalmologist"),
        z.literal("orthopedic_goods_prosthetic_devices"),
        z.literal("osteopaths"),
        z.literal("package_stores_beer_wine_and_liquor"),
        z.literal("paints_varnishes_and_supplies"),
        z.literal("parking_lots_garages"),
        z.literal("passenger_railways"),
        z.literal("pawn_shops"),
        z.literal("pet_shops_pet_food_and_supplies"),
        z.literal("petroleum_and_petroleum_products"),
        z.literal("photo_developing"),
        z.literal("photographic_photocopy_microfilm_equipment_and_supplies"),
        z.literal("photographic_studios"),
        z.literal("picture_video_production"),
        z.literal("piece_goods_notions_and_other_dry_goods"),
        z.literal("plumbing_heating_equipment_and_supplies"),
        z.literal("political_organizations"),
        z.literal("postal_services_government_only"),
        z.literal("precious_stones_and_metals_watches_and_jewelry"),
        z.literal("professional_services"),
        z.literal("public_warehousing_and_storage"),
        z.literal("quick_copy_repro_and_blueprint"),
        z.literal("railroads"),
        z.literal("real_estate_agents_and_managers_rentals"),
        z.literal("record_stores"),
        z.literal("recreational_vehicle_rentals"),
        z.literal("religious_goods_stores"),
        z.literal("religious_organizations"),
        z.literal("roofing_siding_sheet_metal"),
        z.literal("secretarial_support_services"),
        z.literal("security_brokers_dealers"),
        z.literal("service_stations"),
        z.literal("sewing_needlework_fabric_and_piece_goods_stores"),
        z.literal("shoe_repair_hat_cleaning"),
        z.literal("shoe_stores"),
        z.literal("small_appliance_repair"),
        z.literal("snowmobile_dealers"),
        z.literal("special_trade_services"),
        z.literal("specialty_cleaning"),
        z.literal("sporting_goods_stores"),
        z.literal("sporting_recreation_camps"),
        z.literal("sports_and_riding_apparel_stores"),
        z.literal("sports_clubs_fields"),
        z.literal("stamp_and_coin_stores"),
        z.literal("stationary_office_supplies_printing_and_writing_paper"),
        z.literal("stationery_stores_office_and_school_supply_stores"),
        z.literal("swimming_pools_sales"),
        z.literal("t_ui_travel_germany"),
        z.literal("tailors_alterations"),
        z.literal("tax_payments_government_agencies"),
        z.literal("tax_preparation_services"),
        z.literal("taxicabs_limousines"),
        z.literal("telecommunication_equipment_and_telephone_sales"),
        z.literal("telecommunication_services"),
        z.literal("telegraph_services"),
        z.literal("tent_and_awning_shops"),
        z.literal("testing_laboratories"),
        z.literal("theatrical_ticket_agencies"),
        z.literal("timeshares"),
        z.literal("tire_retreading_and_repair"),
        z.literal("tolls_bridge_fees"),
        z.literal("tourist_attractions_and_exhibits"),
        z.literal("towing_services"),
        z.literal("trailer_parks_campgrounds"),
        z.literal("transportation_services"),
        z.literal("travel_agencies_tour_operators"),
        z.literal("truck_stop_iteration"),
        z.literal("truck_utility_trailer_rentals"),
        z.literal("typesetting_plate_making_and_related_services"),
        z.literal("typewriter_stores"),
        z.literal("u_s_federal_government_agencies_or_departments"),
        z.literal("uniforms_commercial_clothing"),
        z.literal("used_merchandise_and_secondhand_stores"),
        z.literal("utilities"),
        z.literal("variety_stores"),
        z.literal("veterinary_services"),
        z.literal("video_amusement_game_supplies"),
        z.literal("video_game_arcades"),
        z.literal("video_tape_rental_stores"),
        z.literal("vocational_trade_schools"),
        z.literal("watch_jewelry_repair"),
        z.literal("welding_repair"),
        z.literal("wholesale_clubs"),
        z.literal("wig_and_toupee_stores"),
        z.literal("wires_money_orders"),
        z.literal("womens_accessory_and_specialty_shops"),
        z.literal("womens_ready_to_wear_stores"),
        z.literal("wrecking_and_salvage_yards"),
      ])
    )
    .optional()
    .nullable(),
  spending_limits: z
    .array(issuingCardholderSpendingLimitSchema)
    .optional()
    .nullable(),
  spending_limits_currency: z.string().optional().nullable(),
});

export const issuingCardholderCardIssuingSchema = z.object({
  user_terms_acceptance: issuingCardholderUserTermsAcceptanceSchema
    .optional()
    .nullable(),
});

export const issuingTransactionFlightDataSchema = z.object({
  departure_at: z.number().optional().nullable(),
  passenger_name: z.string().optional().nullable(),
  refundable: z.boolean().optional().nullable(),
  segments: z
    .array(issuingTransactionFlightDataLegSchema)
    .optional()
    .nullable(),
  travel_agency: z.string().optional().nullable(),
});

export const issuingTransactionPurchaseDetailsSchema = z.object({
  flight: issuingTransactionFlightDataSchema.optional().nullable(),
  fuel: issuingTransactionFuelDataSchema.optional().nullable(),
  lodging: issuingTransactionLodgingDataSchema.optional().nullable(),
  receipt: z.array(issuingTransactionReceiptDataSchema).optional().nullable(),
  reference: z.string().optional().nullable(),
});

export const lineItemsTaxAmountSchema = z.object({
  amount: z.number(),
  rate: taxRateSchema,
  taxability_reason: z
    .union([
      z.literal("customer_exempt"),
      z.literal("not_collecting"),
      z.literal("not_subject_to_tax"),
      z.literal("not_supported"),
      z.literal("portion_product_exempt"),
      z.literal("portion_reduced_rated"),
      z.literal("portion_standard_rated"),
      z.literal("product_exempt"),
      z.literal("product_exempt_holiday"),
      z.literal("proportionally_rated"),
      z.literal("reduced_rated"),
      z.literal("reverse_charge"),
      z.literal("standard_rated"),
      z.literal("taxable_basis_reduced"),
      z.literal("zero_rated"),
    ])
    .optional(),
  taxable_amount: z.number().optional().nullable(),
});

export const mandateBlikSchema = z.object({
  expires_after: z.number().optional().nullable(),
  off_session: mandateOptionsOffSessionDetailsBlikSchema.optional(),
  type: z.union([z.literal("off_session"), z.literal("on_session")]).optional(),
});

export const mandatePaymentMethodDetailsSchema = z.object({
  acss_debit: mandateAcssDebitSchema.optional(),
  au_becs_debit: mandateAuBecsDebitSchema.optional(),
  bacs_debit: mandateBacsDebitSchema.optional(),
  blik: mandateBlikSchema.optional(),
  card: cardMandatePaymentMethodDetailsSchema.optional(),
  cashapp: mandateCashappSchema.optional(),
  link: mandateLinkSchema.optional(),
  paypal: mandatePaypalSchema.optional(),
  sepa_debit: mandateSepaDebitSchema.optional(),
  type: z.string(),
  us_bank_account: mandateUsBankAccountSchema.optional(),
});

export const outboundPaymentsPaymentMethodDetailsSchema = z.object({
  billing_details: treasurySharedResourceBillingDetailsSchema,
  financial_account: outboundPaymentsPaymentMethodDetailsFinancialAccountSchema.optional(),
  type: z.union([z.literal("financial_account"), z.literal("us_bank_account")]),
  us_bank_account: outboundPaymentsPaymentMethodDetailsUsBankAccountSchema.optional(),
});

export const outboundTransfersPaymentMethodDetailsSchema = z.object({
  billing_details: treasurySharedResourceBillingDetailsSchema,
  type: z.literal("us_bank_account"),
  us_bank_account: outboundTransfersPaymentMethodDetailsUsBankAccountSchema.optional(),
});

export const paymentFlowsAmountDetailsSchema = z.object({
  tip: paymentFlowsAmountDetailsResourceTipSchema.optional(),
});

export const paymentFlowsInstallmentOptionsSchema = z.object({
  enabled: z.boolean(),
  plan: paymentMethodDetailsCardInstallmentsPlanSchema.optional(),
});

export const paymentIntentCardProcessingSchema = z.object({
  customer_notification: paymentIntentProcessingCustomerNotificationSchema.optional(),
});

export const paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema = z.object(
  {
    hosted_instructions_url: z.string(),
    mobile_auth_url: z.string(),
    qr_code: paymentIntentNextActionCashappQrCodeSchema,
  }
);

export const paymentIntentNextActionDisplayBankTransferInstructionsSchema = z.object(
  {
    amount_remaining: z.number().optional().nullable(),
    currency: z.string().optional().nullable(),
    financial_addresses: z
      .array(fundingInstructionsBankTransferFinancialAddressSchema)
      .optional(),
    hosted_instructions_url: z.string().optional().nullable(),
    reference: z.string().optional().nullable(),
    type: z.union([
      z.literal("eu_bank_transfer"),
      z.literal("gb_bank_transfer"),
      z.literal("jp_bank_transfer"),
      z.literal("mx_bank_transfer"),
      z.literal("us_bank_transfer"),
    ]),
  }
);

export const paymentIntentNextActionKonbiniSchema = z.object({
  expires_at: z.number(),
  hosted_voucher_url: z.string().optional().nullable(),
  stores: paymentIntentNextActionKonbiniStoresSchema,
});

export const paymentIntentPaymentMethodOptionsAcssDebitSchema = z.object({
  mandate_options: paymentIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema.optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const paymentIntentPaymentMethodOptionsBlikSchema = z.object({
  mandate_options: paymentIntentPaymentMethodOptionsMandateOptionsBlikSchema.optional(),
});

export const paymentIntentPaymentMethodOptionsCardSchema = z.object({
  capture_method: z.literal("manual").optional(),
  installments: paymentMethodOptionsCardInstallmentsSchema
    .optional()
    .nullable(),
  mandate_options: paymentMethodOptionsCardMandateOptionsSchema
    .optional()
    .nullable(),
  network: z
    .union([
      z.literal("amex"),
      z.literal("cartes_bancaires"),
      z.literal("diners"),
      z.literal("discover"),
      z.literal("eftpos_au"),
      z.literal("interac"),
      z.literal("jcb"),
      z.literal("mastercard"),
      z.literal("unionpay"),
      z.literal("unknown"),
      z.literal("visa"),
    ])
    .optional(),
  request_three_d_secure: z
    .union([
      z.literal("any"),
      z.literal("automatic"),
      z.literal("challenge_only"),
    ])
    .optional(),
  setup_future_usage: z
    .union([
      z.literal("none"),
      z.literal("off_session"),
      z.literal("on_session"),
    ])
    .optional(),
  statement_descriptor_suffix_kana: z.string().optional(),
  statement_descriptor_suffix_kanji: z.string().optional(),
});

export const paymentIntentProcessingSchema = z.object({
  card: paymentIntentCardProcessingSchema.optional(),
  type: z.literal("card"),
});

export const paymentIntentTypeSpecificPaymentMethodOptionsClientSchema = z.object(
  {
    capture_method: z
      .union([z.literal("manual"), z.literal("manual_preferred")])
      .optional(),
    installments: paymentFlowsInstallmentOptionsSchema.optional(),
    setup_future_usage: z
      .union([
        z.literal("none"),
        z.literal("off_session"),
        z.literal("on_session"),
      ])
      .optional(),
    verification_method: z
      .union([
        z.literal("automatic"),
        z.literal("instant"),
        z.literal("microdeposits"),
      ])
      .optional(),
  }
);

export const paymentLinksResourceAfterCompletionSchema = z.object({
  hosted_confirmation: paymentLinksResourceCompletionBehaviorConfirmationPageSchema.optional(),
  redirect: paymentLinksResourceCompletionBehaviorRedirectSchema.optional(),
  type: z.union([z.literal("hosted_confirmation"), z.literal("redirect")]),
});

export const paymentLinksResourceCustomFieldsDropdownSchema = z.object({
  options: z.array(paymentLinksResourceCustomFieldsDropdownOptionSchema),
});

export const paymentLinksResourceCustomTextSchema = z.object({
  shipping_address: paymentLinksResourceCustomTextPositionSchema
    .optional()
    .nullable(),
  submit: paymentLinksResourceCustomTextPositionSchema.optional().nullable(),
});

export const paymentMethodCardPresentSchema = z.object({
  brand: z.string().optional().nullable(),
  cardholder_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  networks: paymentMethodCardPresentNetworksSchema.optional().nullable(),
  read_method: z
    .union([
      z.literal("contact_emv"),
      z.literal("contactless_emv"),
      z.literal("contactless_magstripe_mode"),
      z.literal("magnetic_stripe_fallback"),
      z.literal("magnetic_stripe_track2"),
    ])
    .optional(),
});

export const paymentMethodCardWalletSchema = z.object({
  amex_express_checkout: paymentMethodCardWalletAmexExpressCheckoutSchema.optional(),
  apple_pay: paymentMethodCardWalletApplePaySchema.optional(),
  dynamic_last4: z.string().optional().nullable(),
  google_pay: paymentMethodCardWalletGooglePaySchema.optional(),
  link: paymentMethodCardWalletLinkSchema.optional(),
  masterpass: paymentMethodCardWalletMasterpassSchema.optional(),
  samsung_pay: paymentMethodCardWalletSamsungPaySchema.optional(),
  type: z.union([
    z.literal("amex_express_checkout"),
    z.literal("apple_pay"),
    z.literal("google_pay"),
    z.literal("link"),
    z.literal("masterpass"),
    z.literal("samsung_pay"),
    z.literal("visa_checkout"),
  ]),
  visa_checkout: paymentMethodCardWalletVisaCheckoutSchema.optional(),
});

export const paymentMethodDetailsCardInstallmentsSchema = z.object({
  plan: paymentMethodDetailsCardInstallmentsPlanSchema.optional().nullable(),
});

export const paymentMethodDetailsCardPresentSchema = z.object({
  amount_authorized: z.number().optional().nullable(),
  brand: z.string().optional().nullable(),
  capture_before: z.number().optional(),
  cardholder_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  emv_auth_data: z.string().optional().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  generated_card: z.string().optional().nullable(),
  incremental_authorization_supported: z.boolean(),
  last4: z.string().optional().nullable(),
  network: z.string().optional().nullable(),
  overcapture_supported: z.boolean(),
  read_method: z
    .union([
      z.literal("contact_emv"),
      z.literal("contactless_emv"),
      z.literal("contactless_magstripe_mode"),
      z.literal("magnetic_stripe_fallback"),
      z.literal("magnetic_stripe_track2"),
    ])
    .optional(),
  receipt: paymentMethodDetailsCardPresentReceiptSchema.optional().nullable(),
});

export const paymentMethodDetailsCardWalletSchema = z.object({
  amex_express_checkout: paymentMethodDetailsCardWalletAmexExpressCheckoutSchema.optional(),
  apple_pay: paymentMethodDetailsCardWalletApplePaySchema.optional(),
  dynamic_last4: z.string().optional().nullable(),
  google_pay: paymentMethodDetailsCardWalletGooglePaySchema.optional(),
  link: paymentMethodDetailsCardWalletLinkSchema.optional(),
  masterpass: paymentMethodDetailsCardWalletMasterpassSchema.optional(),
  samsung_pay: paymentMethodDetailsCardWalletSamsungPaySchema.optional(),
  type: z.union([
    z.literal("amex_express_checkout"),
    z.literal("apple_pay"),
    z.literal("google_pay"),
    z.literal("link"),
    z.literal("masterpass"),
    z.literal("samsung_pay"),
    z.literal("visa_checkout"),
  ]),
  visa_checkout: paymentMethodDetailsCardWalletVisaCheckoutSchema.optional(),
});

export const paymentMethodDetailsInteracPresentSchema = z.object({
  brand: z.string().optional().nullable(),
  cardholder_name: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  emv_auth_data: z.string().optional().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  generated_card: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  network: z.string().optional().nullable(),
  preferred_locales: z.array(z.string()).optional().nullable(),
  read_method: z
    .union([
      z.literal("contact_emv"),
      z.literal("contactless_emv"),
      z.literal("contactless_magstripe_mode"),
      z.literal("magnetic_stripe_fallback"),
      z.literal("magnetic_stripe_track2"),
    ])
    .optional(),
  receipt: paymentMethodDetailsInteracPresentReceiptSchema
    .optional()
    .nullable(),
});

export const paymentMethodDetailsKonbiniSchema = z.object({
  store: paymentMethodDetailsKonbiniStoreSchema.optional().nullable(),
});

export const paymentMethodDetailsPaypalSchema = z.object({
  payer_email: z.string().optional().nullable(),
  payer_id: z.string().optional().nullable(),
  payer_name: z.string().optional().nullable(),
  seller_protection: paypalSellerProtectionSchema.optional().nullable(),
  transaction_id: z.string().optional().nullable(),
});

export const paymentMethodOptionsCustomerBalanceBankTransferSchema = z.object({
  eu_bank_transfer: paymentMethodOptionsCustomerBalanceEuBankAccountSchema.optional(),
  requested_address_types: z
    .array(
      z.union([
        z.literal("aba"),
        z.literal("iban"),
        z.literal("sepa"),
        z.literal("sort_code"),
        z.literal("spei"),
        z.literal("swift"),
        z.literal("zengin"),
      ])
    )
    .optional(),
  type: z
    .union([
      z.literal("eu_bank_transfer"),
      z.literal("gb_bank_transfer"),
      z.literal("jp_bank_transfer"),
      z.literal("mx_bank_transfer"),
      z.literal("us_bank_transfer"),
    ])
    .optional(),
});

export const paymentMethodUsBankAccountSchema = z.object({
  account_holder_type: z
    .union([z.literal("company"), z.literal("individual")])
    .optional(),
  account_type: z
    .union([z.literal("checking"), z.literal("savings")])
    .optional(),
  bank_name: z.string().optional().nullable(),
  financial_connections_account: z.string().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  networks: usBankAccountNetworksSchema.optional().nullable(),
  routing_number: z.string().optional().nullable(),
  status_details: paymentMethodUsBankAccountStatusDetailsSchema
    .optional()
    .nullable(),
});

export const paymentPagesCheckoutSessionAfterExpirationSchema = z.object({
  recovery: paymentPagesCheckoutSessionAfterExpirationRecoverySchema
    .optional()
    .nullable(),
});

export const paymentPagesCheckoutSessionCustomFieldsDropdownSchema = z.object({
  options: z.array(paymentPagesCheckoutSessionCustomFieldsOptionSchema),
  value: z.string().optional().nullable(),
});

export const paymentPagesCheckoutSessionCustomTextSchema = z.object({
  shipping_address: paymentPagesCheckoutSessionCustomTextPositionSchema
    .optional()
    .nullable(),
  submit: paymentPagesCheckoutSessionCustomTextPositionSchema
    .optional()
    .nullable(),
});

export const paymentPagesCheckoutSessionCustomerDetailsSchema = z.object({
  address: addressSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  tax_exempt: z
    .union([z.literal("exempt"), z.literal("none"), z.literal("reverse")])
    .optional(),
  tax_ids: z
    .array(paymentPagesCheckoutSessionTaxIdSchema)
    .optional()
    .nullable(),
});

export const portalFlowsFlowSubscriptionUpdateConfirmSchema = z.object({
  discounts: z
    .array(portalFlowsSubscriptionUpdateConfirmDiscountSchema)
    .optional()
    .nullable(),
  items: z.array(portalFlowsSubscriptionUpdateConfirmItemSchema),
  subscription: z.string(),
});

export const portalSubscriptionCancelSchema = z.object({
  cancellation_reason: portalSubscriptionCancellationReasonSchema,
  enabled: z.boolean(),
  mode: z.union([z.literal("at_period_end"), z.literal("immediately")]),
  proration_behavior: z.union([
    z.literal("always_invoice"),
    z.literal("create_prorations"),
    z.literal("none"),
  ]),
});

export const portalSubscriptionUpdateSchema = z.object({
  default_allowed_updates: z.array(
    z.union([
      z.literal("price"),
      z.literal("promotion_code"),
      z.literal("quantity"),
    ])
  ),
  enabled: z.boolean(),
  products: z
    .array(portalSubscriptionUpdateProductSchema)
    .optional()
    .nullable(),
  proration_behavior: z.union([
    z.literal("always_invoice"),
    z.literal("create_prorations"),
    z.literal("none"),
  ]),
});

export const radarValueListSchema = z.object({
  alias: z.string(),
  created: z.number(),
  created_by: z.string(),
  id: z.string(),
  item_type: z.union([
    z.literal("card_bin"),
    z.literal("card_fingerprint"),
    z.literal("case_sensitive_string"),
    z.literal("country"),
    z.literal("customer_id"),
    z.literal("email"),
    z.literal("ip_address"),
    z.literal("sepa_debit_fingerprint"),
    z.literal("string"),
    z.literal("us_bank_account_fingerprint"),
  ]),
  list_items: z.object({
    data: z.array(radarValueListItemSchema),
    has_more: z.boolean(),
    object: z.literal("list"),
    url: z.string(),
  }),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  name: z.string(),
  object: z.literal("radar.value_list"),
});

export const refundNextActionSchema = z.object({
  display_details: refundNextActionDisplayDetailsSchema.optional().nullable(),
  type: z.string(),
});

export const setupAttemptPaymentMethodDetailsCardSchema = z.object({
  brand: z.string().optional().nullable(),
  checks: paymentMethodDetailsCardChecksSchema.optional().nullable(),
  country: z.string().optional().nullable(),
  exp_month: z.number().optional().nullable(),
  exp_year: z.number().optional().nullable(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  last4: z.string().optional().nullable(),
  network: z.string().optional().nullable(),
  three_d_secure: threeDSecureDetailsSchema.optional().nullable(),
  wallet: setupAttemptPaymentMethodDetailsCardWalletSchema
    .optional()
    .nullable(),
});

export const setupIntentNextActionSchema = z.object({
  cashapp_handle_redirect_or_display_qr_code: paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema.optional(),
  redirect_to_url: setupIntentNextActionRedirectToUrlSchema.optional(),
  type: z.string(),
  use_stripe_sdk: z.record(z.any()).optional(),
  verify_with_microdeposits: setupIntentNextActionVerifyWithMicrodepositsSchema.optional(),
});

export const setupIntentPaymentMethodOptionsAcssDebitSchema = z.object({
  currency: z.union([z.literal("cad"), z.literal("usd")]).optional(),
  mandate_options: setupIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema.optional(),
  verification_method: z
    .union([
      z.literal("automatic"),
      z.literal("instant"),
      z.literal("microdeposits"),
    ])
    .optional(),
});

export const setupIntentPaymentMethodOptionsBlikSchema = z.object({
  mandate_options: setupIntentPaymentMethodOptionsMandateOptionsBlikSchema.optional(),
});

export const setupIntentPaymentMethodOptionsCardSchema = z.object({
  mandate_options: setupIntentPaymentMethodOptionsCardMandateOptionsSchema
    .optional()
    .nullable(),
  network: z
    .union([
      z.literal("amex"),
      z.literal("cartes_bancaires"),
      z.literal("diners"),
      z.literal("discover"),
      z.literal("eftpos_au"),
      z.literal("interac"),
      z.literal("jcb"),
      z.literal("mastercard"),
      z.literal("unionpay"),
      z.literal("unknown"),
      z.literal("visa"),
    ])
    .optional(),
  request_three_d_secure: z
    .union([
      z.literal("any"),
      z.literal("automatic"),
      z.literal("challenge_only"),
    ])
    .optional(),
});

export const shippingRateDeliveryEstimateSchema = z.object({
  maximum: shippingRateDeliveryEstimateBoundSchema.optional().nullable(),
  minimum: shippingRateDeliveryEstimateBoundSchema.optional().nullable(),
});

export const sourceOrderSchema = z.object({
  amount: z.number(),
  currency: z.string(),
  email: z.string().optional(),
  items: z.array(sourceOrderItemSchema).optional().nullable(),
  shipping: shippingSchema.optional(),
});

export const sourceTransactionSchema = z.object({
  ach_credit_transfer: sourceTransactionAchCreditTransferDataSchema.optional(),
  amount: z.number(),
  chf_credit_transfer: sourceTransactionChfCreditTransferDataSchema.optional(),
  created: z.number(),
  currency: z.string(),
  gbp_credit_transfer: sourceTransactionGbpCreditTransferDataSchema.optional(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("source_transaction"),
  paper_check: sourceTransactionPaperCheckDataSchema.optional(),
  sepa_credit_transfer: sourceTransactionSepaCreditTransferDataSchema.optional(),
  source: z.string(),
  status: z.string(),
  type: z.union([
    z.literal("ach_credit_transfer"),
    z.literal("ach_debit"),
    z.literal("alipay"),
    z.literal("bancontact"),
    z.literal("card"),
    z.literal("card_present"),
    z.literal("eps"),
    z.literal("giropay"),
    z.literal("ideal"),
    z.literal("klarna"),
    z.literal("multibanco"),
    z.literal("p24"),
    z.literal("sepa_debit"),
    z.literal("sofort"),
    z.literal("three_d_secure"),
    z.literal("wechat"),
  ]),
});

export const taxTransactionLineItemSchema = z.object({
  amount: z.number(),
  amount_tax: z.number(),
  id: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string()).optional().nullable(),
  object: z.literal("tax.transaction_line_item"),
  product: z.string().optional().nullable(),
  quantity: z.number(),
  reference: z.string(),
  reversal: taxProductResourceTaxTransactionLineItemResourceReversalSchema
    .optional()
    .nullable(),
  tax_behavior: z.union([z.literal("exclusive"), z.literal("inclusive")]),
  tax_code: z.string(),
  type: z.union([z.literal("reversal"), z.literal("transaction")]),
});

export const taxProductResourceCustomerDetailsSchema = z.object({
  address: taxProductResourcePostalAddressSchema.optional().nullable(),
  address_source: z
    .union([z.literal("billing"), z.literal("shipping")])
    .optional(),
  ip_address: z.string().optional().nullable(),
  tax_ids: z.array(taxProductResourceCustomerDetailsResourceTaxIdSchema),
  taxability_override: z.union([
    z.literal("customer_exempt"),
    z.literal("none"),
    z.literal("reverse_charge"),
  ]),
});

export const taxProductResourceLineItemTaxBreakdownSchema = z.object({
  amount: z.number(),
  jurisdiction: taxProductResourceJurisdictionSchema,
  sourcing: z.union([z.literal("destination"), z.literal("origin")]),
  tax_rate_details: taxProductResourceLineItemTaxRateDetailsSchema
    .optional()
    .nullable(),
  taxability_reason: z.union([
    z.literal("customer_exempt"),
    z.literal("not_collecting"),
    z.literal("not_subject_to_tax"),
    z.literal("not_supported"),
    z.literal("portion_product_exempt"),
    z.literal("portion_reduced_rated"),
    z.literal("portion_standard_rated"),
    z.literal("product_exempt"),
    z.literal("product_exempt_holiday"),
    z.literal("proportionally_rated"),
    z.literal("reduced_rated"),
    z.literal("reverse_charge"),
    z.literal("standard_rated"),
    z.literal("taxable_basis_reduced"),
    z.literal("zero_rated"),
  ]),
  taxable_amount: z.number(),
});

export const taxProductResourceTaxBreakdownSchema = z.object({
  amount: z.number(),
  inclusive: z.boolean(),
  tax_rate_details: taxProductResourceTaxRateDetailsSchema,
  taxability_reason: z.union([
    z.literal("customer_exempt"),
    z.literal("not_collecting"),
    z.literal("not_subject_to_tax"),
    z.literal("not_supported"),
    z.literal("portion_product_exempt"),
    z.literal("portion_reduced_rated"),
    z.literal("portion_standard_rated"),
    z.literal("product_exempt"),
    z.literal("product_exempt_holiday"),
    z.literal("proportionally_rated"),
    z.literal("reduced_rated"),
    z.literal("reverse_charge"),
    z.literal("standard_rated"),
    z.literal("taxable_basis_reduced"),
    z.literal("zero_rated"),
  ]),
  taxable_amount: z.number(),
});

export const taxProductResourceTaxCalculationShippingCostSchema = z.object({
  amount: z.number(),
  amount_tax: z.number(),
  shipping_rate: z.string().optional(),
  tax_behavior: z.union([z.literal("exclusive"), z.literal("inclusive")]),
  tax_breakdown: z
    .array(taxProductResourceLineItemTaxBreakdownSchema)
    .optional(),
  tax_code: z.string(),
});

export const taxProductResourceTaxSettingsStatusDetailsSchema = z.object({
  active: taxProductResourceTaxSettingsStatusDetailsResourceActiveSchema.optional(),
  pending: taxProductResourceTaxSettingsStatusDetailsResourcePendingSchema.optional(),
});

export const terminalReaderReaderResourceCartSchema = z.object({
  currency: z.string(),
  line_items: z.array(terminalReaderReaderResourceLineItemSchema),
  tax: z.number().optional().nullable(),
  total: z.number(),
});

export const terminalReaderReaderResourceProcessConfigSchema = z.object({
  skip_tipping: z.boolean().optional(),
  tipping: terminalReaderReaderResourceTippingConfigSchema.optional(),
});

export const terminalReaderReaderResourceSetReaderDisplayActionSchema = z.object(
  {
    cart: terminalReaderReaderResourceCartSchema.optional().nullable(),
    type: z.literal("cart"),
  }
);

export const treasuryFinancialAccountsResourceAbaToggleSettingsSchema = z.object(
  {
    requested: z.boolean(),
    status: z.union([
      z.literal("active"),
      z.literal("pending"),
      z.literal("restricted"),
    ]),
    status_details: z.array(
      treasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
    ),
  }
);

export const treasuryFinancialAccountsResourceAchToggleSettingsSchema = z.object(
  {
    requested: z.boolean(),
    status: z.union([
      z.literal("active"),
      z.literal("pending"),
      z.literal("restricted"),
    ]),
    status_details: z.array(
      treasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
    ),
  }
);

export const treasuryFinancialAccountsResourceFinancialAddressesFeaturesSchema = z.object(
  {
    aba: treasuryFinancialAccountsResourceAbaToggleSettingsSchema.optional(),
  }
);

export const treasuryFinancialAccountsResourceInboundTransfersSchema = z.object(
  {
    ach: treasuryFinancialAccountsResourceAchToggleSettingsSchema.optional(),
  }
);

export const treasuryFinancialAccountsResourceToggleSettingsSchema = z.object({
  requested: z.boolean(),
  status: z.union([
    z.literal("active"),
    z.literal("pending"),
    z.literal("restricted"),
  ]),
  status_details: z.array(
    treasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
  ),
});

export const treasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema = z.object(
  {
    balance: z.literal("payments").optional(),
    billing_details: treasurySharedResourceBillingDetailsSchema,
    financial_account: receivedPaymentMethodDetailsFinancialAccountSchema.optional(),
    issuing_card: z.string().optional(),
    type: z.union([
      z.literal("balance"),
      z.literal("financial_account"),
      z.literal("issuing_card"),
      z.literal("stripe"),
      z.literal("us_bank_account"),
    ]),
    us_bank_account: treasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccountSchema.optional(),
  }
);

export const balanceSchema = z.object({
  available: z.array(balanceAmountSchema),
  connect_reserved: z.array(balanceAmountSchema).optional(),
  instant_available: z.array(balanceAmountSchema).optional(),
  issuing: balanceDetailSchema.optional(),
  livemode: z.boolean(),
  object: z.literal("balance"),
  pending: z.array(balanceAmountSchema),
});

export const cardGeneratedFromPaymentMethodDetailsSchema = z.object({
  card_present: paymentMethodDetailsCardPresentSchema.optional(),
  type: z.string(),
});

export const checkoutSessionPaymentMethodOptionsSchema = z.object({
  acss_debit: checkoutAcssDebitPaymentMethodOptionsSchema.optional(),
  affirm: checkoutAffirmPaymentMethodOptionsSchema.optional(),
  afterpay_clearpay: checkoutAfterpayClearpayPaymentMethodOptionsSchema.optional(),
  alipay: checkoutAlipayPaymentMethodOptionsSchema.optional(),
  au_becs_debit: checkoutAuBecsDebitPaymentMethodOptionsSchema.optional(),
  bacs_debit: checkoutBacsDebitPaymentMethodOptionsSchema.optional(),
  bancontact: checkoutBancontactPaymentMethodOptionsSchema.optional(),
  boleto: checkoutBoletoPaymentMethodOptionsSchema.optional(),
  card: checkoutCardPaymentMethodOptionsSchema.optional(),
  cashapp: checkoutCashappPaymentMethodOptionsSchema.optional(),
  customer_balance: checkoutCustomerBalancePaymentMethodOptionsSchema.optional(),
  eps: checkoutEpsPaymentMethodOptionsSchema.optional(),
  fpx: checkoutFpxPaymentMethodOptionsSchema.optional(),
  giropay: checkoutGiropayPaymentMethodOptionsSchema.optional(),
  grabpay: checkoutGrabPayPaymentMethodOptionsSchema.optional(),
  ideal: checkoutIdealPaymentMethodOptionsSchema.optional(),
  klarna: checkoutKlarnaPaymentMethodOptionsSchema.optional(),
  konbini: checkoutKonbiniPaymentMethodOptionsSchema.optional(),
  link: checkoutLinkPaymentMethodOptionsSchema.optional(),
  oxxo: checkoutOxxoPaymentMethodOptionsSchema.optional(),
  p24: checkoutP24PaymentMethodOptionsSchema.optional(),
  paynow: checkoutPaynowPaymentMethodOptionsSchema.optional(),
  pix: checkoutPixPaymentMethodOptionsSchema.optional(),
  sepa_debit: checkoutSepaDebitPaymentMethodOptionsSchema.optional(),
  sofort: checkoutSofortPaymentMethodOptionsSchema.optional(),
  us_bank_account: checkoutUsBankAccountPaymentMethodOptionsSchema.optional(),
});

export const customerBalanceResourceCashBalanceTransactionResourceFundedTransactionSchema = z.object(
  {
    bank_transfer: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferSchema,
  }
);

export const fundingInstructionsBankTransferSchema = z.object({
  country: z.string(),
  financial_addresses: z.array(
    fundingInstructionsBankTransferFinancialAddressSchema
  ),
  type: z.union([z.literal("eu_bank_transfer"), z.literal("jp_bank_transfer")]),
});

export const invoicePaymentMethodOptionsCustomerBalanceSchema = z.object({
  bank_transfer: invoicePaymentMethodOptionsCustomerBalanceBankTransferSchema.optional(),
  funding_type: z.literal("bank_transfer").optional(),
});

export const invoicesPaymentMethodOptionsSchema = z.object({
  acss_debit: invoicePaymentMethodOptionsAcssDebitSchema.optional().nullable(),
  bancontact: invoicePaymentMethodOptionsBancontactSchema.optional().nullable(),
  card: invoicePaymentMethodOptionsCardSchema.optional().nullable(),
  customer_balance: invoicePaymentMethodOptionsCustomerBalanceSchema
    .optional()
    .nullable(),
  konbini: invoicePaymentMethodOptionsKonbiniSchema.optional().nullable(),
  us_bank_account: invoicePaymentMethodOptionsUsBankAccountSchema
    .optional()
    .nullable(),
});

export const invoicesPaymentSettingsSchema = z.object({
  default_mandate: z.string().optional().nullable(),
  payment_method_options: invoicesPaymentMethodOptionsSchema
    .optional()
    .nullable(),
  payment_method_types: z
    .array(
      z.union([
        z.literal("ach_credit_transfer"),
        z.literal("ach_debit"),
        z.literal("acss_debit"),
        z.literal("au_becs_debit"),
        z.literal("bacs_debit"),
        z.literal("bancontact"),
        z.literal("boleto"),
        z.literal("card"),
        z.literal("cashapp"),
        z.literal("customer_balance"),
        z.literal("fpx"),
        z.literal("giropay"),
        z.literal("grabpay"),
        z.literal("ideal"),
        z.literal("konbini"),
        z.literal("link"),
        z.literal("paynow"),
        z.literal("paypal"),
        z.literal("promptpay"),
        z.literal("sepa_debit"),
        z.literal("sofort"),
        z.literal("us_bank_account"),
        z.literal("wechat_pay"),
      ])
    )
    .optional()
    .nullable(),
});

export const paymentIntentNextActionSchema = z.object({
  alipay_handle_redirect: paymentIntentNextActionAlipayHandleRedirectSchema.optional(),
  boleto_display_details: paymentIntentNextActionBoletoSchema.optional(),
  card_await_notification: paymentIntentNextActionCardAwaitNotificationSchema.optional(),
  cashapp_handle_redirect_or_display_qr_code: paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema.optional(),
  display_bank_transfer_instructions: paymentIntentNextActionDisplayBankTransferInstructionsSchema.optional(),
  konbini_display_details: paymentIntentNextActionKonbiniSchema.optional(),
  oxxo_display_details: paymentIntentNextActionDisplayOxxoDetailsSchema.optional(),
  paynow_display_qr_code: paymentIntentNextActionPaynowDisplayQrCodeSchema.optional(),
  pix_display_qr_code: paymentIntentNextActionPixDisplayQrCodeSchema.optional(),
  promptpay_display_qr_code: paymentIntentNextActionPromptpayDisplayQrCodeSchema.optional(),
  redirect_to_url: paymentIntentNextActionRedirectToUrlSchema.optional(),
  type: z.string(),
  use_stripe_sdk: z.record(z.any()).optional(),
  verify_with_microdeposits: paymentIntentNextActionVerifyWithMicrodepositsSchema.optional(),
  wechat_pay_display_qr_code: paymentIntentNextActionWechatPayDisplayQrCodeSchema.optional(),
  wechat_pay_redirect_to_android_app: paymentIntentNextActionWechatPayRedirectToAndroidAppSchema.optional(),
  wechat_pay_redirect_to_ios_app: paymentIntentNextActionWechatPayRedirectToIosAppSchema.optional(),
});

export const paymentLinksResourceCustomFieldsSchema = z.object({
  dropdown: paymentLinksResourceCustomFieldsDropdownSchema
    .optional()
    .nullable(),
  key: z.string(),
  label: paymentLinksResourceCustomFieldsLabelSchema,
  numeric: paymentLinksResourceCustomFieldsNumericSchema.optional().nullable(),
  optional: z.boolean(),
  text: paymentLinksResourceCustomFieldsTextSchema.optional().nullable(),
  type: z.union([
    z.literal("dropdown"),
    z.literal("numeric"),
    z.literal("text"),
  ]),
});

export const paymentMethodDetailsCardSchema = z.object({
  brand: z.string().optional().nullable(),
  checks: paymentMethodDetailsCardChecksSchema.optional().nullable(),
  country: z.string().optional().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().optional().nullable(),
  funding: z.string().optional().nullable(),
  installments: paymentMethodDetailsCardInstallmentsSchema
    .optional()
    .nullable(),
  last4: z.string().optional().nullable(),
  mandate: z.string().optional().nullable(),
  network: z.string().optional().nullable(),
  network_token: paymentMethodDetailsCardNetworkTokenSchema
    .optional()
    .nullable(),
  three_d_secure: threeDSecureDetailsChargeSchema.optional().nullable(),
  wallet: paymentMethodDetailsCardWalletSchema.optional().nullable(),
});

export const paymentMethodOptionsCustomerBalanceSchema = z.object({
  bank_transfer: paymentMethodOptionsCustomerBalanceBankTransferSchema.optional(),
  funding_type: z.literal("bank_transfer").optional(),
  setup_future_usage: z.literal("none").optional(),
});

export const paymentPagesCheckoutSessionCustomFieldsSchema = z.object({
  dropdown: paymentPagesCheckoutSessionCustomFieldsDropdownSchema
    .optional()
    .nullable(),
  key: z.string(),
  label: paymentPagesCheckoutSessionCustomFieldsLabelSchema,
  numeric: paymentPagesCheckoutSessionCustomFieldsNumericSchema
    .optional()
    .nullable(),
  optional: z.boolean(),
  text: paymentPagesCheckoutSessionCustomFieldsTextSchema.optional().nullable(),
  type: z.union([
    z.literal("dropdown"),
    z.literal("numeric"),
    z.literal("text"),
  ]),
});

export const portalFeaturesSchema = z.object({
  customer_update: portalCustomerUpdateSchema,
  invoice_history: portalInvoiceListSchema,
  payment_method_update: portalPaymentMethodUpdateSchema,
  subscription_cancel: portalSubscriptionCancelSchema,
  subscription_pause: portalSubscriptionPauseSchema,
  subscription_update: portalSubscriptionUpdateSchema,
});

export const portalFlowsFlowSchema = z.object({
  after_completion: portalFlowsFlowAfterCompletionSchema,
  subscription_cancel: portalFlowsFlowSubscriptionCancelSchema
    .optional()
    .nullable(),
  subscription_update: portalFlowsFlowSubscriptionUpdateSchema
    .optional()
    .nullable(),
  subscription_update_confirm: portalFlowsFlowSubscriptionUpdateConfirmSchema
    .optional()
    .nullable(),
  type: z.union([
    z.literal("payment_method_update"),
    z.literal("subscription_cancel"),
    z.literal("subscription_update"),
    z.literal("subscription_update_confirm"),
  ]),
});

export const setupIntentPaymentMethodOptionsSchema = z.object({
  acss_debit: z
    .union([
      setupIntentPaymentMethodOptionsAcssDebitSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  blik: z
    .union([
      setupIntentPaymentMethodOptionsBlikSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  card: setupIntentPaymentMethodOptionsCardSchema.optional(),
  link: z
    .union([
      setupIntentPaymentMethodOptionsLinkSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  paypal: z
    .union([
      setupIntentPaymentMethodOptionsPaypalSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  sepa_debit: z
    .union([
      setupIntentPaymentMethodOptionsSepaDebitSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  us_bank_account: z
    .union([
      setupIntentPaymentMethodOptionsUsBankAccountSchema,
      setupIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
});

export const shippingRateSchema = z.object({
  active: z.boolean(),
  created: z.number(),
  delivery_estimate: shippingRateDeliveryEstimateSchema.optional().nullable(),
  display_name: z.string().optional().nullable(),
  fixed_amount: shippingRateFixedAmountSchema.optional(),
  id: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string()),
  object: z.literal("shipping_rate"),
  tax_behavior: z
    .union([
      z.literal("exclusive"),
      z.literal("inclusive"),
      z.literal("unspecified"),
    ])
    .optional(),
  tax_code: z.union([z.string(), taxCodeSchema]).optional().nullable(),
  type: z.literal("fixed_amount"),
});

export const sourceSchema = z.object({
  ach_credit_transfer: sourceTypeAchCreditTransferSchema.optional(),
  ach_debit: sourceTypeAchDebitSchema.optional(),
  acss_debit: sourceTypeAcssDebitSchema.optional(),
  alipay: sourceTypeAlipaySchema.optional(),
  amount: z.number().optional().nullable(),
  au_becs_debit: sourceTypeAuBecsDebitSchema.optional(),
  bancontact: sourceTypeBancontactSchema.optional(),
  card: sourceTypeCardSchema.optional(),
  card_present: sourceTypeCardPresentSchema.optional(),
  client_secret: z.string(),
  code_verification: sourceCodeVerificationFlowSchema.optional(),
  created: z.number(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional(),
  eps: sourceTypeEpsSchema.optional(),
  flow: z.string(),
  giropay: sourceTypeGiropaySchema.optional(),
  id: z.string(),
  ideal: sourceTypeIdealSchema.optional(),
  klarna: sourceTypeKlarnaSchema.optional(),
  livemode: z.boolean(),
  metadata: z.record(z.string()).optional().nullable(),
  multibanco: sourceTypeMultibancoSchema.optional(),
  object: z.literal("source"),
  owner: sourceOwnerSchema.optional().nullable(),
  p24: sourceTypeP24Schema.optional(),
  receiver: sourceReceiverFlowSchema.optional(),
  redirect: sourceRedirectFlowSchema.optional(),
  sepa_debit: sourceTypeSepaDebitSchema.optional(),
  sofort: sourceTypeSofortSchema.optional(),
  source_order: sourceOrderSchema.optional(),
  statement_descriptor: z.string().optional().nullable(),
  status: z.string(),
  three_d_secure: sourceTypeThreeDSecureSchema.optional(),
  type: z.union([
    z.literal("ach_credit_transfer"),
    z.literal("ach_debit"),
    z.literal("acss_debit"),
    z.literal("alipay"),
    z.literal("au_becs_debit"),
    z.literal("bancontact"),
    z.literal("card"),
    z.literal("card_present"),
    z.literal("eps"),
    z.literal("giropay"),
    z.literal("ideal"),
    z.literal("klarna"),
    z.literal("multibanco"),
    z.literal("p24"),
    z.literal("sepa_debit"),
    z.literal("sofort"),
    z.literal("three_d_secure"),
    z.literal("wechat"),
  ]),
  usage: z.string().optional().nullable(),
  wechat: sourceTypeWechatSchema.optional(),
});

export const sourceMandateNotificationSchema = z.object({
  acss_debit: sourceMandateNotificationAcssDebitDataSchema.optional(),
  amount: z.number().optional().nullable(),
  bacs_debit: sourceMandateNotificationBacsDebitDataSchema.optional(),
  created: z.number(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("source_mandate_notification"),
  reason: z.string(),
  sepa_debit: sourceMandateNotificationSepaDebitDataSchema.optional(),
  source: sourceSchema,
  status: z.string(),
  type: z.string(),
});

export const subscriptionsResourcePaymentMethodOptionsSchema = z.object({
  acss_debit: invoicePaymentMethodOptionsAcssDebitSchema.optional().nullable(),
  bancontact: invoicePaymentMethodOptionsBancontactSchema.optional().nullable(),
  card: subscriptionPaymentMethodOptionsCardSchema.optional().nullable(),
  customer_balance: invoicePaymentMethodOptionsCustomerBalanceSchema
    .optional()
    .nullable(),
  konbini: invoicePaymentMethodOptionsKonbiniSchema.optional().nullable(),
  us_bank_account: invoicePaymentMethodOptionsUsBankAccountSchema
    .optional()
    .nullable(),
});

export const subscriptionsResourcePaymentSettingsSchema = z.object({
  payment_method_options: subscriptionsResourcePaymentMethodOptionsSchema
    .optional()
    .nullable(),
  payment_method_types: z
    .array(
      z.union([
        z.literal("ach_credit_transfer"),
        z.literal("ach_debit"),
        z.literal("acss_debit"),
        z.literal("au_becs_debit"),
        z.literal("bacs_debit"),
        z.literal("bancontact"),
        z.literal("boleto"),
        z.literal("card"),
        z.literal("cashapp"),
        z.literal("customer_balance"),
        z.literal("fpx"),
        z.literal("giropay"),
        z.literal("grabpay"),
        z.literal("ideal"),
        z.literal("konbini"),
        z.literal("link"),
        z.literal("paynow"),
        z.literal("paypal"),
        z.literal("promptpay"),
        z.literal("sepa_debit"),
        z.literal("sofort"),
        z.literal("us_bank_account"),
        z.literal("wechat_pay"),
      ])
    )
    .optional()
    .nullable(),
  save_default_payment_method: z
    .union([z.literal("off"), z.literal("on_subscription")])
    .optional(),
});

export const taxCalculationLineItemSchema = z.object({
  amount: z.number(),
  amount_tax: z.number(),
  id: z.string(),
  livemode: z.boolean(),
  object: z.literal("tax.calculation_line_item"),
  product: z.string().optional().nullable(),
  quantity: z.number(),
  reference: z.string().optional().nullable(),
  tax_behavior: z.union([z.literal("exclusive"), z.literal("inclusive")]),
  tax_breakdown: z
    .array(taxProductResourceLineItemTaxBreakdownSchema)
    .optional()
    .nullable(),
  tax_code: z.string(),
});

export const taxSettingsSchema = z.object({
  defaults: taxProductResourceTaxSettingsDefaultsSchema,
  head_office: taxProductResourceTaxSettingsHeadOfficeSchema
    .optional()
    .nullable(),
  livemode: z.boolean(),
  object: z.literal("tax.settings"),
  status: z.union([z.literal("active"), z.literal("pending")]),
  status_details: taxProductResourceTaxSettingsStatusDetailsSchema,
});

export const taxTransactionSchema = z.object({
  created: z.number(),
  currency: z.string(),
  customer: z.string().optional().nullable(),
  customer_details: taxProductResourceCustomerDetailsSchema,
  id: z.string(),
  line_items: z
    .object({
      data: z.array(taxTransactionLineItemSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    })
    .optional()
    .nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string()).optional().nullable(),
  object: z.literal("tax.transaction"),
  reference: z.string(),
  reversal: taxProductResourceTaxTransactionResourceReversalSchema
    .optional()
    .nullable(),
  shipping_cost: taxProductResourceTaxTransactionShippingCostSchema
    .optional()
    .nullable(),
  tax_date: z.number(),
  type: z.union([z.literal("reversal"), z.literal("transaction")]),
});

export const treasuryFinancialAccountsResourceOutboundPaymentsSchema = z.object(
  {
    ach: treasuryFinancialAccountsResourceAchToggleSettingsSchema.optional(),
    us_domestic_wire: treasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
  }
);

export const treasuryFinancialAccountsResourceOutboundTransfersSchema = z.object(
  {
    ach: treasuryFinancialAccountsResourceAchToggleSettingsSchema.optional(),
    us_domestic_wire: treasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
  }
);

export const billingPortalConfigurationSchema = z.object({
  active: z.boolean(),
  application: z
    .union([z.string(), applicationSchema, deletedApplicationSchema])
    .optional()
    .nullable(),
  business_profile: portalBusinessProfileSchema,
  created: z.number(),
  default_return_url: z.string().optional().nullable(),
  features: portalFeaturesSchema,
  id: z.string(),
  is_default: z.boolean(),
  livemode: z.boolean(),
  login_page: portalLoginPageSchema,
  metadata: z.record(z.string()).optional().nullable(),
  object: z.literal("billing_portal.configuration"),
  updated: z.number(),
});

export const billingPortalSessionSchema = z.object({
  configuration: z.union([z.string(), billingPortalConfigurationSchema]),
  created: z.number(),
  customer: z.string(),
  flow: portalFlowsFlowSchema.optional().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  locale: z
    .union([
      z.literal("auto"),
      z.literal("bg"),
      z.literal("cs"),
      z.literal("da"),
      z.literal("de"),
      z.literal("el"),
      z.literal("en"),
      z.literal("en-AU"),
      z.literal("en-CA"),
      z.literal("en-GB"),
      z.literal("en-IE"),
      z.literal("en-IN"),
      z.literal("en-NZ"),
      z.literal("en-SG"),
      z.literal("es"),
      z.literal("es-419"),
      z.literal("et"),
      z.literal("fi"),
      z.literal("fil"),
      z.literal("fr"),
      z.literal("fr-CA"),
      z.literal("hr"),
      z.literal("hu"),
      z.literal("id"),
      z.literal("it"),
      z.literal("ja"),
      z.literal("ko"),
      z.literal("lt"),
      z.literal("lv"),
      z.literal("ms"),
      z.literal("mt"),
      z.literal("nb"),
      z.literal("nl"),
      z.literal("pl"),
      z.literal("pt"),
      z.literal("pt-BR"),
      z.literal("ro"),
      z.literal("ru"),
      z.literal("sk"),
      z.literal("sl"),
      z.literal("sv"),
      z.literal("th"),
      z.literal("tr"),
      z.literal("vi"),
      z.literal("zh"),
      z.literal("zh-HK"),
      z.literal("zh-TW"),
    ])
    .optional(),
  object: z.literal("billing_portal.session"),
  on_behalf_of: z.string().optional().nullable(),
  return_url: z.string().optional().nullable(),
  url: z.string(),
});

export const fundingInstructionsSchema = z.object({
  bank_transfer: fundingInstructionsBankTransferSchema,
  currency: z.string(),
  funding_type: z.literal("bank_transfer"),
  livemode: z.boolean(),
  object: z.literal("funding_instructions"),
});

export const invoicesShippingCostSchema = z.object({
  amount_subtotal: z.number(),
  amount_tax: z.number(),
  amount_total: z.number(),
  shipping_rate: z
    .union([z.string(), shippingRateSchema])
    .optional()
    .nullable(),
  taxes: z.array(lineItemsTaxAmountSchema).optional(),
});

export const paymentIntentPaymentMethodOptionsSchema = z.object({
  acss_debit: z
    .union([
      paymentIntentPaymentMethodOptionsAcssDebitSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  affirm: z
    .union([
      paymentMethodOptionsAffirmSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  afterpay_clearpay: z
    .union([
      paymentMethodOptionsAfterpayClearpaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  alipay: z
    .union([
      paymentMethodOptionsAlipaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  au_becs_debit: z
    .union([
      paymentIntentPaymentMethodOptionsAuBecsDebitSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  bacs_debit: z
    .union([
      paymentMethodOptionsBacsDebitSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  bancontact: z
    .union([
      paymentMethodOptionsBancontactSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  blik: z
    .union([
      paymentIntentPaymentMethodOptionsBlikSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  boleto: z
    .union([
      paymentMethodOptionsBoletoSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  card: z
    .union([
      paymentIntentPaymentMethodOptionsCardSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  card_present: z
    .union([
      paymentMethodOptionsCardPresentSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  cashapp: z
    .union([
      paymentMethodOptionsCashappSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  customer_balance: z
    .union([
      paymentMethodOptionsCustomerBalanceSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  eps: z
    .union([
      paymentIntentPaymentMethodOptionsEpsSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  fpx: z
    .union([
      paymentMethodOptionsFpxSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  giropay: z
    .union([
      paymentMethodOptionsGiropaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  grabpay: z
    .union([
      paymentMethodOptionsGrabpaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  ideal: z
    .union([
      paymentMethodOptionsIdealSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  interac_present: z
    .union([
      paymentMethodOptionsInteracPresentSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  klarna: z
    .union([
      paymentMethodOptionsKlarnaSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  konbini: z
    .union([
      paymentMethodOptionsKonbiniSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  link: z
    .union([
      paymentIntentPaymentMethodOptionsLinkSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  oxxo: z
    .union([
      paymentMethodOptionsOxxoSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  p24: z
    .union([
      paymentMethodOptionsP24Schema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  paynow: z
    .union([
      paymentMethodOptionsPaynowSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  paypal: z
    .union([
      paymentMethodOptionsPaypalSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  pix: z
    .union([
      paymentMethodOptionsPixSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  promptpay: z
    .union([
      paymentMethodOptionsPromptpaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  sepa_debit: z
    .union([
      paymentIntentPaymentMethodOptionsSepaDebitSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  sofort: z
    .union([
      paymentMethodOptionsSofortSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  us_bank_account: z
    .union([
      paymentIntentPaymentMethodOptionsUsBankAccountSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  wechat_pay: z
    .union([
      paymentMethodOptionsWechatPaySchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
  zip: z
    .union([
      paymentMethodOptionsZipSchema,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSchema,
    ])
    .optional(),
});

export const paymentLinksResourceShippingOptionSchema = z.object({
  shipping_amount: z.number(),
  shipping_rate: z.union([z.string(), shippingRateSchema]),
});

export const paymentPagesCheckoutSessionShippingCostSchema = z.object({
  amount_subtotal: z.number(),
  amount_tax: z.number(),
  amount_total: z.number(),
  shipping_rate: z
    .union([z.string(), shippingRateSchema])
    .optional()
    .nullable(),
  taxes: z.array(lineItemsTaxAmountSchema).optional(),
});

export const paymentPagesCheckoutSessionShippingOptionSchema = z.object({
  shipping_amount: z.number(),
  shipping_rate: z.union([z.string(), shippingRateSchema]),
});

export const taxCalculationSchema = z.object({
  amount_total: z.number(),
  currency: z.string(),
  customer: z.string().optional().nullable(),
  customer_details: taxProductResourceCustomerDetailsSchema,
  expires_at: z.number().optional().nullable(),
  id: z.string().optional().nullable(),
  line_items: z
    .object({
      data: z.array(taxCalculationLineItemSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    })
    .optional()
    .nullable(),
  livemode: z.boolean(),
  object: z.literal("tax.calculation"),
  shipping_cost: taxProductResourceTaxCalculationShippingCostSchema
    .optional()
    .nullable(),
  tax_amount_exclusive: z.number(),
  tax_amount_inclusive: z.number(),
  tax_breakdown: z.array(taxProductResourceTaxBreakdownSchema),
  tax_date: z.number(),
});

export const treasuryFinancialAccountFeaturesSchema = z.object({
  card_issuing: treasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
  deposit_insurance: treasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
  financial_addresses: treasuryFinancialAccountsResourceFinancialAddressesFeaturesSchema.optional(),
  inbound_transfers: treasuryFinancialAccountsResourceInboundTransfersSchema.optional(),
  intra_stripe_flows: treasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
  object: z.literal("treasury.financial_account_features"),
  outbound_payments: treasuryFinancialAccountsResourceOutboundPaymentsSchema.optional(),
  outbound_transfers: treasuryFinancialAccountsResourceOutboundTransfersSchema.optional(),
});

export const treasuryFinancialAccountSchema = z.object({
  active_features: z
    .array(
      z.union([
        z.literal("card_issuing"),
        z.literal("deposit_insurance"),
        z.literal("financial_addresses.aba"),
        z.literal("inbound_transfers.ach"),
        z.literal("intra_stripe_flows"),
        z.literal("outbound_payments.ach"),
        z.literal("outbound_payments.us_domestic_wire"),
        z.literal("outbound_transfers.ach"),
        z.literal("outbound_transfers.us_domestic_wire"),
        z.literal("remote_deposit_capture"),
      ])
    )
    .optional(),
  balance: treasuryFinancialAccountsResourceBalanceSchema,
  country: z.string(),
  created: z.number(),
  features: treasuryFinancialAccountFeaturesSchema.optional(),
  financial_addresses: z.array(
    treasuryFinancialAccountsResourceFinancialAddressSchema
  ),
  id: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string()).optional().nullable(),
  object: z.literal("treasury.financial_account"),
  pending_features: z
    .array(
      z.union([
        z.literal("card_issuing"),
        z.literal("deposit_insurance"),
        z.literal("financial_addresses.aba"),
        z.literal("inbound_transfers.ach"),
        z.literal("intra_stripe_flows"),
        z.literal("outbound_payments.ach"),
        z.literal("outbound_payments.us_domestic_wire"),
        z.literal("outbound_transfers.ach"),
        z.literal("outbound_transfers.us_domestic_wire"),
        z.literal("remote_deposit_capture"),
      ])
    )
    .optional(),
  platform_restrictions: treasuryFinancialAccountsResourcePlatformRestrictionsSchema
    .optional()
    .nullable(),
  restricted_features: z
    .array(
      z.union([
        z.literal("card_issuing"),
        z.literal("deposit_insurance"),
        z.literal("financial_addresses.aba"),
        z.literal("inbound_transfers.ach"),
        z.literal("intra_stripe_flows"),
        z.literal("outbound_payments.ach"),
        z.literal("outbound_payments.us_domestic_wire"),
        z.literal("outbound_transfers.ach"),
        z.literal("outbound_transfers.us_domestic_wire"),
        z.literal("remote_deposit_capture"),
      ])
    )
    .optional(),
  status: z.union([z.literal("closed"), z.literal("open")]),
  status_details: treasuryFinancialAccountsResourceStatusDetailsSchema,
  supported_currencies: z.array(z.string()),
});

export const accountSchema: z.ZodSchema<Account> = z.lazy(() =>
  z.object({
    business_profile: accountBusinessProfileSchema.optional().nullable(),
    business_type: z
      .union([
        z.literal("company"),
        z.literal("government_entity"),
        z.literal("individual"),
        z.literal("non_profit"),
      ])
      .optional(),
    capabilities: accountCapabilitiesSchema.optional(),
    charges_enabled: z.boolean().optional(),
    company: legalEntityCompanySchema.optional(),
    controller: accountUnificationAccountControllerSchema.optional(),
    country: z.string().optional(),
    created: z.number().optional(),
    default_currency: z.string().optional(),
    details_submitted: z.boolean().optional(),
    email: z.string().optional().nullable(),
    external_accounts: z
      .object({
        data: z.array(z.union([bankAccountSchema, cardSchema])),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    future_requirements: accountFutureRequirementsSchema.optional(),
    id: z.string(),
    individual: personSchema.optional(),
    metadata: z.record(z.string()).optional(),
    object: z.literal("account"),
    payouts_enabled: z.boolean().optional(),
    requirements: accountRequirementsSchema.optional(),
    settings: accountSettingsSchema.optional().nullable(),
    tos_acceptance: accountTosAcceptanceSchema.optional(),
    type: z
      .union([z.literal("custom"), z.literal("express"), z.literal("standard")])
      .optional(),
  })
);

export const accountBrandingSettingsSchema: z.ZodSchema<AccountBrandingSettings> = z.lazy(
  () =>
    z.object({
      icon: z.union([z.string(), fileSchema]).optional().nullable(),
      logo: z.union([z.string(), fileSchema]).optional().nullable(),
      primary_color: z.string().optional().nullable(),
      secondary_color: z.string().optional().nullable(),
    })
);

export const accountSettingsSchema: z.ZodSchema<AccountSettings> = z.lazy(() =>
  z.object({
    bacs_debit_payments: accountBacsDebitPaymentsSettingsSchema.optional(),
    branding: accountBrandingSettingsSchema,
    card_issuing: accountCardIssuingSettingsSchema.optional(),
    card_payments: accountCardPaymentsSettingsSchema,
    dashboard: accountDashboardSettingsSchema,
    payments: accountPaymentsSettingsSchema,
    payouts: accountPayoutSettingsSchema.optional(),
    sepa_debit_payments: accountSepaDebitPaymentsSettingsSchema.optional(),
    treasury: accountTreasurySettingsSchema.optional(),
  })
);

export const apiErrorsSchema: z.ZodSchema<ApiErrors> = z.lazy(() =>
  z.object({
    charge: z.string().optional(),
    code: z.string().optional(),
    decline_code: z.string().optional(),
    doc_url: z.string().optional(),
    message: z.string().optional(),
    param: z.string().optional(),
    payment_intent: paymentIntentSchema.optional(),
    payment_method: paymentMethodSchema.optional(),
    payment_method_type: z.string().optional(),
    request_log_url: z.string().optional(),
    setup_intent: setupIntentSchema.optional(),
    source: z.union([bankAccountSchema, cardSchema, sourceSchema]).optional(),
    type: z.union([
      z.literal("api_error"),
      z.literal("card_error"),
      z.literal("idempotency_error"),
      z.literal("invalid_request_error"),
    ]),
  })
);

export const applicationFeeSchema: z.ZodSchema<ApplicationFee> = z.lazy(() =>
  z.object({
    account: z.union([z.string(), accountSchema]),
    amount: z.number(),
    amount_refunded: z.number(),
    application: z.union([z.string(), applicationSchema]),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    charge: z.union([z.string(), chargeSchema]),
    created: z.number(),
    currency: z.string(),
    id: z.string(),
    livemode: z.boolean(),
    object: z.literal("application_fee"),
    originating_transaction: z
      .union([z.string(), chargeSchema])
      .optional()
      .nullable(),
    refunded: z.boolean(),
    refunds: z.object({
      data: z.array(feeRefundSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    }),
  })
);

export const balanceTransactionSchema: z.ZodSchema<BalanceTransaction> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      available_on: z.number(),
      created: z.number(),
      currency: z.string(),
      description: z.string().optional().nullable(),
      exchange_rate: z.number().optional().nullable(),
      fee: z.number(),
      fee_details: z.array(feeSchema),
      id: z.string(),
      net: z.number(),
      object: z.literal("balance_transaction"),
      reporting_category: z.string(),
      source: z
        .union([
          z.string(),
          applicationFeeSchema,
          chargeSchema,
          connectCollectionTransferSchema,
          disputeSchema,
          feeRefundSchema,
          issuingAuthorizationSchema,
          issuingDisputeSchema,
          issuingTransactionSchema,
          payoutSchema,
          platformTaxFeeSchema,
          refundSchema,
          reserveTransactionSchema,
          taxDeductedAtSourceSchema,
          topupSchema,
          transferSchema,
          transferReversalSchema,
        ])
        .optional()
        .nullable(),
      status: z.string(),
      type: z.union([
        z.literal("adjustment"),
        z.literal("advance"),
        z.literal("advance_funding"),
        z.literal("anticipation_repayment"),
        z.literal("application_fee"),
        z.literal("application_fee_refund"),
        z.literal("charge"),
        z.literal("connect_collection_transfer"),
        z.literal("contribution"),
        z.literal("issuing_authorization_hold"),
        z.literal("issuing_authorization_release"),
        z.literal("issuing_dispute"),
        z.literal("issuing_transaction"),
        z.literal("payment"),
        z.literal("payment_failure_refund"),
        z.literal("payment_refund"),
        z.literal("payment_reversal"),
        z.literal("payout"),
        z.literal("payout_cancel"),
        z.literal("payout_failure"),
        z.literal("refund"),
        z.literal("refund_failure"),
        z.literal("reserve_transaction"),
        z.literal("reserved_funds"),
        z.literal("stripe_fee"),
        z.literal("stripe_fx_fee"),
        z.literal("tax_fee"),
        z.literal("topup"),
        z.literal("topup_reversal"),
        z.literal("transfer"),
        z.literal("transfer_cancel"),
        z.literal("transfer_failure"),
        z.literal("transfer_refund"),
      ]),
    })
);

export const bankAccountSchema: z.ZodSchema<BankAccount> = z.lazy(() =>
  z.object({
    account: z.union([z.string(), accountSchema]).optional().nullable(),
    account_holder_name: z.string().optional().nullable(),
    account_holder_type: z.string().optional().nullable(),
    account_type: z.string().optional().nullable(),
    available_payout_methods: z
      .array(z.union([z.literal("instant"), z.literal("standard")]))
      .optional()
      .nullable(),
    bank_name: z.string().optional().nullable(),
    country: z.string(),
    currency: z.string(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    default_for_currency: z.boolean().optional().nullable(),
    fingerprint: z.string().optional().nullable(),
    future_requirements: externalAccountRequirementsSchema
      .optional()
      .nullable(),
    id: z.string(),
    last4: z.string(),
    metadata: z.record(z.string()).optional().nullable(),
    object: z.literal("bank_account"),
    requirements: externalAccountRequirementsSchema.optional().nullable(),
    routing_number: z.string().optional().nullable(),
    status: z.string(),
  })
);

export const bankConnectionsResourceAccountholderSchema: z.ZodSchema<BankConnectionsResourceAccountholder> = z.lazy(
  () =>
    z.object({
      account: z.union([z.string(), accountSchema]).optional(),
      customer: z.union([z.string(), customerSchema]).optional(),
      type: z.union([z.literal("account"), z.literal("customer")]),
    })
);

export const capabilitySchema: z.ZodSchema<Capability> = z.lazy(() =>
  z.object({
    account: z.union([z.string(), accountSchema]),
    future_requirements: accountCapabilityFutureRequirementsSchema.optional(),
    id: z.string(),
    object: z.literal("capability"),
    requested: z.boolean(),
    requested_at: z.number().optional().nullable(),
    requirements: accountCapabilityRequirementsSchema.optional(),
    status: z.union([
      z.literal("active"),
      z.literal("disabled"),
      z.literal("inactive"),
      z.literal("pending"),
      z.literal("unrequested"),
    ]),
  })
);

export const cardSchema: z.ZodSchema<Card> = z.lazy(() =>
  z.object({
    account: z.union([z.string(), accountSchema]).optional().nullable(),
    address_city: z.string().optional().nullable(),
    address_country: z.string().optional().nullable(),
    address_line1: z.string().optional().nullable(),
    address_line1_check: z.string().optional().nullable(),
    address_line2: z.string().optional().nullable(),
    address_state: z.string().optional().nullable(),
    address_zip: z.string().optional().nullable(),
    address_zip_check: z.string().optional().nullable(),
    available_payout_methods: z
      .array(z.union([z.literal("instant"), z.literal("standard")]))
      .optional()
      .nullable(),
    brand: z.string(),
    country: z.string().optional().nullable(),
    currency: z.string().optional().nullable(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    cvc_check: z.string().optional().nullable(),
    default_for_currency: z.boolean().optional().nullable(),
    dynamic_last4: z.string().optional().nullable(),
    exp_month: z.number(),
    exp_year: z.number(),
    fingerprint: z.string().optional().nullable(),
    funding: z.string(),
    id: z.string(),
    last4: z.string(),
    metadata: z.record(z.string()).optional().nullable(),
    name: z.string().optional().nullable(),
    object: z.literal("card"),
    status: z.string().optional().nullable(),
    tokenization_method: z.string().optional().nullable(),
  })
);

export const chargeSchema: z.ZodSchema<Charge> = z.lazy(() =>
  z.object({
    amount: z.number(),
    amount_captured: z.number(),
    amount_refunded: z.number(),
    application: z.union([z.string(), applicationSchema]).optional().nullable(),
    application_fee: z
      .union([z.string(), applicationFeeSchema])
      .optional()
      .nullable(),
    application_fee_amount: z.number().optional().nullable(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    billing_details: billingDetailsSchema,
    calculated_statement_descriptor: z.string().optional().nullable(),
    captured: z.boolean(),
    created: z.number(),
    currency: z.string(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    description: z.string().optional().nullable(),
    disputed: z.boolean(),
    failure_balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    failure_code: z.string().optional().nullable(),
    failure_message: z.string().optional().nullable(),
    fraud_details: chargeFraudDetailsSchema.optional().nullable(),
    id: z.string(),
    invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("charge"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    outcome: chargeOutcomeSchema.optional().nullable(),
    paid: z.boolean(),
    payment_intent: z
      .union([z.string(), paymentIntentSchema])
      .optional()
      .nullable(),
    payment_method: z.string().optional().nullable(),
    payment_method_details: paymentMethodDetailsSchema.optional().nullable(),
    radar_options: radarRadarOptionsSchema.optional(),
    receipt_email: z.string().optional().nullable(),
    receipt_number: z.string().optional().nullable(),
    receipt_url: z.string().optional().nullable(),
    refunded: z.boolean(),
    refunds: z
      .object({
        data: z.array(refundSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional()
      .nullable(),
    review: z.union([z.string(), reviewSchema]).optional().nullable(),
    shipping: shippingSchema.optional().nullable(),
    source_transfer: z
      .union([z.string(), transferSchema])
      .optional()
      .nullable(),
    statement_descriptor: z.string().optional().nullable(),
    statement_descriptor_suffix: z.string().optional().nullable(),
    status: z.union([
      z.literal("failed"),
      z.literal("pending"),
      z.literal("succeeded"),
    ]),
    transfer: z.union([z.string(), transferSchema]).optional(),
    transfer_data: chargeTransferDataSchema.optional().nullable(),
    transfer_group: z.string().optional().nullable(),
  })
);

export const chargeTransferDataSchema: z.ZodSchema<ChargeTransferData> = z.lazy(
  () =>
    z.object({
      amount: z.number().optional().nullable(),
      destination: z.union([z.string(), accountSchema]),
    })
);

export const checkoutSessionSchema: z.ZodSchema<CheckoutSession> = z.lazy(() =>
  z.object({
    after_expiration: paymentPagesCheckoutSessionAfterExpirationSchema
      .optional()
      .nullable(),
    allow_promotion_codes: z.boolean().optional().nullable(),
    amount_subtotal: z.number().optional().nullable(),
    amount_total: z.number().optional().nullable(),
    automatic_tax: paymentPagesCheckoutSessionAutomaticTaxSchema,
    billing_address_collection: z
      .union([z.literal("auto"), z.literal("required")])
      .optional(),
    cancel_url: z.string().optional().nullable(),
    client_reference_id: z.string().optional().nullable(),
    consent: paymentPagesCheckoutSessionConsentSchema.optional().nullable(),
    consent_collection: paymentPagesCheckoutSessionConsentCollectionSchema
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string().optional().nullable(),
    currency_conversion: paymentPagesCheckoutSessionCurrencyConversionSchema
      .optional()
      .nullable(),
    custom_fields: z.array(paymentPagesCheckoutSessionCustomFieldsSchema),
    custom_text: paymentPagesCheckoutSessionCustomTextSchema,
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    customer_creation: z
      .union([z.literal("always"), z.literal("if_required")])
      .optional(),
    customer_details: paymentPagesCheckoutSessionCustomerDetailsSchema
      .optional()
      .nullable(),
    customer_email: z.string().optional().nullable(),
    expires_at: z.number(),
    id: z.string(),
    invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
    invoice_creation: paymentPagesCheckoutSessionInvoiceCreationSchema
      .optional()
      .nullable(),
    line_items: z
      .object({
        data: z.array(itemSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    livemode: z.boolean(),
    locale: z
      .union([
        z.literal("auto"),
        z.literal("bg"),
        z.literal("cs"),
        z.literal("da"),
        z.literal("de"),
        z.literal("el"),
        z.literal("en"),
        z.literal("en-GB"),
        z.literal("es"),
        z.literal("es-419"),
        z.literal("et"),
        z.literal("fi"),
        z.literal("fil"),
        z.literal("fr"),
        z.literal("fr-CA"),
        z.literal("hr"),
        z.literal("hu"),
        z.literal("id"),
        z.literal("it"),
        z.literal("ja"),
        z.literal("ko"),
        z.literal("lt"),
        z.literal("lv"),
        z.literal("ms"),
        z.literal("mt"),
        z.literal("nb"),
        z.literal("nl"),
        z.literal("pl"),
        z.literal("pt"),
        z.literal("pt-BR"),
        z.literal("ro"),
        z.literal("ru"),
        z.literal("sk"),
        z.literal("sl"),
        z.literal("sv"),
        z.literal("th"),
        z.literal("tr"),
        z.literal("vi"),
        z.literal("zh"),
        z.literal("zh-HK"),
        z.literal("zh-TW"),
      ])
      .optional(),
    metadata: z.record(z.string()).optional().nullable(),
    mode: z.union([
      z.literal("payment"),
      z.literal("setup"),
      z.literal("subscription"),
    ]),
    object: z.literal("checkout.session"),
    payment_intent: z
      .union([z.string(), paymentIntentSchema])
      .optional()
      .nullable(),
    payment_link: z
      .union([z.string(), paymentLinkSchema])
      .optional()
      .nullable(),
    payment_method_collection: z
      .union([z.literal("always"), z.literal("if_required")])
      .optional(),
    payment_method_options: checkoutSessionPaymentMethodOptionsSchema
      .optional()
      .nullable(),
    payment_method_types: z.array(z.string()),
    payment_status: z.union([
      z.literal("no_payment_required"),
      z.literal("paid"),
      z.literal("unpaid"),
    ]),
    phone_number_collection: paymentPagesCheckoutSessionPhoneNumberCollectionSchema.optional(),
    recovered_from: z.string().optional().nullable(),
    setup_intent: z
      .union([z.string(), setupIntentSchema])
      .optional()
      .nullable(),
    shipping_address_collection: paymentPagesCheckoutSessionShippingAddressCollectionSchema
      .optional()
      .nullable(),
    shipping_cost: paymentPagesCheckoutSessionShippingCostSchema
      .optional()
      .nullable(),
    shipping_details: shippingSchema.optional().nullable(),
    shipping_options: z.array(paymentPagesCheckoutSessionShippingOptionSchema),
    status: z
      .union([z.literal("complete"), z.literal("expired"), z.literal("open")])
      .optional(),
    submit_type: z
      .union([
        z.literal("auto"),
        z.literal("book"),
        z.literal("donate"),
        z.literal("pay"),
      ])
      .optional(),
    subscription: z
      .union([z.string(), subscriptionSchema])
      .optional()
      .nullable(),
    success_url: z.string().optional().nullable(),
    tax_id_collection: paymentPagesCheckoutSessionTaxIdCollectionSchema.optional(),
    total_details: paymentPagesCheckoutSessionTotalDetailsSchema
      .optional()
      .nullable(),
    url: z.string().optional().nullable(),
  })
);

export const connectCollectionTransferSchema: z.ZodSchema<ConnectCollectionTransfer> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      currency: z.string(),
      destination: z.union([z.string(), accountSchema]),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("connect_collection_transfer"),
    })
);

export const creditNoteSchema: z.ZodSchema<CreditNote> = z.lazy(() =>
  z.object({
    amount: z.number(),
    amount_shipping: z.number(),
    created: z.number(),
    currency: z.string(),
    customer: z.union([z.string(), customerSchema, deletedCustomerSchema]),
    customer_balance_transaction: z
      .union([z.string(), customerBalanceTransactionSchema])
      .optional()
      .nullable(),
    discount_amount: z.number(),
    discount_amounts: z.array(discountsResourceDiscountAmountSchema),
    effective_at: z.number().optional().nullable(),
    id: z.string(),
    invoice: z.union([z.string(), invoiceSchema]),
    lines: z.object({
      data: z.array(creditNoteLineItemSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    }),
    livemode: z.boolean(),
    memo: z.string().optional().nullable(),
    metadata: z.record(z.string()).optional().nullable(),
    number: z.string(),
    object: z.literal("credit_note"),
    out_of_band_amount: z.number().optional().nullable(),
    pdf: z.string(),
    reason: z
      .union([
        z.literal("duplicate"),
        z.literal("fraudulent"),
        z.literal("order_change"),
        z.literal("product_unsatisfactory"),
      ])
      .optional(),
    refund: z.union([z.string(), refundSchema]).optional().nullable(),
    shipping_cost: invoicesShippingCostSchema.optional().nullable(),
    status: z.union([z.literal("issued"), z.literal("void")]),
    subtotal: z.number(),
    subtotal_excluding_tax: z.number().optional().nullable(),
    tax_amounts: z.array(creditNoteTaxAmountSchema),
    total: z.number(),
    total_excluding_tax: z.number().optional().nullable(),
    type: z.union([z.literal("post_payment"), z.literal("pre_payment")]),
    voided_at: z.number().optional().nullable(),
  })
);

export const creditNoteLineItemSchema: z.ZodSchema<CreditNoteLineItem> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      amount_excluding_tax: z.number().optional().nullable(),
      description: z.string().optional().nullable(),
      discount_amount: z.number(),
      discount_amounts: z.array(discountsResourceDiscountAmountSchema),
      id: z.string(),
      invoice_line_item: z.string().optional(),
      livemode: z.boolean(),
      object: z.literal("credit_note_line_item"),
      quantity: z.number().optional().nullable(),
      tax_amounts: z.array(creditNoteTaxAmountSchema),
      tax_rates: z.array(taxRateSchema),
      type: z.union([
        z.literal("custom_line_item"),
        z.literal("invoice_line_item"),
      ]),
      unit_amount: z.number().optional().nullable(),
      unit_amount_decimal: z.string().optional().nullable(),
      unit_amount_excluding_tax: z.string().optional().nullable(),
    })
);

export const customerSchema: z.ZodSchema<Customer> = z.lazy(() =>
  z.object({
    address: addressSchema.optional().nullable(),
    balance: z.number().optional(),
    cash_balance: cashBalanceSchema.optional().nullable(),
    created: z.number(),
    currency: z.string().optional().nullable(),
    default_source: z
      .union([z.string(), bankAccountSchema, cardSchema, sourceSchema])
      .optional()
      .nullable(),
    delinquent: z.boolean().optional().nullable(),
    description: z.string().optional().nullable(),
    discount: discountSchema.optional().nullable(),
    email: z.string().optional().nullable(),
    id: z.string(),
    invoice_credit_balance: z.record(z.number()).optional(),
    invoice_prefix: z.string().optional().nullable(),
    invoice_settings: invoiceSettingCustomerSettingSchema.optional(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional(),
    name: z.string().optional().nullable(),
    next_invoice_sequence: z.number().optional(),
    object: z.literal("customer"),
    phone: z.string().optional().nullable(),
    preferred_locales: z.array(z.string()).optional().nullable(),
    shipping: shippingSchema.optional().nullable(),
    sources: z
      .object({
        data: z.array(z.union([bankAccountSchema, cardSchema, sourceSchema])),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    subscriptions: z
      .object({
        data: z.array(subscriptionSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    tax: customerTaxSchema.optional(),
    tax_exempt: z
      .union([z.literal("exempt"), z.literal("none"), z.literal("reverse")])
      .optional(),
    tax_ids: z
      .object({
        data: z.array(taxIdSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    test_clock: z
      .union([z.string(), testHelpersTestClockSchema])
      .optional()
      .nullable(),
  })
);

export const customerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftSchema: z.ZodSchema<CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft> = z.lazy(
  () =>
    z.object({
      linked_transaction: z.union([
        z.string(),
        customerCashBalanceTransactionSchema,
      ]),
    })
);

export const customerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionSchema: z.ZodSchema<CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction> = z.lazy(
  () =>
    z.object({
      payment_intent: z.union([z.string(), paymentIntentSchema]),
    })
);

export const customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionSchema: z.ZodSchema<CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction> = z.lazy(
  () =>
    z.object({
      refund: z.union([z.string(), refundSchema]),
    })
);

export const customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionSchema: z.ZodSchema<CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction> = z.lazy(
  () =>
    z.object({
      payment_intent: z.union([z.string(), paymentIntentSchema]),
    })
);

export const customerBalanceTransactionSchema: z.ZodSchema<CustomerBalanceTransaction> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      created: z.number(),
      credit_note: z
        .union([z.string(), creditNoteSchema])
        .optional()
        .nullable(),
      currency: z.string(),
      customer: z.union([z.string(), customerSchema]),
      description: z.string().optional().nullable(),
      ending_balance: z.number(),
      id: z.string(),
      invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
      livemode: z.boolean(),
      metadata: z.record(z.string()).optional().nullable(),
      object: z.literal("customer_balance_transaction"),
      type: z.union([
        z.literal("adjustment"),
        z.literal("applied_to_invoice"),
        z.literal("credit_note"),
        z.literal("initial"),
        z.literal("invoice_overpaid"),
        z.literal("invoice_too_large"),
        z.literal("invoice_too_small"),
        z.literal("migration"),
        z.literal("unapplied_from_invoice"),
        z.literal("unspent_receiver_credit"),
      ]),
    })
);

export const customerCashBalanceTransactionSchema: z.ZodSchema<CustomerCashBalanceTransaction> = z.lazy(
  () =>
    z.object({
      adjusted_for_overdraft: customerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftSchema.optional(),
      applied_to_payment: customerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionSchema.optional(),
      created: z.number(),
      currency: z.string(),
      customer: z.union([z.string(), customerSchema]),
      ending_balance: z.number(),
      funded: customerBalanceResourceCashBalanceTransactionResourceFundedTransactionSchema.optional(),
      id: z.string(),
      livemode: z.boolean(),
      net_amount: z.number(),
      object: z.literal("customer_cash_balance_transaction"),
      refunded_from_payment: customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionSchema.optional(),
      type: z.union([
        z.literal("adjusted_for_overdraft"),
        z.literal("applied_to_payment"),
        z.literal("funded"),
        z.literal("funding_reversed"),
        z.literal("refunded_from_payment"),
        z.literal("return_canceled"),
        z.literal("return_initiated"),
        z.literal("unapplied_from_payment"),
      ]),
      unapplied_from_payment: customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionSchema.optional(),
    })
);

export const deletedDiscountSchema: z.ZodSchema<DeletedDiscount> = z.lazy(() =>
  z.object({
    checkout_session: z.string().optional().nullable(),
    coupon: couponSchema,
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    deleted: z.literal(true),
    id: z.string(),
    invoice: z.string().optional().nullable(),
    invoice_item: z.string().optional().nullable(),
    object: z.literal("discount"),
    promotion_code: z
      .union([z.string(), promotionCodeSchema])
      .optional()
      .nullable(),
    start: z.number(),
    subscription: z.string().optional().nullable(),
  })
);

export const discountSchema: z.ZodSchema<Discount> = z.lazy(() =>
  z.object({
    checkout_session: z.string().optional().nullable(),
    coupon: couponSchema,
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    end: z.number().optional().nullable(),
    id: z.string(),
    invoice: z.string().optional().nullable(),
    invoice_item: z.string().optional().nullable(),
    object: z.literal("discount"),
    promotion_code: z
      .union([z.string(), promotionCodeSchema])
      .optional()
      .nullable(),
    start: z.number(),
    subscription: z.string().optional().nullable(),
  })
);

export const discountsResourceDiscountAmountSchema: z.ZodSchema<DiscountsResourceDiscountAmount> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      discount: z.union([z.string(), discountSchema, deletedDiscountSchema]),
    })
);

export const disputeSchema: z.ZodSchema<Dispute> = z.lazy(() =>
  z.object({
    amount: z.number(),
    balance_transactions: z.array(balanceTransactionSchema),
    charge: z.union([z.string(), chargeSchema]),
    created: z.number(),
    currency: z.string(),
    evidence: disputeEvidenceSchema,
    evidence_details: disputeEvidenceDetailsSchema,
    id: z.string(),
    is_charge_refundable: z.boolean(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("dispute"),
    payment_intent: z
      .union([z.string(), paymentIntentSchema])
      .optional()
      .nullable(),
    reason: z.string(),
    status: z.union([
      z.literal("charge_refunded"),
      z.literal("lost"),
      z.literal("needs_response"),
      z.literal("under_review"),
      z.literal("warning_closed"),
      z.literal("warning_needs_response"),
      z.literal("warning_under_review"),
      z.literal("won"),
    ]),
  })
);

export const disputeEvidenceSchema: z.ZodSchema<DisputeEvidence> = z.lazy(() =>
  z.object({
    access_activity_log: z.string().optional().nullable(),
    billing_address: z.string().optional().nullable(),
    cancellation_policy: z
      .union([z.string(), fileSchema])
      .optional()
      .nullable(),
    cancellation_policy_disclosure: z.string().optional().nullable(),
    cancellation_rebuttal: z.string().optional().nullable(),
    customer_communication: z
      .union([z.string(), fileSchema])
      .optional()
      .nullable(),
    customer_email_address: z.string().optional().nullable(),
    customer_name: z.string().optional().nullable(),
    customer_purchase_ip: z.string().optional().nullable(),
    customer_signature: z.union([z.string(), fileSchema]).optional().nullable(),
    duplicate_charge_documentation: z
      .union([z.string(), fileSchema])
      .optional()
      .nullable(),
    duplicate_charge_explanation: z.string().optional().nullable(),
    duplicate_charge_id: z.string().optional().nullable(),
    product_description: z.string().optional().nullable(),
    receipt: z.union([z.string(), fileSchema]).optional().nullable(),
    refund_policy: z.union([z.string(), fileSchema]).optional().nullable(),
    refund_policy_disclosure: z.string().optional().nullable(),
    refund_refusal_explanation: z.string().optional().nullable(),
    service_date: z.string().optional().nullable(),
    service_documentation: z
      .union([z.string(), fileSchema])
      .optional()
      .nullable(),
    shipping_address: z.string().optional().nullable(),
    shipping_carrier: z.string().optional().nullable(),
    shipping_date: z.string().optional().nullable(),
    shipping_documentation: z
      .union([z.string(), fileSchema])
      .optional()
      .nullable(),
    shipping_tracking_number: z.string().optional().nullable(),
    uncategorized_file: z.union([z.string(), fileSchema]).optional().nullable(),
    uncategorized_text: z.string().optional().nullable(),
  })
);

export const errorSchema: z.ZodSchema<Error> = z.lazy(() =>
  z.object({
    error: apiErrorsSchema,
  })
);

export const externalAccountSchema: z.ZodSchema<ExternalAccount> = z.lazy(() =>
  z.union([bankAccountSchema, cardSchema])
);

export const feeRefundSchema: z.ZodSchema<FeeRefund> = z.lazy(() =>
  z.object({
    amount: z.number(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string(),
    fee: z.union([z.string(), applicationFeeSchema]),
    id: z.string(),
    metadata: z.record(z.string()).optional().nullable(),
    object: z.literal("fee_refund"),
  })
);

export const fileSchema: z.ZodSchema<File> = z.lazy(() =>
  z.object({
    created: z.number(),
    expires_at: z.number().optional().nullable(),
    filename: z.string().optional().nullable(),
    id: z.string(),
    links: z
      .object({
        data: z.array(fileLinkSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional()
      .nullable(),
    object: z.literal("file"),
    purpose: z.union([
      z.literal("account_requirement"),
      z.literal("additional_verification"),
      z.literal("business_icon"),
      z.literal("business_logo"),
      z.literal("customer_signature"),
      z.literal("dispute_evidence"),
      z.literal("document_provider_identity_document"),
      z.literal("finance_report_run"),
      z.literal("identity_document"),
      z.literal("identity_document_downloadable"),
      z.literal("pci_document"),
      z.literal("selfie"),
      z.literal("sigma_scheduled_query"),
      z.literal("tax_document_user_upload"),
      z.literal("terminal_reader_splashscreen"),
    ]),
    size: z.number(),
    title: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
  })
);

export const fileLinkSchema: z.ZodSchema<FileLink> = z.lazy(() =>
  z.object({
    created: z.number(),
    expired: z.boolean(),
    expires_at: z.number().optional().nullable(),
    file: z.union([z.string(), fileSchema]),
    id: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("file_link"),
    url: z.string().optional().nullable(),
  })
);

export const financialConnectionsAccountSchema: z.ZodSchema<FinancialConnectionsAccount> = z.lazy(
  () =>
    z.object({
      account_holder: bankConnectionsResourceAccountholderSchema
        .optional()
        .nullable(),
      balance: bankConnectionsResourceBalanceSchema.optional().nullable(),
      balance_refresh: bankConnectionsResourceBalanceRefreshSchema
        .optional()
        .nullable(),
      category: z.union([
        z.literal("cash"),
        z.literal("credit"),
        z.literal("investment"),
        z.literal("other"),
      ]),
      created: z.number(),
      display_name: z.string().optional().nullable(),
      id: z.string(),
      institution_name: z.string(),
      last4: z.string().optional().nullable(),
      livemode: z.boolean(),
      object: z.literal("financial_connections.account"),
      ownership: z
        .union([z.string(), financialConnectionsAccountOwnershipSchema])
        .optional()
        .nullable(),
      ownership_refresh: bankConnectionsResourceOwnershipRefreshSchema
        .optional()
        .nullable(),
      permissions: z
        .array(
          z.union([
            z.literal("balances"),
            z.literal("ownership"),
            z.literal("payment_method"),
            z.literal("transactions"),
          ])
        )
        .optional()
        .nullable(),
      status: z.union([
        z.literal("active"),
        z.literal("disconnected"),
        z.literal("inactive"),
      ]),
      subcategory: z.union([
        z.literal("checking"),
        z.literal("credit_card"),
        z.literal("line_of_credit"),
        z.literal("mortgage"),
        z.literal("other"),
        z.literal("savings"),
      ]),
      supported_payment_method_types: z.array(
        z.union([z.literal("link"), z.literal("us_bank_account")])
      ),
    })
);

export const financialConnectionsSessionSchema: z.ZodSchema<FinancialConnectionsSession> = z.lazy(
  () =>
    z.object({
      account_holder: bankConnectionsResourceAccountholderSchema
        .optional()
        .nullable(),
      accounts: z.object({
        data: z.array(financialConnectionsAccountSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      }),
      client_secret: z.string(),
      filters: bankConnectionsResourceLinkAccountSessionFiltersSchema.optional(),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("financial_connections.session"),
      permissions: z.array(
        z.union([
          z.literal("balances"),
          z.literal("ownership"),
          z.literal("payment_method"),
          z.literal("transactions"),
        ])
      ),
      return_url: z.string().optional(),
    })
);

export const invoiceSchema: z.ZodSchema<Invoice> = z.lazy(() =>
  z.object({
    account_country: z.string().optional().nullable(),
    account_name: z.string().optional().nullable(),
    account_tax_ids: z
      .array(z.union([z.string(), taxIdSchema, deletedTaxIdSchema]))
      .optional()
      .nullable(),
    amount_due: z.number(),
    amount_paid: z.number(),
    amount_remaining: z.number(),
    amount_shipping: z.number(),
    application: z
      .union([z.string(), applicationSchema, deletedApplicationSchema])
      .optional()
      .nullable(),
    application_fee_amount: z.number().optional().nullable(),
    attempt_count: z.number(),
    attempted: z.boolean(),
    auto_advance: z.boolean().optional(),
    automatic_tax: automaticTaxSchema,
    billing_reason: z
      .union([
        z.literal("automatic_pending_invoice_item_invoice"),
        z.literal("manual"),
        z.literal("quote_accept"),
        z.literal("subscription"),
        z.literal("subscription_create"),
        z.literal("subscription_cycle"),
        z.literal("subscription_threshold"),
        z.literal("subscription_update"),
        z.literal("upcoming"),
      ])
      .optional(),
    charge: z.union([z.string(), chargeSchema]).optional().nullable(),
    collection_method: z.union([
      z.literal("charge_automatically"),
      z.literal("send_invoice"),
    ]),
    created: z.number(),
    currency: z.string(),
    custom_fields: z
      .array(invoiceSettingCustomFieldSchema)
      .optional()
      .nullable(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    customer_address: addressSchema.optional().nullable(),
    customer_email: z.string().optional().nullable(),
    customer_name: z.string().optional().nullable(),
    customer_phone: z.string().optional().nullable(),
    customer_shipping: shippingSchema.optional().nullable(),
    customer_tax_exempt: z
      .union([z.literal("exempt"), z.literal("none"), z.literal("reverse")])
      .optional(),
    customer_tax_ids: z
      .array(invoicesResourceInvoiceTaxIdSchema)
      .optional()
      .nullable(),
    default_payment_method: z
      .union([z.string(), paymentMethodSchema])
      .optional()
      .nullable(),
    default_source: z
      .union([z.string(), bankAccountSchema, cardSchema, sourceSchema])
      .optional()
      .nullable(),
    default_tax_rates: z.array(taxRateSchema),
    description: z.string().optional().nullable(),
    discount: discountSchema.optional().nullable(),
    discounts: z
      .array(z.union([z.string(), discountSchema, deletedDiscountSchema]))
      .optional()
      .nullable(),
    due_date: z.number().optional().nullable(),
    effective_at: z.number().optional().nullable(),
    ending_balance: z.number().optional().nullable(),
    footer: z.string().optional().nullable(),
    from_invoice: invoicesFromInvoiceSchema.optional().nullable(),
    hosted_invoice_url: z.string().optional().nullable(),
    id: z.string().optional(),
    invoice_pdf: z.string().optional().nullable(),
    last_finalization_error: apiErrorsSchema.optional().nullable(),
    latest_revision: z.union([z.string(), invoiceSchema]).optional().nullable(),
    lines: z.object({
      data: z.array(lineItemSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    }),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional().nullable(),
    next_payment_attempt: z.number().optional().nullable(),
    number: z.string().optional().nullable(),
    object: z.literal("invoice"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    paid: z.boolean(),
    paid_out_of_band: z.boolean(),
    payment_intent: z
      .union([z.string(), paymentIntentSchema])
      .optional()
      .nullable(),
    payment_settings: invoicesPaymentSettingsSchema,
    period_end: z.number(),
    period_start: z.number(),
    post_payment_credit_notes_amount: z.number(),
    pre_payment_credit_notes_amount: z.number(),
    quote: z.union([z.string(), quoteSchema]).optional().nullable(),
    receipt_number: z.string().optional().nullable(),
    rendering_options: invoiceSettingRenderingOptionsSchema
      .optional()
      .nullable(),
    shipping_cost: invoicesShippingCostSchema.optional().nullable(),
    shipping_details: shippingSchema.optional().nullable(),
    starting_balance: z.number(),
    statement_descriptor: z.string().optional().nullable(),
    status: z
      .union([
        z.literal("draft"),
        z.literal("open"),
        z.literal("paid"),
        z.literal("uncollectible"),
        z.literal("void"),
      ])
      .optional(),
    status_transitions: invoicesStatusTransitionsSchema,
    subscription: z
      .union([z.string(), subscriptionSchema])
      .optional()
      .nullable(),
    subscription_details: subscriptionDetailsDataSchema.optional().nullable(),
    subscription_proration_date: z.number().optional(),
    subtotal: z.number(),
    subtotal_excluding_tax: z.number().optional().nullable(),
    tax: z.number().optional().nullable(),
    test_clock: z
      .union([z.string(), testHelpersTestClockSchema])
      .optional()
      .nullable(),
    threshold_reason: invoiceThresholdReasonSchema.optional(),
    total: z.number(),
    total_discount_amounts: z
      .array(discountsResourceDiscountAmountSchema)
      .optional()
      .nullable(),
    total_excluding_tax: z.number().optional().nullable(),
    total_tax_amounts: z.array(invoiceTaxAmountSchema),
    transfer_data: invoiceTransferDataSchema.optional().nullable(),
    webhooks_delivered_at: z.number().optional().nullable(),
  })
);

export const invoiceSettingCustomerSettingSchema: z.ZodSchema<InvoiceSettingCustomerSetting> = z.lazy(
  () =>
    z.object({
      custom_fields: z
        .array(invoiceSettingCustomFieldSchema)
        .optional()
        .nullable(),
      default_payment_method: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      footer: z.string().optional().nullable(),
      rendering_options: invoiceSettingRenderingOptionsSchema
        .optional()
        .nullable(),
    })
);

export const invoiceTransferDataSchema: z.ZodSchema<InvoiceTransferData> = z.lazy(
  () =>
    z.object({
      amount: z.number().optional().nullable(),
      destination: z.union([z.string(), accountSchema]),
    })
);

export const invoiceitemSchema: z.ZodSchema<Invoiceitem> = z.lazy(() =>
  z.object({
    amount: z.number(),
    currency: z.string(),
    customer: z.union([z.string(), customerSchema, deletedCustomerSchema]),
    date: z.number(),
    description: z.string().optional().nullable(),
    discountable: z.boolean(),
    discounts: z
      .array(z.union([z.string(), discountSchema]))
      .optional()
      .nullable(),
    id: z.string(),
    invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional().nullable(),
    object: z.literal("invoiceitem"),
    period: invoiceLineItemPeriodSchema,
    price: priceSchema.optional().nullable(),
    proration: z.boolean(),
    quantity: z.number(),
    subscription: z
      .union([z.string(), subscriptionSchema])
      .optional()
      .nullable(),
    subscription_item: z.string().optional(),
    tax_rates: z.array(taxRateSchema).optional().nullable(),
    test_clock: z
      .union([z.string(), testHelpersTestClockSchema])
      .optional()
      .nullable(),
    unit_amount: z.number().optional().nullable(),
    unit_amount_decimal: z.string().optional().nullable(),
  })
);

export const invoicesFromInvoiceSchema: z.ZodSchema<InvoicesFromInvoice> = z.lazy(
  () =>
    z.object({
      action: z.string(),
      invoice: z.union([z.string(), invoiceSchema]),
    })
);

export const issuingAuthorizationSchema: z.ZodSchema<IssuingAuthorization> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      amount_details: issuingAuthorizationAmountDetailsSchema
        .optional()
        .nullable(),
      approved: z.boolean(),
      authorization_method: z.union([
        z.literal("chip"),
        z.literal("contactless"),
        z.literal("keyed_in"),
        z.literal("online"),
        z.literal("swipe"),
      ]),
      balance_transactions: z.array(balanceTransactionSchema),
      card: issuingCardSchema,
      cardholder: z
        .union([z.string(), issuingCardholderSchema])
        .optional()
        .nullable(),
      created: z.number(),
      currency: z.string(),
      id: z.string(),
      livemode: z.boolean(),
      merchant_amount: z.number(),
      merchant_currency: z.string(),
      merchant_data: issuingAuthorizationMerchantDataSchema,
      metadata: z.record(z.string()),
      network_data: issuingAuthorizationNetworkDataSchema.optional().nullable(),
      object: z.literal("issuing.authorization"),
      pending_request: issuingAuthorizationPendingRequestSchema
        .optional()
        .nullable(),
      request_history: z.array(issuingAuthorizationRequestSchema),
      status: z.union([
        z.literal("closed"),
        z.literal("pending"),
        z.literal("reversed"),
      ]),
      transactions: z.array(issuingTransactionSchema),
      treasury: issuingAuthorizationTreasurySchema.optional().nullable(),
      verification_data: issuingAuthorizationVerificationDataSchema,
      wallet: z.string().optional().nullable(),
    })
);

export const issuingCardSchema: z.ZodSchema<IssuingCard> = z.lazy(() =>
  z.object({
    brand: z.string(),
    cancellation_reason: z
      .union([
        z.literal("design_rejected"),
        z.literal("lost"),
        z.literal("stolen"),
      ])
      .optional(),
    cardholder: issuingCardholderSchema,
    created: z.number(),
    currency: z.string(),
    cvc: z.string().optional(),
    exp_month: z.number(),
    exp_year: z.number(),
    financial_account: z.string().optional().nullable(),
    id: z.string(),
    last4: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    number: z.string().optional(),
    object: z.literal("issuing.card"),
    replaced_by: z.union([z.string(), issuingCardSchema]).optional().nullable(),
    replacement_for: z
      .union([z.string(), issuingCardSchema])
      .optional()
      .nullable(),
    replacement_reason: z
      .union([
        z.literal("damaged"),
        z.literal("expired"),
        z.literal("lost"),
        z.literal("stolen"),
      ])
      .optional(),
    shipping: issuingCardShippingSchema.optional().nullable(),
    spending_controls: issuingCardAuthorizationControlsSchema,
    status: z.union([
      z.literal("active"),
      z.literal("canceled"),
      z.literal("inactive"),
    ]),
    type: z.union([z.literal("physical"), z.literal("virtual")]),
    wallets: issuingCardWalletsSchema.optional().nullable(),
  })
);

export const issuingCardholderSchema: z.ZodSchema<IssuingCardholder> = z.lazy(
  () =>
    z.object({
      billing: issuingCardholderAddressSchema,
      company: issuingCardholderCompanySchema.optional().nullable(),
      created: z.number(),
      email: z.string().optional().nullable(),
      id: z.string(),
      individual: issuingCardholderIndividualSchema.optional().nullable(),
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      name: z.string(),
      object: z.literal("issuing.cardholder"),
      phone_number: z.string().optional().nullable(),
      preferred_locales: z
        .array(
          z.union([
            z.literal("de"),
            z.literal("en"),
            z.literal("es"),
            z.literal("fr"),
            z.literal("it"),
          ])
        )
        .optional()
        .nullable(),
      requirements: issuingCardholderRequirementsSchema,
      spending_controls: issuingCardholderAuthorizationControlsSchema
        .optional()
        .nullable(),
      status: z.union([
        z.literal("active"),
        z.literal("blocked"),
        z.literal("inactive"),
      ]),
      type: z.union([z.literal("company"), z.literal("individual")]),
    })
);

export const issuingDisputeSchema: z.ZodSchema<IssuingDispute> = z.lazy(() =>
  z.object({
    amount: z.number(),
    balance_transactions: z
      .array(balanceTransactionSchema)
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string(),
    evidence: issuingDisputeEvidenceSchema,
    id: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("issuing.dispute"),
    status: z.union([
      z.literal("expired"),
      z.literal("lost"),
      z.literal("submitted"),
      z.literal("unsubmitted"),
      z.literal("won"),
    ]),
    transaction: z.union([z.string(), issuingTransactionSchema]),
    treasury: issuingDisputeTreasurySchema.optional().nullable(),
  })
);

export const issuingTransactionSchema: z.ZodSchema<IssuingTransaction> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      amount_details: issuingTransactionAmountDetailsSchema
        .optional()
        .nullable(),
      authorization: z
        .union([z.string(), issuingAuthorizationSchema])
        .optional()
        .nullable(),
      balance_transaction: z
        .union([z.string(), balanceTransactionSchema])
        .optional()
        .nullable(),
      card: z.union([z.string(), issuingCardSchema]),
      cardholder: z
        .union([z.string(), issuingCardholderSchema])
        .optional()
        .nullable(),
      created: z.number(),
      currency: z.string(),
      dispute: z
        .union([z.string(), issuingDisputeSchema])
        .optional()
        .nullable(),
      id: z.string(),
      livemode: z.boolean(),
      merchant_amount: z.number(),
      merchant_currency: z.string(),
      merchant_data: issuingAuthorizationMerchantDataSchema,
      metadata: z.record(z.string()),
      object: z.literal("issuing.transaction"),
      purchase_details: issuingTransactionPurchaseDetailsSchema
        .optional()
        .nullable(),
      treasury: issuingTransactionTreasurySchema.optional().nullable(),
      type: z.union([z.literal("capture"), z.literal("refund")]),
      wallet: z
        .union([
          z.literal("apple_pay"),
          z.literal("google_pay"),
          z.literal("samsung_pay"),
        ])
        .optional(),
    })
);

export const issuingCardholderIdDocumentSchema: z.ZodSchema<IssuingCardholderIdDocument> = z.lazy(
  () =>
    z.object({
      back: z.union([z.string(), fileSchema]).optional().nullable(),
      front: z.union([z.string(), fileSchema]).optional().nullable(),
    })
);

export const issuingCardholderIndividualSchema: z.ZodSchema<IssuingCardholderIndividual> = z.lazy(
  () =>
    z.object({
      card_issuing: issuingCardholderCardIssuingSchema.optional().nullable(),
      dob: issuingCardholderIndividualDobSchema.optional().nullable(),
      first_name: z.string().optional().nullable(),
      last_name: z.string().optional().nullable(),
      verification: issuingCardholderVerificationSchema.optional().nullable(),
    })
);

export const issuingCardholderVerificationSchema: z.ZodSchema<IssuingCardholderVerification> = z.lazy(
  () =>
    z.object({
      document: issuingCardholderIdDocumentSchema.optional().nullable(),
    })
);

export const issuingDisputeCanceledEvidenceSchema: z.ZodSchema<IssuingDisputeCanceledEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      canceled_at: z.number().optional().nullable(),
      cancellation_policy_provided: z.boolean().optional().nullable(),
      cancellation_reason: z.string().optional().nullable(),
      expected_at: z.number().optional().nullable(),
      explanation: z.string().optional().nullable(),
      product_description: z.string().optional().nullable(),
      product_type: z
        .union([z.literal("merchandise"), z.literal("service")])
        .optional(),
      return_status: z
        .union([z.literal("merchant_rejected"), z.literal("successful")])
        .optional(),
      returned_at: z.number().optional().nullable(),
    })
);

export const issuingDisputeDuplicateEvidenceSchema: z.ZodSchema<IssuingDisputeDuplicateEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      card_statement: z.union([z.string(), fileSchema]).optional().nullable(),
      cash_receipt: z.union([z.string(), fileSchema]).optional().nullable(),
      check_image: z.union([z.string(), fileSchema]).optional().nullable(),
      explanation: z.string().optional().nullable(),
      original_transaction: z.string().optional().nullable(),
    })
);

export const issuingDisputeEvidenceSchema: z.ZodSchema<IssuingDisputeEvidence> = z.lazy(
  () =>
    z.object({
      canceled: issuingDisputeCanceledEvidenceSchema.optional(),
      duplicate: issuingDisputeDuplicateEvidenceSchema.optional(),
      fraudulent: issuingDisputeFraudulentEvidenceSchema.optional(),
      merchandise_not_as_described: issuingDisputeMerchandiseNotAsDescribedEvidenceSchema.optional(),
      not_received: issuingDisputeNotReceivedEvidenceSchema.optional(),
      other: issuingDisputeOtherEvidenceSchema.optional(),
      reason: z.union([
        z.literal("canceled"),
        z.literal("duplicate"),
        z.literal("fraudulent"),
        z.literal("merchandise_not_as_described"),
        z.literal("not_received"),
        z.literal("other"),
        z.literal("service_not_as_described"),
      ]),
      service_not_as_described: issuingDisputeServiceNotAsDescribedEvidenceSchema.optional(),
    })
);

export const issuingDisputeFraudulentEvidenceSchema: z.ZodSchema<IssuingDisputeFraudulentEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      explanation: z.string().optional().nullable(),
    })
);

export const issuingDisputeMerchandiseNotAsDescribedEvidenceSchema: z.ZodSchema<IssuingDisputeMerchandiseNotAsDescribedEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      explanation: z.string().optional().nullable(),
      received_at: z.number().optional().nullable(),
      return_description: z.string().optional().nullable(),
      return_status: z
        .union([z.literal("merchant_rejected"), z.literal("successful")])
        .optional(),
      returned_at: z.number().optional().nullable(),
    })
);

export const issuingDisputeNotReceivedEvidenceSchema: z.ZodSchema<IssuingDisputeNotReceivedEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      expected_at: z.number().optional().nullable(),
      explanation: z.string().optional().nullable(),
      product_description: z.string().optional().nullable(),
      product_type: z
        .union([z.literal("merchandise"), z.literal("service")])
        .optional(),
    })
);

export const issuingDisputeOtherEvidenceSchema: z.ZodSchema<IssuingDisputeOtherEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      explanation: z.string().optional().nullable(),
      product_description: z.string().optional().nullable(),
      product_type: z
        .union([z.literal("merchandise"), z.literal("service")])
        .optional(),
    })
);

export const issuingDisputeServiceNotAsDescribedEvidenceSchema: z.ZodSchema<IssuingDisputeServiceNotAsDescribedEvidence> = z.lazy(
  () =>
    z.object({
      additional_documentation: z
        .union([z.string(), fileSchema])
        .optional()
        .nullable(),
      canceled_at: z.number().optional().nullable(),
      cancellation_reason: z.string().optional().nullable(),
      explanation: z.string().optional().nullable(),
      received_at: z.number().optional().nullable(),
    })
);

export const itemSchema: z.ZodSchema<Item> = z.lazy(() =>
  z.object({
    amount_discount: z.number(),
    amount_subtotal: z.number(),
    amount_tax: z.number(),
    amount_total: z.number(),
    currency: z.string(),
    description: z.string(),
    discounts: z.array(lineItemsDiscountAmountSchema).optional(),
    id: z.string(),
    object: z.literal("item"),
    price: priceSchema.optional().nullable(),
    quantity: z.number().optional().nullable(),
    taxes: z.array(lineItemsTaxAmountSchema).optional(),
  })
);

export const legalEntityCompanySchema: z.ZodSchema<LegalEntityCompany> = z.lazy(
  () =>
    z.object({
      address: addressSchema.optional(),
      address_kana: legalEntityJapanAddressSchema.optional().nullable(),
      address_kanji: legalEntityJapanAddressSchema.optional().nullable(),
      directors_provided: z.boolean().optional(),
      executives_provided: z.boolean().optional(),
      export_license_id: z.string().optional(),
      export_purpose_code: z.string().optional(),
      name: z.string().optional().nullable(),
      name_kana: z.string().optional().nullable(),
      name_kanji: z.string().optional().nullable(),
      owners_provided: z.boolean().optional(),
      ownership_declaration: legalEntityUboDeclarationSchema
        .optional()
        .nullable(),
      phone: z.string().optional().nullable(),
      structure: z
        .union([
          z.literal("free_zone_establishment"),
          z.literal("free_zone_llc"),
          z.literal("government_instrumentality"),
          z.literal("governmental_unit"),
          z.literal("incorporated_non_profit"),
          z.literal("incorporated_partnership"),
          z.literal("limited_liability_partnership"),
          z.literal("llc"),
          z.literal("multi_member_llc"),
          z.literal("private_company"),
          z.literal("private_corporation"),
          z.literal("private_partnership"),
          z.literal("public_company"),
          z.literal("public_corporation"),
          z.literal("public_partnership"),
          z.literal("single_member_llc"),
          z.literal("sole_establishment"),
          z.literal("sole_proprietorship"),
          z.literal("tax_exempt_government_instrumentality"),
          z.literal("unincorporated_association"),
          z.literal("unincorporated_non_profit"),
          z.literal("unincorporated_partnership"),
        ])
        .optional(),
      tax_id_provided: z.boolean().optional(),
      tax_id_registrar: z.string().optional(),
      vat_id_provided: z.boolean().optional(),
      verification: legalEntityCompanyVerificationSchema.optional().nullable(),
    })
);

export const legalEntityCompanyVerificationSchema: z.ZodSchema<LegalEntityCompanyVerification> = z.lazy(
  () =>
    z.object({
      document: legalEntityCompanyVerificationDocumentSchema,
    })
);

export const legalEntityCompanyVerificationDocumentSchema: z.ZodSchema<LegalEntityCompanyVerificationDocument> = z.lazy(
  () =>
    z.object({
      back: z.union([z.string(), fileSchema]).optional().nullable(),
      details: z.string().optional().nullable(),
      details_code: z.string().optional().nullable(),
      front: z.union([z.string(), fileSchema]).optional().nullable(),
    })
);

export const legalEntityPersonVerificationSchema: z.ZodSchema<LegalEntityPersonVerification> = z.lazy(
  () =>
    z.object({
      additional_document: legalEntityPersonVerificationDocumentSchema
        .optional()
        .nullable(),
      details: z.string().optional().nullable(),
      details_code: z.string().optional().nullable(),
      document: legalEntityPersonVerificationDocumentSchema.optional(),
      status: z.string(),
    })
);

export const legalEntityPersonVerificationDocumentSchema: z.ZodSchema<LegalEntityPersonVerificationDocument> = z.lazy(
  () =>
    z.object({
      back: z.union([z.string(), fileSchema]).optional().nullable(),
      details: z.string().optional().nullable(),
      details_code: z.string().optional().nullable(),
      front: z.union([z.string(), fileSchema]).optional().nullable(),
    })
);

export const lineItemSchema: z.ZodSchema<LineItem> = z.lazy(() =>
  z.object({
    amount: z.number(),
    amount_excluding_tax: z.number().optional().nullable(),
    currency: z.string(),
    description: z.string().optional().nullable(),
    discount_amounts: z
      .array(discountsResourceDiscountAmountSchema)
      .optional()
      .nullable(),
    discountable: z.boolean(),
    discounts: z
      .array(z.union([z.string(), discountSchema]))
      .optional()
      .nullable(),
    id: z.string(),
    invoice_item: z.union([z.string(), invoiceitemSchema]).optional(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("line_item"),
    period: invoiceLineItemPeriodSchema,
    price: priceSchema.optional().nullable(),
    proration: z.boolean(),
    proration_details: invoicesResourceLineItemsProrationDetailsSchema
      .optional()
      .nullable(),
    quantity: z.number().optional().nullable(),
    subscription: z
      .union([z.string(), subscriptionSchema])
      .optional()
      .nullable(),
    subscription_item: z.union([z.string(), subscriptionItemSchema]).optional(),
    tax_amounts: z.array(invoiceTaxAmountSchema).optional(),
    tax_rates: z.array(taxRateSchema).optional(),
    type: z.union([z.literal("invoiceitem"), z.literal("subscription")]),
    unit_amount_excluding_tax: z.string().optional().nullable(),
  })
);

export const lineItemsDiscountAmountSchema: z.ZodSchema<LineItemsDiscountAmount> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      discount: discountSchema,
    })
);

export const mandateSchema: z.ZodSchema<Mandate> = z.lazy(() =>
  z.object({
    customer_acceptance: customerAcceptanceSchema,
    id: z.string(),
    livemode: z.boolean(),
    multi_use: mandateMultiUseSchema.optional(),
    object: z.literal("mandate"),
    on_behalf_of: z.string().optional(),
    payment_method: z.union([z.string(), paymentMethodSchema]),
    payment_method_details: mandatePaymentMethodDetailsSchema,
    single_use: mandateSingleUseSchema.optional(),
    status: z.union([
      z.literal("active"),
      z.literal("inactive"),
      z.literal("pending"),
    ]),
    type: z.union([z.literal("multi_use"), z.literal("single_use")]),
  })
);

export const paymentIntentSchema: z.ZodSchema<PaymentIntent> = z.lazy(() =>
  z.object({
    amount: z.number(),
    amount_capturable: z.number().optional(),
    amount_details: paymentFlowsAmountDetailsSchema.optional(),
    amount_received: z.number().optional(),
    application: z.union([z.string(), applicationSchema]).optional().nullable(),
    application_fee_amount: z.number().optional().nullable(),
    automatic_payment_methods: paymentFlowsAutomaticPaymentMethodsPaymentIntentSchema
      .optional()
      .nullable(),
    canceled_at: z.number().optional().nullable(),
    cancellation_reason: z
      .union([
        z.literal("abandoned"),
        z.literal("automatic"),
        z.literal("duplicate"),
        z.literal("failed_invoice"),
        z.literal("fraudulent"),
        z.literal("requested_by_customer"),
        z.literal("void_invoice"),
      ])
      .optional(),
    capture_method: z.union([
      z.literal("automatic"),
      z.literal("automatic_async"),
      z.literal("manual"),
    ]),
    client_secret: z.string().optional().nullable(),
    confirmation_method: z.union([z.literal("automatic"), z.literal("manual")]),
    created: z.number(),
    currency: z.string(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    description: z.string().optional().nullable(),
    id: z.string(),
    invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
    last_payment_error: apiErrorsSchema.optional().nullable(),
    latest_charge: z.union([z.string(), chargeSchema]).optional().nullable(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional(),
    next_action: paymentIntentNextActionSchema.optional().nullable(),
    object: z.literal("payment_intent"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    payment_method: z
      .union([z.string(), paymentMethodSchema])
      .optional()
      .nullable(),
    payment_method_options: paymentIntentPaymentMethodOptionsSchema
      .optional()
      .nullable(),
    payment_method_types: z.array(z.string()),
    processing: paymentIntentProcessingSchema.optional().nullable(),
    receipt_email: z.string().optional().nullable(),
    review: z.union([z.string(), reviewSchema]).optional().nullable(),
    setup_future_usage: z
      .union([z.literal("off_session"), z.literal("on_session")])
      .optional(),
    shipping: shippingSchema.optional().nullable(),
    statement_descriptor: z.string().optional().nullable(),
    statement_descriptor_suffix: z.string().optional().nullable(),
    status: z.union([
      z.literal("canceled"),
      z.literal("processing"),
      z.literal("requires_action"),
      z.literal("requires_capture"),
      z.literal("requires_confirmation"),
      z.literal("requires_payment_method"),
      z.literal("succeeded"),
    ]),
    transfer_data: transferDataSchema.optional().nullable(),
    transfer_group: z.string().optional().nullable(),
  })
);

export const paymentLinkSchema: z.ZodSchema<PaymentLink> = z.lazy(() =>
  z.object({
    active: z.boolean(),
    after_completion: paymentLinksResourceAfterCompletionSchema,
    allow_promotion_codes: z.boolean(),
    application_fee_amount: z.number().optional().nullable(),
    application_fee_percent: z.number().optional().nullable(),
    automatic_tax: paymentLinksResourceAutomaticTaxSchema,
    billing_address_collection: z.union([
      z.literal("auto"),
      z.literal("required"),
    ]),
    consent_collection: paymentLinksResourceConsentCollectionSchema
      .optional()
      .nullable(),
    currency: z.string(),
    custom_fields: z.array(paymentLinksResourceCustomFieldsSchema),
    custom_text: paymentLinksResourceCustomTextSchema,
    customer_creation: z.union([z.literal("always"), z.literal("if_required")]),
    id: z.string(),
    invoice_creation: paymentLinksResourceInvoiceCreationSchema
      .optional()
      .nullable(),
    line_items: z
      .object({
        data: z.array(itemSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("payment_link"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    payment_intent_data: paymentLinksResourcePaymentIntentDataSchema
      .optional()
      .nullable(),
    payment_method_collection: z.union([
      z.literal("always"),
      z.literal("if_required"),
    ]),
    payment_method_types: z
      .array(
        z.union([
          z.literal("affirm"),
          z.literal("afterpay_clearpay"),
          z.literal("alipay"),
          z.literal("au_becs_debit"),
          z.literal("bacs_debit"),
          z.literal("bancontact"),
          z.literal("blik"),
          z.literal("boleto"),
          z.literal("card"),
          z.literal("cashapp"),
          z.literal("eps"),
          z.literal("fpx"),
          z.literal("giropay"),
          z.literal("grabpay"),
          z.literal("ideal"),
          z.literal("klarna"),
          z.literal("konbini"),
          z.literal("link"),
          z.literal("oxxo"),
          z.literal("p24"),
          z.literal("paynow"),
          z.literal("paypal"),
          z.literal("pix"),
          z.literal("promptpay"),
          z.literal("sepa_debit"),
          z.literal("sofort"),
          z.literal("us_bank_account"),
          z.literal("wechat_pay"),
        ])
      )
      .optional()
      .nullable(),
    phone_number_collection: paymentLinksResourcePhoneNumberCollectionSchema,
    shipping_address_collection: paymentLinksResourceShippingAddressCollectionSchema
      .optional()
      .nullable(),
    shipping_options: z.array(paymentLinksResourceShippingOptionSchema),
    submit_type: z.union([
      z.literal("auto"),
      z.literal("book"),
      z.literal("donate"),
      z.literal("pay"),
    ]),
    subscription_data: paymentLinksResourceSubscriptionDataSchema
      .optional()
      .nullable(),
    tax_id_collection: paymentLinksResourceTaxIdCollectionSchema,
    transfer_data: paymentLinksResourceTransferDataSchema.optional().nullable(),
    url: z.string(),
  })
);

export const paymentLinksResourceInvoiceCreationSchema: z.ZodSchema<PaymentLinksResourceInvoiceCreation> = z.lazy(
  () =>
    z.object({
      enabled: z.boolean(),
      invoice_data: paymentLinksResourceInvoiceSettingsSchema
        .optional()
        .nullable(),
    })
);

export const paymentLinksResourceInvoiceSettingsSchema: z.ZodSchema<PaymentLinksResourceInvoiceSettings> = z.lazy(
  () =>
    z.object({
      account_tax_ids: z
        .array(z.union([z.string(), taxIdSchema, deletedTaxIdSchema]))
        .optional()
        .nullable(),
      custom_fields: z
        .array(invoiceSettingCustomFieldSchema)
        .optional()
        .nullable(),
      description: z.string().optional().nullable(),
      footer: z.string().optional().nullable(),
      metadata: z.record(z.string()).optional().nullable(),
      rendering_options: invoiceSettingRenderingOptionsSchema
        .optional()
        .nullable(),
    })
);

export const paymentLinksResourceTransferDataSchema: z.ZodSchema<PaymentLinksResourceTransferData> = z.lazy(
  () =>
    z.object({
      amount: z.number().optional().nullable(),
      destination: z.union([z.string(), accountSchema]),
    })
);

export const paymentMethodSchema: z.ZodSchema<PaymentMethod> = z.lazy(() =>
  z.object({
    acss_debit: paymentMethodAcssDebitSchema.optional(),
    affirm: paymentMethodAffirmSchema.optional(),
    afterpay_clearpay: paymentMethodAfterpayClearpaySchema.optional(),
    alipay: paymentFlowsPrivatePaymentMethodsAlipaySchema.optional(),
    au_becs_debit: paymentMethodAuBecsDebitSchema.optional(),
    bacs_debit: paymentMethodBacsDebitSchema.optional(),
    bancontact: paymentMethodBancontactSchema.optional(),
    billing_details: billingDetailsSchema,
    blik: paymentMethodBlikSchema.optional(),
    boleto: paymentMethodBoletoSchema.optional(),
    card: paymentMethodCardSchema.optional(),
    card_present: paymentMethodCardPresentSchema.optional(),
    cashapp: paymentMethodCashappSchema.optional(),
    created: z.number(),
    customer: z.union([z.string(), customerSchema]).optional().nullable(),
    customer_balance: paymentMethodCustomerBalanceSchema.optional(),
    eps: paymentMethodEpsSchema.optional(),
    fpx: paymentMethodFpxSchema.optional(),
    giropay: paymentMethodGiropaySchema.optional(),
    grabpay: paymentMethodGrabpaySchema.optional(),
    id: z.string(),
    ideal: paymentMethodIdealSchema.optional(),
    interac_present: paymentMethodInteracPresentSchema.optional(),
    klarna: paymentMethodKlarnaSchema.optional(),
    konbini: paymentMethodKonbiniSchema.optional(),
    link: paymentMethodLinkSchema.optional(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional().nullable(),
    object: z.literal("payment_method"),
    oxxo: paymentMethodOxxoSchema.optional(),
    p24: paymentMethodP24Schema.optional(),
    paynow: paymentMethodPaynowSchema.optional(),
    paypal: paymentMethodPaypalSchema.optional(),
    pix: paymentMethodPixSchema.optional(),
    promptpay: paymentMethodPromptpaySchema.optional(),
    radar_options: radarRadarOptionsSchema.optional(),
    sepa_debit: paymentMethodSepaDebitSchema.optional(),
    sofort: paymentMethodSofortSchema.optional(),
    type: z.union([
      z.literal("acss_debit"),
      z.literal("affirm"),
      z.literal("afterpay_clearpay"),
      z.literal("alipay"),
      z.literal("au_becs_debit"),
      z.literal("bacs_debit"),
      z.literal("bancontact"),
      z.literal("blik"),
      z.literal("boleto"),
      z.literal("card"),
      z.literal("card_present"),
      z.literal("cashapp"),
      z.literal("customer_balance"),
      z.literal("eps"),
      z.literal("fpx"),
      z.literal("giropay"),
      z.literal("grabpay"),
      z.literal("ideal"),
      z.literal("interac_present"),
      z.literal("klarna"),
      z.literal("konbini"),
      z.literal("link"),
      z.literal("oxxo"),
      z.literal("p24"),
      z.literal("paynow"),
      z.literal("paypal"),
      z.literal("pix"),
      z.literal("promptpay"),
      z.literal("sepa_debit"),
      z.literal("sofort"),
      z.literal("us_bank_account"),
      z.literal("wechat_pay"),
      z.literal("zip"),
    ]),
    us_bank_account: paymentMethodUsBankAccountSchema.optional(),
    wechat_pay: paymentMethodWechatPaySchema.optional(),
    zip: paymentMethodZipSchema.optional(),
  })
);

export const paymentMethodCardSchema: z.ZodSchema<PaymentMethodCard> = z.lazy(
  () =>
    z.object({
      brand: z.string(),
      checks: paymentMethodCardChecksSchema.optional().nullable(),
      country: z.string().optional().nullable(),
      exp_month: z.number(),
      exp_year: z.number(),
      fingerprint: z.string().optional().nullable(),
      funding: z.string(),
      generated_from: paymentMethodCardGeneratedCardSchema
        .optional()
        .nullable(),
      last4: z.string(),
      networks: networksSchema.optional().nullable(),
      three_d_secure_usage: threeDSecureUsageSchema.optional().nullable(),
      wallet: paymentMethodCardWalletSchema.optional().nullable(),
    })
);

export const paymentMethodCardGeneratedCardSchema: z.ZodSchema<PaymentMethodCardGeneratedCard> = z.lazy(
  () =>
    z.object({
      charge: z.string().optional().nullable(),
      payment_method_details: cardGeneratedFromPaymentMethodDetailsSchema
        .optional()
        .nullable(),
      setup_attempt: z
        .union([z.string(), setupAttemptSchema])
        .optional()
        .nullable(),
    })
);

export const paymentMethodDetailsSchema: z.ZodSchema<PaymentMethodDetails> = z.lazy(
  () =>
    z.object({
      ach_credit_transfer: paymentMethodDetailsAchCreditTransferSchema.optional(),
      ach_debit: paymentMethodDetailsAchDebitSchema.optional(),
      acss_debit: paymentMethodDetailsAcssDebitSchema.optional(),
      affirm: paymentMethodDetailsAffirmSchema.optional(),
      afterpay_clearpay: paymentMethodDetailsAfterpayClearpaySchema.optional(),
      alipay: paymentFlowsPrivatePaymentMethodsAlipayDetailsSchema.optional(),
      au_becs_debit: paymentMethodDetailsAuBecsDebitSchema.optional(),
      bacs_debit: paymentMethodDetailsBacsDebitSchema.optional(),
      bancontact: paymentMethodDetailsBancontactSchema.optional(),
      blik: paymentMethodDetailsBlikSchema.optional(),
      boleto: paymentMethodDetailsBoletoSchema.optional(),
      card: paymentMethodDetailsCardSchema.optional(),
      card_present: paymentMethodDetailsCardPresentSchema.optional(),
      cashapp: paymentMethodDetailsCashappSchema.optional(),
      customer_balance: paymentMethodDetailsCustomerBalanceSchema.optional(),
      eps: paymentMethodDetailsEpsSchema.optional(),
      fpx: paymentMethodDetailsFpxSchema.optional(),
      giropay: paymentMethodDetailsGiropaySchema.optional(),
      grabpay: paymentMethodDetailsGrabpaySchema.optional(),
      ideal: paymentMethodDetailsIdealSchema.optional(),
      interac_present: paymentMethodDetailsInteracPresentSchema.optional(),
      klarna: paymentMethodDetailsKlarnaSchema.optional(),
      konbini: paymentMethodDetailsKonbiniSchema.optional(),
      link: paymentMethodDetailsLinkSchema.optional(),
      multibanco: paymentMethodDetailsMultibancoSchema.optional(),
      oxxo: paymentMethodDetailsOxxoSchema.optional(),
      p24: paymentMethodDetailsP24Schema.optional(),
      paynow: paymentMethodDetailsPaynowSchema.optional(),
      paypal: paymentMethodDetailsPaypalSchema.optional(),
      pix: paymentMethodDetailsPixSchema.optional(),
      promptpay: paymentMethodDetailsPromptpaySchema.optional(),
      sepa_debit: paymentMethodDetailsSepaDebitSchema.optional(),
      sofort: paymentMethodDetailsSofortSchema.optional(),
      stripe_account: paymentMethodDetailsStripeAccountSchema.optional(),
      type: z.string(),
      us_bank_account: paymentMethodDetailsUsBankAccountSchema.optional(),
      wechat: paymentMethodDetailsWechatSchema.optional(),
      wechat_pay: paymentMethodDetailsWechatPaySchema.optional(),
      zip: paymentMethodDetailsZipSchema.optional(),
    })
);

export const paymentMethodDetailsBancontactSchema: z.ZodSchema<PaymentMethodDetailsBancontact> = z.lazy(
  () =>
    z.object({
      bank_code: z.string().optional().nullable(),
      bank_name: z.string().optional().nullable(),
      bic: z.string().optional().nullable(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      preferred_language: z
        .union([
          z.literal("de"),
          z.literal("en"),
          z.literal("fr"),
          z.literal("nl"),
        ])
        .optional(),
      verified_name: z.string().optional().nullable(),
    })
);

export const paymentMethodDetailsIdealSchema: z.ZodSchema<PaymentMethodDetailsIdeal> = z.lazy(
  () =>
    z.object({
      bank: z
        .union([
          z.literal("abn_amro"),
          z.literal("asn_bank"),
          z.literal("bunq"),
          z.literal("handelsbanken"),
          z.literal("ing"),
          z.literal("knab"),
          z.literal("moneyou"),
          z.literal("rabobank"),
          z.literal("regiobank"),
          z.literal("revolut"),
          z.literal("sns_bank"),
          z.literal("triodos_bank"),
          z.literal("van_lanschot"),
          z.literal("yoursafe"),
        ])
        .optional(),
      bic: z
        .union([
          z.literal("ABNANL2A"),
          z.literal("ASNBNL21"),
          z.literal("BITSNL2A"),
          z.literal("BUNQNL2A"),
          z.literal("FVLBNL22"),
          z.literal("HANDNL2A"),
          z.literal("INGBNL2A"),
          z.literal("KNABNL2H"),
          z.literal("MOYONL21"),
          z.literal("RABONL2U"),
          z.literal("RBRBNL21"),
          z.literal("REVOIE23"),
          z.literal("REVOLT21"),
          z.literal("SNSBNL2A"),
          z.literal("TRIONL2U"),
        ])
        .optional(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      verified_name: z.string().optional().nullable(),
    })
);

export const paymentMethodDetailsSofortSchema: z.ZodSchema<PaymentMethodDetailsSofort> = z.lazy(
  () =>
    z.object({
      bank_code: z.string().optional().nullable(),
      bank_name: z.string().optional().nullable(),
      bic: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      preferred_language: z
        .union([
          z.literal("de"),
          z.literal("en"),
          z.literal("es"),
          z.literal("fr"),
          z.literal("it"),
          z.literal("nl"),
          z.literal("pl"),
        ])
        .optional(),
      verified_name: z.string().optional().nullable(),
    })
);

export const paymentMethodSepaDebitSchema: z.ZodSchema<PaymentMethodSepaDebit> = z.lazy(
  () =>
    z.object({
      bank_code: z.string().optional().nullable(),
      branch_code: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      fingerprint: z.string().optional().nullable(),
      generated_from: sepaDebitGeneratedFromSchema.optional().nullable(),
      last4: z.string().optional().nullable(),
    })
);

export const paymentPagesCheckoutSessionInvoiceCreationSchema: z.ZodSchema<PaymentPagesCheckoutSessionInvoiceCreation> = z.lazy(
  () =>
    z.object({
      enabled: z.boolean(),
      invoice_data: paymentPagesCheckoutSessionInvoiceSettingsSchema,
    })
);

export const paymentPagesCheckoutSessionInvoiceSettingsSchema: z.ZodSchema<PaymentPagesCheckoutSessionInvoiceSettings> = z.lazy(
  () =>
    z.object({
      account_tax_ids: z
        .array(z.union([z.string(), taxIdSchema, deletedTaxIdSchema]))
        .optional()
        .nullable(),
      custom_fields: z
        .array(invoiceSettingCustomFieldSchema)
        .optional()
        .nullable(),
      description: z.string().optional().nullable(),
      footer: z.string().optional().nullable(),
      metadata: z.record(z.string()).optional().nullable(),
      rendering_options: invoiceSettingRenderingOptionsSchema
        .optional()
        .nullable(),
    })
);

export const paymentPagesCheckoutSessionTotalDetailsSchema: z.ZodSchema<PaymentPagesCheckoutSessionTotalDetails> = z.lazy(
  () =>
    z.object({
      amount_discount: z.number(),
      amount_shipping: z.number().optional().nullable(),
      amount_tax: z.number(),
      breakdown: paymentPagesCheckoutSessionTotalDetailsResourceBreakdownSchema.optional(),
    })
);

export const paymentPagesCheckoutSessionTotalDetailsResourceBreakdownSchema: z.ZodSchema<PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown> = z.lazy(
  () =>
    z.object({
      discounts: z.array(lineItemsDiscountAmountSchema),
      taxes: z.array(lineItemsTaxAmountSchema),
    })
);

export const paymentSourceSchema: z.ZodSchema<PaymentSource> = z.lazy(() =>
  z.union([accountSchema, bankAccountSchema, cardSchema, sourceSchema])
);

export const payoutSchema: z.ZodSchema<Payout> = z.lazy(() =>
  z.object({
    amount: z.number(),
    arrival_date: z.number(),
    automatic: z.boolean(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string(),
    description: z.string().optional().nullable(),
    destination: z
      .union([
        z.string(),
        bankAccountSchema,
        cardSchema,
        deletedBankAccountSchema,
        deletedCardSchema,
      ])
      .optional()
      .nullable(),
    failure_balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    failure_code: z.string().optional().nullable(),
    failure_message: z.string().optional().nullable(),
    id: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional().nullable(),
    method: z.string(),
    object: z.literal("payout"),
    original_payout: z.union([z.string(), payoutSchema]).optional().nullable(),
    reconciliation_status: z.union([
      z.literal("completed"),
      z.literal("in_progress"),
      z.literal("not_applicable"),
    ]),
    reversed_by: z.union([z.string(), payoutSchema]).optional().nullable(),
    source_type: z.string(),
    statement_descriptor: z.string().optional().nullable(),
    status: z.string(),
    type: z.union([z.literal("bank_account"), z.literal("card")]),
  })
);

export const personSchema: z.ZodSchema<Person> = z.lazy(() =>
  z.object({
    account: z.string(),
    address: addressSchema.optional(),
    address_kana: legalEntityJapanAddressSchema.optional().nullable(),
    address_kanji: legalEntityJapanAddressSchema.optional().nullable(),
    created: z.number(),
    dob: legalEntityDobSchema.optional(),
    email: z.string().optional().nullable(),
    first_name: z.string().optional().nullable(),
    first_name_kana: z.string().optional().nullable(),
    first_name_kanji: z.string().optional().nullable(),
    full_name_aliases: z.array(z.string()).optional(),
    future_requirements: personFutureRequirementsSchema.optional().nullable(),
    gender: z.string().optional().nullable(),
    id: z.string(),
    id_number_provided: z.boolean().optional(),
    id_number_secondary_provided: z.boolean().optional(),
    last_name: z.string().optional().nullable(),
    last_name_kana: z.string().optional().nullable(),
    last_name_kanji: z.string().optional().nullable(),
    maiden_name: z.string().optional().nullable(),
    metadata: z.record(z.string()).optional(),
    nationality: z.string().optional().nullable(),
    object: z.literal("person"),
    phone: z.string().optional().nullable(),
    political_exposure: z
      .union([z.literal("existing"), z.literal("none")])
      .optional(),
    registered_address: addressSchema.optional(),
    relationship: personRelationshipSchema.optional(),
    requirements: personRequirementsSchema.optional().nullable(),
    ssn_last_4_provided: z.boolean().optional(),
    verification: legalEntityPersonVerificationSchema.optional(),
  })
);

export const planSchema: z.ZodSchema<Plan> = z.lazy(() =>
  z.object({
    active: z.boolean(),
    aggregate_usage: z
      .union([
        z.literal("last_during_period"),
        z.literal("last_ever"),
        z.literal("max"),
        z.literal("sum"),
      ])
      .optional(),
    amount: z.number().optional().nullable(),
    amount_decimal: z.string().optional().nullable(),
    billing_scheme: z.union([z.literal("per_unit"), z.literal("tiered")]),
    created: z.number(),
    currency: z.string(),
    id: z.string(),
    interval: z.union([
      z.literal("day"),
      z.literal("month"),
      z.literal("week"),
      z.literal("year"),
    ]),
    interval_count: z.number(),
    livemode: z.boolean(),
    metadata: z.record(z.string()).optional().nullable(),
    nickname: z.string().optional().nullable(),
    object: z.literal("plan"),
    product: z
      .union([z.string(), productSchema, deletedProductSchema])
      .optional()
      .nullable(),
    tiers: z.array(planTierSchema).optional(),
    tiers_mode: z
      .union([z.literal("graduated"), z.literal("volume")])
      .optional(),
    transform_usage: transformUsageSchema.optional().nullable(),
    trial_period_days: z.number().optional().nullable(),
    usage_type: z.union([z.literal("licensed"), z.literal("metered")]),
  })
);

export const priceSchema: z.ZodSchema<Price> = z.lazy(() =>
  z.object({
    active: z.boolean(),
    billing_scheme: z.union([z.literal("per_unit"), z.literal("tiered")]),
    created: z.number(),
    currency: z.string(),
    currency_options: z.record(currencyOptionSchema).optional(),
    custom_unit_amount: customUnitAmountSchema.optional().nullable(),
    id: z.string(),
    livemode: z.boolean(),
    lookup_key: z.string().optional().nullable(),
    metadata: z.record(z.string()),
    nickname: z.string().optional().nullable(),
    object: z.literal("price"),
    product: z.union([z.string(), productSchema, deletedProductSchema]),
    recurring: recurringSchema.optional().nullable(),
    tax_behavior: z
      .union([
        z.literal("exclusive"),
        z.literal("inclusive"),
        z.literal("unspecified"),
      ])
      .optional(),
    tiers: z.array(priceTierSchema).optional(),
    tiers_mode: z
      .union([z.literal("graduated"), z.literal("volume")])
      .optional(),
    transform_quantity: transformQuantitySchema.optional().nullable(),
    type: z.union([z.literal("one_time"), z.literal("recurring")]),
    unit_amount: z.number().optional().nullable(),
    unit_amount_decimal: z.string().optional().nullable(),
  })
);

export const productSchema: z.ZodSchema<Product> = z.lazy(() =>
  z.object({
    active: z.boolean(),
    created: z.number(),
    default_price: z.union([z.string(), priceSchema]).optional().nullable(),
    description: z.string().optional().nullable(),
    id: z.string(),
    images: z.array(z.string()),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    name: z.string(),
    object: z.literal("product"),
    package_dimensions: packageDimensionsSchema.optional().nullable(),
    shippable: z.boolean().optional().nullable(),
    statement_descriptor: z.string().optional().nullable(),
    tax_code: z.union([z.string(), taxCodeSchema]).optional().nullable(),
    unit_label: z.string().optional().nullable(),
    updated: z.number(),
    url: z.string().optional().nullable(),
  })
);

export const promotionCodeSchema: z.ZodSchema<PromotionCode> = z.lazy(() =>
  z.object({
    active: z.boolean(),
    code: z.string(),
    coupon: couponSchema,
    created: z.number(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    expires_at: z.number().optional().nullable(),
    id: z.string(),
    livemode: z.boolean(),
    max_redemptions: z.number().optional().nullable(),
    metadata: z.record(z.string()).optional().nullable(),
    object: z.literal("promotion_code"),
    restrictions: promotionCodesResourceRestrictionsSchema,
    times_redeemed: z.number(),
  })
);

export const quoteSchema: z.ZodSchema<Quote> = z.lazy(() =>
  z.object({
    amount_subtotal: z.number(),
    amount_total: z.number(),
    application: z
      .union([z.string(), applicationSchema, deletedApplicationSchema])
      .optional()
      .nullable(),
    application_fee_amount: z.number().optional().nullable(),
    application_fee_percent: z.number().optional().nullable(),
    automatic_tax: quotesResourceAutomaticTaxSchema,
    collection_method: z.union([
      z.literal("charge_automatically"),
      z.literal("send_invoice"),
    ]),
    computed: quotesResourceComputedSchema,
    created: z.number(),
    currency: z.string().optional().nullable(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    default_tax_rates: z.array(z.union([z.string(), taxRateSchema])).optional(),
    description: z.string().optional().nullable(),
    discounts: z.array(z.union([z.string(), discountSchema])),
    expires_at: z.number(),
    footer: z.string().optional().nullable(),
    from_quote: quotesResourceFromQuoteSchema.optional().nullable(),
    header: z.string().optional().nullable(),
    id: z.string(),
    invoice: z
      .union([z.string(), invoiceSchema, deletedInvoiceSchema])
      .optional()
      .nullable(),
    invoice_settings: invoiceSettingQuoteSettingSchema.optional().nullable(),
    line_items: z
      .object({
        data: z.array(itemSchema),
        has_more: z.boolean(),
        object: z.literal("list"),
        url: z.string(),
      })
      .optional(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    number: z.string().optional().nullable(),
    object: z.literal("quote"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    status: z.union([
      z.literal("accepted"),
      z.literal("canceled"),
      z.literal("draft"),
      z.literal("open"),
    ]),
    status_transitions: quotesResourceStatusTransitionsSchema,
    subscription: z
      .union([z.string(), subscriptionSchema])
      .optional()
      .nullable(),
    subscription_data: quotesResourceSubscriptionDataSubscriptionDataSchema,
    subscription_schedule: z
      .union([z.string(), subscriptionScheduleSchema])
      .optional()
      .nullable(),
    test_clock: z
      .union([z.string(), testHelpersTestClockSchema])
      .optional()
      .nullable(),
    total_details: quotesResourceTotalDetailsSchema,
    transfer_data: quotesResourceTransferDataSchema.optional().nullable(),
  })
);

export const quotesResourceComputedSchema: z.ZodSchema<QuotesResourceComputed> = z.lazy(
  () =>
    z.object({
      recurring: quotesResourceRecurringSchema.optional().nullable(),
      upfront: quotesResourceUpfrontSchema,
    })
);

export const quotesResourceFromQuoteSchema: z.ZodSchema<QuotesResourceFromQuote> = z.lazy(
  () =>
    z.object({
      is_revision: z.boolean(),
      quote: z.union([z.string(), quoteSchema]),
    })
);

export const quotesResourceRecurringSchema: z.ZodSchema<QuotesResourceRecurring> = z.lazy(
  () =>
    z.object({
      amount_subtotal: z.number(),
      amount_total: z.number(),
      interval: z.union([
        z.literal("day"),
        z.literal("month"),
        z.literal("week"),
        z.literal("year"),
      ]),
      interval_count: z.number(),
      total_details: quotesResourceTotalDetailsSchema,
    })
);

export const quotesResourceTotalDetailsSchema: z.ZodSchema<QuotesResourceTotalDetails> = z.lazy(
  () =>
    z.object({
      amount_discount: z.number(),
      amount_shipping: z.number().optional().nullable(),
      amount_tax: z.number(),
      breakdown: quotesResourceTotalDetailsResourceBreakdownSchema.optional(),
    })
);

export const quotesResourceTotalDetailsResourceBreakdownSchema: z.ZodSchema<QuotesResourceTotalDetailsResourceBreakdown> = z.lazy(
  () =>
    z.object({
      discounts: z.array(lineItemsDiscountAmountSchema),
      taxes: z.array(lineItemsTaxAmountSchema),
    })
);

export const quotesResourceTransferDataSchema: z.ZodSchema<QuotesResourceTransferData> = z.lazy(
  () =>
    z.object({
      amount: z.number().optional().nullable(),
      amount_percent: z.number().optional().nullable(),
      destination: z.union([z.string(), accountSchema]),
    })
);

export const quotesResourceUpfrontSchema: z.ZodSchema<QuotesResourceUpfront> = z.lazy(
  () =>
    z.object({
      amount_subtotal: z.number(),
      amount_total: z.number(),
      line_items: z
        .object({
          data: z.array(itemSchema),
          has_more: z.boolean(),
          object: z.literal("list"),
          url: z.string(),
        })
        .optional(),
      total_details: quotesResourceTotalDetailsSchema,
    })
);

export const radarEarlyFraudWarningSchema: z.ZodSchema<RadarEarlyFraudWarning> = z.lazy(
  () =>
    z.object({
      actionable: z.boolean(),
      charge: z.union([z.string(), chargeSchema]),
      created: z.number(),
      fraud_type: z.string(),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("radar.early_fraud_warning"),
      payment_intent: z.union([z.string(), paymentIntentSchema]).optional(),
    })
);

export const refundSchema: z.ZodSchema<Refund> = z.lazy(() =>
  z.object({
    amount: z.number(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    charge: z.union([z.string(), chargeSchema]).optional().nullable(),
    created: z.number(),
    currency: z.string(),
    description: z.string().optional(),
    failure_balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional(),
    failure_reason: z.string().optional(),
    id: z.string(),
    instructions_email: z.string().optional(),
    metadata: z.record(z.string()).optional().nullable(),
    next_action: refundNextActionSchema.optional(),
    object: z.literal("refund"),
    payment_intent: z
      .union([z.string(), paymentIntentSchema])
      .optional()
      .nullable(),
    reason: z
      .union([
        z.literal("duplicate"),
        z.literal("expired_uncaptured_charge"),
        z.literal("fraudulent"),
        z.literal("requested_by_customer"),
      ])
      .optional(),
    receipt_number: z.string().optional().nullable(),
    source_transfer_reversal: z
      .union([z.string(), transferReversalSchema])
      .optional()
      .nullable(),
    status: z.string().optional().nullable(),
    transfer_reversal: z
      .union([z.string(), transferReversalSchema])
      .optional()
      .nullable(),
  })
);

export const reportingReportRunSchema: z.ZodSchema<ReportingReportRun> = z.lazy(
  () =>
    z.object({
      created: z.number(),
      error: z.string().optional().nullable(),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("reporting.report_run"),
      parameters: financialReportingFinanceReportRunRunParametersSchema,
      report_type: z.string(),
      result: fileSchema.optional().nullable(),
      status: z.string(),
      succeeded_at: z.number().optional().nullable(),
    })
);

export const reviewSchema: z.ZodSchema<Review> = z.lazy(() =>
  z.object({
    billing_zip: z.string().optional().nullable(),
    charge: z.union([z.string(), chargeSchema]).optional().nullable(),
    closed_reason: z
      .union([
        z.literal("approved"),
        z.literal("disputed"),
        z.literal("redacted"),
        z.literal("refunded"),
        z.literal("refunded_as_fraud"),
      ])
      .optional(),
    created: z.number(),
    id: z.string(),
    ip_address: z.string().optional().nullable(),
    ip_address_location: radarReviewResourceLocationSchema
      .optional()
      .nullable(),
    livemode: z.boolean(),
    object: z.literal("review"),
    open: z.boolean(),
    opened_reason: z.union([z.literal("manual"), z.literal("rule")]),
    payment_intent: z.union([z.string(), paymentIntentSchema]).optional(),
    reason: z.string(),
    session: radarReviewResourceSessionSchema.optional().nullable(),
  })
);

export const scheduledQueryRunSchema: z.ZodSchema<ScheduledQueryRun> = z.lazy(
  () =>
    z.object({
      created: z.number(),
      data_load_time: z.number(),
      error: sigmaScheduledQueryRunErrorSchema.optional(),
      file: fileSchema.optional().nullable(),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("scheduled_query_run"),
      result_available_until: z.number(),
      sql: z.string(),
      status: z.string(),
      title: z.string(),
    })
);

export const sepaDebitGeneratedFromSchema: z.ZodSchema<SepaDebitGeneratedFrom> = z.lazy(
  () =>
    z.object({
      charge: z.union([z.string(), chargeSchema]).optional().nullable(),
      setup_attempt: z
        .union([z.string(), setupAttemptSchema])
        .optional()
        .nullable(),
    })
);

export const setupAttemptSchema: z.ZodSchema<SetupAttempt> = z.lazy(() =>
  z.object({
    application: z.union([z.string(), applicationSchema]).optional().nullable(),
    attach_to_self: z.boolean().optional(),
    created: z.number(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    flow_directions: z
      .array(z.union([z.literal("inbound"), z.literal("outbound")]))
      .optional()
      .nullable(),
    id: z.string(),
    livemode: z.boolean(),
    object: z.literal("setup_attempt"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    payment_method: z.union([z.string(), paymentMethodSchema]),
    payment_method_details: setupAttemptPaymentMethodDetailsSchema,
    setup_error: apiErrorsSchema.optional().nullable(),
    setup_intent: z.union([z.string(), setupIntentSchema]),
    status: z.string(),
    usage: z.string(),
  })
);

export const setupAttemptPaymentMethodDetailsSchema: z.ZodSchema<SetupAttemptPaymentMethodDetails> = z.lazy(
  () =>
    z.object({
      acss_debit: setupAttemptPaymentMethodDetailsAcssDebitSchema.optional(),
      au_becs_debit: setupAttemptPaymentMethodDetailsAuBecsDebitSchema.optional(),
      bacs_debit: setupAttemptPaymentMethodDetailsBacsDebitSchema.optional(),
      bancontact: setupAttemptPaymentMethodDetailsBancontactSchema.optional(),
      blik: setupAttemptPaymentMethodDetailsBlikSchema.optional(),
      boleto: setupAttemptPaymentMethodDetailsBoletoSchema.optional(),
      card: setupAttemptPaymentMethodDetailsCardSchema.optional(),
      card_present: setupAttemptPaymentMethodDetailsCardPresentSchema.optional(),
      cashapp: setupAttemptPaymentMethodDetailsCashappSchema.optional(),
      ideal: setupAttemptPaymentMethodDetailsIdealSchema.optional(),
      klarna: setupAttemptPaymentMethodDetailsKlarnaSchema.optional(),
      link: setupAttemptPaymentMethodDetailsLinkSchema.optional(),
      paypal: setupAttemptPaymentMethodDetailsPaypalSchema.optional(),
      sepa_debit: setupAttemptPaymentMethodDetailsSepaDebitSchema.optional(),
      sofort: setupAttemptPaymentMethodDetailsSofortSchema.optional(),
      type: z.string(),
      us_bank_account: setupAttemptPaymentMethodDetailsUsBankAccountSchema.optional(),
    })
);

export const setupAttemptPaymentMethodDetailsBancontactSchema: z.ZodSchema<SetupAttemptPaymentMethodDetailsBancontact> = z.lazy(
  () =>
    z.object({
      bank_code: z.string().optional().nullable(),
      bank_name: z.string().optional().nullable(),
      bic: z.string().optional().nullable(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      preferred_language: z
        .union([
          z.literal("de"),
          z.literal("en"),
          z.literal("fr"),
          z.literal("nl"),
        ])
        .optional(),
      verified_name: z.string().optional().nullable(),
    })
);

export const setupAttemptPaymentMethodDetailsCardPresentSchema: z.ZodSchema<SetupAttemptPaymentMethodDetailsCardPresent> = z.lazy(
  () =>
    z.object({
      generated_card: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
    })
);

export const setupAttemptPaymentMethodDetailsIdealSchema: z.ZodSchema<SetupAttemptPaymentMethodDetailsIdeal> = z.lazy(
  () =>
    z.object({
      bank: z
        .union([
          z.literal("abn_amro"),
          z.literal("asn_bank"),
          z.literal("bunq"),
          z.literal("handelsbanken"),
          z.literal("ing"),
          z.literal("knab"),
          z.literal("moneyou"),
          z.literal("rabobank"),
          z.literal("regiobank"),
          z.literal("revolut"),
          z.literal("sns_bank"),
          z.literal("triodos_bank"),
          z.literal("van_lanschot"),
          z.literal("yoursafe"),
        ])
        .optional(),
      bic: z
        .union([
          z.literal("ABNANL2A"),
          z.literal("ASNBNL21"),
          z.literal("BITSNL2A"),
          z.literal("BUNQNL2A"),
          z.literal("FVLBNL22"),
          z.literal("HANDNL2A"),
          z.literal("INGBNL2A"),
          z.literal("KNABNL2H"),
          z.literal("MOYONL21"),
          z.literal("RABONL2U"),
          z.literal("RBRBNL21"),
          z.literal("REVOIE23"),
          z.literal("REVOLT21"),
          z.literal("SNSBNL2A"),
          z.literal("TRIONL2U"),
        ])
        .optional(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      verified_name: z.string().optional().nullable(),
    })
);

export const setupAttemptPaymentMethodDetailsSofortSchema: z.ZodSchema<SetupAttemptPaymentMethodDetailsSofort> = z.lazy(
  () =>
    z.object({
      bank_code: z.string().optional().nullable(),
      bank_name: z.string().optional().nullable(),
      bic: z.string().optional().nullable(),
      generated_sepa_debit: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      generated_sepa_debit_mandate: z
        .union([z.string(), mandateSchema])
        .optional()
        .nullable(),
      iban_last4: z.string().optional().nullable(),
      preferred_language: z
        .union([
          z.literal("de"),
          z.literal("en"),
          z.literal("fr"),
          z.literal("nl"),
        ])
        .optional(),
      verified_name: z.string().optional().nullable(),
    })
);

export const setupIntentSchema: z.ZodSchema<SetupIntent> = z.lazy(() =>
  z.object({
    application: z.union([z.string(), applicationSchema]).optional().nullable(),
    attach_to_self: z.boolean().optional(),
    automatic_payment_methods: paymentFlowsAutomaticPaymentMethodsSetupIntentSchema
      .optional()
      .nullable(),
    cancellation_reason: z
      .union([
        z.literal("abandoned"),
        z.literal("duplicate"),
        z.literal("requested_by_customer"),
      ])
      .optional(),
    client_secret: z.string().optional().nullable(),
    created: z.number(),
    customer: z
      .union([z.string(), customerSchema, deletedCustomerSchema])
      .optional()
      .nullable(),
    description: z.string().optional().nullable(),
    flow_directions: z
      .array(z.union([z.literal("inbound"), z.literal("outbound")]))
      .optional()
      .nullable(),
    id: z.string(),
    last_setup_error: apiErrorsSchema.optional().nullable(),
    latest_attempt: z
      .union([z.string(), setupAttemptSchema])
      .optional()
      .nullable(),
    livemode: z.boolean(),
    mandate: z.union([z.string(), mandateSchema]).optional().nullable(),
    metadata: z.record(z.string()).optional().nullable(),
    next_action: setupIntentNextActionSchema.optional().nullable(),
    object: z.literal("setup_intent"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    payment_method: z
      .union([z.string(), paymentMethodSchema])
      .optional()
      .nullable(),
    payment_method_options: setupIntentPaymentMethodOptionsSchema
      .optional()
      .nullable(),
    payment_method_types: z.array(z.string()),
    single_use_mandate: z
      .union([z.string(), mandateSchema])
      .optional()
      .nullable(),
    status: z.union([
      z.literal("canceled"),
      z.literal("processing"),
      z.literal("requires_action"),
      z.literal("requires_confirmation"),
      z.literal("requires_payment_method"),
      z.literal("succeeded"),
    ]),
    usage: z.string(),
  })
);

export const subscriptionSchema: z.ZodSchema<Subscription> = z.lazy(() =>
  z.object({
    application: z
      .union([z.string(), applicationSchema, deletedApplicationSchema])
      .optional()
      .nullable(),
    application_fee_percent: z.number().optional().nullable(),
    automatic_tax: subscriptionAutomaticTaxSchema,
    billing_cycle_anchor: z.number(),
    billing_thresholds: subscriptionBillingThresholdsSchema
      .optional()
      .nullable(),
    cancel_at: z.number().optional().nullable(),
    cancel_at_period_end: z.boolean(),
    canceled_at: z.number().optional().nullable(),
    cancellation_details: cancellationDetailsSchema.optional().nullable(),
    collection_method: z.union([
      z.literal("charge_automatically"),
      z.literal("send_invoice"),
    ]),
    created: z.number(),
    currency: z.string(),
    current_period_end: z.number(),
    current_period_start: z.number(),
    customer: z.union([z.string(), customerSchema, deletedCustomerSchema]),
    days_until_due: z.number().optional().nullable(),
    default_payment_method: z
      .union([z.string(), paymentMethodSchema])
      .optional()
      .nullable(),
    default_source: z
      .union([z.string(), bankAccountSchema, cardSchema, sourceSchema])
      .optional()
      .nullable(),
    default_tax_rates: z.array(taxRateSchema).optional().nullable(),
    description: z.string().optional().nullable(),
    discount: discountSchema.optional().nullable(),
    ended_at: z.number().optional().nullable(),
    id: z.string(),
    items: z.object({
      data: z.array(subscriptionItemSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    }),
    latest_invoice: z.union([z.string(), invoiceSchema]).optional().nullable(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    next_pending_invoice_item_invoice: z.number().optional().nullable(),
    object: z.literal("subscription"),
    on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
    pause_collection: subscriptionsResourcePauseCollectionSchema
      .optional()
      .nullable(),
    payment_settings: subscriptionsResourcePaymentSettingsSchema
      .optional()
      .nullable(),
    pending_invoice_item_interval: subscriptionPendingInvoiceItemIntervalSchema
      .optional()
      .nullable(),
    pending_setup_intent: z
      .union([z.string(), setupIntentSchema])
      .optional()
      .nullable(),
    pending_update: subscriptionsResourcePendingUpdateSchema
      .optional()
      .nullable(),
    schedule: z
      .union([z.string(), subscriptionScheduleSchema])
      .optional()
      .nullable(),
    start_date: z.number(),
    status: z.union([
      z.literal("active"),
      z.literal("canceled"),
      z.literal("incomplete"),
      z.literal("incomplete_expired"),
      z.literal("past_due"),
      z.literal("paused"),
      z.literal("trialing"),
      z.literal("unpaid"),
    ]),
    test_clock: z
      .union([z.string(), testHelpersTestClockSchema])
      .optional()
      .nullable(),
    transfer_data: subscriptionTransferDataSchema.optional().nullable(),
    trial_end: z.number().optional().nullable(),
    trial_settings: subscriptionsTrialsResourceTrialSettingsSchema
      .optional()
      .nullable(),
    trial_start: z.number().optional().nullable(),
  })
);

export const subscriptionItemSchema: z.ZodSchema<SubscriptionItem> = z.lazy(
  () =>
    z.object({
      billing_thresholds: subscriptionItemBillingThresholdsSchema
        .optional()
        .nullable(),
      created: z.number(),
      id: z.string(),
      metadata: z.record(z.string()),
      object: z.literal("subscription_item"),
      price: priceSchema,
      quantity: z.number().optional(),
      subscription: z.string(),
      tax_rates: z.array(taxRateSchema).optional().nullable(),
    })
);

export const subscriptionScheduleSchema: z.ZodSchema<SubscriptionSchedule> = z.lazy(
  () =>
    z.object({
      application: z
        .union([z.string(), applicationSchema, deletedApplicationSchema])
        .optional()
        .nullable(),
      canceled_at: z.number().optional().nullable(),
      completed_at: z.number().optional().nullable(),
      created: z.number(),
      current_phase: subscriptionScheduleCurrentPhaseSchema
        .optional()
        .nullable(),
      customer: z.union([z.string(), customerSchema, deletedCustomerSchema]),
      default_settings: subscriptionSchedulesResourceDefaultSettingsSchema,
      end_behavior: z.union([
        z.literal("cancel"),
        z.literal("none"),
        z.literal("release"),
        z.literal("renew"),
      ]),
      id: z.string(),
      livemode: z.boolean(),
      metadata: z.record(z.string()).optional().nullable(),
      object: z.literal("subscription_schedule"),
      phases: z.array(subscriptionSchedulePhaseConfigurationSchema),
      released_at: z.number().optional().nullable(),
      released_subscription: z.string().optional().nullable(),
      status: z.union([
        z.literal("active"),
        z.literal("canceled"),
        z.literal("completed"),
        z.literal("not_started"),
        z.literal("released"),
      ]),
      subscription: z
        .union([z.string(), subscriptionSchema])
        .optional()
        .nullable(),
      test_clock: z
        .union([z.string(), testHelpersTestClockSchema])
        .optional()
        .nullable(),
    })
);

export const subscriptionScheduleAddInvoiceItemSchema: z.ZodSchema<SubscriptionScheduleAddInvoiceItem> = z.lazy(
  () =>
    z.object({
      price: z.union([z.string(), priceSchema, deletedPriceSchema]),
      quantity: z.number().optional().nullable(),
      tax_rates: z.array(taxRateSchema).optional().nullable(),
    })
);

export const subscriptionScheduleConfigurationItemSchema: z.ZodSchema<SubscriptionScheduleConfigurationItem> = z.lazy(
  () =>
    z.object({
      billing_thresholds: subscriptionItemBillingThresholdsSchema
        .optional()
        .nullable(),
      metadata: z.record(z.string()).optional().nullable(),
      price: z.union([z.string(), priceSchema, deletedPriceSchema]),
      quantity: z.number().optional(),
      tax_rates: z.array(taxRateSchema).optional().nullable(),
    })
);

export const subscriptionSchedulePhaseConfigurationSchema: z.ZodSchema<SubscriptionSchedulePhaseConfiguration> = z.lazy(
  () =>
    z.object({
      add_invoice_items: z.array(subscriptionScheduleAddInvoiceItemSchema),
      application_fee_percent: z.number().optional().nullable(),
      automatic_tax: schedulesPhaseAutomaticTaxSchema.optional(),
      billing_cycle_anchor: z
        .union([z.literal("automatic"), z.literal("phase_start")])
        .optional(),
      billing_thresholds: subscriptionBillingThresholdsSchema
        .optional()
        .nullable(),
      collection_method: z
        .union([z.literal("charge_automatically"), z.literal("send_invoice")])
        .optional(),
      coupon: z
        .union([z.string(), couponSchema, deletedCouponSchema])
        .optional()
        .nullable(),
      currency: z.string(),
      default_payment_method: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      default_tax_rates: z.array(taxRateSchema).optional().nullable(),
      description: z.string().optional().nullable(),
      end_date: z.number(),
      invoice_settings: invoiceSettingPhaseSettingSchema.optional().nullable(),
      items: z.array(subscriptionScheduleConfigurationItemSchema),
      metadata: z.record(z.string()).optional().nullable(),
      on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
      proration_behavior: z.union([
        z.literal("always_invoice"),
        z.literal("create_prorations"),
        z.literal("none"),
      ]),
      start_date: z.number(),
      transfer_data: subscriptionTransferDataSchema.optional().nullable(),
      trial_end: z.number().optional().nullable(),
    })
);

export const subscriptionSchedulesResourceDefaultSettingsSchema: z.ZodSchema<SubscriptionSchedulesResourceDefaultSettings> = z.lazy(
  () =>
    z.object({
      application_fee_percent: z.number().optional().nullable(),
      automatic_tax: subscriptionSchedulesResourceDefaultSettingsAutomaticTaxSchema.optional(),
      billing_cycle_anchor: z.union([
        z.literal("automatic"),
        z.literal("phase_start"),
      ]),
      billing_thresholds: subscriptionBillingThresholdsSchema
        .optional()
        .nullable(),
      collection_method: z
        .union([z.literal("charge_automatically"), z.literal("send_invoice")])
        .optional(),
      default_payment_method: z
        .union([z.string(), paymentMethodSchema])
        .optional()
        .nullable(),
      description: z.string().optional().nullable(),
      invoice_settings: invoiceSettingSubscriptionScheduleSettingSchema
        .optional()
        .nullable(),
      on_behalf_of: z.union([z.string(), accountSchema]).optional().nullable(),
      transfer_data: subscriptionTransferDataSchema.optional().nullable(),
    })
);

export const subscriptionTransferDataSchema: z.ZodSchema<SubscriptionTransferData> = z.lazy(
  () =>
    z.object({
      amount_percent: z.number().optional().nullable(),
      destination: z.union([z.string(), accountSchema]),
    })
);

export const subscriptionsResourcePendingUpdateSchema: z.ZodSchema<SubscriptionsResourcePendingUpdate> = z.lazy(
  () =>
    z.object({
      billing_cycle_anchor: z.number().optional().nullable(),
      expires_at: z.number(),
      subscription_items: z.array(subscriptionItemSchema).optional().nullable(),
      trial_end: z.number().optional().nullable(),
      trial_from_plan: z.boolean().optional().nullable(),
    })
);

export const taxIdSchema: z.ZodSchema<TaxId> = z.lazy(() =>
  z.object({
    country: z.string().optional().nullable(),
    created: z.number(),
    customer: z.union([z.string(), customerSchema]).optional().nullable(),
    id: z.string(),
    livemode: z.boolean(),
    object: z.literal("tax_id"),
    type: z.union([
      z.literal("ad_nrt"),
      z.literal("ae_trn"),
      z.literal("ar_cuit"),
      z.literal("au_abn"),
      z.literal("au_arn"),
      z.literal("bg_uic"),
      z.literal("bo_tin"),
      z.literal("br_cnpj"),
      z.literal("br_cpf"),
      z.literal("ca_bn"),
      z.literal("ca_gst_hst"),
      z.literal("ca_pst_bc"),
      z.literal("ca_pst_mb"),
      z.literal("ca_pst_sk"),
      z.literal("ca_qst"),
      z.literal("ch_vat"),
      z.literal("cl_tin"),
      z.literal("cn_tin"),
      z.literal("co_nit"),
      z.literal("cr_tin"),
      z.literal("do_rcn"),
      z.literal("ec_ruc"),
      z.literal("eg_tin"),
      z.literal("es_cif"),
      z.literal("eu_oss_vat"),
      z.literal("eu_vat"),
      z.literal("gb_vat"),
      z.literal("ge_vat"),
      z.literal("hk_br"),
      z.literal("hu_tin"),
      z.literal("id_npwp"),
      z.literal("il_vat"),
      z.literal("in_gst"),
      z.literal("is_vat"),
      z.literal("jp_cn"),
      z.literal("jp_rn"),
      z.literal("jp_trn"),
      z.literal("ke_pin"),
      z.literal("kr_brn"),
      z.literal("li_uid"),
      z.literal("mx_rfc"),
      z.literal("my_frp"),
      z.literal("my_itn"),
      z.literal("my_sst"),
      z.literal("no_vat"),
      z.literal("nz_gst"),
      z.literal("pe_ruc"),
      z.literal("ph_tin"),
      z.literal("ro_tin"),
      z.literal("rs_pib"),
      z.literal("ru_inn"),
      z.literal("ru_kpp"),
      z.literal("sa_vat"),
      z.literal("sg_gst"),
      z.literal("sg_uen"),
      z.literal("si_tin"),
      z.literal("sv_nit"),
      z.literal("th_vat"),
      z.literal("tr_tin"),
      z.literal("tw_vat"),
      z.literal("ua_vat"),
      z.literal("unknown"),
      z.literal("us_ein"),
      z.literal("uy_ruc"),
      z.literal("ve_rif"),
      z.literal("vn_tin"),
      z.literal("za_vat"),
    ]),
    value: z.string(),
    verification: taxIdVerificationSchema.optional().nullable(),
  })
);

export const terminalConfigurationSchema: z.ZodSchema<TerminalConfiguration> = z.lazy(
  () =>
    z.object({
      bbpos_wisepos_e: terminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema.optional(),
      id: z.string(),
      is_account_default: z.boolean().optional().nullable(),
      livemode: z.boolean(),
      object: z.literal("terminal.configuration"),
      tipping: terminalConfigurationConfigurationResourceTippingSchema.optional(),
      verifone_p400: terminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema.optional(),
    })
);

export const terminalReaderSchema: z.ZodSchema<TerminalReader> = z.lazy(() =>
  z.object({
    action: terminalReaderReaderResourceReaderActionSchema
      .optional()
      .nullable(),
    device_sw_version: z.string().optional().nullable(),
    device_type: z.union([
      z.literal("bbpos_chipper2x"),
      z.literal("bbpos_wisepad3"),
      z.literal("bbpos_wisepos_e"),
      z.literal("simulated_wisepos_e"),
      z.literal("stripe_m2"),
      z.literal("verifone_P400"),
    ]),
    id: z.string(),
    ip_address: z.string().optional().nullable(),
    label: z.string(),
    livemode: z.boolean(),
    location: z
      .union([z.string(), terminalLocationSchema])
      .optional()
      .nullable(),
    metadata: z.record(z.string()),
    object: z.literal("terminal.reader"),
    serial_number: z.string(),
    status: z.string().optional().nullable(),
  })
);

export const terminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema: z.ZodSchema<TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig> = z.lazy(
  () =>
    z.object({
      splashscreen: z.union([z.string(), fileSchema]).optional(),
    })
);

export const terminalReaderReaderResourceProcessPaymentIntentActionSchema: z.ZodSchema<TerminalReaderReaderResourceProcessPaymentIntentAction> = z.lazy(
  () =>
    z.object({
      payment_intent: z.union([z.string(), paymentIntentSchema]),
      process_config: terminalReaderReaderResourceProcessConfigSchema.optional(),
    })
);

export const terminalReaderReaderResourceProcessSetupIntentActionSchema: z.ZodSchema<TerminalReaderReaderResourceProcessSetupIntentAction> = z.lazy(
  () =>
    z.object({
      generated_card: z.string().optional(),
      process_config: terminalReaderReaderResourceProcessSetupConfigSchema.optional(),
      setup_intent: z.union([z.string(), setupIntentSchema]),
    })
);

export const terminalReaderReaderResourceReaderActionSchema: z.ZodSchema<TerminalReaderReaderResourceReaderAction> = z.lazy(
  () =>
    z.object({
      failure_code: z.string().optional().nullable(),
      failure_message: z.string().optional().nullable(),
      process_payment_intent: terminalReaderReaderResourceProcessPaymentIntentActionSchema.optional(),
      process_setup_intent: terminalReaderReaderResourceProcessSetupIntentActionSchema.optional(),
      refund_payment: terminalReaderReaderResourceRefundPaymentActionSchema.optional(),
      set_reader_display: terminalReaderReaderResourceSetReaderDisplayActionSchema.optional(),
      status: z.union([
        z.literal("failed"),
        z.literal("in_progress"),
        z.literal("succeeded"),
      ]),
      type: z.union([
        z.literal("process_payment_intent"),
        z.literal("process_setup_intent"),
        z.literal("refund_payment"),
        z.literal("set_reader_display"),
      ]),
    })
);

export const terminalReaderReaderResourceRefundPaymentActionSchema: z.ZodSchema<TerminalReaderReaderResourceRefundPaymentAction> = z.lazy(
  () =>
    z.object({
      amount: z.number().optional(),
      charge: z.union([z.string(), chargeSchema]).optional(),
      metadata: z.record(z.string()).optional(),
      payment_intent: z.union([z.string(), paymentIntentSchema]).optional(),
      reason: z
        .union([
          z.literal("duplicate"),
          z.literal("fraudulent"),
          z.literal("requested_by_customer"),
        ])
        .optional(),
      refund: z.union([z.string(), refundSchema]).optional(),
      refund_application_fee: z.boolean().optional(),
      reverse_transfer: z.boolean().optional(),
    })
);

export const tokenSchema: z.ZodSchema<Token> = z.lazy(() =>
  z.object({
    bank_account: bankAccountSchema.optional(),
    card: cardSchema.optional(),
    client_ip: z.string().optional().nullable(),
    created: z.number(),
    id: z.string(),
    livemode: z.boolean(),
    object: z.literal("token"),
    type: z.string(),
    used: z.boolean(),
  })
);

export const topupSchema: z.ZodSchema<Topup> = z.lazy(() =>
  z.object({
    amount: z.number(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string(),
    description: z.string().optional().nullable(),
    expected_availability_date: z.number().optional().nullable(),
    failure_code: z.string().optional().nullable(),
    failure_message: z.string().optional().nullable(),
    id: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("topup"),
    source: sourceSchema.optional().nullable(),
    statement_descriptor: z.string().optional().nullable(),
    status: z.union([
      z.literal("canceled"),
      z.literal("failed"),
      z.literal("pending"),
      z.literal("reversed"),
      z.literal("succeeded"),
    ]),
    transfer_group: z.string().optional().nullable(),
  })
);

export const transferSchema: z.ZodSchema<Transfer> = z.lazy(() =>
  z.object({
    amount: z.number(),
    amount_reversed: z.number(),
    balance_transaction: z
      .union([z.string(), balanceTransactionSchema])
      .optional()
      .nullable(),
    created: z.number(),
    currency: z.string(),
    description: z.string().optional().nullable(),
    destination: z.union([z.string(), accountSchema]).optional().nullable(),
    destination_payment: z.union([z.string(), chargeSchema]).optional(),
    id: z.string(),
    livemode: z.boolean(),
    metadata: z.record(z.string()),
    object: z.literal("transfer"),
    reversals: z.object({
      data: z.array(transferReversalSchema),
      has_more: z.boolean(),
      object: z.literal("list"),
      url: z.string(),
    }),
    reversed: z.boolean(),
    source_transaction: z
      .union([z.string(), chargeSchema])
      .optional()
      .nullable(),
    source_type: z.string().optional(),
    transfer_group: z.string().optional().nullable(),
  })
);

export const transferDataSchema: z.ZodSchema<TransferData> = z.lazy(() =>
  z.object({
    amount: z.number().optional(),
    destination: z.union([z.string(), accountSchema]),
  })
);

export const transferReversalSchema: z.ZodSchema<TransferReversal> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      balance_transaction: z
        .union([z.string(), balanceTransactionSchema])
        .optional()
        .nullable(),
      created: z.number(),
      currency: z.string(),
      destination_payment_refund: z
        .union([z.string(), refundSchema])
        .optional()
        .nullable(),
      id: z.string(),
      metadata: z.record(z.string()).optional().nullable(),
      object: z.literal("transfer_reversal"),
      source_refund: z.union([z.string(), refundSchema]).optional().nullable(),
      transfer: z.union([z.string(), transferSchema]),
    })
);

export const treasuryCreditReversalSchema: z.ZodSchema<TreasuryCreditReversal> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      created: z.number(),
      currency: z.string(),
      financial_account: z.string(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      network: z.union([z.literal("ach"), z.literal("stripe")]),
      object: z.literal("treasury.credit_reversal"),
      received_credit: z.string(),
      status: z.union([
        z.literal("canceled"),
        z.literal("posted"),
        z.literal("processing"),
      ]),
      status_transitions: treasuryReceivedCreditsResourceStatusTransitionsSchema,
      transaction: z
        .union([z.string(), treasuryTransactionSchema])
        .optional()
        .nullable(),
    })
);

export const treasuryDebitReversalSchema: z.ZodSchema<TreasuryDebitReversal> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      created: z.number(),
      currency: z.string(),
      financial_account: z.string().optional().nullable(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      linked_flows: treasuryReceivedDebitsResourceDebitReversalLinkedFlowsSchema
        .optional()
        .nullable(),
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      network: z.union([z.literal("ach"), z.literal("card")]),
      object: z.literal("treasury.debit_reversal"),
      received_debit: z.string(),
      status: z.union([
        z.literal("failed"),
        z.literal("processing"),
        z.literal("succeeded"),
      ]),
      status_transitions: treasuryReceivedDebitsResourceStatusTransitionsSchema,
      transaction: z
        .union([z.string(), treasuryTransactionSchema])
        .optional()
        .nullable(),
    })
);

export const treasuryInboundTransferSchema: z.ZodSchema<TreasuryInboundTransfer> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      cancelable: z.boolean(),
      created: z.number(),
      currency: z.string(),
      description: z.string().optional().nullable(),
      failure_details: treasuryInboundTransfersResourceFailureDetailsSchema
        .optional()
        .nullable(),
      financial_account: z.string(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      linked_flows: treasuryInboundTransfersResourceInboundTransferResourceLinkedFlowsSchema,
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      object: z.literal("treasury.inbound_transfer"),
      origin_payment_method: z.string(),
      origin_payment_method_details: inboundTransfersSchema
        .optional()
        .nullable(),
      returned: z.boolean().optional().nullable(),
      statement_descriptor: z.string(),
      status: z.union([
        z.literal("canceled"),
        z.literal("failed"),
        z.literal("processing"),
        z.literal("succeeded"),
      ]),
      status_transitions: treasuryInboundTransfersResourceInboundTransferResourceStatusTransitionsSchema,
      transaction: z
        .union([z.string(), treasuryTransactionSchema])
        .optional()
        .nullable(),
    })
);

export const treasuryOutboundPaymentSchema: z.ZodSchema<TreasuryOutboundPayment> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      cancelable: z.boolean(),
      created: z.number(),
      currency: z.string(),
      customer: z.string().optional().nullable(),
      description: z.string().optional().nullable(),
      destination_payment_method: z.string().optional().nullable(),
      destination_payment_method_details: outboundPaymentsPaymentMethodDetailsSchema
        .optional()
        .nullable(),
      end_user_details: treasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsSchema
        .optional()
        .nullable(),
      expected_arrival_date: z.number(),
      financial_account: z.string(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      object: z.literal("treasury.outbound_payment"),
      returned_details: treasuryOutboundPaymentsResourceReturnedStatusSchema
        .optional()
        .nullable(),
      statement_descriptor: z.string(),
      status: z.union([
        z.literal("canceled"),
        z.literal("failed"),
        z.literal("posted"),
        z.literal("processing"),
        z.literal("returned"),
      ]),
      status_transitions: treasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitionsSchema,
      transaction: z.union([z.string(), treasuryTransactionSchema]),
    })
);

export const treasuryOutboundTransferSchema: z.ZodSchema<TreasuryOutboundTransfer> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      cancelable: z.boolean(),
      created: z.number(),
      currency: z.string(),
      description: z.string().optional().nullable(),
      destination_payment_method: z.string().optional().nullable(),
      destination_payment_method_details: outboundTransfersPaymentMethodDetailsSchema,
      expected_arrival_date: z.number(),
      financial_account: z.string(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      livemode: z.boolean(),
      metadata: z.record(z.string()),
      object: z.literal("treasury.outbound_transfer"),
      returned_details: treasuryOutboundTransfersResourceReturnedDetailsSchema
        .optional()
        .nullable(),
      statement_descriptor: z.string(),
      status: z.union([
        z.literal("canceled"),
        z.literal("failed"),
        z.literal("posted"),
        z.literal("processing"),
        z.literal("returned"),
      ]),
      status_transitions: treasuryOutboundTransfersResourceStatusTransitionsSchema,
      transaction: z.union([z.string(), treasuryTransactionSchema]),
    })
);

export const treasuryReceivedCreditSchema: z.ZodSchema<TreasuryReceivedCredit> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      created: z.number(),
      currency: z.string(),
      description: z.string(),
      failure_code: z
        .union([
          z.literal("account_closed"),
          z.literal("account_frozen"),
          z.literal("other"),
        ])
        .optional(),
      financial_account: z.string().optional().nullable(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      initiating_payment_method_details: treasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema,
      linked_flows: treasuryReceivedCreditsResourceLinkedFlowsSchema,
      livemode: z.boolean(),
      network: z.union([
        z.literal("ach"),
        z.literal("card"),
        z.literal("stripe"),
        z.literal("us_domestic_wire"),
      ]),
      object: z.literal("treasury.received_credit"),
      reversal_details: treasuryReceivedCreditsResourceReversalDetailsSchema
        .optional()
        .nullable(),
      status: z.union([z.literal("failed"), z.literal("succeeded")]),
      transaction: z
        .union([z.string(), treasuryTransactionSchema])
        .optional()
        .nullable(),
    })
);

export const treasuryReceivedDebitSchema: z.ZodSchema<TreasuryReceivedDebit> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      created: z.number(),
      currency: z.string(),
      description: z.string(),
      failure_code: z
        .union([
          z.literal("account_closed"),
          z.literal("account_frozen"),
          z.literal("insufficient_funds"),
          z.literal("other"),
        ])
        .optional(),
      financial_account: z.string().optional().nullable(),
      hosted_regulatory_receipt_url: z.string().optional().nullable(),
      id: z.string(),
      initiating_payment_method_details: treasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema.optional(),
      linked_flows: treasuryReceivedDebitsResourceLinkedFlowsSchema,
      livemode: z.boolean(),
      network: z.union([
        z.literal("ach"),
        z.literal("card"),
        z.literal("stripe"),
      ]),
      object: z.literal("treasury.received_debit"),
      reversal_details: treasuryReceivedDebitsResourceReversalDetailsSchema
        .optional()
        .nullable(),
      status: z.union([z.literal("failed"), z.literal("succeeded")]),
      transaction: z
        .union([z.string(), treasuryTransactionSchema])
        .optional()
        .nullable(),
    })
);

export const treasuryTransactionSchema: z.ZodSchema<TreasuryTransaction> = z.lazy(
  () =>
    z.object({
      amount: z.number(),
      balance_impact: treasuryTransactionsResourceBalanceImpactSchema,
      created: z.number(),
      currency: z.string(),
      description: z.string(),
      entries: z
        .object({
          data: z.array(treasuryTransactionEntrySchema),
          has_more: z.boolean(),
          object: z.literal("list"),
          url: z.string(),
        })
        .optional()
        .nullable(),
      financial_account: z.string(),
      flow: z.string().optional().nullable(),
      flow_details: treasuryTransactionsResourceFlowDetailsSchema
        .optional()
        .nullable(),
      flow_type: z.union([
        z.literal("credit_reversal"),
        z.literal("debit_reversal"),
        z.literal("inbound_transfer"),
        z.literal("issuing_authorization"),
        z.literal("other"),
        z.literal("outbound_payment"),
        z.literal("outbound_transfer"),
        z.literal("received_credit"),
        z.literal("received_debit"),
      ]),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("treasury.transaction"),
      status: z.union([
        z.literal("open"),
        z.literal("posted"),
        z.literal("void"),
      ]),
      status_transitions: treasuryTransactionsResourceAbstractTransactionResourceStatusTransitionsSchema,
    })
);

export const treasuryTransactionEntrySchema: z.ZodSchema<TreasuryTransactionEntry> = z.lazy(
  () =>
    z.object({
      balance_impact: treasuryTransactionsResourceBalanceImpactSchema,
      created: z.number(),
      currency: z.string(),
      effective_at: z.number(),
      financial_account: z.string(),
      flow: z.string().optional().nullable(),
      flow_details: treasuryTransactionsResourceFlowDetailsSchema
        .optional()
        .nullable(),
      flow_type: z.union([
        z.literal("credit_reversal"),
        z.literal("debit_reversal"),
        z.literal("inbound_transfer"),
        z.literal("issuing_authorization"),
        z.literal("other"),
        z.literal("outbound_payment"),
        z.literal("outbound_transfer"),
        z.literal("received_credit"),
        z.literal("received_debit"),
      ]),
      id: z.string(),
      livemode: z.boolean(),
      object: z.literal("treasury.transaction_entry"),
      transaction: z.union([z.string(), treasuryTransactionSchema]),
      type: z.union([
        z.literal("credit_reversal"),
        z.literal("credit_reversal_posting"),
        z.literal("debit_reversal"),
        z.literal("inbound_transfer"),
        z.literal("inbound_transfer_return"),
        z.literal("issuing_authorization_hold"),
        z.literal("issuing_authorization_release"),
        z.literal("other"),
        z.literal("outbound_payment"),
        z.literal("outbound_payment_cancellation"),
        z.literal("outbound_payment_failure"),
        z.literal("outbound_payment_posting"),
        z.literal("outbound_payment_return"),
        z.literal("outbound_transfer"),
        z.literal("outbound_transfer_cancellation"),
        z.literal("outbound_transfer_failure"),
        z.literal("outbound_transfer_posting"),
        z.literal("outbound_transfer_return"),
        z.literal("received_credit"),
        z.literal("received_debit"),
      ]),
    })
);

export const treasuryOutboundPaymentsResourceReturnedStatusSchema: z.ZodSchema<TreasuryOutboundPaymentsResourceReturnedStatus> = z.lazy(
  () =>
    z.object({
      code: z.union([
        z.literal("account_closed"),
        z.literal("account_frozen"),
        z.literal("bank_account_restricted"),
        z.literal("bank_ownership_changed"),
        z.literal("declined"),
        z.literal("incorrect_account_holder_name"),
        z.literal("invalid_account_number"),
        z.literal("invalid_currency"),
        z.literal("no_account"),
        z.literal("other"),
      ]),
      transaction: z.union([z.string(), treasuryTransactionSchema]),
    })
);

export const treasuryOutboundTransfersResourceReturnedDetailsSchema: z.ZodSchema<TreasuryOutboundTransfersResourceReturnedDetails> = z.lazy(
  () =>
    z.object({
      code: z.union([
        z.literal("account_closed"),
        z.literal("account_frozen"),
        z.literal("bank_account_restricted"),
        z.literal("bank_ownership_changed"),
        z.literal("declined"),
        z.literal("incorrect_account_holder_name"),
        z.literal("invalid_account_number"),
        z.literal("invalid_currency"),
        z.literal("no_account"),
        z.literal("other"),
      ]),
      transaction: z.union([z.string(), treasuryTransactionSchema]),
    })
);

export const treasuryReceivedCreditsResourceLinkedFlowsSchema: z.ZodSchema<TreasuryReceivedCreditsResourceLinkedFlows> = z.lazy(
  () =>
    z.object({
      credit_reversal: z.string().optional().nullable(),
      issuing_authorization: z.string().optional().nullable(),
      issuing_transaction: z.string().optional().nullable(),
      source_flow: z.string().optional().nullable(),
      source_flow_details: treasuryReceivedCreditsResourceSourceFlowsDetailsSchema
        .optional()
        .nullable(),
      source_flow_type: z.string().optional().nullable(),
    })
);

export const treasuryReceivedCreditsResourceSourceFlowsDetailsSchema: z.ZodSchema<TreasuryReceivedCreditsResourceSourceFlowsDetails> = z.lazy(
  () =>
    z.object({
      credit_reversal: treasuryCreditReversalSchema.optional(),
      outbound_payment: treasuryOutboundPaymentSchema.optional(),
      payout: payoutSchema.optional(),
      type: z.union([
        z.literal("credit_reversal"),
        z.literal("other"),
        z.literal("outbound_payment"),
        z.literal("payout"),
      ]),
    })
);

export const treasuryTransactionsResourceFlowDetailsSchema: z.ZodSchema<TreasuryTransactionsResourceFlowDetails> = z.lazy(
  () =>
    z.object({
      credit_reversal: treasuryCreditReversalSchema.optional(),
      debit_reversal: treasuryDebitReversalSchema.optional(),
      inbound_transfer: treasuryInboundTransferSchema.optional(),
      issuing_authorization: issuingAuthorizationSchema.optional(),
      outbound_payment: treasuryOutboundPaymentSchema.optional(),
      outbound_transfer: treasuryOutboundTransferSchema.optional(),
      received_credit: treasuryReceivedCreditSchema.optional(),
      received_debit: treasuryReceivedDebitSchema.optional(),
      type: z.union([
        z.literal("credit_reversal"),
        z.literal("debit_reversal"),
        z.literal("inbound_transfer"),
        z.literal("issuing_authorization"),
        z.literal("other"),
        z.literal("outbound_payment"),
        z.literal("outbound_transfer"),
        z.literal("received_credit"),
        z.literal("received_debit"),
      ]),
    })
);
