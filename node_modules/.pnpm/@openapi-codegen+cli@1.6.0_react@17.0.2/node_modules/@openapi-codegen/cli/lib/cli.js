#!/usr/bin/env node
import { UsageError, Command, Option, Cli } from 'clipanion';
import * as t from 'typanion';
import fsExtra from 'fs-extra';
import { join, parse, posix, dirname } from 'path';
import * as swc from '@swc/core';
import prettier from 'prettier';
import require$$7, { URL, fileURLToPath } from 'url';
import slash from 'slash';
import require$$0$7, { unlinkSync, readFileSync, writeFileSync, existsSync } from 'fs';
import { HTTPError } from 'got';
import { homedir } from 'os';
import swagger2openapi from 'swagger2openapi';
import YAML from 'js-yaml';
import require$$0$3 from 'assert';
import require$$0$2 from 'events';
import require$$0$4 from 'yoga-layout-prebuilt';
import require$$1 from 'https';
import require$$2 from 'http';
import require$$3 from 'net';
import require$$4 from 'tls';
import require$$5 from 'crypto';
import require$$0$6 from 'stream';
import require$$0$5 from 'zlib';
import chalk from 'chalk';
import require$$1$1 from 'module';
import { ReplaySubject } from 'rxjs';
import { __extends, __assign, __spreadArray, __rest as __rest$1, __awaiter, __generator } from 'tslib';
import { Source, visit, print, BREAK, parse as parse$1 } from 'graphql';
import fetch$1 from 'got-fetch';
import ts from 'typescript';
import { highlight } from 'cli-highlight';
import format from 'case';

function _mergeNamespaces(n, m) {
    m.forEach(function (e) {
        e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
            if (k !== 'default' && !(k in n)) {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    });
    return Object.freeze(n);
}

/**
 * Retrieve the OpenAPI source.
 *
 * @param options
 */
const getOpenAPISourceFile = async (options) => {
    switch (options.source) {
        case "file":
            const text = readFileSync(join(process.cwd(), options.relativePath), "utf-8");
            const { ext } = parse(options.relativePath);
            const format = getFormat(ext);
            return { text, format };
        case "url": {
            const { default: got } = await import('got');
            const { pathname } = new URL(options.url);
            const file = await got[options.method || "get"](options.url, {
                headers: options.headers || {},
            });
            let format = "yaml";
            if (pathname.toLowerCase().endsWith("json") ||
                file.headers["content-type"]?.startsWith("application/json")) {
                format = "json";
            }
            return { text: file.body, format };
        }
        case "github": {
            // Retrieve Github token
            const { Prompt } = await Promise.resolve().then(function () { return Prompt$1; });
            const prompt = new Prompt();
            const token = await prompt.githubToken();
            // Retrieve specs
            const { default: got } = await import('got');
            try {
                const raw = await got
                    .post("https://api.github.com/graphql", {
                    headers: {
                        "content-type": "application/json",
                        "user-agent": "openapi-codegen",
                        authorization: `bearer ${token}`,
                    },
                    body: JSON.stringify({
                        query: `query {
            repository(name: "${options.repository}", owner: "${options.owner}") {
              object(expression: "${options.ref}:${options.specPath}") {
                ... on Blob {
                  text
                }
              }
            }
          }`,
                    }),
                })
                    .json();
                prompt.close();
                if (raw.errors) {
                    throw new UsageError(raw.errors[0].message);
                }
                if (raw.data.repository.object === null) {
                    throw new UsageError(`No file found at "${options.specPath}"`);
                }
                let format = "yaml";
                if (options.specPath.toLowerCase().endsWith("json")) {
                    format = "json";
                }
                return { text: raw.data.repository.object.text, format };
            }
            catch (e) {
                if (e instanceof HTTPError &&
                    e.response.statusCode === 401 &&
                    !process.env.GITHUB_TOKEN) {
                    const removeToken = await prompt.confirm("Your token doesn't have the correct permissions, should we remove it?");
                    prompt.close();
                    if (removeToken) {
                        const githubTokenPath = join(homedir(), ".openapi-codegen");
                        unlinkSync(githubTokenPath);
                        return await getOpenAPISourceFile(options);
                    }
                }
                throw e;
            }
        }
    }
};
/**
 * Get the format of the specifications (yaml or json)
 *
 * @param extension
 */
const getFormat = (extension) => {
    if (extension.startsWith(".")) {
        extension = extension.slice(1);
    }
    if (extension.toLowerCase() === "yaml") {
        return "yaml";
    }
    if (extension.toLowerCase() === "yml") {
        return "yaml";
    }
    if (extension.toLowerCase() === "json") {
        return "json";
    }
    throw new Error(`"${extension}" extension file is not supported!`);
};

/**
 * Parse an openAPI source file to an openAPI object.
 *
 * This method will convert legacy swagger 2 specs to openapi 3.0
 *
 * @param text raw data of the spec
 * @param format format of the spec
 */
const parseOpenAPISourceFile = ({ text, format, }) => {
    const schema = format === "yaml" ? YAML.load(text) : JSON.parse(text);
    return new Promise((resolve, reject) => {
        if (!schema.openapi || !schema.openapi.startsWith("3.0")) {
            swagger2openapi.convertObj(schema, {}, (err, convertedObj) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(convertedObj.openapi);
                }
            });
        }
        else {
            resolve(schema);
        }
    });
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var react = {exports: {}};

var react_production_min = {};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min () {
	if (hasRequiredReact_production_min) return react_production_min;
	hasRequiredReact_production_min = 1;
var l=requireObjectAssign(),n=60103,p=60106;react_production_min.Fragment=60107;react_production_min.StrictMode=60108;react_production_min.Profiler=60114;var q=60109,r=60110,t=60112;react_production_min.Suspense=60113;var u=60115,v=60116;
	if("function"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w("react.element");p=w("react.portal");react_production_min.Fragment=w("react.fragment");react_production_min.StrictMode=w("react.strict_mode");react_production_min.Profiler=w("react.profiler");q=w("react.provider");r=w("react.context");t=w("react.forward_ref");react_production_min.Suspense=w("react.suspense");u=w("react.memo");v=w("react.lazy");}var x="function"===typeof Symbol&&Symbol.iterator;
	function y(a){if(null===a||"object"!==typeof a)return null;a=x&&a[x]||a["@@iterator"];return "function"===typeof a?a:null}function z(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var A={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A;}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,"setState");};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
	function D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A;}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};
	function J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f;}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return {$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}
	function K(a,b){return {$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return "object"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\/+/g;function N(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
	function O(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n:case p:h=!0;}}if(h)return h=a,d=d(h),a=""===e?"."+N(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M,"$&/")+"/"),O(d,b,c,"",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=
	0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d);}else if(f=y(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,"","",function(a){return b.call(c,a,d++)});return e}
	function Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);});}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};
	react_production_min.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments);},c);},count:function(a){var b=0;P(a,function(){b++;});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};react_production_min.Component=C;react_production_min.PureComponent=E;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;
	react_production_min.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g;}return {$$typeof:n,type:a.type,
	key:d,ref:k,props:e,_owner:h}};react_production_min.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};react_production_min.createElement=J;react_production_min.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};react_production_min.forwardRef=function(a){return {$$typeof:t,render:a}};react_production_min.isValidElement=L;
	react_production_min.lazy=function(a){return {$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};react_production_min.memo=function(a,b){return {$$typeof:u,type:a,compare:void 0===b?null:b}};react_production_min.useCallback=function(a,b){return S().useCallback(a,b)};react_production_min.useContext=function(a,b){return S().useContext(a,b)};react_production_min.useDebugValue=function(){};react_production_min.useEffect=function(a,b){return S().useEffect(a,b)};react_production_min.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};
	react_production_min.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return S().useMemo(a,b)};react_production_min.useReducer=function(a,b,c){return S().useReducer(a,b,c)};react_production_min.useRef=function(a){return S().useRef(a)};react_production_min.useState=function(a){return S().useState(a)};react_production_min.version="17.0.2";
	return react_production_min;
}

var react_development = {};

/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development;
	hasRequiredReact_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var _assign = requireObjectAssign();

		// TODO: this is special because it gets imported during build.
		var ReactVersion = '17.0.2';

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var REACT_ELEMENT_TYPE = 0xeac7;
		var REACT_PORTAL_TYPE = 0xeaca;
		exports.Fragment = 0xeacb;
		exports.StrictMode = 0xeacc;
		exports.Profiler = 0xead2;
		var REACT_PROVIDER_TYPE = 0xeacd;
		var REACT_CONTEXT_TYPE = 0xeace;
		var REACT_FORWARD_REF_TYPE = 0xead0;
		exports.Suspense = 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = 0xead8;
		var REACT_MEMO_TYPE = 0xead3;
		var REACT_LAZY_TYPE = 0xead4;
		var REACT_BLOCK_TYPE = 0xead9;
		var REACT_SERVER_BLOCK_TYPE = 0xeada;
		var REACT_FUNDAMENTAL_TYPE = 0xead5;
		var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
		var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

		if (typeof Symbol === 'function' && Symbol.for) {
		  var symbolFor = Symbol.for;
		  REACT_ELEMENT_TYPE = symbolFor('react.element');
		  REACT_PORTAL_TYPE = symbolFor('react.portal');
		  exports.Fragment = symbolFor('react.fragment');
		  exports.StrictMode = symbolFor('react.strict_mode');
		  exports.Profiler = symbolFor('react.profiler');
		  REACT_PROVIDER_TYPE = symbolFor('react.provider');
		  REACT_CONTEXT_TYPE = symbolFor('react.context');
		  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
		  exports.Suspense = symbolFor('react.suspense');
		  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
		  REACT_MEMO_TYPE = symbolFor('react.memo');
		  REACT_LAZY_TYPE = symbolFor('react.lazy');
		  REACT_BLOCK_TYPE = symbolFor('react.block');
		  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
		  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
		  symbolFor('react.scope');
		  symbolFor('react.opaque.id');
		  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
		  symbolFor('react.offscreen');
		  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
		}

		var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		/**
		 * Keeps track of the current dispatcher.
		 */
		var ReactCurrentDispatcher = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		/**
		 * Keeps track of the current batch's configuration such as how long an update
		 * should suspend for if it needs to.
		 */
		var ReactCurrentBatchConfig = {
		  transition: 0
		};

		/**
		 * Keeps track of the current owner.
		 *
		 * The current owner is the component who should own any components that are
		 * currently being constructed.
		 */
		var ReactCurrentOwner = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		var ReactDebugCurrentFrame = {};
		var currentExtraStackFrame = null;
		function setExtraStackFrame(stack) {
		  {
		    currentExtraStackFrame = stack;
		  }
		}

		{
		  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
		    {
		      currentExtraStackFrame = stack;
		    }
		  }; // Stack implementation injected by the current renderer.


		  ReactDebugCurrentFrame.getCurrentStack = null;

		  ReactDebugCurrentFrame.getStackAddendum = function () {
		    var stack = ''; // Add an extra top frame while an element is being validated

		    if (currentExtraStackFrame) {
		      stack += currentExtraStackFrame;
		    } // Delegate to the injected renderer-specific implementation


		    var impl = ReactDebugCurrentFrame.getCurrentStack;

		    if (impl) {
		      stack += impl() || '';
		    }

		    return stack;
		  };
		}

		/**
		 * Used by act() to track whether you're inside an act() scope.
		 */
		var IsSomeRendererActing = {
		  current: false
		};

		var ReactSharedInternals = {
		  ReactCurrentDispatcher: ReactCurrentDispatcher,
		  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
		  ReactCurrentOwner: ReactCurrentOwner,
		  IsSomeRendererActing: IsSomeRendererActing,
		  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
		  assign: _assign
		};

		{
		  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
		}

		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    printWarning('warn', format, args);
		  }
		}
		function error(format) {
		  {
		    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		      args[_key2 - 1] = arguments[_key2];
		    }

		    printWarning('error', format, args);
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    }

		    var argsWithFormat = args.map(function (item) {
		      return '' + item;
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var didWarnStateUpdateForUnmountedComponent = {};

		function warnNoop(publicInstance, callerName) {
		  {
		    var _constructor = publicInstance.constructor;
		    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
		    var warningKey = componentName + "." + callerName;

		    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
		      return;
		    }

		    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

		    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
		  }
		}
		/**
		 * This is the abstract API for an update queue.
		 */


		var ReactNoopUpdateQueue = {
		  /**
		   * Checks whether or not this composite component is mounted.
		   * @param {ReactClass} publicInstance The instance we want to test.
		   * @return {boolean} True if mounted, false otherwise.
		   * @protected
		   * @final
		   */
		  isMounted: function (publicInstance) {
		    return false;
		  },

		  /**
		   * Forces an update. This should only be invoked when it is known with
		   * certainty that we are **not** in a DOM transaction.
		   *
		   * You may want to call this when you know that some deeper aspect of the
		   * component's state has changed but `setState` was not called.
		   *
		   * This will not invoke `shouldComponentUpdate`, but it will invoke
		   * `componentWillUpdate` and `componentDidUpdate`.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueForceUpdate: function (publicInstance, callback, callerName) {
		    warnNoop(publicInstance, 'forceUpdate');
		  },

		  /**
		   * Replaces all of the state. Always use this or `setState` to mutate state.
		   * You should treat `this.state` as immutable.
		   *
		   * There is no guarantee that `this.state` will be immediately updated, so
		   * accessing `this.state` after calling this method may return the old value.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} completeState Next state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
		    warnNoop(publicInstance, 'replaceState');
		  },

		  /**
		   * Sets a subset of the state. This only exists because _pendingState is
		   * internal. This provides a merging strategy that is not available to deep
		   * properties which is confusing. TODO: Expose pendingState or don't use it
		   * during the merge.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} partialState Next partial state to be merged with state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} Name of the calling function in the public API.
		   * @internal
		   */
		  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
		    warnNoop(publicInstance, 'setState');
		  }
		};

		var emptyObject = {};

		{
		  Object.freeze(emptyObject);
		}
		/**
		 * Base class helpers for the updating state of a component.
		 */


		function Component(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
		  // renderer.

		  this.updater = updater || ReactNoopUpdateQueue;
		}

		Component.prototype.isReactComponent = {};
		/**
		 * Sets a subset of the state. Always use this to mutate
		 * state. You should treat `this.state` as immutable.
		 *
		 * There is no guarantee that `this.state` will be immediately updated, so
		 * accessing `this.state` after calling this method may return the old value.
		 *
		 * There is no guarantee that calls to `setState` will run synchronously,
		 * as they may eventually be batched together.  You can provide an optional
		 * callback that will be executed when the call to setState is actually
		 * completed.
		 *
		 * When a function is provided to setState, it will be called at some point in
		 * the future (not synchronously). It will be called with the up to date
		 * component arguments (state, props, context). These values can be different
		 * from this.* because your function may be called after receiveProps but before
		 * shouldComponentUpdate, and this new state, props, and context will not yet be
		 * assigned to this.
		 *
		 * @param {object|function} partialState Next partial state or function to
		 *        produce next partial state to be merged with current state.
		 * @param {?function} callback Called after state is updated.
		 * @final
		 * @protected
		 */

		Component.prototype.setState = function (partialState, callback) {
		  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
		    {
		      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
		    }
		  }

		  this.updater.enqueueSetState(this, partialState, callback, 'setState');
		};
		/**
		 * Forces an update. This should only be invoked when it is known with
		 * certainty that we are **not** in a DOM transaction.
		 *
		 * You may want to call this when you know that some deeper aspect of the
		 * component's state has changed but `setState` was not called.
		 *
		 * This will not invoke `shouldComponentUpdate`, but it will invoke
		 * `componentWillUpdate` and `componentDidUpdate`.
		 *
		 * @param {?function} callback Called after update is complete.
		 * @final
		 * @protected
		 */


		Component.prototype.forceUpdate = function (callback) {
		  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
		};
		/**
		 * Deprecated APIs. These APIs used to exist on classic React classes but since
		 * we would like to deprecate them, we're not going to move them over to this
		 * modern base class. Instead, we define a getter that warns if it's accessed.
		 */


		{
		  var deprecatedAPIs = {
		    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
		    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
		  };

		  var defineDeprecationWarning = function (methodName, info) {
		    Object.defineProperty(Component.prototype, methodName, {
		      get: function () {
		        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

		        return undefined;
		      }
		    });
		  };

		  for (var fnName in deprecatedAPIs) {
		    if (deprecatedAPIs.hasOwnProperty(fnName)) {
		      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    }
		  }
		}

		function ComponentDummy() {}

		ComponentDummy.prototype = Component.prototype;
		/**
		 * Convenience component with default shallow equality check for sCU.
		 */

		function PureComponent(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}

		var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
		pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

		_assign(pureComponentPrototype, Component.prototype);

		pureComponentPrototype.isPureReactComponent = true;

		// an immutable object with a single mutable value
		function createRef() {
		  var refObject = {
		    current: null
		  };

		  {
		    Object.seal(refObject);
		  }

		  return refObject;
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var functionName = innerType.displayName || innerType.name || '';
		  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
		}

		function getContextName(type) {
		  return type.displayName || 'Context';
		}

		function getComponentName(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case exports.Fragment:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case exports.Profiler:
		      return 'Profiler';

		    case exports.StrictMode:
		      return 'StrictMode';

		    case exports.Suspense:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        return getComponentName(type.type);

		      case REACT_BLOCK_TYPE:
		        return getComponentName(type._render);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentName(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }
		    }
		  }

		  return null;
		}

		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var RESERVED_PROPS = {
		  key: true,
		  ref: true,
		  __self: true,
		  __source: true
		};
		var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

		{
		  didWarnAboutStringRefs = {};
		}

		function hasValidRef(config) {
		  {
		    if (hasOwnProperty.call(config, 'ref')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.ref !== undefined;
		}

		function hasValidKey(config) {
		  {
		    if (hasOwnProperty.call(config, 'key')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.key !== undefined;
		}

		function defineKeyPropWarningGetter(props, displayName) {
		  var warnAboutAccessingKey = function () {
		    {
		      if (!specialPropKeyWarningShown) {
		        specialPropKeyWarningShown = true;

		        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingKey.isReactWarning = true;
		  Object.defineProperty(props, 'key', {
		    get: warnAboutAccessingKey,
		    configurable: true
		  });
		}

		function defineRefPropWarningGetter(props, displayName) {
		  var warnAboutAccessingRef = function () {
		    {
		      if (!specialPropRefWarningShown) {
		        specialPropRefWarningShown = true;

		        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingRef.isReactWarning = true;
		  Object.defineProperty(props, 'ref', {
		    get: warnAboutAccessingRef,
		    configurable: true
		  });
		}

		function warnIfStringRefCannotBeAutoConverted(config) {
		  {
		    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
		      var componentName = getComponentName(ReactCurrentOwner.current.type);

		      if (!didWarnAboutStringRefs[componentName]) {
		        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

		        didWarnAboutStringRefs[componentName] = true;
		      }
		    }
		  }
		}
		/**
		 * Factory method to create a new React element. This no longer adheres to
		 * the class pattern, so do not use new to call it. Also, instanceof check
		 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		 * if something is a React Element.
		 *
		 * @param {*} type
		 * @param {*} props
		 * @param {*} key
		 * @param {string|object} ref
		 * @param {*} owner
		 * @param {*} self A *temporary* helper to detect places where `this` is
		 * different from the `owner` when React.createElement is called, so that we
		 * can warn. We want to get rid of owner and replace string `ref`s with arrow
		 * functions, and as long as `this` and owner are the same, there will be no
		 * change in behavior.
		 * @param {*} source An annotation object (added by a transpiler or otherwise)
		 * indicating filename, line number, and/or other information.
		 * @internal
		 */


		var ReactElement = function (type, key, ref, self, source, owner, props) {
		  var element = {
		    // This tag allows us to uniquely identify this as a React Element
		    $$typeof: REACT_ELEMENT_TYPE,
		    // Built-in properties that belong on the element
		    type: type,
		    key: key,
		    ref: ref,
		    props: props,
		    // Record the component responsible for creating this element.
		    _owner: owner
		  };

		  {
		    // The validation flag is currently mutative. We put it on
		    // an external backing store so that we can freeze the whole object.
		    // This can be replaced with a WeakMap once they are implemented in
		    // commonly used development environments.
		    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		    // the validation flag non-enumerable (where possible, which should
		    // include every environment we run tests in), so the test framework
		    // ignores it.

		    Object.defineProperty(element._store, 'validated', {
		      configurable: false,
		      enumerable: false,
		      writable: true,
		      value: false
		    }); // self and source are DEV only properties.

		    Object.defineProperty(element, '_self', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: self
		    }); // Two elements created in two different places should be considered
		    // equal for testing purposes and therefore we hide it from enumeration.

		    Object.defineProperty(element, '_source', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: source
		    });

		    if (Object.freeze) {
		      Object.freeze(element.props);
		      Object.freeze(element);
		    }
		  }

		  return element;
		};
		/**
		 * Create and return a new ReactElement of the given type.
		 * See https://reactjs.org/docs/react-api.html#createelement
		 */

		function createElement(type, config, children) {
		  var propName; // Reserved names are extracted

		  var props = {};
		  var key = null;
		  var ref = null;
		  var self = null;
		  var source = null;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      ref = config.ref;

		      {
		        warnIfStringRefCannotBeAutoConverted(config);
		      }
		    }

		    if (hasValidKey(config)) {
		      key = '' + config.key;
		    }

		    self = config.__self === undefined ? null : config.__self;
		    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        props[propName] = config[propName];
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    {
		      if (Object.freeze) {
		        Object.freeze(childArray);
		      }
		    }

		    props.children = childArray;
		  } // Resolve default props


		  if (type && type.defaultProps) {
		    var defaultProps = type.defaultProps;

		    for (propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }
		  }

		  {
		    if (key || ref) {
		      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		      if (key) {
		        defineKeyPropWarningGetter(props, displayName);
		      }

		      if (ref) {
		        defineRefPropWarningGetter(props, displayName);
		      }
		    }
		  }

		  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		}
		function cloneAndReplaceKey(oldElement, newKey) {
		  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
		  return newElement;
		}
		/**
		 * Clone and return a new ReactElement using element as the starting point.
		 * See https://reactjs.org/docs/react-api.html#cloneelement
		 */

		function cloneElement(element, config, children) {
		  if (!!(element === null || element === undefined)) {
		    {
		      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
		    }
		  }

		  var propName; // Original props are copied

		  var props = _assign({}, element.props); // Reserved names are extracted


		  var key = element.key;
		  var ref = element.ref; // Self is preserved since the owner is preserved.

		  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
		  // transpiler, and the original source is probably a better indicator of the
		  // true owner.

		  var source = element._source; // Owner will be preserved, unless ref is overridden

		  var owner = element._owner;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      // Silently steal the ref from the parent.
		      ref = config.ref;
		      owner = ReactCurrentOwner.current;
		    }

		    if (hasValidKey(config)) {
		      key = '' + config.key;
		    } // Remaining properties override existing props


		    var defaultProps;

		    if (element.type && element.type.defaultProps) {
		      defaultProps = element.type.defaultProps;
		    }

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        if (config[propName] === undefined && defaultProps !== undefined) {
		          // Resolve default props
		          props[propName] = defaultProps[propName];
		        } else {
		          props[propName] = config[propName];
		        }
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    props.children = childArray;
		  }

		  return ReactElement(element.type, key, ref, self, source, owner, props);
		}
		/**
		 * Verifies the object is a ReactElement.
		 * See https://reactjs.org/docs/react-api.html#isvalidelement
		 * @param {?object} object
		 * @return {boolean} True if `object` is a ReactElement.
		 * @final
		 */

		function isValidElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}

		var SEPARATOR = '.';
		var SUBSEPARATOR = ':';
		/**
		 * Escape and wrap key so it is safe to use as a reactid
		 *
		 * @param {string} key to be escaped.
		 * @return {string} the escaped key.
		 */

		function escape(key) {
		  var escapeRegex = /[=:]/g;
		  var escaperLookup = {
		    '=': '=0',
		    ':': '=2'
		  };
		  var escapedString = key.replace(escapeRegex, function (match) {
		    return escaperLookup[match];
		  });
		  return '$' + escapedString;
		}
		/**
		 * TODO: Test that a single child and an array with one item have the same key
		 * pattern.
		 */


		var didWarnAboutMaps = false;
		var userProvidedKeyEscapeRegex = /\/+/g;

		function escapeUserProvidedKey(text) {
		  return text.replace(userProvidedKeyEscapeRegex, '$&/');
		}
		/**
		 * Generate a key string that identifies a element within a set.
		 *
		 * @param {*} element A element that could contain a manual key.
		 * @param {number} index Index that is used if a manual key is not provided.
		 * @return {string}
		 */


		function getElementKey(element, index) {
		  // Do some typechecking here since we call this blindly. We want to ensure
		  // that we don't block potential future ES APIs.
		  if (typeof element === 'object' && element !== null && element.key != null) {
		    // Explicit key
		    return escape('' + element.key);
		  } // Implicit key determined by the index in the set


		  return index.toString(36);
		}

		function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		  var type = typeof children;

		  if (type === 'undefined' || type === 'boolean') {
		    // All of the above are perceived as null.
		    children = null;
		  }

		  var invokeCallback = false;

		  if (children === null) {
		    invokeCallback = true;
		  } else {
		    switch (type) {
		      case 'string':
		      case 'number':
		        invokeCallback = true;
		        break;

		      case 'object':
		        switch (children.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            invokeCallback = true;
		        }

		    }
		  }

		  if (invokeCallback) {
		    var _child = children;
		    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
		    // so that it's consistent if the number of children grows:

		    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

		    if (Array.isArray(mappedChild)) {
		      var escapedChildKey = '';

		      if (childKey != null) {
		        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
		      }

		      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
		        return c;
		      });
		    } else if (mappedChild != null) {
		      if (isValidElement(mappedChild)) {
		        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
		        // traverseAllChildren used to do for objects as children
		        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
		        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
		      }

		      array.push(mappedChild);
		    }

		    return 1;
		  }

		  var child;
		  var nextName;
		  var subtreeCount = 0; // Count of children found in the current subtree.

		  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

		  if (Array.isArray(children)) {
		    for (var i = 0; i < children.length; i++) {
		      child = children[i];
		      nextName = nextNamePrefix + getElementKey(child, i);
		      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		    }
		  } else {
		    var iteratorFn = getIteratorFn(children);

		    if (typeof iteratorFn === 'function') {
		      var iterableChildren = children;

		      {
		        // Warn about using Maps as children
		        if (iteratorFn === iterableChildren.entries) {
		          if (!didWarnAboutMaps) {
		            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		          }

		          didWarnAboutMaps = true;
		        }
		      }

		      var iterator = iteratorFn.call(iterableChildren);
		      var step;
		      var ii = 0;

		      while (!(step = iterator.next()).done) {
		        child = step.value;
		        nextName = nextNamePrefix + getElementKey(child, ii++);
		        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		      }
		    } else if (type === 'object') {
		      var childrenString = '' + children;

		      {
		        {
		          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
		        }
		      }
		    }
		  }

		  return subtreeCount;
		}

		/**
		 * Maps children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
		 *
		 * The provided mapFunction(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func The map function.
		 * @param {*} context Context for mapFunction.
		 * @return {object} Object containing the ordered map of results.
		 */
		function mapChildren(children, func, context) {
		  if (children == null) {
		    return children;
		  }

		  var result = [];
		  var count = 0;
		  mapIntoArray(children, result, '', '', function (child) {
		    return func.call(context, child, count++);
		  });
		  return result;
		}
		/**
		 * Count the number of children that are typically specified as
		 * `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrencount
		 *
		 * @param {?*} children Children tree container.
		 * @return {number} The number of children.
		 */


		function countChildren(children) {
		  var n = 0;
		  mapChildren(children, function () {
		    n++; // Don't return anything
		  });
		  return n;
		}

		/**
		 * Iterates through children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} forEachFunc
		 * @param {*} forEachContext Context for forEachContext.
		 */
		function forEachChildren(children, forEachFunc, forEachContext) {
		  mapChildren(children, function () {
		    forEachFunc.apply(this, arguments); // Don't return anything.
		  }, forEachContext);
		}
		/**
		 * Flatten a children object (typically specified as `props.children`) and
		 * return an array with appropriately re-keyed children.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
		 */


		function toArray(children) {
		  return mapChildren(children, function (child) {
		    return child;
		  }) || [];
		}
		/**
		 * Returns the first child in a collection of children and verifies that there
		 * is only one child in the collection.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
		 *
		 * The current implementation of this function assumes that a single child gets
		 * passed without a wrapper, but the purpose of this helper function is to
		 * abstract away the particular structure of children.
		 *
		 * @param {?object} children Child collection structure.
		 * @return {ReactElement} The first and only `ReactElement` contained in the
		 * structure.
		 */


		function onlyChild(children) {
		  if (!isValidElement(children)) {
		    {
		      throw Error( "React.Children.only expected to receive a single React element child." );
		    }
		  }

		  return children;
		}

		function createContext(defaultValue, calculateChangedBits) {
		  if (calculateChangedBits === undefined) {
		    calculateChangedBits = null;
		  } else {
		    {
		      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
		        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
		      }
		    }
		  }

		  var context = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    _calculateChangedBits: calculateChangedBits,
		    // As a workaround to support multiple concurrent renderers, we categorize
		    // some renderers as primary and others as secondary. We only expect
		    // there to be two concurrent renderers at most: React Native (primary) and
		    // Fabric (secondary); React DOM (primary) and React ART (secondary).
		    // Secondary renderers store their context values on separate fields.
		    _currentValue: defaultValue,
		    _currentValue2: defaultValue,
		    // Used to track how many concurrent renderers this context currently
		    // supports within in a single renderer. Such as parallel server rendering.
		    _threadCount: 0,
		    // These are circular
		    Provider: null,
		    Consumer: null
		  };
		  context.Provider = {
		    $$typeof: REACT_PROVIDER_TYPE,
		    _context: context
		  };
		  var hasWarnedAboutUsingNestedContextConsumers = false;
		  var hasWarnedAboutUsingConsumerProvider = false;
		  var hasWarnedAboutDisplayNameOnConsumer = false;

		  {
		    // A separate object, but proxies back to the original context object for
		    // backwards compatibility. It has a different $$typeof, so we can properly
		    // warn for the incorrect usage of Context as a Consumer.
		    var Consumer = {
		      $$typeof: REACT_CONTEXT_TYPE,
		      _context: context,
		      _calculateChangedBits: context._calculateChangedBits
		    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

		    Object.defineProperties(Consumer, {
		      Provider: {
		        get: function () {
		          if (!hasWarnedAboutUsingConsumerProvider) {
		            hasWarnedAboutUsingConsumerProvider = true;

		            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
		          }

		          return context.Provider;
		        },
		        set: function (_Provider) {
		          context.Provider = _Provider;
		        }
		      },
		      _currentValue: {
		        get: function () {
		          return context._currentValue;
		        },
		        set: function (_currentValue) {
		          context._currentValue = _currentValue;
		        }
		      },
		      _currentValue2: {
		        get: function () {
		          return context._currentValue2;
		        },
		        set: function (_currentValue2) {
		          context._currentValue2 = _currentValue2;
		        }
		      },
		      _threadCount: {
		        get: function () {
		          return context._threadCount;
		        },
		        set: function (_threadCount) {
		          context._threadCount = _threadCount;
		        }
		      },
		      Consumer: {
		        get: function () {
		          if (!hasWarnedAboutUsingNestedContextConsumers) {
		            hasWarnedAboutUsingNestedContextConsumers = true;

		            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		          }

		          return context.Consumer;
		        }
		      },
		      displayName: {
		        get: function () {
		          return context.displayName;
		        },
		        set: function (displayName) {
		          if (!hasWarnedAboutDisplayNameOnConsumer) {
		            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

		            hasWarnedAboutDisplayNameOnConsumer = true;
		          }
		        }
		      }
		    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

		    context.Consumer = Consumer;
		  }

		  {
		    context._currentRenderer = null;
		    context._currentRenderer2 = null;
		  }

		  return context;
		}

		var Uninitialized = -1;
		var Pending = 0;
		var Resolved = 1;
		var Rejected = 2;

		function lazyInitializer(payload) {
		  if (payload._status === Uninitialized) {
		    var ctor = payload._result;
		    var thenable = ctor(); // Transition to the next state.

		    var pending = payload;
		    pending._status = Pending;
		    pending._result = thenable;
		    thenable.then(function (moduleObject) {
		      if (payload._status === Pending) {
		        var defaultExport = moduleObject.default;

		        {
		          if (defaultExport === undefined) {
		            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
		          }
		        } // Transition to the next state.


		        var resolved = payload;
		        resolved._status = Resolved;
		        resolved._result = defaultExport;
		      }
		    }, function (error) {
		      if (payload._status === Pending) {
		        // Transition to the next state.
		        var rejected = payload;
		        rejected._status = Rejected;
		        rejected._result = error;
		      }
		    });
		  }

		  if (payload._status === Resolved) {
		    return payload._result;
		  } else {
		    throw payload._result;
		  }
		}

		function lazy(ctor) {
		  var payload = {
		    // We use these fields to store the result.
		    _status: -1,
		    _result: ctor
		  };
		  var lazyType = {
		    $$typeof: REACT_LAZY_TYPE,
		    _payload: payload,
		    _init: lazyInitializer
		  };

		  {
		    // In production, this would just set it on the object.
		    var defaultProps;
		    var propTypes; // $FlowFixMe

		    Object.defineProperties(lazyType, {
		      defaultProps: {
		        configurable: true,
		        get: function () {
		          return defaultProps;
		        },
		        set: function (newDefaultProps) {
		          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          defaultProps = newDefaultProps; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'defaultProps', {
		            enumerable: true
		          });
		        }
		      },
		      propTypes: {
		        configurable: true,
		        get: function () {
		          return propTypes;
		        },
		        set: function (newPropTypes) {
		          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          propTypes = newPropTypes; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'propTypes', {
		            enumerable: true
		          });
		        }
		      }
		    });
		  }

		  return lazyType;
		}

		function forwardRef(render) {
		  {
		    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
		      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
		    } else if (typeof render !== 'function') {
		      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
		    } else {
		      if (render.length !== 0 && render.length !== 2) {
		        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
		      }
		    }

		    if (render != null) {
		      if (render.defaultProps != null || render.propTypes != null) {
		        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
		      }
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_FORWARD_REF_TYPE,
		    render: render
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name;

		        if (render.displayName == null) {
		          render.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

		var enableScopeAPI = false; // Experimental Create Event Handle API.

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
		      return true;
		    }
		  }

		  return false;
		}

		function memo(type, compare) {
		  {
		    if (!isValidElementType(type)) {
		      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_MEMO_TYPE,
		    type: type,
		    compare: compare === undefined ? null : compare
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name;

		        if (type.displayName == null) {
		          type.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		function resolveDispatcher() {
		  var dispatcher = ReactCurrentDispatcher.current;

		  if (!(dispatcher !== null)) {
		    {
		      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
		    }
		  }

		  return dispatcher;
		}

		function useContext(Context, unstable_observedBits) {
		  var dispatcher = resolveDispatcher();

		  {
		    if (unstable_observedBits !== undefined) {
		      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
		    } // TODO: add a more generic warning for invalid values.


		    if (Context._context !== undefined) {
		      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
		      // and nobody should be using this in existing code.

		      if (realContext.Consumer === Context) {
		        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
		      } else if (realContext.Provider === Context) {
		        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
		      }
		    }
		  }

		  return dispatcher.useContext(Context, unstable_observedBits);
		}
		function useState(initialState) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useState(initialState);
		}
		function useReducer(reducer, initialArg, init) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useReducer(reducer, initialArg, init);
		}
		function useRef(initialValue) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useRef(initialValue);
		}
		function useEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useEffect(create, deps);
		}
		function useLayoutEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useLayoutEffect(create, deps);
		}
		function useCallback(callback, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useCallback(callback, deps);
		}
		function useMemo(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useMemo(create, deps);
		}
		function useImperativeHandle(ref, create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useImperativeHandle(ref, create, deps);
		}
		function useDebugValue(value, formatterFn) {
		  {
		    var dispatcher = resolveDispatcher();
		    return dispatcher.useDebugValue(value, formatterFn);
		  }
		}

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: _assign({}, props, {
		          value: prevLog
		        }),
		        info: _assign({}, props, {
		          value: prevInfo
		        }),
		        warn: _assign({}, props, {
		          value: prevWarn
		        }),
		        error: _assign({}, props, {
		          value: prevError
		        }),
		        group: _assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: _assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: _assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if (!fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher$1.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher$1.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case exports.Suspense:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_BLOCK_TYPE:
		        return describeFunctionComponentFrame(type._render);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(Object.prototype.hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		function setCurrentlyValidatingElement$1(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      setExtraStackFrame(stack);
		    } else {
		      setExtraStackFrame(null);
		    }
		  }
		}

		var propTypesMisspellWarningShown;

		{
		  propTypesMisspellWarningShown = false;
		}

		function getDeclarationErrorAddendum() {
		  if (ReactCurrentOwner.current) {
		    var name = getComponentName(ReactCurrentOwner.current.type);

		    if (name) {
		      return '\n\nCheck the render method of `' + name + '`.';
		    }
		  }

		  return '';
		}

		function getSourceInfoErrorAddendum(source) {
		  if (source !== undefined) {
		    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		    var lineNumber = source.lineNumber;
		    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		  }

		  return '';
		}

		function getSourceInfoErrorAddendumForProps(elementProps) {
		  if (elementProps !== null && elementProps !== undefined) {
		    return getSourceInfoErrorAddendum(elementProps.__source);
		  }

		  return '';
		}
		/**
		 * Warn if there's no key explicitly set on dynamic arrays of children or
		 * object keys are not valid. This allows us to keep track of children between
		 * updates.
		 */


		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
		  var info = getDeclarationErrorAddendum();

		  if (!info) {
		    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		    if (parentName) {
		      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		    }
		  }

		  return info;
		}
		/**
		 * Warn if the element doesn't have an explicit key assigned to it.
		 * This element is in an array. The array could grow and shrink or be
		 * reordered. All children that haven't already been validated are required to
		 * have a "key" property assigned to it. Error statuses are cached so a warning
		 * will only be shown once.
		 *
		 * @internal
		 * @param {ReactElement} element Element that requires a key.
		 * @param {*} parentType element's parent's type.
		 */


		function validateExplicitKey(element, parentType) {
		  if (!element._store || element._store.validated || element.key != null) {
		    return;
		  }

		  element._store.validated = true;
		  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		    return;
		  }

		  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		  // property, it may be the creator of the child that's responsible for
		  // assigning it a key.

		  var childOwner = '';

		  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
		    // Give the component that originally created this child.
		    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
		  }

		  {
		    setCurrentlyValidatingElement$1(element);

		    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

		    setCurrentlyValidatingElement$1(null);
		  }
		}
		/**
		 * Ensure that every element either is passed in a static location, in an
		 * array with an explicit keys property defined, or in an object literal
		 * with valid key property.
		 *
		 * @internal
		 * @param {ReactNode} node Statically passed child of any type.
		 * @param {*} parentType node's parent's type.
		 */


		function validateChildKeys(node, parentType) {
		  if (typeof node !== 'object') {
		    return;
		  }

		  if (Array.isArray(node)) {
		    for (var i = 0; i < node.length; i++) {
		      var child = node[i];

		      if (isValidElement(child)) {
		        validateExplicitKey(child, parentType);
		      }
		    }
		  } else if (isValidElement(node)) {
		    // This element was passed in a valid location.
		    if (node._store) {
		      node._store.validated = true;
		    }
		  } else if (node) {
		    var iteratorFn = getIteratorFn(node);

		    if (typeof iteratorFn === 'function') {
		      // Entry iterators used to provide implicit keys,
		      // but now we print a separate warning for them later.
		      if (iteratorFn !== node.entries) {
		        var iterator = iteratorFn.call(node);
		        var step;

		        while (!(step = iterator.next()).done) {
		          if (isValidElement(step.value)) {
		            validateExplicitKey(step.value, parentType);
		          }
		        }
		      }
		    }
		  }
		}
		/**
		 * Given an element, validate that its props follow the propTypes definition,
		 * provided by the type.
		 *
		 * @param {ReactElement} element
		 */


		function validatePropTypes(element) {
		  {
		    var type = element.type;

		    if (type === null || type === undefined || typeof type === 'string') {
		      return;
		    }

		    var propTypes;

		    if (typeof type === 'function') {
		      propTypes = type.propTypes;
		    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		    // Inner props are checked in the reconciler.
		    type.$$typeof === REACT_MEMO_TYPE)) {
		      propTypes = type.propTypes;
		    } else {
		      return;
		    }

		    if (propTypes) {
		      // Intentionally inside to avoid triggering lazy initializers:
		      var name = getComponentName(type);
		      checkPropTypes(propTypes, element.props, 'prop', name, element);
		    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		      var _name = getComponentName(type);

		      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		    }

		    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		    }
		  }
		}
		/**
		 * Given a fragment, validate that it can only be provided with fragment props
		 * @param {ReactElement} fragment
		 */


		function validateFragmentProps(fragment) {
		  {
		    var keys = Object.keys(fragment.props);

		    for (var i = 0; i < keys.length; i++) {
		      var key = keys[i];

		      if (key !== 'children' && key !== 'key') {
		        setCurrentlyValidatingElement$1(fragment);

		        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

		        setCurrentlyValidatingElement$1(null);
		        break;
		      }
		    }

		    if (fragment.ref !== null) {
		      setCurrentlyValidatingElement$1(fragment);

		      error('Invalid attribute `ref` supplied to `React.Fragment`.');

		      setCurrentlyValidatingElement$1(null);
		    }
		  }
		}
		function createElementWithValidation(type, props, children) {
		  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		  // succeed and there will likely be errors in render.

		  if (!validType) {
		    var info = '';

		    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		    }

		    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

		    if (sourceInfo) {
		      info += sourceInfo;
		    } else {
		      info += getDeclarationErrorAddendum();
		    }

		    var typeString;

		    if (type === null) {
		      typeString = 'null';
		    } else if (Array.isArray(type)) {
		      typeString = 'array';
		    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
		      info = ' Did you accidentally export a JSX literal instead of a component?';
		    } else {
		      typeString = typeof type;
		    }

		    {
		      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		    }
		  }

		  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
		  // TODO: Drop this when these are no longer allowed as the type argument.

		  if (element == null) {
		    return element;
		  } // Skip key warning if the type isn't valid since our key validation logic
		  // doesn't expect a non-string/function type and can throw confusing errors.
		  // We don't want exception behavior to differ between dev and prod.
		  // (Rendering will throw with a helpful message and as soon as the type is
		  // fixed, the key warnings will appear.)


		  if (validType) {
		    for (var i = 2; i < arguments.length; i++) {
		      validateChildKeys(arguments[i], type);
		    }
		  }

		  if (type === exports.Fragment) {
		    validateFragmentProps(element);
		  } else {
		    validatePropTypes(element);
		  }

		  return element;
		}
		var didWarnAboutDeprecatedCreateFactory = false;
		function createFactoryWithValidation(type) {
		  var validatedFactory = createElementWithValidation.bind(null, type);
		  validatedFactory.type = type;

		  {
		    if (!didWarnAboutDeprecatedCreateFactory) {
		      didWarnAboutDeprecatedCreateFactory = true;

		      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
		    } // Legacy hook: remove it


		    Object.defineProperty(validatedFactory, 'type', {
		      enumerable: false,
		      get: function () {
		        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

		        Object.defineProperty(this, 'type', {
		          value: type
		        });
		        return type;
		      }
		    });
		  }

		  return validatedFactory;
		}
		function cloneElementWithValidation(element, props, children) {
		  var newElement = cloneElement.apply(this, arguments);

		  for (var i = 2; i < arguments.length; i++) {
		    validateChildKeys(arguments[i], newElement.type);
		  }

		  validatePropTypes(newElement);
		  return newElement;
		}

		{

		  try {
		    var frozenObject = Object.freeze({});
		    /* eslint-disable no-new */

		    new Map([[frozenObject, null]]);
		    new Set([frozenObject]);
		    /* eslint-enable no-new */
		  } catch (e) {
		  }
		}

		var createElement$1 =  createElementWithValidation ;
		var cloneElement$1 =  cloneElementWithValidation ;
		var createFactory =  createFactoryWithValidation ;
		var Children = {
		  map: mapChildren,
		  forEach: forEachChildren,
		  count: countChildren,
		  toArray: toArray,
		  only: onlyChild
		};

		exports.Children = Children;
		exports.Component = Component;
		exports.PureComponent = PureComponent;
		exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
		exports.cloneElement = cloneElement$1;
		exports.createContext = createContext;
		exports.createElement = createElement$1;
		exports.createFactory = createFactory;
		exports.createRef = createRef;
		exports.forwardRef = forwardRef;
		exports.isValidElement = isValidElement;
		exports.lazy = lazy;
		exports.memo = memo;
		exports.useCallback = useCallback;
		exports.useContext = useContext;
		exports.useDebugValue = useDebugValue;
		exports.useEffect = useEffect;
		exports.useImperativeHandle = useImperativeHandle;
		exports.useLayoutEffect = useLayoutEffect;
		exports.useMemo = useMemo;
		exports.useReducer = useReducer;
		exports.useRef = useRef;
		exports.useState = useState;
		exports.version = ReactVersion;
		  })();
		}
} (react_development));
	return react_development;
}

(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = requireReact_production_min();
	} else {
	  module.exports = requireReact_development();
	}
} (react));

var React = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

var React$1 = /*#__PURE__*/_mergeNamespaces({
    __proto__: null,
    'default': React
}, [react.exports]);

var build$1 = {};

var render$1 = {};

var ink = {};

var lodash = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.21';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function',
	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading whitespace. */
	  var reTrimStart = /^\s+/;

	  /** Used to match a single whitespace character. */
	  var reWhitespace = /\s/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */
	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */
	  function baseTrim(string) {
	    return string
	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	      : string;
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedEndIndex(string) {
	    var index = string.length;

	    while (index-- && reWhitespace.test(string.charAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = baseTrim(value);
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Throw an error if a forbidden character was found in `variable`, to prevent
	      // potential command injection attacks.
	      else if (reForbiddenIdentifierChars.test(variable)) {
	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
	      }

	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return baseTrim(string);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.slice(0, trimmedEndIndex(string) + 1);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal));
} (lodash, lodash.exports));

var logUpdate = {};

var ansiEscapes = {exports: {}};

(function (module) {
	const ansiEscapes = module.exports;
	// TODO: remove this in the next major version
	module.exports.default = ansiEscapes;

	const ESC = '\u001B[';
	const OSC = '\u001B]';
	const BEL = '\u0007';
	const SEP = ';';
	const isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';

	ansiEscapes.cursorTo = (x, y) => {
		if (typeof x !== 'number') {
			throw new TypeError('The `x` argument is required');
		}

		if (typeof y !== 'number') {
			return ESC + (x + 1) + 'G';
		}

		return ESC + (y + 1) + ';' + (x + 1) + 'H';
	};

	ansiEscapes.cursorMove = (x, y) => {
		if (typeof x !== 'number') {
			throw new TypeError('The `x` argument is required');
		}

		let ret = '';

		if (x < 0) {
			ret += ESC + (-x) + 'D';
		} else if (x > 0) {
			ret += ESC + x + 'C';
		}

		if (y < 0) {
			ret += ESC + (-y) + 'A';
		} else if (y > 0) {
			ret += ESC + y + 'B';
		}

		return ret;
	};

	ansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';
	ansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';
	ansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';
	ansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';

	ansiEscapes.cursorLeft = ESC + 'G';
	ansiEscapes.cursorSavePosition = isTerminalApp ? '\u001B7' : ESC + 's';
	ansiEscapes.cursorRestorePosition = isTerminalApp ? '\u001B8' : ESC + 'u';
	ansiEscapes.cursorGetPosition = ESC + '6n';
	ansiEscapes.cursorNextLine = ESC + 'E';
	ansiEscapes.cursorPrevLine = ESC + 'F';
	ansiEscapes.cursorHide = ESC + '?25l';
	ansiEscapes.cursorShow = ESC + '?25h';

	ansiEscapes.eraseLines = count => {
		let clear = '';

		for (let i = 0; i < count; i++) {
			clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');
		}

		if (count) {
			clear += ansiEscapes.cursorLeft;
		}

		return clear;
	};

	ansiEscapes.eraseEndLine = ESC + 'K';
	ansiEscapes.eraseStartLine = ESC + '1K';
	ansiEscapes.eraseLine = ESC + '2K';
	ansiEscapes.eraseDown = ESC + 'J';
	ansiEscapes.eraseUp = ESC + '1J';
	ansiEscapes.eraseScreen = ESC + '2J';
	ansiEscapes.scrollUp = ESC + 'S';
	ansiEscapes.scrollDown = ESC + 'T';

	ansiEscapes.clearScreen = '\u001Bc';

	ansiEscapes.clearTerminal = process.platform === 'win32' ?
		`${ansiEscapes.eraseScreen}${ESC}0f` :
		// 1. Erases the screen (Only done in case `2` is not supported)
		// 2. Erases the whole screen including scrollback buffer
		// 3. Moves cursor to the top-left position
		// More info: https://www.real-world-systems.com/docs/ANSIcode.html
		`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;

	ansiEscapes.beep = BEL;

	ansiEscapes.link = (text, url) => {
		return [
			OSC,
			'8',
			SEP,
			SEP,
			url,
			BEL,
			text,
			OSC,
			'8',
			SEP,
			SEP,
			BEL
		].join('');
	};

	ansiEscapes.image = (buffer, options = {}) => {
		let ret = `${OSC}1337;File=inline=1`;

		if (options.width) {
			ret += `;width=${options.width}`;
		}

		if (options.height) {
			ret += `;height=${options.height}`;
		}

		if (options.preserveAspectRatio === false) {
			ret += ';preserveAspectRatio=0';
		}

		return ret + ':' + buffer.toString('base64') + BEL;
	};

	ansiEscapes.iTerm = {
		setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,

		annotation: (message, options = {}) => {
			let ret = `${OSC}1337;`;

			const hasX = typeof options.x !== 'undefined';
			const hasY = typeof options.y !== 'undefined';
			if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {
				throw new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');
			}

			message = message.replace(/\|/g, '');

			ret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';

			if (options.length > 0) {
				ret +=
						(hasX ?
							[message, options.length, options.x, options.y] :
							[options.length, message]).join('|');
			} else {
				ret += message;
			}

			return ret + BEL;
		}
	};
} (ansiEscapes));

var cliCursor = {};

var onetime$2 = {exports: {}};

var mimicFn$2 = {exports: {}};

const mimicFn$1 = (to, from) => {
	for (const prop of Reflect.ownKeys(from)) {
		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
	}

	return to;
};

mimicFn$2.exports = mimicFn$1;
// TODO: Remove this for the next major release
mimicFn$2.exports.default = mimicFn$1;

const mimicFn = mimicFn$2.exports;

const calledFunctions = new WeakMap();

const onetime$1 = (function_, options = {}) => {
	if (typeof function_ !== 'function') {
		throw new TypeError('Expected a function');
	}

	let returnValue;
	let callCount = 0;
	const functionName = function_.displayName || function_.name || '<anonymous>';

	const onetime = function (...arguments_) {
		calledFunctions.set(onetime, ++callCount);

		if (callCount === 1) {
			returnValue = function_.apply(this, arguments_);
			function_ = null;
		} else if (options.throw === true) {
			throw new Error(`Function \`${functionName}\` can only be called once`);
		}

		return returnValue;
	};

	mimicFn(onetime, function_);
	calledFunctions.set(onetime, callCount);

	return onetime;
};

onetime$2.exports = onetime$1;
// TODO: Remove this for the next major release
onetime$2.exports.default = onetime$1;

onetime$2.exports.callCount = function_ => {
	if (!calledFunctions.has(function_)) {
		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
	}

	return calledFunctions.get(function_);
};

var signalExit$1 = {exports: {}};

var signals$1 = {exports: {}};

var hasRequiredSignals;

function requireSignals () {
	if (hasRequiredSignals) return signals$1.exports;
	hasRequiredSignals = 1;
	(function (module) {
		// This is not the set of all possible signals.
		//
		// It IS, however, the set of all signals that trigger
		// an exit on either Linux or BSD systems.  Linux is a
		// superset of the signal names supported on BSD, and
		// the unknown signals just fail to register, so we can
		// catch that easily enough.
		//
		// Don't bother with SIGKILL.  It's uncatchable, which
		// means that we can't fire any callbacks anyway.
		//
		// If a user does happen to register a handler on a non-
		// fatal signal like SIGWINCH or something, and then
		// exit, it'll end up firing `process.emit('exit')`, so
		// the handler will be fired anyway.
		//
		// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
		// artificially, inherently leave the process in a
		// state from which it is not safe to try and enter JS
		// listeners.
		module.exports = [
		  'SIGABRT',
		  'SIGALRM',
		  'SIGHUP',
		  'SIGINT',
		  'SIGTERM'
		];

		if (process.platform !== 'win32') {
		  module.exports.push(
		    'SIGVTALRM',
		    'SIGXCPU',
		    'SIGXFSZ',
		    'SIGUSR2',
		    'SIGTRAP',
		    'SIGSYS',
		    'SIGQUIT',
		    'SIGIOT'
		    // should detect profiler and enable/disable accordingly.
		    // see #21
		    // 'SIGPROF'
		  );
		}

		if (process.platform === 'linux') {
		  module.exports.push(
		    'SIGIO',
		    'SIGPOLL',
		    'SIGPWR',
		    'SIGSTKFLT',
		    'SIGUNUSED'
		  );
		}
} (signals$1));
	return signals$1.exports;
}

// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
var process$1 = commonjsGlobal.process;

const processOk = function (process) {
  return process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function'
};

// some kind of non-node environment, just no-op
/* istanbul ignore if */
if (!processOk(process$1)) {
  signalExit$1.exports = function () {
    return function () {}
  };
} else {
  var assert$1 = require$$0$3;
  var signals = requireSignals();
  var isWin = /^win/i.test(process$1.platform);

  var EE = require$$0$2;
  /* istanbul ignore if */
  if (typeof EE !== 'function') {
    EE = EE.EventEmitter;
  }

  var emitter;
  if (process$1.__signal_exit_emitter__) {
    emitter = process$1.__signal_exit_emitter__;
  } else {
    emitter = process$1.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }

  // Because this emitter is a global, we have to check to see if a
  // previous version of this library failed to enable infinite listeners.
  // I know what you're about to say.  But literally everything about
  // signal-exit is a compromise with evil.  Get used to it.
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }

  signalExit$1.exports = function (cb, opts) {
    /* istanbul ignore if */
    if (!processOk(commonjsGlobal.process)) {
      return function () {}
    }
    assert$1.equal(typeof cb, 'function', 'a callback must be provided for exit handler');

    if (loaded === false) {
      load();
    }

    var ev = 'exit';
    if (opts && opts.alwaysLast) {
      ev = 'afterexit';
    }

    var remove = function () {
      emitter.removeListener(ev, cb);
      if (emitter.listeners('exit').length === 0 &&
          emitter.listeners('afterexit').length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);

    return remove
  };

  var unload = function unload () {
    if (!loaded || !processOk(commonjsGlobal.process)) {
      return
    }
    loaded = false;

    signals.forEach(function (sig) {
      try {
        process$1.removeListener(sig, sigListeners[sig]);
      } catch (er) {}
    });
    process$1.emit = originalProcessEmit;
    process$1.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  };
  signalExit$1.exports.unload = unload;

  var emit = function emit (event, code, signal) {
    /* istanbul ignore if */
    if (emitter.emitted[event]) {
      return
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  };

  // { <signal>: <listener fn>, ... }
  var sigListeners = {};
  signals.forEach(function (sig) {
    sigListeners[sig] = function listener () {
      /* istanbul ignore if */
      if (!processOk(commonjsGlobal.process)) {
        return
      }
      // If there are no other listeners, an exit is coming!
      // Simplest way: remove us and then re-send the signal.
      // We know that this will kill the process, so we can
      // safely emit now.
      var listeners = process$1.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit('exit', null, sig);
        /* istanbul ignore next */
        emit('afterexit', null, sig);
        /* istanbul ignore next */
        if (isWin && sig === 'SIGHUP') {
          // "SIGHUP" throws an `ENOSYS` error on Windows,
          // so use a supported signal instead
          sig = 'SIGINT';
        }
        /* istanbul ignore next */
        process$1.kill(process$1.pid, sig);
      }
    };
  });

  signalExit$1.exports.signals = function () {
    return signals
  };

  var loaded = false;

  var load = function load () {
    if (loaded || !processOk(commonjsGlobal.process)) {
      return
    }
    loaded = true;

    // This is the number of onSignalExit's that are in play.
    // It's important so that we can count the correct number of
    // listeners on signals, and don't wait for the other one to
    // handle it instead of us.
    emitter.count += 1;

    signals = signals.filter(function (sig) {
      try {
        process$1.on(sig, sigListeners[sig]);
        return true
      } catch (er) {
        return false
      }
    });

    process$1.emit = processEmit;
    process$1.reallyExit = processReallyExit;
  };
  signalExit$1.exports.load = load;

  var originalProcessReallyExit = process$1.reallyExit;
  var processReallyExit = function processReallyExit (code) {
    /* istanbul ignore if */
    if (!processOk(commonjsGlobal.process)) {
      return
    }
    process$1.exitCode = code || /* istanbul ignore next */ 0;
    emit('exit', process$1.exitCode, null);
    /* istanbul ignore next */
    emit('afterexit', process$1.exitCode, null);
    /* istanbul ignore next */
    originalProcessReallyExit.call(process$1, process$1.exitCode);
  };

  var originalProcessEmit = process$1.emit;
  var processEmit = function processEmit (ev, arg) {
    if (ev === 'exit' && processOk(commonjsGlobal.process)) {
      /* istanbul ignore else */
      if (arg !== undefined) {
        process$1.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      /* istanbul ignore next */
      emit('exit', process$1.exitCode, null);
      /* istanbul ignore next */
      emit('afterexit', process$1.exitCode, null);
      /* istanbul ignore next */
      return ret
    } else {
      return originalProcessEmit.apply(this, arguments)
    }
  };
}

const onetime = onetime$2.exports;
const signalExit = signalExit$1.exports;

var restoreCursor = onetime(() => {
	signalExit(() => {
		process.stderr.write('\u001B[?25h');
	}, {alwaysLast: true});
});

(function (exports) {
	const restoreCursor$1 = restoreCursor;

	let isHidden = false;

	exports.show = (writableStream = process.stderr) => {
		if (!writableStream.isTTY) {
			return;
		}

		isHidden = false;
		writableStream.write('\u001B[?25h');
	};

	exports.hide = (writableStream = process.stderr) => {
		if (!writableStream.isTTY) {
			return;
		}

		restoreCursor$1();
		isHidden = true;
		writableStream.write('\u001B[?25l');
	};

	exports.toggle = (force, writableStream) => {
		if (force !== undefined) {
			isHidden = force;
		}

		if (isHidden) {
			exports.show(writableStream);
		} else {
			exports.hide(writableStream);
		}
	};
} (cliCursor));

var __importDefault$p = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(logUpdate, "__esModule", { value: true });
const ansi_escapes_1$1 = __importDefault$p(ansiEscapes.exports);
const cli_cursor_1$1 = __importDefault$p(cliCursor);
const create = (stream, { showCursor = false } = {}) => {
    let previousLineCount = 0;
    let previousOutput = '';
    let hasHiddenCursor = false;
    const render = (str) => {
        if (!showCursor && !hasHiddenCursor) {
            cli_cursor_1$1.default.hide();
            hasHiddenCursor = true;
        }
        const output = str + '\n';
        if (output === previousOutput) {
            return;
        }
        previousOutput = output;
        stream.write(ansi_escapes_1$1.default.eraseLines(previousLineCount) + output);
        previousLineCount = output.split('\n').length;
    };
    render.clear = () => {
        stream.write(ansi_escapes_1$1.default.eraseLines(previousLineCount));
        previousOutput = '';
        previousLineCount = 0;
    };
    render.done = () => {
        previousOutput = '';
        previousLineCount = 0;
        if (!showCursor) {
            cli_cursor_1$1.default.show();
            hasHiddenCursor = false;
        }
    };
    return render;
};
logUpdate.default = { create };

var ciInfo = {};

var require$$0$1 = [
	{
		name: "AppVeyor",
		constant: "APPVEYOR",
		env: "APPVEYOR",
		pr: "APPVEYOR_PULL_REQUEST_NUMBER"
	},
	{
		name: "Azure Pipelines",
		constant: "AZURE_PIPELINES",
		env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
		pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
	},
	{
		name: "Bamboo",
		constant: "BAMBOO",
		env: "bamboo_planKey"
	},
	{
		name: "Bitbucket Pipelines",
		constant: "BITBUCKET",
		env: "BITBUCKET_COMMIT",
		pr: "BITBUCKET_PR_ID"
	},
	{
		name: "Bitrise",
		constant: "BITRISE",
		env: "BITRISE_IO",
		pr: "BITRISE_PULL_REQUEST"
	},
	{
		name: "Buddy",
		constant: "BUDDY",
		env: "BUDDY_WORKSPACE_ID",
		pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
	},
	{
		name: "Buildkite",
		constant: "BUILDKITE",
		env: "BUILDKITE",
		pr: {
			env: "BUILDKITE_PULL_REQUEST",
			ne: "false"
		}
	},
	{
		name: "CircleCI",
		constant: "CIRCLE",
		env: "CIRCLECI",
		pr: "CIRCLE_PULL_REQUEST"
	},
	{
		name: "Cirrus CI",
		constant: "CIRRUS",
		env: "CIRRUS_CI",
		pr: "CIRRUS_PR"
	},
	{
		name: "AWS CodeBuild",
		constant: "CODEBUILD",
		env: "CODEBUILD_BUILD_ARN"
	},
	{
		name: "Codeship",
		constant: "CODESHIP",
		env: {
			CI_NAME: "codeship"
		}
	},
	{
		name: "Drone",
		constant: "DRONE",
		env: "DRONE",
		pr: {
			DRONE_BUILD_EVENT: "pull_request"
		}
	},
	{
		name: "dsari",
		constant: "DSARI",
		env: "DSARI"
	},
	{
		name: "GitLab CI",
		constant: "GITLAB",
		env: "GITLAB_CI"
	},
	{
		name: "GoCD",
		constant: "GOCD",
		env: "GO_PIPELINE_LABEL"
	},
	{
		name: "Hudson",
		constant: "HUDSON",
		env: "HUDSON_URL"
	},
	{
		name: "Jenkins",
		constant: "JENKINS",
		env: [
			"JENKINS_URL",
			"BUILD_ID"
		],
		pr: {
			any: [
				"ghprbPullId",
				"CHANGE_ID"
			]
		}
	},
	{
		name: "Magnum CI",
		constant: "MAGNUM",
		env: "MAGNUM"
	},
	{
		name: "Netlify CI",
		constant: "NETLIFY",
		env: "NETLIFY_BUILD_BASE",
		pr: {
			env: "PULL_REQUEST",
			ne: "false"
		}
	},
	{
		name: "Sail CI",
		constant: "SAIL",
		env: "SAILCI",
		pr: "SAIL_PULL_REQUEST_NUMBER"
	},
	{
		name: "Semaphore",
		constant: "SEMAPHORE",
		env: "SEMAPHORE",
		pr: "PULL_REQUEST_NUMBER"
	},
	{
		name: "Shippable",
		constant: "SHIPPABLE",
		env: "SHIPPABLE",
		pr: {
			IS_PULL_REQUEST: "true"
		}
	},
	{
		name: "Solano CI",
		constant: "SOLANO",
		env: "TDDIUM",
		pr: "TDDIUM_PR_ID"
	},
	{
		name: "Strider CD",
		constant: "STRIDER",
		env: "STRIDER"
	},
	{
		name: "TaskCluster",
		constant: "TASKCLUSTER",
		env: [
			"TASK_ID",
			"RUN_ID"
		]
	},
	{
		name: "TeamCity",
		constant: "TEAMCITY",
		env: "TEAMCITY_VERSION"
	},
	{
		name: "Travis CI",
		constant: "TRAVIS",
		env: "TRAVIS",
		pr: {
			env: "TRAVIS_PULL_REQUEST",
			ne: "false"
		}
	}
];

(function (exports) {

	var vendors = require$$0$1;

	var env = process.env;

	// Used for testing only
	Object.defineProperty(exports, '_vendors', {
	  value: vendors.map(function (v) { return v.constant })
	});

	exports.name = null;
	exports.isPR = null;

	vendors.forEach(function (vendor) {
	  var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
	  var isCI = envs.every(function (obj) {
	    return checkEnv(obj)
	  });

	  exports[vendor.constant] = isCI;

	  if (isCI) {
	    exports.name = vendor.name;

	    switch (typeof vendor.pr) {
	      case 'string':
	        // "pr": "CIRRUS_PR"
	        exports.isPR = !!env[vendor.pr];
	        break
	      case 'object':
	        if ('env' in vendor.pr) {
	          // "pr": { "env": "BUILDKITE_PULL_REQUEST", "ne": "false" }
	          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
	        } else if ('any' in vendor.pr) {
	          // "pr": { "any": ["ghprbPullId", "CHANGE_ID"] }
	          exports.isPR = vendor.pr.any.some(function (key) {
	            return !!env[key]
	          });
	        } else {
	          // "pr": { "DRONE_BUILD_EVENT": "pull_request" }
	          exports.isPR = checkEnv(vendor.pr);
	        }
	        break
	      default:
	        // PR detection not supported for this vendor
	        exports.isPR = null;
	    }
	  }
	});

	exports.isCI = !!(
	  env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari
	  env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI
	  env.BUILD_NUMBER || // Jenkins, TeamCity
	  env.RUN_ID || // TaskCluster, dsari
	  exports.name ||
	  false
	);

	function checkEnv (obj) {
	  if (typeof obj === 'string') return !!env[obj]
	  return Object.keys(obj).every(function (k) {
	    return env[k] === obj[k]
	  })
	}
} (ciInfo));

var isCi = ciInfo.isCI;

// Gets all non-builtin properties up the prototype chain
const getAllProperties = object => {
	const properties = new Set();

	do {
		for (const key of Reflect.ownKeys(object)) {
			properties.add([object, key]);
		}
	} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);

	return properties;
};

var autoBind = (self, {include, exclude} = {}) => {
	const filter = key => {
		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);

		if (include) {
			return include.some(match);
		}

		if (exclude) {
			return !exclude.some(match);
		}

		return true;
	};

	for (const [object, key] of getAllProperties(self.constructor.prototype)) {
		if (key === 'constructor' || !filter(key)) {
			continue;
		}

		const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
		if (descriptor && typeof descriptor.value === 'function') {
			self[key] = self[key].bind(self);
		}
	}

	return self;
};

var reconciler = {};

var scheduler = {exports: {}};

var scheduler_production_min = {};

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min () {
	if (hasRequiredScheduler_production_min) return scheduler_production_min;
	hasRequiredScheduler_production_min = 1;
	(function (exports) {
var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
		if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
		window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
		E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
		x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
		function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
		function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
		function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
		exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
		exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
		exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
		exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
} (scheduler_production_min));
	return scheduler_production_min;
}

var scheduler_development = {};

/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var enableSchedulerDebugging = false;
		var enableProfiling = false;

		var requestHostCallback;
		var requestHostTimeout;
		var cancelHostTimeout;
		var requestPaint;
		var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

		if (hasPerformanceNow) {
		  var localPerformance = performance;

		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date;
		  var initialTime = localDate.now();

		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		}

		if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
		// implementation using setTimeout.
		typeof window === 'undefined' || // Check if MessageChannel is supported, too.
		typeof MessageChannel !== 'function') {
		  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
		  // fallback to a naive implementation.
		  var _callback = null;
		  var _timeoutID = null;

		  var _flushCallback = function () {
		    if (_callback !== null) {
		      try {
		        var currentTime = exports.unstable_now();
		        var hasRemainingTime = true;

		        _callback(hasRemainingTime, currentTime);

		        _callback = null;
		      } catch (e) {
		        setTimeout(_flushCallback, 0);
		        throw e;
		      }
		    }
		  };

		  requestHostCallback = function (cb) {
		    if (_callback !== null) {
		      // Protect against re-entrancy.
		      setTimeout(requestHostCallback, 0, cb);
		    } else {
		      _callback = cb;
		      setTimeout(_flushCallback, 0);
		    }
		  };

		  requestHostTimeout = function (cb, ms) {
		    _timeoutID = setTimeout(cb, ms);
		  };

		  cancelHostTimeout = function () {
		    clearTimeout(_timeoutID);
		  };

		  exports.unstable_shouldYield = function () {
		    return false;
		  };

		  requestPaint = exports.unstable_forceFrameRate = function () {};
		} else {
		  // Capture local references to native APIs, in case a polyfill overrides them.
		  var _setTimeout = window.setTimeout;
		  var _clearTimeout = window.clearTimeout;

		  if (typeof console !== 'undefined') {
		    // TODO: Scheduler no longer requires these methods to be polyfilled. But
		    // maybe we want to continue warning if they don't exist, to preserve the
		    // option to rely on it in the future?
		    var requestAnimationFrame = window.requestAnimationFrame;
		    var cancelAnimationFrame = window.cancelAnimationFrame;

		    if (typeof requestAnimationFrame !== 'function') {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
		    }

		    if (typeof cancelAnimationFrame !== 'function') {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
		    }
		  }

		  var isMessageLoopRunning = false;
		  var scheduledHostCallback = null;
		  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		  // thread, like user events. By default, it yields multiple times per frame.
		  // It does not attempt to align with frame boundaries, since most tasks don't
		  // need to be frame aligned; for those that do, use requestAnimationFrame.

		  var yieldInterval = 5;
		  var deadline = 0; // TODO: Make this configurable

		  {
		    // `isInputPending` is not available. Since we have no way of knowing if
		    // there's pending input, always yield at the end of the frame.
		    exports.unstable_shouldYield = function () {
		      return exports.unstable_now() >= deadline;
		    }; // Since we yield every frame regardless, `requestPaint` has no effect.


		    requestPaint = function () {};
		  }

		  exports.unstable_forceFrameRate = function (fps) {
		    if (fps < 0 || fps > 125) {
		      // Using console['error'] to evade Babel and ESLint
		      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
		      return;
		    }

		    if (fps > 0) {
		      yieldInterval = Math.floor(1000 / fps);
		    } else {
		      // reset the framerate
		      yieldInterval = 5;
		    }
		  };

		  var performWorkUntilDeadline = function () {
		    if (scheduledHostCallback !== null) {
		      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
		      // cycle. This means there's always time remaining at the beginning of
		      // the message event.

		      deadline = currentTime + yieldInterval;
		      var hasTimeRemaining = true;

		      try {
		        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

		        if (!hasMoreWork) {
		          isMessageLoopRunning = false;
		          scheduledHostCallback = null;
		        } else {
		          // If there's more work, schedule the next message event at the end
		          // of the preceding one.
		          port.postMessage(null);
		        }
		      } catch (error) {
		        // If a scheduler task throws, exit the current browser task so the
		        // error can be observed.
		        port.postMessage(null);
		        throw error;
		      }
		    } else {
		      isMessageLoopRunning = false;
		    } // Yielding to the browser will give it a chance to paint, so we can
		  };

		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  requestHostCallback = function (callback) {
		    scheduledHostCallback = callback;

		    if (!isMessageLoopRunning) {
		      isMessageLoopRunning = true;
		      port.postMessage(null);
		    }
		  };

		  requestHostTimeout = function (callback, ms) {
		    taskTimeoutID = _setTimeout(function () {
		      callback(exports.unstable_now());
		    }, ms);
		  };

		  cancelHostTimeout = function () {
		    _clearTimeout(taskTimeoutID);

		    taskTimeoutID = -1;
		  };
		}

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  var first = heap[0];
		  return first === undefined ? null : first;
		}
		function pop(heap) {
		  var first = heap[0];

		  if (first !== undefined) {
		    var last = heap.pop();

		    if (last !== first) {
		      heap[0] = last;
		      siftDown(heap, last, 0);
		    }

		    return first;
		  } else {
		    return null;
		  }
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (true) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (parent !== undefined && compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;

		  while (index < length) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (left !== undefined && compare(left, node) < 0) {
		      if (right !== undefined && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (right !== undefined && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		function markTaskErrored(task, ms) {
		}

		/* eslint-disable no-var */
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111

		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    var currentTime; if (enableProfiling) ; else {
		      // No catch in prod code path.
		      return workLoop(hasTimeRemaining, initialTime);
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (typeof callback === 'function') {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		      } else {

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }
		  } else {
		    startTime = currentTime;
		  }

		  var timeout;

		  switch (priorityLevel) {
		    case ImmediatePriority:
		      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
		      break;

		    case UserBlockingPriority:
		      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
		      break;

		    case IdlePriority:
		      timeout = IDLE_PRIORITY_TIMEOUT;
		      break;

		    case LowPriority:
		      timeout = LOW_PRIORITY_TIMEOUT;
		      break;

		    case NormalPriority:
		    default:
		      timeout = NORMAL_PRIORITY_TIMEOUT;
		      break;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  null;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		  })();
		}
} (scheduler_development));
	return scheduler_development;
}

(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = requireScheduler_production_min();
	} else {
	  module.exports = requireScheduler_development();
	}
} (scheduler));

var reactReconciler = {exports: {}};

var reactReconciler_production_min = {exports: {}};

/** @license React v0.26.2
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconciler_production_min;

function requireReactReconciler_production_min () {
	if (hasRequiredReactReconciler_production_min) return reactReconciler_production_min.exports;
	hasRequiredReactReconciler_production_min = 1;
	(function (module) {
		module.exports = function $$$reconciler($$$hostConfig) {
		    var exports = {};
var aa=requireObjectAssign(),ba=react.exports,m=scheduler.exports;function q(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
		var ca=ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,da=60103,ea=60106,fa=60107,ha=60108,ia=60114,ja=60109,ka=60110,la=60112,ma=60113,na=60120,oa=60115,pa=60116,qa=60121,ra=60129,sa=60130,ta=60131;
		if("function"===typeof Symbol&&Symbol.for){var r=Symbol.for;da=r("react.element");ea=r("react.portal");fa=r("react.fragment");ha=r("react.strict_mode");ia=r("react.profiler");ja=r("react.provider");ka=r("react.context");la=r("react.forward_ref");ma=r("react.suspense");na=r("react.suspense_list");oa=r("react.memo");pa=r("react.lazy");qa=r("react.block");r("react.scope");ra=r("react.debug_trace_mode");sa=r("react.offscreen");ta=r("react.legacy_hidden");}var ua="function"===typeof Symbol&&Symbol.iterator;
		function va(a){if(null===a||"object"!==typeof a)return null;a=ua&&a[ua]||a["@@iterator"];return "function"===typeof a?a:null}
		function wa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case fa:return "Fragment";case ea:return "Portal";case ia:return "Profiler";case ha:return "StrictMode";case ma:return "Suspense";case na:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case ka:return (a.displayName||"Context")+".Consumer";case ja:return (a._context.displayName||"Context")+".Provider";case la:var b=a.render;b=b.displayName||b.name||"";
		return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case oa:return wa(a.type);case qa:return wa(a._render);case pa:b=a._payload;a=a._init;try{return wa(a(b))}catch(c){}}return null}function xa(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ya(a){if(xa(a)!==a)throw Error(q(188));}
		function za(a){var b=a.alternate;if(!b){b=xa(a);if(null===b)throw Error(q(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ya(e),a;if(f===d)return ya(e),b;f=f.sibling;}throw Error(q(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
		c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(q(189));}}if(c.alternate!==d)throw Error(q(190));}if(3!==c.tag)throw Error(q(188));return c.stateNode.current===c?a:b}function Aa(a){a=za(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
		function Ba(a){a=za(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}function Ca(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return !0;b=b.return;}return !1}
		var Da=$$$hostConfig.getPublicInstance,Ea=$$$hostConfig.getRootHostContext,Fa=$$$hostConfig.getChildHostContext,Ga=$$$hostConfig.prepareForCommit,Ha=$$$hostConfig.resetAfterCommit,Ia=$$$hostConfig.createInstance,Ja=$$$hostConfig.appendInitialChild,Ka=$$$hostConfig.finalizeInitialChildren,La=$$$hostConfig.prepareUpdate,Ma=$$$hostConfig.shouldSetTextContent,Na=$$$hostConfig.createTextInstance,Pa=$$$hostConfig.scheduleTimeout,Qa=$$$hostConfig.cancelTimeout,Ra=$$$hostConfig.noTimeout,Sa=$$$hostConfig.isPrimaryRenderer,
		Ta=$$$hostConfig.supportsMutation,Ua=$$$hostConfig.supportsPersistence,Va=$$$hostConfig.supportsHydration,Wa=$$$hostConfig.getInstanceFromNode,Xa=$$$hostConfig.makeOpaqueHydratingObject,Ya=$$$hostConfig.makeClientId,Za=$$$hostConfig.beforeActiveInstanceBlur,$a=$$$hostConfig.afterActiveInstanceBlur,ab=$$$hostConfig.preparePortalMount,bb=$$$hostConfig.supportsTestSelectors,cb=$$$hostConfig.findFiberRoot,db=$$$hostConfig.getBoundingRect,eb=$$$hostConfig.getTextContent,fb=$$$hostConfig.isHiddenSubtree,
		gb=$$$hostConfig.matchAccessibilityRole,hb=$$$hostConfig.setFocusIfFocusable,ib=$$$hostConfig.setupIntersectionObserver,jb=$$$hostConfig.appendChild,kb=$$$hostConfig.appendChildToContainer,lb=$$$hostConfig.commitTextUpdate,mb=$$$hostConfig.commitMount,nb=$$$hostConfig.commitUpdate,ob=$$$hostConfig.insertBefore,pb=$$$hostConfig.insertInContainerBefore,qb=$$$hostConfig.removeChild,rb=$$$hostConfig.removeChildFromContainer,sb=$$$hostConfig.resetTextContent,tb=$$$hostConfig.hideInstance,ub=$$$hostConfig.hideTextInstance,
		vb=$$$hostConfig.unhideInstance,wb=$$$hostConfig.unhideTextInstance,xb=$$$hostConfig.clearContainer,yb=$$$hostConfig.cloneInstance,zb=$$$hostConfig.createContainerChildSet,Ab=$$$hostConfig.appendChildToContainerChildSet,Bb=$$$hostConfig.finalizeContainerChildren,Cb=$$$hostConfig.replaceContainerChildren,Db=$$$hostConfig.cloneHiddenInstance,Eb=$$$hostConfig.cloneHiddenTextInstance,Fb=$$$hostConfig.canHydrateInstance,Gb=$$$hostConfig.canHydrateTextInstance,Hb=$$$hostConfig.isSuspenseInstancePending,
		Ib=$$$hostConfig.isSuspenseInstanceFallback,Jb=$$$hostConfig.getNextHydratableSibling,Kb=$$$hostConfig.getFirstHydratableChild,Lb=$$$hostConfig.hydrateInstance,Mb=$$$hostConfig.hydrateTextInstance,Nb=$$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance,Ob=$$$hostConfig.commitHydratedContainer,Pb=$$$hostConfig.commitHydratedSuspenseInstance,Qb;function Rb(a){if(void 0===Qb)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);Qb=b&&b[1]||"";}return "\n"+Qb+a}var Sb=!1;
		function Tb(a,b){if(!a||Sb)return "";Sb=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(k){var d=k;}Reflect.construct(a,[],b);}else {try{b.call();}catch(k){d=k;}a.call(b.prototype);}else {try{throw Error();}catch(k){d=k;}a();}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\n"),
		f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return "\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Sb=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Rb(a):""}var Ub=[],Vb=-1;function Wb(a){return {current:a}}function z(a){0>Vb||(a.current=Ub[Vb],Ub[Vb]=null,Vb--);}function A(a,b){Vb++;Ub[Vb]=a.current;a.current=b;}
		var Xb={},B=Wb(Xb),D=Wb(!1),Yb=Xb;function Zb(a,b){var c=a.type.contextTypes;if(!c)return Xb;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function E(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $b(){z(D);z(B);}
		function ac(a,b,c){if(B.current!==Xb)throw Error(q(168));A(B,b);A(D,c);}function bc(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(q(108,wa(b)||"Unknown",e));return aa({},c,d)}function cc(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Xb;Yb=B.current;A(B,a);A(D,D.current);return !0}
		function dc(a,b,c){var d=a.stateNode;if(!d)throw Error(q(169));c?(a=bc(a,b,Yb),d.__reactInternalMemoizedMergedChildContext=a,z(D),z(B),A(B,a)):z(D);A(D,c);}var ec=null,fc=null,gc=m.unstable_now;gc();var hc=0,F=8;
		function ic(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;
		F=8;return a}function jc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function kc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(q(358,a));}}
		function lc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=ic(k),e=F):(h&=f,0!==h&&(d=ic(h),e=F));}else f=c&~g,0!==f?(d=ic(f),e=F):0!==h&&(d=ic(h),e=F);if(0===d)return 0;d=31-mc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){ic(b);if(e<=F)return b;F=e;}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-mc(b),e=1<<c,d|=a[c],b&=~e;return d}
		function nc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function oc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=pc(24&~b),0===a?oc(10,b):a;case 10:return a=pc(192&~b),0===a?oc(8,b):a;case 8:return a=pc(3584&~b),0===a&&(a=pc(4186112&~b),0===a&&(a=512)),a;case 2:return b=pc(805306368&~b),0===b&&(b=268435456),b}throw Error(q(358,a));}function pc(a){return a&-a}function qc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
		function rc(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-mc(b);a[b]=c;}var mc=Math.clz32?Math.clz32:sc,tc=Math.log,uc=Math.LN2;function sc(a){return 0===a?32:31-(tc(a)/uc|0)|0}
		var vc=m.unstable_runWithPriority,wc=m.unstable_scheduleCallback,xc=m.unstable_cancelCallback,yc=m.unstable_shouldYield,zc=m.unstable_requestPaint,Ac=m.unstable_now,Bc=m.unstable_getCurrentPriorityLevel,Cc=m.unstable_ImmediatePriority,Dc=m.unstable_UserBlockingPriority,Ec=m.unstable_NormalPriority,Fc=m.unstable_LowPriority,Gc=m.unstable_IdlePriority,Hc={},Ic=void 0!==zc?zc:function(){},Jc=null,Kc=null,Lc=!1,Mc=Ac(),G=1E4>Mc?Ac:function(){return Ac()-Mc};
		function Nc(){switch(Bc()){case Cc:return 99;case Dc:return 98;case Ec:return 97;case Fc:return 96;case Gc:return 95;default:throw Error(q(332));}}function Oc(a){switch(a){case 99:return Cc;case 98:return Dc;case 97:return Ec;case 96:return Fc;case 95:return Gc;default:throw Error(q(332));}}function Pc(a,b){a=Oc(a);return vc(a,b)}function Qc(a,b,c){a=Oc(a);return wc(a,b,c)}function H(){if(null!==Kc){var a=Kc;Kc=null;xc(a);}Rc();}
		function Rc(){if(!Lc&&null!==Jc){Lc=!0;var a=0;try{var b=Jc;Pc(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Jc=null;}catch(c){throw null!==Jc&&(Jc=Jc.slice(a+1)),wc(Cc,H),c;}finally{Lc=!1;}}}var Sc=ca.ReactCurrentBatchConfig;function Tc(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var I="function"===typeof Object.is?Object.is:Tc,Uc=Object.prototype.hasOwnProperty;
		function Vc(a,b){if(I(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!Uc.call(b,c[d])||!I(a[c[d]],b[c[d]]))return !1;return !0}
		function Wc(a){switch(a.tag){case 5:return Rb(a.type);case 16:return Rb("Lazy");case 13:return Rb("Suspense");case 19:return Rb("SuspenseList");case 0:case 2:case 15:return a=Tb(a.type,!1),a;case 11:return a=Tb(a.type.render,!1),a;case 22:return a=Tb(a.type._render,!1),a;case 1:return a=Tb(a.type,!0),a;default:return ""}}function Xc(a,b){if(a&&a.defaultProps){b=aa({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Yc=Wb(null),Zc=null,$c=null,ad=null;
		function bd(){ad=$c=Zc=null;}function cd(a,b){a=a.type._context;Sa?(A(Yc,a._currentValue),a._currentValue=b):(A(Yc,a._currentValue2),a._currentValue2=b);}function dd(a){var b=Yc.current;z(Yc);a=a.type._context;Sa?a._currentValue=b:a._currentValue2=b;}function ed(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return;}}
		function fd(a,b){Zc=a;ad=$c=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(gd=!0),a.firstContext=null);}function J(a,b){if(ad!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)ad=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===$c){if(null===Zc)throw Error(q(308));$c=b;Zc.dependencies={lanes:0,firstContext:b,responders:null};}else $c=$c.next=b;}return Sa?a._currentValue:a._currentValue2}var hd=!1;
		function id(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};}function jd(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function kd(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
		function md(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}}
		function nd(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
		b;c.lastBaseUpdate=b;}
		function od(a,b,c,d){var e=a.updateQueue;hd=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var t=n.lastBaseUpdate;t!==g&&(null===t?n.firstBaseUpdate=l:t.next=l,n.lastBaseUpdate=k);}}if(null!==f){t=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,
		next:null});a:{var y=a,x=f;h=b;p=c;switch(x.tag){case 1:y=x.payload;if("function"===typeof y){t=y.call(p,t,h);break a}t=y;break a;case 3:y.flags=y.flags&-4097|64;case 0:y=x.payload;h="function"===typeof y?y.call(p,t,h):y;if(null===h||void 0===h)break a;t=aa({},t,h);break a;case 2:hd=!0;}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f));}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=t):n=n.next=p,g|=h;f=f.next;if(null===
		f)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null;}while(1);null===n&&(k=t);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;pd|=g;a.lanes=g;a.memoizedState=t;}}function qd(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(q(191,e));e.call(d);}}}var rd=(new ba.Component).refs;
		function sd(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:aa({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
		var vd={isMounted:function(a){return (a=a._reactInternals)?xa(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=K(),e=td(a),f=kd(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);md(a,f);ud(a,e,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=K(),e=td(a),f=kd(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);md(a,f);ud(a,e,d);},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=K(),d=td(a),e=kd(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=
		b);md(a,e);ud(a,d,c);}};function wd(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Vc(c,d)||!Vc(e,f):!0}
		function xd(a,b,c){var d=!1,e=Xb;var f=b.contextType;"object"===typeof f&&null!==f?f=J(f):(e=E(b)?Yb:B.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Zb(a,e):Xb);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=vd;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
		function yd(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&vd.enqueueReplaceState(b,b.state,null);}
		function zd(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=rd;id(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=J(f):(f=E(b)?Yb:B.current,e.context=Zb(a,f));od(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(sd(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
		(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&vd.enqueueReplaceState(e,e.state,null),od(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4);}var Ad=Array.isArray;
		function Bd(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(q(309));var d=c.stateNode;}if(!d)throw Error(q(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===rd&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}if("string"!==typeof a)throw Error(q(284));if(!c._owner)throw Error(q(290,a));}return a}
		function Cd(a,b){if("textarea"!==a.type)throw Error(q(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}
		function Dd(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Ed(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,
		c):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Fd(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Bd(a,b,c),d.return=a,d;d=Gd(c.type,c.key,c.props,null,a.mode,d);d.ref=Bd(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
		Hd(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Id(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function t(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Fd(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case da:return c=Gd(b.type,b.key,b.props,null,a.mode,c),c.ref=Bd(a,null,b),c.return=a,c;case ea:return b=Hd(b,a.mode,c),b.return=a,b}if(Ad(b)||va(b))return b=Id(b,
		a.mode,c,null),b.return=a,b;Cd(a,b);}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case da:return c.key===e?c.type===fa?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ea:return c.key===e?l(a,b,c,d):null}if(Ad(c)||va(c))return null!==e?null:n(a,b,c,d,null);Cd(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||
		null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case da:return a=a.get(null===d.key?c:d.key)||null,d.type===fa?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ea:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Ad(d)||va(d))return a=a.get(c)||null,n(b,a,d,e,null);Cd(b,d);}return null}function x(e,g,h,k){for(var l=null,v=null,u=g,C=g=0,n=null;null!==u&&C<h.length;C++){u.index>C?(n=u,u=null):n=u.sibling;var w=p(e,u,h[C],k);if(null===w){null===u&&(u=n);break}a&&u&&null===
		w.alternate&&b(e,u);g=f(w,g,C);null===v?l=w:v.sibling=w;v=w;u=n;}if(C===h.length)return c(e,u),l;if(null===u){for(;C<h.length;C++)u=t(e,h[C],k),null!==u&&(g=f(u,g,C),null===v?l=u:v.sibling=u,v=u);return l}for(u=d(e,u);C<h.length;C++)n=y(u,e,C,h[C],k),null!==n&&(a&&null!==n.alternate&&u.delete(null===n.key?C:n.key),g=f(n,g,C),null===v?l=n:v.sibling=n,v=n);a&&u.forEach(function(a){return b(e,a)});return l}function Y(e,g,h,k){var l=va(h);if("function"!==typeof l)throw Error(q(150));h=l.call(h);if(null==
		h)throw Error(q(151));for(var u=l=null,v=g,n=g=0,C=null,w=h.next();null!==v&&!w.done;n++,w=h.next()){v.index>n?(C=v,v=null):C=v.sibling;var x=p(e,v,w.value,k);if(null===x){null===v&&(v=C);break}a&&v&&null===x.alternate&&b(e,v);g=f(x,g,n);null===u?l=x:u.sibling=x;u=x;v=C;}if(w.done)return c(e,v),l;if(null===v){for(;!w.done;n++,w=h.next())w=t(e,w.value,k),null!==w&&(g=f(w,g,n),null===u?l=w:u.sibling=w,u=w);return l}for(v=d(e,v);!w.done;n++,w=h.next())w=y(v,e,n,w.value,k),null!==w&&(a&&null!==w.alternate&&
		v.delete(null===w.key?n:w.key),g=f(w,g,n),null===u?l=w:u.sibling=w,u=w);a&&v.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===fa&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case da:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===fa){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);
		d=e(k,f.props);d.ref=Bd(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling;}f.type===fa?(d=Id(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Gd(f.type,f.key,f.props,null,a.mode,h),h.ref=Bd(a,d,f),h.return=a,a=h);}return g(a);case ea:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=
		Hd(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Fd(f,a.mode,h),d.return=a,a=d),g(a);if(Ad(f))return x(a,d,f,h);if(va(f))return Y(a,d,f,h);l&&Cd(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(q(152,wa(a.type)||"Component"));}return c(a,d)}}var Jd=Dd(!0),Kd=Dd(!1),Ld={},L=Wb(Ld),Md=Wb(Ld),Nd=Wb(Ld);
		function Od(a){if(a===Ld)throw Error(q(174));return a}function Pd(a,b){A(Nd,b);A(Md,a);A(L,Ld);a=Ea(b);z(L);A(L,a);}function Qd(){z(L);z(Md);z(Nd);}function Rd(a){var b=Od(Nd.current),c=Od(L.current);b=Fa(c,a.type,b);c!==b&&(A(Md,a),A(L,b));}function Sd(a){Md.current===a&&(z(L),z(Md));}var M=Wb(0);
		function Td(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||Hb(c)||Ib(c)))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Ud=null,Vd=null,Wd=!1;
		function Xd(a,b){var c=Yd(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function Zd(a,b){switch(a.tag){case 5:return b=Fb(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 6:return b=Gb(b,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 13:return !1;default:return !1}}
		function $d(a){if(Wd){var b=Vd;if(b){var c=b;if(!Zd(a,b)){b=Jb(c);if(!b||!Zd(a,b)){a.flags=a.flags&-1025|2;Wd=!1;Ud=a;return}Xd(Ud,c);}Ud=a;Vd=Kb(b);}else a.flags=a.flags&-1025|2,Wd=!1,Ud=a;}}function ae(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Ud=a;}
		function be(a){if(!Va||a!==Ud)return !1;if(!Wd)return ae(a),Wd=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Ma(b,a.memoizedProps))for(b=Vd;b;)Xd(a,b),b=Jb(b);ae(a);if(13===a.tag){if(!Va)throw Error(q(316));a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(q(317));Vd=Nb(a);}else Vd=Ud?Jb(a.stateNode):null;return !0}function ce(){Va&&(Vd=Ud=null,Wd=!1);}var de=[];
		function ee(){for(var a=0;a<de.length;a++){var b=de[a];Sa?b._workInProgressVersionPrimary=null:b._workInProgressVersionSecondary=null;}de.length=0;}var fe=ca.ReactCurrentDispatcher,ge=ca.ReactCurrentBatchConfig,he=0,N=null,O=null,P=null,ie=!1,je=!1;function Q(){throw Error(q(321));}function ke(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!I(a[c],b[c]))return !1;return !0}
		function le(a,b,c,d,e,f){he=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;fe.current=null===a||null===a.memoizedState?me:ne;a=c(d,e);if(je){f=0;do{je=!1;if(!(25>f))throw Error(q(301));f+=1;P=O=null;b.updateQueue=null;fe.current=oe;a=c(d,e);}while(je)}fe.current=pe;b=null!==O&&null!==O.next;he=0;P=O=N=null;ie=!1;if(b)throw Error(q(300));return a}function qe(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}
		function re(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null;}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else {if(null===a)throw Error(q(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a;}return P}function se(a,b){return "function"===typeof b?b(a):b}
		function te(a){var b=re(),c=b.queue;if(null===c)throw Error(q(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((he&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else {var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,
		eagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;N.lanes|=l;pd|=l;}k=k.next;}while(null!==k&&k!==e);null===h?f=d:h.next=g;I(d,b.memoizedState)||(gd=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d;}return [b.memoizedState,c.dispatch]}
		function ue(a){var b=re(),c=b.queue;if(null===c)throw Error(q(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);I(f,b.memoizedState)||(gd=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}
		function ve(a,b,c){var d=b._getVersion;d=d(b._source);var e=Sa?b._workInProgressVersionPrimary:b._workInProgressVersionSecondary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(he&a)===a)Sa?b._workInProgressVersionPrimary=d:b._workInProgressVersionSecondary=d,de.push(b);if(a)return c(b._source);de.push(b);throw Error(q(350));}
		function we(a,b,c,d){var e=R;if(null===e)throw Error(q(349));var f=b._getVersion,g=f(b._source),h=fe.current,k=h.useState(function(){return ve(e,b,c)}),l=k[1],n=k[0];k=P;var t=a.memoizedState,p=t.refs,y=p.getSnapshot,x=t.source;t=t.subscribe;var Y=N;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!I(g,a)){a=c(b._source);I(n,a)||(l(a),a=td(Y),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=
		e.entanglements,h=a;0<h;){var k=31-mc(h),t=1<<k;d[k]|=a;h&=~t;}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=td(Y);e.mutableReadLanes|=d&e.pendingLanes;}catch(Oa){c(function(){throw Oa;});}})},[b,d]);I(y,c)&&I(x,b)&&I(t,d)||(a={pending:null,dispatch:null,lastRenderedReducer:se,lastRenderedState:n},a.dispatch=l=xe.bind(null,N,a),k.queue=a,k.baseQueue=null,n=ve(e,b,c),k.memoizedState=k.baseState=n);return n}
		function ye(a,b,c){var d=re();return we(d,a,b,c)}function ze(a){var b=qe();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:se,lastRenderedState:a};a=a.dispatch=xe.bind(null,N,a);return [b.memoizedState,a]}
		function Ae(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Be(a){var b=qe();a={current:a};return b.memoizedState=a}function Ce(){return re().memoizedState}function De(a,b,c,d){var e=qe();N.flags|=a;e.memoizedState=Ae(1|b,c,void 0,void 0===d?null:d);}
		function Ee(a,b,c,d){var e=re();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&ke(d,g.deps)){Ae(b,c,f,d);return}}N.flags|=a;e.memoizedState=Ae(1|b,c,f,d);}function Fe(a,b){return De(516,4,a,b)}function Ge(a,b){return Ee(516,4,a,b)}function He(a,b){return Ee(4,2,a,b)}function Ie(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}
		function Je(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ee(4,2,Ie.bind(null,b,a),c)}function Ke(){}function Le(a,b){var c=re();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&ke(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function Me(a,b){var c=re();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&ke(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}
		function Ne(a,b){var c=Nc();Pc(98>c?98:c,function(){a(!0);});Pc(97<c?97:c,function(){var c=ge.transition;ge.transition=1;try{a(!1),b();}finally{ge.transition=c;}});}
		function xe(a,b,c){var d=K(),e=td(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===N||null!==g&&g===N)je=ie=!0;else {if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(I(k,h))return}catch(l){}finally{}ud(a,e,d);}}
		var pe={readContext:J,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useOpaqueIdentifier:Q,unstable_isNewReconciler:!1},me={readContext:J,useCallback:function(a,b){qe().memoizedState=[a,void 0===b?null:b];return a},useContext:J,useEffect:Fe,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return De(4,2,Ie.bind(null,b,a),c)},useLayoutEffect:function(a,
		b){return De(4,2,a,b)},useMemo:function(a,b){var c=qe();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=qe();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=xe.bind(null,N,a);return [d.memoizedState,a]},useRef:Be,useState:ze,useDebugValue:Ke,useDeferredValue:function(a){var b=ze(a),c=b[0],d=b[1];Fe(function(){var b=ge.transition;ge.transition=1;try{d(a);}finally{ge.transition=
		b;}},[a]);return c},useTransition:function(){var a=ze(!1),b=a[0];a=Ne.bind(null,a[1]);Be(a);return [a,b]},useMutableSource:function(a,b,c){var d=qe();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return we(d,a,b,c)},useOpaqueIdentifier:function(){if(Wd){var a=!1,b=Xa(function(){a||(a=!0,c(Ya()));throw Error(q(355));}),c=ze(b)[1];0===(N.mode&2)&&(N.flags|=516,Ae(5,function(){c(Ya());},void 0,null));return b}b=Ya();ze(b);return b},unstable_isNewReconciler:!1},ne={readContext:J,
		useCallback:Le,useContext:J,useEffect:Ge,useImperativeHandle:Je,useLayoutEffect:He,useMemo:Me,useReducer:te,useRef:Ce,useState:function(){return te(se)},useDebugValue:Ke,useDeferredValue:function(a){var b=te(se),c=b[0],d=b[1];Ge(function(){var b=ge.transition;ge.transition=1;try{d(a);}finally{ge.transition=b;}},[a]);return c},useTransition:function(){var a=te(se)[0];return [Ce().current,a]},useMutableSource:ye,useOpaqueIdentifier:function(){return te(se)[0]},unstable_isNewReconciler:!1},oe={readContext:J,
		useCallback:Le,useContext:J,useEffect:Ge,useImperativeHandle:Je,useLayoutEffect:He,useMemo:Me,useReducer:ue,useRef:Ce,useState:function(){return ue(se)},useDebugValue:Ke,useDeferredValue:function(a){var b=ue(se),c=b[0],d=b[1];Ge(function(){var b=ge.transition;ge.transition=1;try{d(a);}finally{ge.transition=b;}},[a]);return c},useTransition:function(){var a=ue(se)[0];return [Ce().current,a]},useMutableSource:ye,useOpaqueIdentifier:function(){return ue(se)[0]},unstable_isNewReconciler:!1},Oe=ca.ReactCurrentOwner,
		gd=!1;function S(a,b,c,d){b.child=null===a?Kd(b,null,c,d):Jd(b,a.child,c,d);}function Pe(a,b,c,d,e){c=c.render;var f=b.ref;fd(b,e);d=le(a,b,c,d,f,e);if(null!==a&&!gd)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,Re(a,b,e);b.flags|=1;S(a,b,d,e);return b.child}
		function Se(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Te(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,Ue(a,b,g,d,e,f);a=Gd(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Vc,c(e,d)&&a.ref===b.ref))return Re(a,b,f);b.flags|=1;a=Ed(g,d);a.ref=b.ref;a.return=b;return b.child=a}
		function Ue(a,b,c,d,e,f){if(null!==a&&Vc(a.memoizedProps,d)&&a.ref===b.ref)if(gd=!1,0!==(f&e))0!==(a.flags&16384)&&(gd=!0);else return b.lanes=a.lanes,Re(a,b,f);return Ve(a,b,c,d,f)}
		function We(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},Xe(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},Xe(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},Xe(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,Xe(b,d);S(a,b,e,c);return b.child}
		function Ye(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128;}function Ve(a,b,c,d,e){var f=E(c)?Yb:B.current;f=Zb(b,f);fd(b,e);c=le(a,b,c,d,f,e);if(null!==a&&!gd)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,Re(a,b,e);b.flags|=1;S(a,b,c,e);return b.child}
		function Ze(a,b,c,d,e){if(E(c)){var f=!0;cc(b);}else f=!1;fd(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),xd(b,c,d),zd(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=J(l):(l=E(c)?Yb:B.current,l=Zb(b,l));var n=c.getDerivedStateFromProps,t="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;t||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==
		typeof g.componentWillReceiveProps||(h!==d||k!==l)&&yd(b,g,d,l);hd=!1;var p=b.memoizedState;g.state=p;od(b,d,g,e);k=b.memoizedState;h!==d||p!==k||D.current||hd?("function"===typeof n&&(sd(b,c,n,d),k=b.memoizedState),(h=hd||wd(b,c,h,d,p,k,l))?(t||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&
		(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1);}else {g=b.stateNode;jd(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Xc(b.type,h);g.props=l;t=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=J(k):(k=E(c)?Yb:B.current,k=Zb(b,k));var y=c.getDerivedStateFromProps;(n="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
		"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==t||p!==k)&&yd(b,g,d,k);hd=!1;p=b.memoizedState;g.state=p;od(b,d,g,e);var x=b.memoizedState;h!==t||p!==x||D.current||hd?("function"===typeof y&&(sd(b,c,y,d),x=b.memoizedState),(l=hd||wd(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,x,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
		g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||
		(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1);}return $e(a,b,c,d,f,e)}function $e(a,b,c,d,e,f){Ye(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&dc(b,c,!1),Re(a,b,f);d=b.stateNode;Oe.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Jd(b,a.child,null,f),b.child=Jd(b,null,h,f)):S(a,b,h,f);b.memoizedState=d.state;e&&dc(b,c,!0);return b.child}
		function af(a){var b=a.stateNode;b.pendingContext?ac(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ac(a,b.context,!1);Pd(a,b.containerInfo);}var bf={dehydrated:null,retryLane:0};
		function cf(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);A(M,e&1);if(null===a){void 0!==d.fallback&&$d(b);a=d.children;e=d.fallback;if(f)return a=df(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=bf,a;if("number"===typeof d.unstable_expectedLoadTime)return a=df(b,a,e,c),b.child.memoizedState={baseLanes:c},
		b.memoizedState=bf,b.lanes=33554432,a;c=ef({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=ff(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=bf,d;c=gf(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=ff(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:
		{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=bf,d;c=gf(a,b,d.children,c);b.memoizedState=null;return c}function df(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=ef(b,e,0,null);c=Id(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}
		function gf(a,b,c,d){var e=a.child;a=e.sibling;c=Ed(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}
		function ff(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Ed(g,h);null!==a?d=Ed(a,d):(d=Id(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function hf(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);ed(a.return,b);}
		function jf(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f);}
		function kf(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;S(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else {if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&hf(a,c);else if(19===a.tag)hf(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}A(M,d);if(0===(b.mode&2))b.memoizedState=
		null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Td(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);jf(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Td(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}jf(b,!0,c,null,f,b.lastEffect);break;case "together":jf(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null;}return b.child}
		function Re(a,b,c){null!==a&&(b.dependencies=a.dependencies);pd|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(q(153));if(null!==b.child){a=b.child;c=Ed(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ed(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}return null}function lf(a){a.flags|=4;}var mf,nf,of,pf;
		if(Ta)mf=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)Ja(a,c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}},nf=function(){},of=function(a,b,c,d,e){a=a.memoizedProps;if(a!==d){var f=b.stateNode,g=Od(L.current);c=La(f,c,a,d,e,g);(b.updateQueue=c)&&lf(b);}},pf=function(a,b,c,d){c!==d&&lf(b);};else if(Ua){mf=function(a,
		b,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Db(f,e.type,e.memoizedProps,e));Ja(a,f);}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Eb(f,e.memoizedProps,e)),Ja(a,f);else if(4!==e.tag){if(13===e.tag&&0!==(e.flags&4)&&(f=null!==e.memoizedState)){var g=e.child;if(null!==g&&(null!==g.child&&(g.child.return=g,mf(a,g,!0,f)),f=g.sibling,null!==f)){f.return=e;e=f;continue}}if(null!==e.child){e.child.return=e;e=e.child;continue}}if(e===b)break;for(;null===e.sibling;){if(null===e.return||
		e.return===b)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}};var qf=function(a,b,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Db(f,e.type,e.memoizedProps,e));Ab(a,f);}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Eb(f,e.memoizedProps,e)),Ab(a,f);else if(4!==e.tag){if(13===e.tag&&0!==(e.flags&4)&&(f=null!==e.memoizedState)){var g=e.child;if(null!==g&&(null!==g.child&&(g.child.return=g,qf(a,g,!0,f)),f=g.sibling,null!==f)){f.return=e;e=f;continue}}if(null!==e.child){e.child.return=
		e;e=e.child;continue}}if(e===b)break;for(;null===e.sibling;){if(null===e.return||e.return===b)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}};nf=function(a){var b=a.stateNode;if(null!==a.firstEffect){var c=b.containerInfo,d=zb(c);qf(d,a,!1,!1);b.pendingChildren=d;lf(a);Bb(c,d);}};of=function(a,b,c,d,e){var f=a.stateNode,g=a.memoizedProps;if((a=null===b.firstEffect)&&g===d)b.stateNode=f;else {var h=b.stateNode,k=Od(L.current),l=null;g!==d&&(l=La(h,c,g,d,e,k));a&&null===l?b.stateNode=f:(f=yb(f,
		l,c,g,d,b,a,h),Ka(f,c,d,e,k)&&lf(b),b.stateNode=f,a?lf(b):mf(f,b,!1,!1));}};pf=function(a,b,c,d){c!==d?(a=Od(Nd.current),c=Od(L.current),b.stateNode=Na(d,a,c,b),lf(b)):b.stateNode=a.stateNode;};}else nf=function(){},of=function(){},pf=function(){};
		function rf(a,b){if(!Wd)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
		function sf(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return E(b.type)&&$b(),null;case 3:Qd();z(D);z(B);ee();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)be(b)?lf(b):d.hydrate||(b.flags|=256);nf(b);return null;case 5:Sd(b);var e=Od(Nd.current);c=b.type;if(null!==a&&null!=b.stateNode)of(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else {if(!d){if(null===
		b.stateNode)throw Error(q(166));return null}a=Od(L.current);if(be(b)){if(!Va)throw Error(q(175));a=Lb(b.stateNode,b.type,b.memoizedProps,e,a,b);b.updateQueue=a;null!==a&&lf(b);}else {var f=Ia(c,d,e,a,b);mf(f,b,!1,!1);b.stateNode=f;Ka(f,c,d,e,a)&&lf(b);}null!==b.ref&&(b.flags|=128);}return null;case 6:if(a&&null!=b.stateNode)pf(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(q(166));a=Od(Nd.current);e=Od(L.current);if(be(b)){if(!Va)throw Error(q(176));Mb(b.stateNode,
		b.memoizedProps,b)&&lf(b);}else b.stateNode=Na(d,a,e,b);}return null;case 13:z(M);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;e=!1;null===a?void 0!==b.memoizedProps.fallback&&be(b):e=null!==a.memoizedState;if(d&&!e&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))0===T&&(T=3);else {if(0===T||3===T)T=4;null===R||0===(pd&134217727)&&0===(tf&134217727)||uf(R,U);}Ua&&d&&(b.flags|=4);Ta&&(d||e)&&(b.flags|=4);return null;case 4:return Qd(),
		nf(b),null===a&&ab(b.stateNode.containerInfo),null;case 10:return dd(b),null;case 17:return E(b.type)&&$b(),null;case 19:z(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.flags&64);f=d.rendering;if(null===f)if(e)rf(d,!1);else {if(0!==T||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){f=Td(a);if(null!==f){b.flags|=64;rf(d,!1);a=f.updateQueue;null!==a&&(b.updateQueue=a,b.flags|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;a=c;for(d=b.child;null!==d;)e=d,c=a,e.flags&=
		2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,f=e.alternate,null===f?(e.childLanes=0,e.lanes=c,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=f.childLanes,e.lanes=f.lanes,e.child=f.child,e.memoizedProps=f.memoizedProps,e.memoizedState=f.memoizedState,e.updateQueue=f.updateQueue,e.type=f.type,c=f.dependencies,e.dependencies=null===c?null:{lanes:c.lanes,firstContext:c.firstContext}),d=d.sibling;A(M,M.current&1|
		2);return b.child}a=a.sibling;}null!==d.tail&&G()>vf&&(b.flags|=64,e=!0,rf(d,!1),b.lanes=33554432);}else {if(!e)if(a=Td(f),null!==a){if(b.flags|=64,e=!0,a=a.updateQueue,null!==a&&(b.updateQueue=a,b.flags|=4),rf(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate&&!Wd)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*G()-d.renderingStartTime>vf&&1073741824!==c&&(b.flags|=64,e=!0,rf(d,!1),b.lanes=33554432);d.isBackwards?(f.sibling=b.child,b.child=f):(a=d.last,null!==a?a.sibling=
		f:b.child=f,d.last=f);}return null!==d.tail?(a=d.tail,d.rendering=a,d.tail=a.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=G(),a.sibling=null,b=M.current,A(M,e?b&1|2:b&1),a):null;case 23:case 24:return wf(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(q(156,b.tag));}
		function xf(a){switch(a.tag){case 1:E(a.type)&&$b();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:Qd();z(D);z(B);ee();b=a.flags;if(0!==(b&64))throw Error(q(285));a.flags=b&-4097|64;return a;case 5:return Sd(a),null;case 13:return z(M),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return z(M),null;case 4:return Qd(),null;case 10:return dd(a),null;case 23:case 24:return wf(),null;default:return null}}
		function yf(a,b){try{var c="",d=b;do c+=Wc(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e}}function zf(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Af="function"===typeof WeakMap?WeakMap:Map;function Bf(a,b,c){c=kd(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Cf||(Cf=!0,Df=d);zf(a,b);};return c}
		function Ef(a,b,c){c=kd(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){zf(a,b);return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ff?Ff=new Set([this]):Ff.add(this),zf(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}var Gf="function"===typeof WeakSet?WeakSet:Set;
		function Hf(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){If(a,c);}else b.current=null;}
		function Jf(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:Xc(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b;}return;case 3:Ta&&b.flags&256&&xb(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(q(163));}
		function Kf(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d();}c=c.next;}while(c!==b)}}
		function Lf(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d();}a=a.next;}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Mf(c,a),Nf(c,a));a=d;}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:Xc(c.type,b.memoizedProps),a.componentDidUpdate(d,
		b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&qd(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=Da(c.child.stateNode);break;case 1:a=c.child.stateNode;}qd(c,b,a);}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mb(a,c.type,c.memoizedProps,c);return;case 6:return;case 4:return;case 12:return;case 13:Va&&null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&
		Pb(c))));return;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(q(163));}
		function Of(a,b){if(Ta)for(var c=a;;){if(5===c.tag){var d=c.stateNode;b?tb(d):vb(c.stateNode,c.memoizedProps);}else if(6===c.tag)d=c.stateNode,b?ub(d):wb(d,c.memoizedProps);else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===a)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}}
		function Pf(a,b){if(fc&&"function"===typeof fc.onCommitFiberUnmount)try{fc.onCommitFiberUnmount(ec,b);}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Mf(b,c);else {d=b;try{e();}catch(f){If(d,f);}}c=c.next;}while(c!==a)}break;case 1:Hf(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount();}catch(f){If(b,
		f);}break;case 5:Hf(b);break;case 4:Ta?Qf(a,b):Ua&&Ua&&(b=b.stateNode.containerInfo,a=zb(b),Cb(b,a));}}function Rf(a,b){for(var c=b;;)if(Pf(a,c),null===c.child||Ta&&4===c.tag){if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}else c.child.return=c,c=c.child;}
		function Sf(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null;}function Tf(a){return 5===a.tag||3===a.tag||4===a.tag}
		function Uf(a){if(Ta){a:{for(var b=a.return;null!==b;){if(Tf(b))break a;b=b.return;}throw Error(q(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(q(161));}c.flags&16&&(sb(b),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Tf(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===
		c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.flags&2)){c=c.stateNode;break a}}d?Vf(a,c,b):Wf(a,c,b);}}function Vf(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?pb(c,a,b):kb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Vf(a,b,c),a=a.sibling;null!==a;)Vf(a,b,c),a=a.sibling;}
		function Wf(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?ob(c,a,b):jb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Wf(a,b,c),a=a.sibling;null!==a;)Wf(a,b,c),a=a.sibling;}
		function Qf(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(q(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return;}d=!0;}if(5===c.tag||6===c.tag)Rf(a,c),f?rb(e,c.stateNode):qb(e,c.stateNode);else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(Pf(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;
		for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1);}c.sibling.return=c.return;c=c.sibling;}}
		function Xf(a,b){if(Ta){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Kf(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&nb(c,f,e,a,d,b);}return;case 6:if(null===b.stateNode)throw Error(q(162));c=b.memoizedProps;lb(b.stateNode,null!==a?a.memoizedProps:c,c);return;case 3:Va&&(b=b.stateNode,b.hydrate&&(b.hydrate=!1,Ob(b.containerInfo)));return;case 12:return;case 13:Yf(b);
		Zf(b);return;case 19:Zf(b);return;case 17:return;case 23:case 24:Of(b,null!==b.memoizedState);return}throw Error(q(163));}switch(b.tag){case 0:case 11:case 14:case 15:case 22:Kf(3,b);return;case 12:return;case 13:Yf(b);Zf(b);return;case 19:Zf(b);return;case 3:Va&&(c=b.stateNode,c.hydrate&&(c.hydrate=!1,Ob(c.containerInfo)));break;case 23:case 24:return}a:if(Ua){switch(b.tag){case 1:case 5:case 6:case 20:break a;case 3:case 4:b=b.stateNode;Cb(b.containerInfo,b.pendingChildren);break a}throw Error(q(163));
		}}function Yf(a){null!==a.memoizedState&&($f=G(),Ta&&Of(a.child,!0));}function Zf(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Gf);b.forEach(function(b){var d=ag.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}function bg(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var cg=0,dg=1,eg=2,fg=3,gg=4;
		if("function"===typeof Symbol&&Symbol.for){var hg=Symbol.for;cg=hg("selector.component");dg=hg("selector.has_pseudo_class");eg=hg("selector.role");fg=hg("selector.test_id");gg=hg("selector.text");}function ig(a){var b=Wa(a);if(null!=b){if("string"!==typeof b.memoizedProps["data-testname"])throw Error(q(364));return b}a=cb(a);if(null===a)throw Error(q(362));return a.stateNode.current}
		function jg(a,b){switch(b.$$typeof){case cg:if(a.type===b.value)return !0;break;case dg:a:{b=b.value;a=[a,0];for(var c=0;c<a.length;){var d=a[c++],e=a[c++],f=b[e];if(5!==d.tag||!fb(d)){for(;null!=f&&jg(d,f);)e++,f=b[e];if(e===b.length){b=!0;break a}else for(d=d.child;null!==d;)a.push(d,e),d=d.sibling;}}b=!1;}return b;case eg:if(5===a.tag&&gb(a.stateNode,b.value))return !0;break;case gg:if(5===a.tag||6===a.tag)if(a=eb(a),null!==a&&0<=a.indexOf(b.value))return !0;break;case fg:if(5===a.tag&&(a=a.memoizedProps["data-testname"],
		"string"===typeof a&&a.toLowerCase()===b.value.toLowerCase()))return !0;break;default:throw Error(q(365,b));}return !1}function kg(a){switch(a.$$typeof){case cg:return "<"+(wa(a.value)||"Unknown")+">";case dg:return ":has("+(kg(a)||"")+")";case eg:return '[role="'+a.value+'"]';case gg:return '"'+a.value+'"';case fg:return '[data-testname="'+a.value+'"]';default:throw Error(q(365,a));}}
		function lg(a,b){var c=[];a=[a,0];for(var d=0;d<a.length;){var e=a[d++],f=a[d++],g=b[f];if(5!==e.tag||!fb(e)){for(;null!=g&&jg(e,g);)f++,g=b[f];if(f===b.length)c.push(e);else for(e=e.child;null!==e;)a.push(e,f),e=e.sibling;}}return c}function mg(a,b){if(!bb)throw Error(q(363));a=ig(a);a=lg(a,b);b=[];a=Array.from(a);for(var c=0;c<a.length;){var d=a[c++];if(5===d.tag)fb(d)||b.push(d.stateNode);else for(d=d.child;null!==d;)a.push(d),d=d.sibling;}return b}var ng=null;
		function og(a){if(null===ng)try{var b=("require"+Math.random()).slice(0,7);ng=(module&&module[b]).call(module,"timers").setImmediate;}catch(c){ng=function(a){var b=new MessageChannel;b.port1.onmessage=a;b.port2.postMessage(void 0);};}return ng(a)}var pg=Math.ceil,qg=ca.ReactCurrentDispatcher,rg=ca.ReactCurrentOwner,sg=ca.IsSomeRendererActing,V=0,R=null,W=null,U=0,tg=0,ug=Wb(0),T=0,vg=null,wg=0,pd=0,tf=0,xg=0,yg=null,$f=0,vf=Infinity;function zg(){vf=G()+500;}
		var X=null,Cf=!1,Df=null,Ff=null,Ag=!1,Bg=null,Cg=90,Dg=[],Eg=[],Fg=null,Gg=0,Hg=null,Ig=-1,Jg=0,Kg=0,Lg=null,Mg=!1;function K(){return 0!==(V&48)?G():-1!==Ig?Ig:Ig=G()}function td(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===Nc()?1:2;0===Jg&&(Jg=wg);if(0!==Sc.transition){0!==Kg&&(Kg=null!==yg?yg.pendingLanes:0);a=Jg;var b=4186112&~Kg;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=Nc();0!==(V&4)&&98===a?a=oc(12,Jg):(a=jc(a),a=oc(a,Jg));return a}
		function ud(a,b,c){if(50<Gg)throw Gg=0,Hg=null,Error(q(185));a=Ng(a,b);if(null===a)return null;rc(a,b,c);a===R&&(tf|=b,4===T&&uf(a,U));var d=Nc();1===b?0!==(V&8)&&0===(V&48)?Og(a):(Z(a,c),0===V&&(zg(),H())):(0===(V&4)||98!==d&&99!==d||(null===Fg?Fg=new Set([a]):Fg.add(a)),Z(a,c));yg=a;}function Ng(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}
		function Z(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-mc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;ic(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1;}}else l<=b&&(a.expiredLanes|=k);g&=~k;}d=lc(a,a===R?U:0);b=F;if(0===d)null!==c&&(c!==Hc&&xc(c),a.callbackNode=null,a.callbackPriority=0);else {if(null!==c){if(a.callbackPriority===b)return;c!==Hc&&xc(c);}15===b?(c=Og.bind(null,a),null===Jc?(Jc=[c],Kc=wc(Cc,Rc)):Jc.push(c),
		c=Hc):14===b?c=Qc(99,Og.bind(null,a)):(c=kc(b),c=Qc(c,Pg.bind(null,a)));a.callbackPriority=b;a.callbackNode=c;}}
		function Pg(a){Ig=-1;Kg=Jg=0;if(0!==(V&48))throw Error(q(327));var b=a.callbackNode;if(Qg()&&a.callbackNode!==b)return null;var c=lc(a,a===R?U:0);if(0===c)return null;var d=c;var e=V;V|=16;var f=Rg();if(R!==a||U!==d)zg(),Sg(a,d);do try{Tg();break}catch(h){Ug(a,h);}while(1);bd();qg.current=f;V=e;null!==W?d=0:(R=null,U=0,d=T);if(0!==(wg&tf))Sg(a,0);else if(0!==d){2===d&&(V|=64,a.hydrate&&(a.hydrate=!1,xb(a.containerInfo)),c=nc(a),0!==c&&(d=Vg(a,c)));if(1===d)throw b=vg,Sg(a,0),uf(a,c),Z(a,G()),b;a.finishedWork=
		a.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(q(345));case 2:Zg(a);break;case 3:uf(a,c);if((c&62914560)===c&&(d=$f+500-G(),10<d)){if(0!==lc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){K();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Pa(Zg.bind(null,a),d);break}Zg(a);break;case 4:uf(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-mc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f;}c=e;c=G()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>
		c?4320:1960*pg(c/1960))-c;if(10<c){a.timeoutHandle=Pa(Zg.bind(null,a),c);break}Zg(a);break;case 5:Zg(a);break;default:throw Error(q(329));}}Z(a,G());return a.callbackNode===b?Pg.bind(null,a):null}function uf(a,b){b&=~xg;b&=~tf;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-mc(b),d=1<<c;a[c]=-1;b&=~d;}}
		function Og(a){if(0!==(V&48))throw Error(q(327));Qg();if(a===R&&0!==(a.expiredLanes&U)){var b=U;var c=Vg(a,b);0!==(wg&tf)&&(b=lc(a,b),c=Vg(a,b));}else b=lc(a,0),c=Vg(a,b);0!==a.tag&&2===c&&(V|=64,a.hydrate&&(a.hydrate=!1,xb(a.containerInfo)),b=nc(a),0!==b&&(c=Vg(a,b)));if(1===c)throw c=vg,Sg(a,0),uf(a,b),Z(a,G()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Zg(a);Z(a,G());return null}
		function $g(){if(null!==Fg){var a=Fg;Fg=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Z(a,G());});}H();}function ah(a,b){var c=V;V|=1;try{return a(b)}finally{V=c,0===V&&(zg(),H());}}function bh(a,b){var c=V;if(0!==(c&48))return a(b);V|=1;try{if(a)return Pc(99,a.bind(null,b))}finally{V=c,H();}}function Xe(a,b){A(ug,tg);tg|=b;wg|=b;}function wf(){tg=ug.current;z(ug);}
		function Sg(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;c!==Ra&&(a.timeoutHandle=Ra,Qa(c));if(null!==W)for(c=W.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$b();break;case 3:Qd();z(D);z(B);ee();break;case 5:Sd(d);break;case 4:Qd();break;case 13:z(M);break;case 19:z(M);break;case 10:dd(d);break;case 23:case 24:wf();}c=c.return;}R=a;W=Ed(a.current,null);U=tg=wg=b;T=0;vg=null;xg=tf=pd=0;}
		function Ug(a,b){do{var c=W;try{bd();fe.current=pe;if(ie){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}ie=!1;}he=0;P=O=N=null;je=!1;rg.current=null;if(null===c||null===c.return){T=1;vg=b;W=null;break}a:{var f=a,g=c.return,h=c,k=b;b=U;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):
		(h.updateQueue=null,h.memoizedState=null);}var t=0!==(M.current&1),p=g;do{var y;if(y=13===p.tag){var x=p.memoizedState;if(null!==x)y=null!==x.dehydrated?!0:!1;else {var Y=p.memoizedProps;y=void 0===Y.fallback?!1:!0!==Y.unstable_avoidThisFallback?!0:t?!1:!0;}}if(y){var u=p.updateQueue;if(null===u){var v=new Set;v.add(l);p.updateQueue=v;}else u.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else {var C=kd(-1,1);C.tag=2;md(h,C);}h.lanes|=1;break a}k=
		void 0;h=b;var Oa=f.pingCache;null===Oa?(Oa=f.pingCache=new Af,k=new Set,Oa.set(l,k)):(k=Oa.get(l),void 0===k&&(k=new Set,Oa.set(l,k)));if(!k.has(h)){k.add(h);var Qe=ch.bind(null,f,l,h);l.then(Qe,Qe);}p.flags|=4096;p.lanes=b;break a}p=p.return;}while(null!==p);k=Error((wa(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");}5!==T&&(T=2);k=
		yf(k,h);p=g;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var Wg=Bf(p,f,b);nd(p,Wg);break a;case 1:f=k;var Xg=p.type,ld=p.stateNode;if(0===(p.flags&64)&&("function"===typeof Xg.getDerivedStateFromError||null!==ld&&"function"===typeof ld.componentDidCatch&&(null===Ff||!Ff.has(ld)))){p.flags|=4096;b&=-b;p.lanes|=b;var Yg=Ef(p,f,b);nd(p,Yg);break a}}p=p.return;}while(null!==p)}dh(c);}catch(w){b=w;W===c&&null!==c&&(W=c=c.return);continue}break}while(1)}
		function Rg(){var a=qg.current;qg.current=pe;return null===a?pe:a}function Vg(a,b){var c=V;V|=16;var d=Rg();R===a&&U===b||Sg(a,b);do try{eh();break}catch(e){Ug(a,e);}while(1);bd();V=c;qg.current=d;if(null!==W)throw Error(q(261));R=null;U=0;return T}function eh(){for(;null!==W;)fh(W);}function Tg(){for(;null!==W&&!yc();)fh(W);}function fh(a){var b=gh(a.alternate,a,tg);a.memoizedProps=a.pendingProps;null===b?dh(a):W=b;rg.current=null;}
		function dh(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=sf(c,b,tg);if(null!==c){W=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(tg&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d;}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==
		a.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b));}else {c=xf(b);if(null!==c){c.flags&=2047;W=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048);}b=b.sibling;if(null!==b){W=b;return}W=b=a;}while(null!==b);0===T&&(T=5);}function Zg(a){var b=Nc();Pc(99,hh.bind(null,a,b));return null}
		function hh(a,b){do Qg();while(null!==Bg);if(0!==(V&48))throw Error(q(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(q(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-mc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l;}null!==
		Fg&&0===(d&24)&&Fg.has(a)&&Fg.delete(a);a===R&&(W=R=null,U=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=V;V|=32;rg.current=null;Lg=Ga(a.containerInfo);Mg=!1;X=d;do try{ih();}catch(v){if(null===X)throw Error(q(330));If(X,v);X=X.nextEffect;}while(null!==X);Lg=null;X=d;do try{for(g=a;null!==X;){var n=X.flags;n&16&&Ta&&sb(X.stateNode);if(n&128){var t=X.alternate;if(null!==t){var p=t.ref;null!==p&&("function"===typeof p?p(null):p.current=
		null);}}switch(n&1038){case 2:Uf(X);X.flags&=-3;break;case 6:Uf(X);X.flags&=-3;Xf(X.alternate,X);break;case 1024:X.flags&=-1025;break;case 1028:X.flags&=-1025;Xf(X.alternate,X);break;case 4:Xf(X.alternate,X);break;case 8:h=g;f=X;Ta?Qf(h,f):Rf(h,f);var y=f.alternate;Sf(f);null!==y&&Sf(y);}X=X.nextEffect;}}catch(v){if(null===X)throw Error(q(330));If(X,v);X=X.nextEffect;}while(null!==X);Mg&&$a();Ha(a.containerInfo);a.current=c;X=d;do try{for(n=a;null!==X;){var x=X.flags;x&36&&Lf(n,X.alternate,X);if(x&128){t=
		void 0;var Y=X.ref;if(null!==Y){var u=X.stateNode;switch(X.tag){case 5:t=Da(u);break;default:t=u;}"function"===typeof Y?Y(t):Y.current=t;}}X=X.nextEffect;}}catch(v){if(null===X)throw Error(q(330));If(X,v);X=X.nextEffect;}while(null!==X);X=null;Ic();V=e;}else a.current=c;if(Ag)Ag=!1,Bg=a,Cg=b;else for(X=d;null!==X;)b=X.nextEffect,X.nextEffect=null,X.flags&8&&(x=X,x.sibling=null,x.stateNode=null),X=b;d=a.pendingLanes;0===d&&(Ff=null);1===d?a===Hg?Gg++:(Gg=0,Hg=a):Gg=0;c=c.stateNode;if(fc&&"function"===typeof fc.onCommitFiberRoot)try{fc.onCommitFiberRoot(ec,
		c,void 0,64===(c.current.flags&64));}catch(v){}Z(a,G());if(Cf)throw Cf=!1,a=Df,Df=null,a;if(0!==(V&8))return null;H();return null}function ih(){for(;null!==X;){var a=X.alternate;Mg||null===Lg||(0!==(X.flags&8)?Ca(X,Lg)&&(Mg=!0,Za()):13===X.tag&&bg(a,X)&&Ca(X,Lg)&&(Mg=!0,Za()));var b=X.flags;0!==(b&256)&&Jf(a,X);0===(b&512)||Ag||(Ag=!0,Qc(97,function(){Qg();return null}));X=X.nextEffect;}}function Qg(){if(90!==Cg){var a=97<Cg?97:Cg;Cg=90;return Pc(a,jh)}return !1}
		function Nf(a,b){Dg.push(b,a);Ag||(Ag=!0,Qc(97,function(){Qg();return null}));}function Mf(a,b){Eg.push(b,a);Ag||(Ag=!0,Qc(97,function(){Qg();return null}));}
		function jh(){if(null===Bg)return !1;var a=Bg;Bg=null;if(0!==(V&48))throw Error(q(331));var b=V;V|=32;var c=Eg;Eg=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g();}catch(k){if(null===f)throw Error(q(330));If(f,k);}}c=Dg;Dg=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h();}catch(k){if(null===f)throw Error(q(330));If(f,k);}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=
		null,h.stateNode=null),h=a;V=b;H();return !0}function kh(a,b,c){b=yf(c,b);b=Bf(a,b,1);md(a,b);b=K();a=Ng(a,1);null!==a&&(rc(a,1,b),Z(a,b));}
		function If(a,b){if(3===a.tag)kh(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){kh(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ff||!Ff.has(d))){a=yf(b,a);var e=Ef(c,a,1);md(c,e);e=K();c=Ng(c,1);if(null!==c)rc(c,1,e),Z(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ff||!Ff.has(d)))try{d.componentDidCatch(b,a);}catch(f){}break}}c=c.return;}}
		function ch(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=K();a.pingedLanes|=a.suspendedLanes&c;R===a&&(U&c)===c&&(4===T||3===T&&(U&62914560)===U&&500>G()-$f?Sg(a,0):xg|=c);Z(a,b);}function ag(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===Nc()?1:2:(0===Jg&&(Jg=wg),b=pc(62914560&~Jg),0===b&&(b=4194304)));c=K();a=Ng(a,b);null!==a&&(rc(a,b,c),Z(a,c));}var gh;
		gh=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||D.current)gd=!0;else if(0!==(c&d))gd=0!==(a.flags&16384)?!0:!1;else {gd=!1;switch(b.tag){case 3:af(b);ce();break;case 5:Rd(b);break;case 1:E(b.type)&&cc(b);break;case 4:Pd(b,b.stateNode.containerInfo);break;case 10:cd(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return cf(a,b,c);A(M,M.current&1);b=Re(a,b,c);return null!==b?b.sibling:null}A(M,M.current&1);break;case 19:d=
		0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return kf(a,b,c);b.flags|=64;}var e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);A(M,M.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,We(a,b,c)}return Re(a,b,c)}else gd=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Zb(b,B.current);fd(b,c);e=le(null,b,d,a,e,c);b.flags|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&
		void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(E(d)){var f=!0;cc(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;id(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&sd(b,d,g,a);e.updater=vd;b.stateNode=e;e._reactInternals=b;zd(b,d,a,c);b=$e(null,b,d,!0,f,c);}else b.tag=0,S(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;
		f=b.tag=lh(e);a=Xc(e,a);switch(f){case 0:b=Ve(null,b,e,a,c);break a;case 1:b=Ze(null,b,e,a,c);break a;case 11:b=Pe(null,b,e,a,c);break a;case 14:b=Se(null,b,e,Xc(e.type,a),d,c);break a}throw Error(q(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Xc(d,e),Ve(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Xc(d,e),Ze(a,b,d,e,c);case 3:af(b);d=b.updateQueue;if(null===a||null===d)throw Error(q(282));d=b.pendingProps;e=b.memoizedState;e=null!==
		e?e.element:null;jd(a,b);od(b,d,null,c);d=b.memoizedState.element;if(d===e)ce(),b=Re(a,b,c);else {e=b.stateNode;if(f=e.hydrate)Va?(Vd=Kb(b.stateNode.containerInfo),Ud=b,f=Wd=!0):f=!1;if(f){if(Va&&(a=e.mutableSourceEagerHydrationData,null!=a))for(e=0;e<a.length;e+=2)f=a[e],g=a[e+1],Sa?f._workInProgressVersionPrimary=g:f._workInProgressVersionSecondary=g,de.push(f);c=Kd(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling;}else S(a,b,d,c),ce();b=b.child;}return b;case 5:return Rd(b),null===
		a&&$d(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ma(d,e)?g=null:null!==f&&Ma(d,f)&&(b.flags|=16),Ye(a,b),S(a,b,g,c),b.child;case 6:return null===a&&$d(b),null;case 13:return cf(a,b,c);case 4:return Pd(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Jd(b,null,d,c):S(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Xc(d,e),Pe(a,b,d,e,c);case 7:return S(a,b,b.pendingProps,c),b.child;case 8:return S(a,b,b.pendingProps.children,
		c),b.child;case 12:return S(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;cd(b,f);if(null!==g){var h=g.value;f=I(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!D.current){b=Re(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==
		(l.observedBits&f)){1===h.tag&&(l=kd(-1,c&-c),l.tag=2,md(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);ed(h.return,c);k.lanes|=c;break}l=l.next;}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return;}h=g;}}S(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,fd(b,c),e=J(e,f.unstable_observedBits),d=d(e),b.flags|=1,S(a,b,
		d,c),b.child;case 14:return e=b.type,f=Xc(e,b.pendingProps),f=Xc(e.type,f),Se(a,b,e,f,d,c);case 15:return Ue(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Xc(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,E(d)?(a=!0,cc(b)):a=!1,fd(b,c),xd(b,d,e),zd(b,d,e,c),$e(null,b,d,!0,a,c);case 19:return kf(a,b,c);case 23:return We(a,b,c);case 24:return We(a,b,c)}throw Error(q(156,b.tag));};
		var mh={current:!1},nh=m.unstable_flushAllWithoutAsserting,oh="function"===typeof nh;function ph(){if(void 0!==nh)return nh();for(var a=!1;Qg();)a=!0;return a}function qh(a){try{ph(),og(function(){ph()?qh(a):a();});}catch(b){a(b);}}var rh=0,sh=!1;
		function th(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null;}function Yd(a,b,c,d){return new th(a,b,c,d)}function Te(a){a=a.prototype;return !(!a||!a.isReactComponent)}
		function lh(a){if("function"===typeof a)return Te(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===la)return 11;if(a===oa)return 14}return 2}
		function Ed(a,b){var c=a.alternate;null===c?(c=Yd(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
		c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
		function Gd(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Te(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case fa:return Id(c.children,e,f,b);case ra:g=8;e|=16;break;case ha:g=8;e|=1;break;case ia:return a=Yd(12,c,b,e|8),a.elementType=ia,a.type=ia,a.lanes=f,a;case ma:return a=Yd(13,c,b,e),a.type=ma,a.elementType=ma,a.lanes=f,a;case na:return a=Yd(19,c,b,e),a.elementType=na,a.lanes=f,a;case sa:return ef(c,e,f,b);case ta:return a=Yd(24,c,b,e),a.elementType=ta,a.lanes=f,a;default:if("object"===
		typeof a&&null!==a)switch(a.$$typeof){case ja:g=10;break a;case ka:g=9;break a;case la:g=11;break a;case oa:g=14;break a;case pa:g=16;d=null;break a;case qa:g=22;break a}throw Error(q(130,null==a?a:typeof a,""));}b=Yd(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Id(a,b,c,d){a=Yd(7,a,d,b);a.lanes=c;return a}function ef(a,b,c,d){a=Yd(23,a,d,b);a.elementType=sa;a.lanes=c;return a}function Fd(a,b,c){a=Yd(6,a,null,b);a.lanes=c;return a}
		function Hd(a,b,c){b=Yd(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
		function uh(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=Ra;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=qc(0);this.expirationTimes=qc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=qc(0);Va&&(this.mutableSourceEagerHydrationData=null);}
		function vh(a){var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(q(188));throw Error(q(268,Object.keys(a)));}a=Aa(b);return null===a?null:a.stateNode}function wh(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function xh(a,b){wh(a,b);(a=a.alternate)&&wh(a,b);}function yh(a){a=Aa(a);return null===a?null:a.stateNode}function zh(){return null}exports.IsThisRendererActing=mh;
		exports.act=function(a){function b(){rh--;sg.current=c;mh.current=d;}!1===sh&&(sh=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected."));rh++;var c=sg.current,d=mh.current;sg.current=!0;mh.current=!0;try{var e=ah(a);}catch(f){throw b(),f;}if(null!==e&&"object"===typeof e&&"function"===typeof e.then)return {then:function(a,d){e.then(function(){1<rh||!0===oh&&!0===c?(b(),a()):qh(function(c){b();c?d(c):a();});},function(a){b();d(a);});}};try{1!==rh||
		!1!==oh&&!1!==c||ph(),b();}catch(f){throw b(),f;}return {then:function(a){a();}}};exports.attemptContinuousHydration=function(a){if(13===a.tag){var b=K();ud(a,67108864,b);xh(a,67108864);}};exports.attemptHydrationAtCurrentPriority=function(a){if(13===a.tag){var b=K(),c=td(a);ud(a,c,b);xh(a,c);}};
		exports.attemptSynchronousHydration=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.hydrate){var c=ic(b.pendingLanes);b.expiredLanes|=c&b.pendingLanes;Z(b,G());0===(V&48)&&(zg(),H());}break;case 13:var d=K();bh(function(){return ud(a,1,d)});xh(a,4);}};exports.attemptUserBlockingHydration=function(a){if(13===a.tag){var b=K();ud(a,4,b);xh(a,4);}};exports.batchedEventUpdates=function(a,b){var c=V;V|=2;try{return a(b)}finally{V=c,0===V&&(zg(),H());}};exports.batchedUpdates=ah;
		exports.createComponentSelector=function(a){return {$$typeof:cg,value:a}};exports.createContainer=function(a,b,c){a=new uh(a,b,c);b=Yd(3,null,null,2===b?7:1===b?3:0);a.current=b;b.stateNode=a;id(b);return a};exports.createHasPsuedoClassSelector=function(a){return {$$typeof:dg,value:a}};exports.createPortal=function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:ea,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}};
		exports.createRoleSelector=function(a){return {$$typeof:eg,value:a}};exports.createTestNameSelector=function(a){return {$$typeof:fg,value:a}};exports.createTextSelector=function(a){return {$$typeof:gg,value:a}};exports.deferredUpdates=function(a){return Pc(97,a)};exports.discreteUpdates=function(a,b,c,d,e){var f=V;V|=4;try{return Pc(98,a.bind(null,b,c,d,e))}finally{V=f,0===V&&(zg(),H());}};exports.findAllNodes=mg;
		exports.findBoundingRects=function(a,b){if(!bb)throw Error(q(363));b=mg(a,b);a=[];for(var c=0;c<b.length;c++)a.push(db(b[c]));for(b=a.length-1;0<b;b--){c=a[b];for(var d=c.x,e=d+c.width,f=c.y,g=f+c.height,h=b-1;0<=h;h--)if(b!==h){var k=a[h],l=k.x,n=l+k.width,t=k.y,p=t+k.height;if(d>=l&&f>=t&&e<=n&&g<=p){a.splice(b,1);break}else if(!(d!==l||c.width!==k.width||p<f||t>g)){t>f&&(k.height+=t-f,k.y=f);p<g&&(k.height=g-t);a.splice(b,1);break}else if(!(f!==t||c.height!==k.height||n<d||l>e)){l>d&&(k.width+=
		l-d,k.x=d);n<e&&(k.width=e-l);a.splice(b,1);break}}}return a};exports.findHostInstance=vh;exports.findHostInstanceWithNoPortals=function(a){a=Ba(a);return null===a?null:20===a.tag?a.stateNode.instance:a.stateNode};exports.findHostInstanceWithWarning=function(a){return vh(a)};exports.flushControlled=function(a){var b=V;V|=1;try{Pc(99,a);}finally{V=b,0===V&&(zg(),H());}};exports.flushDiscreteUpdates=function(){0===(V&49)&&($g(),Qg());};exports.flushPassiveEffects=Qg;exports.flushSync=bh;
		exports.focusWithin=function(a,b){if(!bb)throw Error(q(363));a=ig(a);b=lg(a,b);b=Array.from(b);for(a=0;a<b.length;){var c=b[a++];if(!fb(c)){if(5===c.tag&&hb(c.stateNode))return !0;for(c=c.child;null!==c;)b.push(c),c=c.sibling;}}return !1};exports.getCurrentUpdateLanePriority=function(){return hc};
		exports.getFindAllNodesFailureDescription=function(a,b){if(!bb)throw Error(q(363));var c=0,d=[];a=[ig(a),0];for(var e=0;e<a.length;){var f=a[e++],g=a[e++],h=b[g];if(5!==f.tag||!fb(f))if(jg(f,h)&&(d.push(kg(h)),g++,g>c&&(c=g)),g<b.length)for(f=f.child;null!==f;)a.push(f,g),f=f.sibling;}if(c<b.length){for(a=[];c<b.length;c++)a.push(kg(b[c]));return "findAllNodes was able to match part of the selector:\n  "+(d.join(" > ")+"\n\nNo matching component was found for:\n  ")+a.join(" > ")}return null};
		exports.getPublicRootInstance=function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return Da(a.child.stateNode);default:return a.child.stateNode}};
		exports.injectIntoDevTools=function(a){a={bundleType:a.bundleType,version:a.version,rendererPackageName:a.rendererPackageName,rendererConfig:a.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ca.ReactCurrentDispatcher,findHostInstanceByFiber:yh,findFiberByHostInstance:a.findFiberByHostInstance||zh,findHostInstancesForRefresh:null,
		scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)a=!1;else {var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!b.isDisabled&&b.supportsFiber)try{ec=b.inject(a),fc=b;}catch(c){}a=!0;}return a};exports.observeVisibleRects=function(a,b,c,d){if(!bb)throw Error(q(363));a=mg(a,b);var e=ib(a,c,d).disconnect;return {disconnect:function(){e();}}};
		exports.registerMutableSourceForHydration=function(a,b){var c=b._getVersion;c=c(b._source);null==a.mutableSourceEagerHydrationData?a.mutableSourceEagerHydrationData=[b,c]:a.mutableSourceEagerHydrationData.push(b,c);};exports.runWithPriority=function(a,b){var c=hc;try{return hc=a,b()}finally{hc=c;}};exports.shouldSuspend=function(){return !1};exports.unbatchedUpdates=function(a,b){var c=V;V&=-2;V|=8;try{return a(b)}finally{V=c,0===V&&(zg(),H());}};
		exports.updateContainer=function(a,b,c,d){var e=b.current,f=K(),g=td(e);a:if(c){c=c._reactInternals;b:{if(xa(c)!==c||1!==c.tag)throw Error(q(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(E(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return;}while(null!==h);throw Error(q(171));}if(1===c.tag){var k=c.type;if(E(k)){c=bc(c,k,h);break a}}c=h;}else c=Xb;null===b.context?b.context=c:b.pendingContext=c;b=kd(f,g);b.payload={element:a};d=void 0===
		d?null:d;null!==d&&(b.callback=d);md(e,b);ud(e,g,f);return g};

		    return exports;
		};
} (reactReconciler_production_min));
	return reactReconciler_production_min.exports;
}

var reactReconciler_development = {exports: {}};

var tracing = {exports: {}};

var schedulerTracing_production_min = {};

/** @license React v0.20.2
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredSchedulerTracing_production_min;

function requireSchedulerTracing_production_min () {
	if (hasRequiredSchedulerTracing_production_min) return schedulerTracing_production_min;
	hasRequiredSchedulerTracing_production_min = 1;
var b=0;schedulerTracing_production_min.__interactionsRef=null;schedulerTracing_production_min.__subscriberRef=null;schedulerTracing_production_min.unstable_clear=function(a){return a()};schedulerTracing_production_min.unstable_getCurrent=function(){return null};schedulerTracing_production_min.unstable_getThreadID=function(){return ++b};schedulerTracing_production_min.unstable_subscribe=function(){};schedulerTracing_production_min.unstable_trace=function(a,d,c){return c()};schedulerTracing_production_min.unstable_unsubscribe=function(){};schedulerTracing_production_min.unstable_wrap=function(a){return a};
	return schedulerTracing_production_min;
}

var schedulerTracing_development = {};

/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredSchedulerTracing_development;

function requireSchedulerTracing_development () {
	if (hasRequiredSchedulerTracing_development) return schedulerTracing_development;
	hasRequiredSchedulerTracing_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

		var interactionIDCounter = 0;
		var threadIDCounter = 0; // Set of currently traced interactions.
		// Interactions "stack"–
		// Meaning that newly traced interactions are appended to the previously active set.
		// When an interaction goes out of scope, the previous set (if any) is restored.

		exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

		exports.__subscriberRef = null;

		{
		  exports.__interactionsRef = {
		    current: new Set()
		  };
		  exports.__subscriberRef = {
		    current: null
		  };
		}
		function unstable_clear(callback) {

		  var prevInteractions = exports.__interactionsRef.current;
		  exports.__interactionsRef.current = new Set();

		  try {
		    return callback();
		  } finally {
		    exports.__interactionsRef.current = prevInteractions;
		  }
		}
		function unstable_getCurrent() {
		  {
		    return exports.__interactionsRef.current;
		  }
		}
		function unstable_getThreadID() {
		  return ++threadIDCounter;
		}
		function unstable_trace(name, timestamp, callback) {
		  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

		  var interaction = {
		    __count: 1,
		    id: interactionIDCounter++,
		    name: name,
		    timestamp: timestamp
		  };
		  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
		  // To do that, clone the current interactions.
		  // The previous set will be restored upon completion.

		  var interactions = new Set(prevInteractions);
		  interactions.add(interaction);
		  exports.__interactionsRef.current = interactions;
		  var subscriber = exports.__subscriberRef.current;
		  var returnValue;

		  try {
		    if (subscriber !== null) {
		      subscriber.onInteractionTraced(interaction);
		    }
		  } finally {
		    try {
		      if (subscriber !== null) {
		        subscriber.onWorkStarted(interactions, threadID);
		      }
		    } finally {
		      try {
		        returnValue = callback();
		      } finally {
		        exports.__interactionsRef.current = prevInteractions;

		        try {
		          if (subscriber !== null) {
		            subscriber.onWorkStopped(interactions, threadID);
		          }
		        } finally {
		          interaction.__count--; // If no async work was scheduled for this interaction,
		          // Notify subscribers that it's completed.

		          if (subscriber !== null && interaction.__count === 0) {
		            subscriber.onInteractionScheduledWorkCompleted(interaction);
		          }
		        }
		      }
		    }
		  }

		  return returnValue;
		}
		function unstable_wrap(callback) {
		  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

		  var wrappedInteractions = exports.__interactionsRef.current;
		  var subscriber = exports.__subscriberRef.current;

		  if (subscriber !== null) {
		    subscriber.onWorkScheduled(wrappedInteractions, threadID);
		  } // Update the pending async work count for the current interactions.
		  // Update after calling subscribers in case of error.


		  wrappedInteractions.forEach(function (interaction) {
		    interaction.__count++;
		  });
		  var hasRun = false;

		  function wrapped() {
		    var prevInteractions = exports.__interactionsRef.current;
		    exports.__interactionsRef.current = wrappedInteractions;
		    subscriber = exports.__subscriberRef.current;

		    try {
		      var returnValue;

		      try {
		        if (subscriber !== null) {
		          subscriber.onWorkStarted(wrappedInteractions, threadID);
		        }
		      } finally {
		        try {
		          returnValue = callback.apply(undefined, arguments);
		        } finally {
		          exports.__interactionsRef.current = prevInteractions;

		          if (subscriber !== null) {
		            subscriber.onWorkStopped(wrappedInteractions, threadID);
		          }
		        }
		      }

		      return returnValue;
		    } finally {
		      if (!hasRun) {
		        // We only expect a wrapped function to be executed once,
		        // But in the event that it's executed more than once–
		        // Only decrement the outstanding interaction counts once.
		        hasRun = true; // Update pending async counts for all wrapped interactions.
		        // If this was the last scheduled async work for any of them,
		        // Mark them as completed.

		        wrappedInteractions.forEach(function (interaction) {
		          interaction.__count--;

		          if (subscriber !== null && interaction.__count === 0) {
		            subscriber.onInteractionScheduledWorkCompleted(interaction);
		          }
		        });
		      }
		    }
		  }

		  wrapped.cancel = function cancel() {
		    subscriber = exports.__subscriberRef.current;

		    try {
		      if (subscriber !== null) {
		        subscriber.onWorkCanceled(wrappedInteractions, threadID);
		      }
		    } finally {
		      // Update pending async counts for all wrapped interactions.
		      // If this was the last scheduled async work for any of them,
		      // Mark them as completed.
		      wrappedInteractions.forEach(function (interaction) {
		        interaction.__count--;

		        if (subscriber && interaction.__count === 0) {
		          subscriber.onInteractionScheduledWorkCompleted(interaction);
		        }
		      });
		    }
		  };

		  return wrapped;
		}

		var subscribers = null;

		{
		  subscribers = new Set();
		}

		function unstable_subscribe(subscriber) {
		  {
		    subscribers.add(subscriber);

		    if (subscribers.size === 1) {
		      exports.__subscriberRef.current = {
		        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
		        onInteractionTraced: onInteractionTraced,
		        onWorkCanceled: onWorkCanceled,
		        onWorkScheduled: onWorkScheduled,
		        onWorkStarted: onWorkStarted,
		        onWorkStopped: onWorkStopped
		      };
		    }
		  }
		}
		function unstable_unsubscribe(subscriber) {
		  {
		    subscribers.delete(subscriber);

		    if (subscribers.size === 0) {
		      exports.__subscriberRef.current = null;
		    }
		  }
		}

		function onInteractionTraced(interaction) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onInteractionTraced(interaction);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onInteractionScheduledWorkCompleted(interaction) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onInteractionScheduledWorkCompleted(interaction);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkScheduled(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkScheduled(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkStarted(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkStarted(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkStopped(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkStopped(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		function onWorkCanceled(interactions, threadID) {
		  var didCatchError = false;
		  var caughtError = null;
		  subscribers.forEach(function (subscriber) {
		    try {
		      subscriber.onWorkCanceled(interactions, threadID);
		    } catch (error) {
		      if (!didCatchError) {
		        didCatchError = true;
		        caughtError = error;
		      }
		    }
		  });

		  if (didCatchError) {
		    throw caughtError;
		  }
		}

		exports.unstable_clear = unstable_clear;
		exports.unstable_getCurrent = unstable_getCurrent;
		exports.unstable_getThreadID = unstable_getThreadID;
		exports.unstable_subscribe = unstable_subscribe;
		exports.unstable_trace = unstable_trace;
		exports.unstable_unsubscribe = unstable_unsubscribe;
		exports.unstable_wrap = unstable_wrap;
		  })();
		}
} (schedulerTracing_development));
	return schedulerTracing_development;
}

var hasRequiredTracing;

function requireTracing () {
	if (hasRequiredTracing) return tracing.exports;
	hasRequiredTracing = 1;
	(function (module) {

		if (process.env.NODE_ENV === 'production') {
		  module.exports = requireSchedulerTracing_production_min();
		} else {
		  module.exports = requireSchedulerTracing_development();
		}
} (tracing));
	return tracing.exports;
}

/** @license React v0.26.2
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconciler_development;

function requireReactReconciler_development () {
	if (hasRequiredReactReconciler_development) return reactReconciler_development.exports;
	hasRequiredReactReconciler_development = 1;
	(function (module) {

		if (process.env.NODE_ENV !== "production") {
		  module.exports = function $$$reconciler($$$hostConfig) {
		    var exports = {};

		var React = react.exports;
		var _assign = requireObjectAssign();
		var Scheduler = scheduler.exports;
		var tracing = requireTracing();

		var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    printWarning('warn', format, args);
		  }
		}
		function error(format) {
		  {
		    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		      args[_key2 - 1] = arguments[_key2];
		    }

		    printWarning('error', format, args);
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    }

		    var argsWithFormat = args.map(function (item) {
		      return '' + item;
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var FunctionComponent = 0;
		var ClassComponent = 1;
		var IndeterminateComponent = 2; // Before we know whether it is function or class

		var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

		var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

		var HostComponent = 5;
		var HostText = 6;
		var Fragment = 7;
		var Mode = 8;
		var ContextConsumer = 9;
		var ContextProvider = 10;
		var ForwardRef = 11;
		var Profiler = 12;
		var SuspenseComponent = 13;
		var MemoComponent = 14;
		var SimpleMemoComponent = 15;
		var LazyComponent = 16;
		var IncompleteClassComponent = 17;
		var DehydratedFragment = 18;
		var SuspenseListComponent = 19;
		var FundamentalComponent = 20;
		var ScopeComponent = 21;
		var Block = 22;
		var OffscreenComponent = 23;
		var LegacyHiddenComponent = 24;

		/**
		 * `ReactInstanceMap` maintains a mapping from a public facing stateful
		 * instance (key) and the internal representation (value). This allows public
		 * methods to accept the user facing instance as an argument and map them back
		 * to internal methods.
		 *
		 * Note that this module is currently shared and assumed to be stateless.
		 * If this becomes an actual Map, that will break.
		 */
		function get(key) {
		  return key._reactInternals;
		}
		function set(key, value) {
		  key._reactInternals = value;
		}

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var REACT_ELEMENT_TYPE = 0xeac7;
		var REACT_PORTAL_TYPE = 0xeaca;
		var REACT_FRAGMENT_TYPE = 0xeacb;
		var REACT_STRICT_MODE_TYPE = 0xeacc;
		var REACT_PROFILER_TYPE = 0xead2;
		var REACT_PROVIDER_TYPE = 0xeacd;
		var REACT_CONTEXT_TYPE = 0xeace;
		var REACT_FORWARD_REF_TYPE = 0xead0;
		var REACT_SUSPENSE_TYPE = 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = 0xead8;
		var REACT_MEMO_TYPE = 0xead3;
		var REACT_LAZY_TYPE = 0xead4;
		var REACT_BLOCK_TYPE = 0xead9;
		var REACT_SCOPE_TYPE = 0xead7;
		var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
		var REACT_OFFSCREEN_TYPE = 0xeae2;
		var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

		if (typeof Symbol === 'function' && Symbol.for) {
		  var symbolFor = Symbol.for;
		  REACT_ELEMENT_TYPE = symbolFor('react.element');
		  REACT_PORTAL_TYPE = symbolFor('react.portal');
		  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
		  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
		  REACT_PROFILER_TYPE = symbolFor('react.profiler');
		  REACT_PROVIDER_TYPE = symbolFor('react.provider');
		  REACT_CONTEXT_TYPE = symbolFor('react.context');
		  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
		  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
		  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
		  REACT_MEMO_TYPE = symbolFor('react.memo');
		  REACT_LAZY_TYPE = symbolFor('react.lazy');
		  REACT_BLOCK_TYPE = symbolFor('react.block');
		  symbolFor('react.server.block');
		  symbolFor('react.fundamental');
		  REACT_SCOPE_TYPE = symbolFor('react.scope');
		  symbolFor('react.opaque.id');
		  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
		  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
		  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
		}

		var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var functionName = innerType.displayName || innerType.name || '';
		  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
		}

		function getContextName(type) {
		  return type.displayName || 'Context';
		}

		function getComponentName(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        return getComponentName(type.type);

		      case REACT_BLOCK_TYPE:
		        return getComponentName(type._render);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentName(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }
		    }
		  }

		  return null;
		}

		// Don't change these two values. They're used by React Dev Tools.
		var NoFlags =
		/*                      */
		0;
		var PerformedWork =
		/*                */
		1; // You can change the rest (and add more).

		var Placement =
		/*                    */
		2;
		var Update =
		/*                       */
		4;
		var PlacementAndUpdate =
		/*           */
		6;
		var Deletion =
		/*                     */
		8;
		var ContentReset =
		/*                 */
		16;
		var Callback =
		/*                     */
		32;
		var DidCapture =
		/*                   */
		64;
		var Ref =
		/*                          */
		128;
		var Snapshot =
		/*                     */
		256;
		var Passive =
		/*                      */
		512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

		var PassiveUnmountPendingDev =
		/*     */
		8192;
		var Hydrating =
		/*                    */
		1024;
		var HydratingAndUpdate =
		/*           */
		1028; // Passive & Update & Callback & Ref & Snapshot

		var LifecycleEffectMask =
		/*          */
		932; // Union of all host effects

		var HostEffectMask =
		/*               */
		2047; // These are not really side effects, but we still reuse this field.

		var Incomplete =
		/*                   */
		2048;
		var ShouldCapture =
		/*                */
		4096;
		var ForceUpdateForLegacySuspense =
		/* */
		16384; // Static tags describe aspects of a fiber that are not specific to a render,

		// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

		var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

		var enableFundamentalAPI = false; // Experimental Scope support.
		var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
		var warnAboutStringRefs = false;

		var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
		function getNearestMountedFiber(fiber) {
		  var node = fiber;
		  var nearestMounted = fiber;

		  if (!fiber.alternate) {
		    // If there is no alternate, this might be a new tree that isn't inserted
		    // yet. If it is, then it will have a pending insertion effect on it.
		    var nextNode = node;

		    do {
		      node = nextNode;

		      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
		        // This is an insertion or in-progress hydration. The nearest possible
		        // mounted fiber is the parent but we need to continue to figure out
		        // if that one is still mounted.
		        nearestMounted = node.return;
		      }

		      nextNode = node.return;
		    } while (nextNode);
		  } else {
		    while (node.return) {
		      node = node.return;
		    }
		  }

		  if (node.tag === HostRoot) {
		    // TODO: Check if this was a nested HostRoot when used with
		    // renderContainerIntoSubtree.
		    return nearestMounted;
		  } // If we didn't hit the root, that means that we're in an disconnected tree
		  // that has been unmounted.


		  return null;
		}
		function isFiberMounted(fiber) {
		  return getNearestMountedFiber(fiber) === fiber;
		}
		function isMounted(component) {
		  {
		    var owner = ReactCurrentOwner.current;

		    if (owner !== null && owner.tag === ClassComponent) {
		      var ownerFiber = owner;
		      var instance = ownerFiber.stateNode;

		      if (!instance._warnedAboutRefsInRender) {
		        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
		      }

		      instance._warnedAboutRefsInRender = true;
		    }
		  }

		  var fiber = get(component);

		  if (!fiber) {
		    return false;
		  }

		  return getNearestMountedFiber(fiber) === fiber;
		}

		function assertIsMounted(fiber) {
		  if (!(getNearestMountedFiber(fiber) === fiber)) {
		    {
		      throw Error( "Unable to find node on an unmounted component." );
		    }
		  }
		}

		function findCurrentFiberUsingSlowPath(fiber) {
		  var alternate = fiber.alternate;

		  if (!alternate) {
		    // If there is no alternate, then we only need to check if it is mounted.
		    var nearestMounted = getNearestMountedFiber(fiber);

		    if (!(nearestMounted !== null)) {
		      {
		        throw Error( "Unable to find node on an unmounted component." );
		      }
		    }

		    if (nearestMounted !== fiber) {
		      return null;
		    }

		    return fiber;
		  } // If we have two possible branches, we'll walk backwards up to the root
		  // to see what path the root points to. On the way we may hit one of the
		  // special cases and we'll deal with them.


		  var a = fiber;
		  var b = alternate;

		  while (true) {
		    var parentA = a.return;

		    if (parentA === null) {
		      // We're at the root.
		      break;
		    }

		    var parentB = parentA.alternate;

		    if (parentB === null) {
		      // There is no alternate. This is an unusual case. Currently, it only
		      // happens when a Suspense component is hidden. An extra fragment fiber
		      // is inserted in between the Suspense fiber and its children. Skip
		      // over this extra fragment fiber and proceed to the next parent.
		      var nextParent = parentA.return;

		      if (nextParent !== null) {
		        a = b = nextParent;
		        continue;
		      } // If there's no parent, we're at the root.


		      break;
		    } // If both copies of the parent fiber point to the same child, we can
		    // assume that the child is current. This happens when we bailout on low
		    // priority: the bailed out fiber's child reuses the current child.


		    if (parentA.child === parentB.child) {
		      var child = parentA.child;

		      while (child) {
		        if (child === a) {
		          // We've determined that A is the current branch.
		          assertIsMounted(parentA);
		          return fiber;
		        }

		        if (child === b) {
		          // We've determined that B is the current branch.
		          assertIsMounted(parentA);
		          return alternate;
		        }

		        child = child.sibling;
		      } // We should never have an alternate for any mounting node. So the only
		      // way this could possibly happen is if this was unmounted, if at all.


		      {
		        {
		          throw Error( "Unable to find node on an unmounted component." );
		        }
		      }
		    }

		    if (a.return !== b.return) {
		      // The return pointer of A and the return pointer of B point to different
		      // fibers. We assume that return pointers never criss-cross, so A must
		      // belong to the child set of A.return, and B must belong to the child
		      // set of B.return.
		      a = parentA;
		      b = parentB;
		    } else {
		      // The return pointers point to the same fiber. We'll have to use the
		      // default, slow path: scan the child sets of each parent alternate to see
		      // which child belongs to which set.
		      //
		      // Search parent A's child set
		      var didFindChild = false;
		      var _child = parentA.child;

		      while (_child) {
		        if (_child === a) {
		          didFindChild = true;
		          a = parentA;
		          b = parentB;
		          break;
		        }

		        if (_child === b) {
		          didFindChild = true;
		          b = parentA;
		          a = parentB;
		          break;
		        }

		        _child = _child.sibling;
		      }

		      if (!didFindChild) {
		        // Search parent B's child set
		        _child = parentB.child;

		        while (_child) {
		          if (_child === a) {
		            didFindChild = true;
		            a = parentB;
		            b = parentA;
		            break;
		          }

		          if (_child === b) {
		            didFindChild = true;
		            b = parentB;
		            a = parentA;
		            break;
		          }

		          _child = _child.sibling;
		        }

		        if (!didFindChild) {
		          {
		            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
		          }
		        }
		      }
		    }

		    if (!(a.alternate === b)) {
		      {
		        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  } // If the root is not a host container, we're in a disconnected tree. I.e.
		  // unmounted.


		  if (!(a.tag === HostRoot)) {
		    {
		      throw Error( "Unable to find node on an unmounted component." );
		    }
		  }

		  if (a.stateNode.current === a) {
		    // We've determined that A is the current branch.
		    return fiber;
		  } // Otherwise B has to be current branch.


		  return alternate;
		}
		function findCurrentHostFiber(parent) {
		  var currentParent = findCurrentFiberUsingSlowPath(parent);

		  if (!currentParent) {
		    return null;
		  } // Next we'll drill down this component to find the first HostComponent/Text.


		  var node = currentParent;

		  while (true) {
		    if (node.tag === HostComponent || node.tag === HostText) {
		      return node;
		    } else if (node.child) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === currentParent) {
		      return null;
		    }

		    while (!node.sibling) {
		      if (!node.return || node.return === currentParent) {
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  } // Flow needs the return null here, but ESLint complains about it.
		  // eslint-disable-next-line no-unreachable


		  return null;
		}
		function findCurrentHostFiberWithNoPortals(parent) {
		  var currentParent = findCurrentFiberUsingSlowPath(parent);

		  if (!currentParent) {
		    return null;
		  } // Next we'll drill down this component to find the first HostComponent/Text.


		  var node = currentParent;

		  while (true) {
		    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
		      return node;
		    } else if (node.child && node.tag !== HostPortal) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === currentParent) {
		      return null;
		    }

		    while (!node.sibling) {
		      if (!node.return || node.return === currentParent) {
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  } // Flow needs the return null here, but ESLint complains about it.
		  // eslint-disable-next-line no-unreachable


		  return null;
		}
		function doesFiberContain(parentFiber, childFiber) {
		  var node = childFiber;
		  var parentFiberAlternate = parentFiber.alternate;

		  while (node !== null) {
		    if (node === parentFiber || node === parentFiberAlternate) {
		      return true;
		    }

		    node = node.return;
		  }

		  return false;
		}

		// This is a host config that's used for the `react-reconciler` package on npm.
		// It is only used by third-party renderers.
		//
		// Its API lets you pass the host config as an argument.
		// However, inside the `react-reconciler` we treat host config as a module.
		// This file is a shim between two worlds.
		//
		// It works because the `react-reconciler` bundle is wrapped in something like:
		//
		// module.exports = function ($$$config) {
		//   /* reconciler code */
		// }
		//
		// So `$$$config` looks like a global variable, but it's
		// really an argument to a top-level wrapping function.
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		// eslint-disable-line no-undef
		var getPublicInstance = $$$hostConfig.getPublicInstance;
		var getRootHostContext = $$$hostConfig.getRootHostContext;
		var getChildHostContext = $$$hostConfig.getChildHostContext;
		var prepareForCommit = $$$hostConfig.prepareForCommit;
		var resetAfterCommit = $$$hostConfig.resetAfterCommit;
		var createInstance = $$$hostConfig.createInstance;
		var appendInitialChild = $$$hostConfig.appendInitialChild;
		var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
		var prepareUpdate = $$$hostConfig.prepareUpdate;
		var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
		var createTextInstance = $$$hostConfig.createTextInstance;
		var scheduleTimeout = $$$hostConfig.scheduleTimeout;
		var cancelTimeout = $$$hostConfig.cancelTimeout;
		var noTimeout = $$$hostConfig.noTimeout;
		$$$hostConfig.now;
		var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
		var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
		var supportsMutation = $$$hostConfig.supportsMutation;
		var supportsPersistence = $$$hostConfig.supportsPersistence;
		var supportsHydration = $$$hostConfig.supportsHydration;
		$$$hostConfig.getFundamentalComponentInstance;
		$$$hostConfig.mountFundamentalComponent;
		$$$hostConfig.shouldUpdateFundamentalComponent;
		var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
		$$$hostConfig.isOpaqueHydratingObject;
		var makeOpaqueHydratingObject = $$$hostConfig.makeOpaqueHydratingObject;
		$$$hostConfig.makeClientId;
		var makeClientIdInDEV = $$$hostConfig.makeClientIdInDEV;
		var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;
		var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;
		var preparePortalMount = $$$hostConfig.preparePortalMount;
		$$$hostConfig.preparePortalMount;
		$$$hostConfig.getInstanceFromScope; // -------------------
		//      Test selectors
		//     (optional)
		// -------------------

		var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;
		var findFiberRoot = $$$hostConfig.findFiberRoot;
		var getBoundingRect = $$$hostConfig.getBoundingRect;
		var getTextContent = $$$hostConfig.getTextContent;
		var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;
		var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;
		var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;
		var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------
		//      Mutation
		//     (optional)
		// -------------------

		var appendChild = $$$hostConfig.appendChild;
		var appendChildToContainer = $$$hostConfig.appendChildToContainer;
		var commitTextUpdate = $$$hostConfig.commitTextUpdate;
		var commitMount = $$$hostConfig.commitMount;
		var commitUpdate = $$$hostConfig.commitUpdate;
		var insertBefore = $$$hostConfig.insertBefore;
		var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
		var removeChild = $$$hostConfig.removeChild;
		var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
		var resetTextContent = $$$hostConfig.resetTextContent;
		var hideInstance = $$$hostConfig.hideInstance;
		var hideTextInstance = $$$hostConfig.hideTextInstance;
		var unhideInstance = $$$hostConfig.unhideInstance;
		var unhideTextInstance = $$$hostConfig.unhideTextInstance;
		$$$hostConfig.updateFundamentalComponent;
		$$$hostConfig.unmountFundamentalComponent;
		var clearContainer = $$$hostConfig.clearContainer; // -------------------
		//     Persistence
		//     (optional)
		// -------------------

		var cloneInstance = $$$hostConfig.cloneInstance;
		var createContainerChildSet = $$$hostConfig.createContainerChildSet;
		var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
		var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
		var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
		var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
		var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
		$$$hostConfig.cloneInstance; // -------------------
		//     Hydration
		//     (optional)
		// -------------------

		var canHydrateInstance = $$$hostConfig.canHydrateInstance;
		var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
		$$$hostConfig.canHydrateSuspenseInstance;
		var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
		var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
		$$$hostConfig.registerSuspenseInstanceRetry;
		var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
		var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
		var hydrateInstance = $$$hostConfig.hydrateInstance;
		var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
		$$$hostConfig.hydrateSuspenseInstance;
		var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
		var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
		var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
		$$$hostConfig.clearSuspenseBoundary;
		$$$hostConfig.clearSuspenseBoundaryFromContainer;
		var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
		var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
		var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
		var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
		var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
		var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
		var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
		var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
		var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
		var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: _assign({}, props, {
		          value: prevLog
		        }),
		        info: _assign({}, props, {
		          value: prevInfo
		        }),
		        warn: _assign({}, props, {
		          value: prevWarn
		        }),
		        error: _assign({}, props, {
		          value: prevError
		        }),
		        group: _assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: _assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: _assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if (!fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}

		function describeClassComponentFrame(ctor, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(ctor, true);
		  }
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_BLOCK_TYPE:
		        return describeFunctionComponentFrame(type._render);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(Object.prototype.hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		var valueStack = [];
		var fiberStack;

		{
		  fiberStack = [];
		}

		var index = -1;

		function createCursor(defaultValue) {
		  return {
		    current: defaultValue
		  };
		}

		function pop(cursor, fiber) {
		  if (index < 0) {
		    {
		      error('Unexpected pop.');
		    }

		    return;
		  }

		  {
		    if (fiber !== fiberStack[index]) {
		      error('Unexpected Fiber popped.');
		    }
		  }

		  cursor.current = valueStack[index];
		  valueStack[index] = null;

		  {
		    fiberStack[index] = null;
		  }

		  index--;
		}

		function push(cursor, value, fiber) {
		  index++;
		  valueStack[index] = cursor.current;

		  {
		    fiberStack[index] = fiber;
		  }

		  cursor.current = value;
		}

		var warnedAboutMissingGetChildContext;

		{
		  warnedAboutMissingGetChildContext = {};
		}

		var emptyContextObject = {};

		{
		  Object.freeze(emptyContextObject);
		} // A cursor to the current merged context object on the stack.


		var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

		var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
		// We use this to get access to the parent context after we have already
		// pushed the next context provider, and now need to merge their contexts.

		var previousContext = emptyContextObject;

		function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
		  {
		    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
		      // If the fiber is a context provider itself, when we read its context
		      // we may have already pushed its own child context on the stack. A context
		      // provider should not "see" its own child context. Therefore we read the
		      // previous (parent) context instead for a context provider.
		      return previousContext;
		    }

		    return contextStackCursor.current;
		  }
		}

		function cacheContext(workInProgress, unmaskedContext, maskedContext) {
		  {
		    var instance = workInProgress.stateNode;
		    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
		    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
		  }
		}

		function getMaskedContext(workInProgress, unmaskedContext) {
		  {
		    var type = workInProgress.type;
		    var contextTypes = type.contextTypes;

		    if (!contextTypes) {
		      return emptyContextObject;
		    } // Avoid recreating masked context unless unmasked context has changed.
		    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
		    // This may trigger infinite loops if componentWillReceiveProps calls setState.


		    var instance = workInProgress.stateNode;

		    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
		      return instance.__reactInternalMemoizedMaskedChildContext;
		    }

		    var context = {};

		    for (var key in contextTypes) {
		      context[key] = unmaskedContext[key];
		    }

		    {
		      var name = getComponentName(type) || 'Unknown';
		      checkPropTypes(contextTypes, context, 'context', name);
		    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
		    // Context is created before the class component is instantiated so check for instance.


		    if (instance) {
		      cacheContext(workInProgress, unmaskedContext, context);
		    }

		    return context;
		  }
		}

		function hasContextChanged() {
		  {
		    return didPerformWorkStackCursor.current;
		  }
		}

		function isContextProvider(type) {
		  {
		    var childContextTypes = type.childContextTypes;
		    return childContextTypes !== null && childContextTypes !== undefined;
		  }
		}

		function popContext(fiber) {
		  {
		    pop(didPerformWorkStackCursor, fiber);
		    pop(contextStackCursor, fiber);
		  }
		}

		function popTopLevelContextObject(fiber) {
		  {
		    pop(didPerformWorkStackCursor, fiber);
		    pop(contextStackCursor, fiber);
		  }
		}

		function pushTopLevelContextObject(fiber, context, didChange) {
		  {
		    if (!(contextStackCursor.current === emptyContextObject)) {
		      {
		        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }

		    push(contextStackCursor, context, fiber);
		    push(didPerformWorkStackCursor, didChange, fiber);
		  }
		}

		function processChildContext(fiber, type, parentContext) {
		  {
		    var instance = fiber.stateNode;
		    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
		    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

		    if (typeof instance.getChildContext !== 'function') {
		      {
		        var componentName = getComponentName(type) || 'Unknown';

		        if (!warnedAboutMissingGetChildContext[componentName]) {
		          warnedAboutMissingGetChildContext[componentName] = true;

		          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
		        }
		      }

		      return parentContext;
		    }

		    var childContext = instance.getChildContext();

		    for (var contextKey in childContext) {
		      if (!(contextKey in childContextTypes)) {
		        {
		          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
		        }
		      }
		    }

		    {
		      var name = getComponentName(type) || 'Unknown';
		      checkPropTypes(childContextTypes, childContext, 'child context', name);
		    }

		    return _assign({}, parentContext, childContext);
		  }
		}

		function pushContextProvider(workInProgress) {
		  {
		    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
		    // If the instance does not exist yet, we will push null at first,
		    // and replace it on the stack later when invalidating the context.

		    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
		    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

		    previousContext = contextStackCursor.current;
		    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
		    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
		    return true;
		  }
		}

		function invalidateContextProvider(workInProgress, type, didChange) {
		  {
		    var instance = workInProgress.stateNode;

		    if (!instance) {
		      {
		        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }

		    if (didChange) {
		      // Merge parent and own context.
		      // Skip this if we're not updating due to sCU.
		      // This avoids unnecessarily recomputing memoized values.
		      var mergedContext = processChildContext(workInProgress, type, previousContext);
		      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
		      // It is important to unwind the context in the reverse order.

		      pop(didPerformWorkStackCursor, workInProgress);
		      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

		      push(contextStackCursor, mergedContext, workInProgress);
		      push(didPerformWorkStackCursor, didChange, workInProgress);
		    } else {
		      pop(didPerformWorkStackCursor, workInProgress);
		      push(didPerformWorkStackCursor, didChange, workInProgress);
		    }
		  }
		}

		function findCurrentUnmaskedContext(fiber) {
		  {
		    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
		    // makes sense elsewhere
		    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
		      {
		        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }

		    var node = fiber;

		    do {
		      switch (node.tag) {
		        case HostRoot:
		          return node.stateNode.context;

		        case ClassComponent:
		          {
		            var Component = node.type;

		            if (isContextProvider(Component)) {
		              return node.stateNode.__reactInternalMemoizedMergedChildContext;
		            }

		            break;
		          }
		      }

		      node = node.return;
		    } while (node !== null);

		    {
		      {
		        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }
		}

		var LegacyRoot = 0;
		var BlockingRoot = 1;
		var ConcurrentRoot = 2;

		var rendererID = null;
		var injectedHook = null;
		var hasLoggedError = false;
		var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
		function injectInternals(internals) {
		  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
		    // No DevTools
		    return false;
		  }

		  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

		  if (hook.isDisabled) {
		    // This isn't a real property on the hook, but it can be set to opt out
		    // of DevTools integration and associated warnings and logs.
		    // https://github.com/facebook/react/issues/3877
		    return true;
		  }

		  if (!hook.supportsFiber) {
		    {
		      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
		    } // DevTools exists, even though it doesn't support Fiber.


		    return true;
		  }

		  try {
		    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

		    injectedHook = hook;
		  } catch (err) {
		    // Catch all errors because it is unsafe to throw during initialization.
		    {
		      error('React instrumentation encountered an error: %s.', err);
		    }
		  } // DevTools exists


		  return true;
		}
		function onScheduleRoot(root, children) {
		  {
		    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
		      try {
		        injectedHook.onScheduleFiberRoot(rendererID, root, children);
		      } catch (err) {
		        if ( !hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function onCommitRoot(root, priorityLevel) {
		  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
		    try {
		      var didError = (root.current.flags & DidCapture) === DidCapture;

		      if (enableProfilerTimer) {
		        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
		      }
		    } catch (err) {
		      {
		        if (!hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}
		function onCommitUnmount(fiber) {
		  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
		    try {
		      injectedHook.onCommitFiberUnmount(rendererID, fiber);
		    } catch (err) {
		      {
		        if (!hasLoggedError) {
		          hasLoggedError = true;

		          error('React instrumentation encountered an error: %s', err);
		        }
		      }
		    }
		  }
		}

		var Scheduler_now = Scheduler.unstable_now;

		{
		  // Provide explicit error message when production+profiling bundle of e.g.
		  // react-dom is used with production (non-profiling) bundle of
		  // scheduler/tracing
		  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
		    {
		      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
		    }
		  }
		}
		// ascending numbers so we can compare them like numbers. They start at 90 to
		// avoid clashing with Scheduler's priorities.

		var ImmediatePriority = 99;
		var UserBlockingPriority = 98;
		var NormalPriority = 97;
		var LowPriority = 96;
		var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

		var NoPriority = 90;
		Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

		var SyncLanePriority = 15;
		var SyncBatchedLanePriority = 14;
		var InputDiscreteHydrationLanePriority = 13;
		var InputDiscreteLanePriority = 12;
		var InputContinuousHydrationLanePriority = 11;
		var InputContinuousLanePriority = 10;
		var DefaultHydrationLanePriority = 9;
		var DefaultLanePriority = 8;
		var TransitionHydrationPriority = 7;
		var TransitionPriority = 6;
		var RetryLanePriority = 5;
		var SelectiveHydrationLanePriority = 4;
		var IdleHydrationLanePriority = 3;
		var IdleLanePriority = 2;
		var OffscreenLanePriority = 1;
		var NoLanePriority = 0;
		var TotalLanes = 31;
		var NoLanes =
		/*                        */
		0;
		var NoLane =
		/*                          */
		0;
		var SyncLane =
		/*                        */
		1;
		var SyncBatchedLane =
		/*                 */
		2;
		var InputDiscreteHydrationLane =
		/*      */
		4;
		var InputDiscreteLanes =
		/*                    */
		24;
		var InputContinuousHydrationLane =
		/*           */
		32;
		var InputContinuousLanes =
		/*                  */
		192;
		var DefaultHydrationLane =
		/*            */
		256;
		var DefaultLanes =
		/*                   */
		3584;
		var TransitionHydrationLane =
		/*                */
		4096;
		var TransitionLanes =
		/*                       */
		4186112;
		var RetryLanes =
		/*                            */
		62914560;
		var SomeRetryLane =
		/*                  */
		33554432;
		var SelectiveHydrationLane =
		/*          */
		67108864;
		var NonIdleLanes =
		/*                                 */
		134217727;
		var IdleHydrationLane =
		/*               */
		134217728;
		var IdleLanes =
		/*                             */
		805306368;
		var OffscreenLane =
		/*                   */
		1073741824;
		var NoTimestamp = -1;
		var currentUpdateLanePriority = NoLanePriority;
		function getCurrentUpdateLanePriority() {
		  return currentUpdateLanePriority;
		}
		function setCurrentUpdateLanePriority(newLanePriority) {
		  currentUpdateLanePriority = newLanePriority;
		} // "Registers" used to "return" multiple values
		// Used by getHighestPriorityLanes and getNextLanes:

		var return_highestLanePriority = DefaultLanePriority;

		function getHighestPriorityLanes(lanes) {
		  if ((SyncLane & lanes) !== NoLanes) {
		    return_highestLanePriority = SyncLanePriority;
		    return SyncLane;
		  }

		  if ((SyncBatchedLane & lanes) !== NoLanes) {
		    return_highestLanePriority = SyncBatchedLanePriority;
		    return SyncBatchedLane;
		  }

		  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
		    return_highestLanePriority = InputDiscreteHydrationLanePriority;
		    return InputDiscreteHydrationLane;
		  }

		  var inputDiscreteLanes = InputDiscreteLanes & lanes;

		  if (inputDiscreteLanes !== NoLanes) {
		    return_highestLanePriority = InputDiscreteLanePriority;
		    return inputDiscreteLanes;
		  }

		  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
		    return_highestLanePriority = InputContinuousHydrationLanePriority;
		    return InputContinuousHydrationLane;
		  }

		  var inputContinuousLanes = InputContinuousLanes & lanes;

		  if (inputContinuousLanes !== NoLanes) {
		    return_highestLanePriority = InputContinuousLanePriority;
		    return inputContinuousLanes;
		  }

		  if ((lanes & DefaultHydrationLane) !== NoLanes) {
		    return_highestLanePriority = DefaultHydrationLanePriority;
		    return DefaultHydrationLane;
		  }

		  var defaultLanes = DefaultLanes & lanes;

		  if (defaultLanes !== NoLanes) {
		    return_highestLanePriority = DefaultLanePriority;
		    return defaultLanes;
		  }

		  if ((lanes & TransitionHydrationLane) !== NoLanes) {
		    return_highestLanePriority = TransitionHydrationPriority;
		    return TransitionHydrationLane;
		  }

		  var transitionLanes = TransitionLanes & lanes;

		  if (transitionLanes !== NoLanes) {
		    return_highestLanePriority = TransitionPriority;
		    return transitionLanes;
		  }

		  var retryLanes = RetryLanes & lanes;

		  if (retryLanes !== NoLanes) {
		    return_highestLanePriority = RetryLanePriority;
		    return retryLanes;
		  }

		  if (lanes & SelectiveHydrationLane) {
		    return_highestLanePriority = SelectiveHydrationLanePriority;
		    return SelectiveHydrationLane;
		  }

		  if ((lanes & IdleHydrationLane) !== NoLanes) {
		    return_highestLanePriority = IdleHydrationLanePriority;
		    return IdleHydrationLane;
		  }

		  var idleLanes = IdleLanes & lanes;

		  if (idleLanes !== NoLanes) {
		    return_highestLanePriority = IdleLanePriority;
		    return idleLanes;
		  }

		  if ((OffscreenLane & lanes) !== NoLanes) {
		    return_highestLanePriority = OffscreenLanePriority;
		    return OffscreenLane;
		  }

		  {
		    error('Should have found matching lanes. This is a bug in React.');
		  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


		  return_highestLanePriority = DefaultLanePriority;
		  return lanes;
		}

		function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
		  switch (schedulerPriorityLevel) {
		    case ImmediatePriority:
		      return SyncLanePriority;

		    case UserBlockingPriority:
		      return InputContinuousLanePriority;

		    case NormalPriority:
		    case LowPriority:
		      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
		      return DefaultLanePriority;

		    case IdlePriority:
		      return IdleLanePriority;

		    default:
		      return NoLanePriority;
		  }
		}
		function lanePriorityToSchedulerPriority(lanePriority) {
		  switch (lanePriority) {
		    case SyncLanePriority:
		    case SyncBatchedLanePriority:
		      return ImmediatePriority;

		    case InputDiscreteHydrationLanePriority:
		    case InputDiscreteLanePriority:
		    case InputContinuousHydrationLanePriority:
		    case InputContinuousLanePriority:
		      return UserBlockingPriority;

		    case DefaultHydrationLanePriority:
		    case DefaultLanePriority:
		    case TransitionHydrationPriority:
		    case TransitionPriority:
		    case SelectiveHydrationLanePriority:
		    case RetryLanePriority:
		      return NormalPriority;

		    case IdleHydrationLanePriority:
		    case IdleLanePriority:
		    case OffscreenLanePriority:
		      return IdlePriority;

		    case NoLanePriority:
		      return NoPriority;

		    default:
		      {
		        {
		          throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
		        }
		      }

		  }
		}
		function getNextLanes(root, wipLanes) {
		  // Early bailout if there's no pending work left.
		  var pendingLanes = root.pendingLanes;

		  if (pendingLanes === NoLanes) {
		    return_highestLanePriority = NoLanePriority;
		    return NoLanes;
		  }

		  var nextLanes = NoLanes;
		  var nextLanePriority = NoLanePriority;
		  var expiredLanes = root.expiredLanes;
		  var suspendedLanes = root.suspendedLanes;
		  var pingedLanes = root.pingedLanes; // Check if any work has expired.

		  if (expiredLanes !== NoLanes) {
		    nextLanes = expiredLanes;
		    nextLanePriority = return_highestLanePriority = SyncLanePriority;
		  } else {
		    // Do not work on any idle work until all the non-idle work has finished,
		    // even if the work is suspended.
		    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

		    if (nonIdlePendingLanes !== NoLanes) {
		      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

		      if (nonIdleUnblockedLanes !== NoLanes) {
		        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
		        nextLanePriority = return_highestLanePriority;
		      } else {
		        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

		        if (nonIdlePingedLanes !== NoLanes) {
		          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
		          nextLanePriority = return_highestLanePriority;
		        }
		      }
		    } else {
		      // The only remaining work is Idle.
		      var unblockedLanes = pendingLanes & ~suspendedLanes;

		      if (unblockedLanes !== NoLanes) {
		        nextLanes = getHighestPriorityLanes(unblockedLanes);
		        nextLanePriority = return_highestLanePriority;
		      } else {
		        if (pingedLanes !== NoLanes) {
		          nextLanes = getHighestPriorityLanes(pingedLanes);
		          nextLanePriority = return_highestLanePriority;
		        }
		      }
		    }
		  }

		  if (nextLanes === NoLanes) {
		    // This should only be reachable if we're suspended
		    // TODO: Consider warning in this path if a fallback timer is not scheduled.
		    return NoLanes;
		  } // If there are higher priority lanes, we'll include them even if they
		  // are suspended.


		  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
		  // it and we'll lose our progress. We should only do this if the new lanes are
		  // higher priority.

		  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
		  // bother waiting until the root is complete.
		  (wipLanes & suspendedLanes) === NoLanes) {
		    getHighestPriorityLanes(wipLanes);
		    var wipLanePriority = return_highestLanePriority;

		    if (nextLanePriority <= wipLanePriority) {
		      return wipLanes;
		    } else {
		      return_highestLanePriority = nextLanePriority;
		    }
		  } // Check for entangled lanes and add them to the batch.
		  //
		  // A lane is said to be entangled with another when it's not allowed to render
		  // in a batch that does not also include the other lane. Typically we do this
		  // when multiple updates have the same source, and we only want to respond to
		  // the most recent event from that source.
		  //
		  // Note that we apply entanglements *after* checking for partial work above.
		  // This means that if a lane is entangled during an interleaved event while
		  // it's already rendering, we won't interrupt it. This is intentional, since
		  // entanglement is usually "best effort": we'll try our best to render the
		  // lanes in the same batch, but it's not worth throwing out partially
		  // completed work in order to do it.
		  //
		  // For those exceptions where entanglement is semantically important, like
		  // useMutableSource, we should ensure that there is no partial work at the
		  // time we apply the entanglement.


		  var entangledLanes = root.entangledLanes;

		  if (entangledLanes !== NoLanes) {
		    var entanglements = root.entanglements;
		    var lanes = nextLanes & entangledLanes;

		    while (lanes > 0) {
		      var index = pickArbitraryLaneIndex(lanes);
		      var lane = 1 << index;
		      nextLanes |= entanglements[index];
		      lanes &= ~lane;
		    }
		  }

		  return nextLanes;
		}
		function getMostRecentEventTime(root, lanes) {
		  var eventTimes = root.eventTimes;
		  var mostRecentEventTime = NoTimestamp;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    var eventTime = eventTimes[index];

		    if (eventTime > mostRecentEventTime) {
		      mostRecentEventTime = eventTime;
		    }

		    lanes &= ~lane;
		  }

		  return mostRecentEventTime;
		}

		function computeExpirationTime(lane, currentTime) {
		  // TODO: Expiration heuristic is constant per lane, so could use a map.
		  getHighestPriorityLanes(lane);
		  var priority = return_highestLanePriority;

		  if (priority >= InputContinuousLanePriority) {
		    // User interactions should expire slightly more quickly.
		    //
		    // NOTE: This is set to the corresponding constant as in Scheduler.js. When
		    // we made it larger, a product metric in www regressed, suggesting there's
		    // a user interaction that's being starved by a series of synchronous
		    // updates. If that theory is correct, the proper solution is to fix the
		    // starvation. However, this scenario supports the idea that expiration
		    // times are an important safeguard when starvation does happen.
		    //
		    // Also note that, in the case of user input specifically, this will soon no
		    // longer be an issue because we plan to make user input synchronous by
		    // default (until you enter `startTransition`, of course.)
		    //
		    // If weren't planning to make these updates synchronous soon anyway, I
		    // would probably make this number a configurable parameter.
		    return currentTime + 250;
		  } else if (priority >= TransitionPriority) {
		    return currentTime + 5000;
		  } else {
		    // Anything idle priority or lower should never expire.
		    return NoTimestamp;
		  }
		}

		function markStarvedLanesAsExpired(root, currentTime) {
		  // TODO: This gets called every time we yield. We can optimize by storing
		  // the earliest expiration time on the root. Then use that to quickly bail out
		  // of this function.
		  var pendingLanes = root.pendingLanes;
		  var suspendedLanes = root.suspendedLanes;
		  var pingedLanes = root.pingedLanes;
		  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
		  // expiration time. If so, we'll assume the update is being starved and mark
		  // it as expired to force it to finish.

		  var lanes = pendingLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    var expirationTime = expirationTimes[index];

		    if (expirationTime === NoTimestamp) {
		      // Found a pending lane with no expiration time. If it's not suspended, or
		      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
		      // using the current time.
		      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
		        // Assumes timestamps are monotonically increasing.
		        expirationTimes[index] = computeExpirationTime(lane, currentTime);
		      }
		    } else if (expirationTime <= currentTime) {
		      // This lane expired
		      root.expiredLanes |= lane;
		    }

		    lanes &= ~lane;
		  }
		} // This returns the highest priority pending lanes regardless of whether they
		// are suspended.

		function getHighestPriorityPendingLanes(root) {
		  return getHighestPriorityLanes(root.pendingLanes);
		}
		function getLanesToRetrySynchronouslyOnError(root) {
		  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

		  if (everythingButOffscreen !== NoLanes) {
		    return everythingButOffscreen;
		  }

		  if (everythingButOffscreen & OffscreenLane) {
		    return OffscreenLane;
		  }

		  return NoLanes;
		}
		function returnNextLanesPriority() {
		  return return_highestLanePriority;
		}
		function includesNonIdleWork(lanes) {
		  return (lanes & NonIdleLanes) !== NoLanes;
		}
		function includesOnlyRetries(lanes) {
		  return (lanes & RetryLanes) === lanes;
		}
		function includesOnlyTransitions(lanes) {
		  return (lanes & TransitionLanes) === lanes;
		} // To ensure consistency across multiple updates in the same event, this should
		// be a pure function, so that it always returns the same lane for given inputs.

		function findUpdateLane(lanePriority, wipLanes) {
		  switch (lanePriority) {
		    case NoLanePriority:
		      break;

		    case SyncLanePriority:
		      return SyncLane;

		    case SyncBatchedLanePriority:
		      return SyncBatchedLane;

		    case InputDiscreteLanePriority:
		      {
		        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

		        if (_lane === NoLane) {
		          // Shift to the next priority level
		          return findUpdateLane(InputContinuousLanePriority, wipLanes);
		        }

		        return _lane;
		      }

		    case InputContinuousLanePriority:
		      {
		        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

		        if (_lane2 === NoLane) {
		          // Shift to the next priority level
		          return findUpdateLane(DefaultLanePriority, wipLanes);
		        }

		        return _lane2;
		      }

		    case DefaultLanePriority:
		      {
		        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

		        if (_lane3 === NoLane) {
		          // If all the default lanes are already being worked on, look for a
		          // lane in the transition range.
		          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

		          if (_lane3 === NoLane) {
		            // All the transition lanes are taken, too. This should be very
		            // rare, but as a last resort, pick a default lane. This will have
		            // the effect of interrupting the current work-in-progress render.
		            _lane3 = pickArbitraryLane(DefaultLanes);
		          }
		        }

		        return _lane3;
		      }

		    case TransitionPriority: // Should be handled by findTransitionLane instead

		    case RetryLanePriority:
		      // Should be handled by findRetryLane instead
		      break;

		    case IdleLanePriority:
		      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

		      if (lane === NoLane) {
		        lane = pickArbitraryLane(IdleLanes);
		      }

		      return lane;
		  }

		  {
		    {
		      throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
		    }
		  }
		} // To ensure consistency across multiple updates in the same event, this should
		// be pure function, so that it always returns the same lane for given inputs.

		function findTransitionLane(wipLanes, pendingLanes) {
		  // First look for lanes that are completely unclaimed, i.e. have no
		  // pending work.
		  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

		  if (lane === NoLane) {
		    // If all lanes have pending work, look for a lane that isn't currently
		    // being worked on.
		    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

		    if (lane === NoLane) {
		      // If everything is being worked on, pick any lane. This has the
		      // effect of interrupting the current work-in-progress.
		      lane = pickArbitraryLane(TransitionLanes);
		    }
		  }

		  return lane;
		} // To ensure consistency across multiple updates in the same event, this should
		// be pure function, so that it always returns the same lane for given inputs.

		function findRetryLane(wipLanes) {
		  // This is a fork of `findUpdateLane` designed specifically for Suspense
		  // "retries" — a special update that attempts to flip a Suspense boundary
		  // from its placeholder state to its primary/resolved state.
		  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

		  if (lane === NoLane) {
		    lane = pickArbitraryLane(RetryLanes);
		  }

		  return lane;
		}

		function getHighestPriorityLane(lanes) {
		  return lanes & -lanes;
		}

		function getLowestPriorityLane(lanes) {
		  // This finds the most significant non-zero bit.
		  var index = 31 - clz32(lanes);
		  return index < 0 ? NoLanes : 1 << index;
		}

		function getEqualOrHigherPriorityLanes(lanes) {
		  return (getLowestPriorityLane(lanes) << 1) - 1;
		}

		function pickArbitraryLane(lanes) {
		  // This wrapper function gets inlined. Only exists so to communicate that it
		  // doesn't matter which bit is selected; you can pick any bit without
		  // affecting the algorithms where its used. Here I'm using
		  // getHighestPriorityLane because it requires the fewest operations.
		  return getHighestPriorityLane(lanes);
		}

		function pickArbitraryLaneIndex(lanes) {
		  return 31 - clz32(lanes);
		}

		function laneToIndex(lane) {
		  return pickArbitraryLaneIndex(lane);
		}

		function includesSomeLane(a, b) {
		  return (a & b) !== NoLanes;
		}
		function isSubsetOfLanes(set, subset) {
		  return (set & subset) === subset;
		}
		function mergeLanes(a, b) {
		  return a | b;
		}
		function removeLanes(set, subset) {
		  return set & ~subset;
		} // Seems redundant, but it changes the type from a single lane (used for
		// updates) to a group of lanes (used for flushing work).

		function laneToLanes(lane) {
		  return lane;
		}
		function higherPriorityLane(a, b) {
		  // This works because the bit ranges decrease in priority as you go left.
		  return a !== NoLane && a < b ? a : b;
		}
		function createLaneMap(initial) {
		  // Intentionally pushing one by one.
		  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
		  var laneMap = [];

		  for (var i = 0; i < TotalLanes; i++) {
		    laneMap.push(initial);
		  }

		  return laneMap;
		}
		function markRootUpdated(root, updateLane, eventTime) {
		  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
		  // it's not practical to try every single possible combination. We need a
		  // heuristic to decide which lanes to attempt to render, and in which batches.
		  // For now, we use the same heuristic as in the old ExpirationTimes model:
		  // retry any lane at equal or lower priority, but don't try updates at higher
		  // priority without also including the lower priority updates. This works well
		  // when considering updates across different priority levels, but isn't
		  // sufficient for updates within the same priority, since we want to treat
		  // those updates as parallel.
		  // Unsuspend any update at equal or lower priority.

		  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

		  root.suspendedLanes &= higherPriorityLanes;
		  root.pingedLanes &= higherPriorityLanes;
		  var eventTimes = root.eventTimes;
		  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
		  // recent event, and we assume time is monotonically increasing.

		  eventTimes[index] = eventTime;
		}
		function markRootSuspended(root, suspendedLanes) {
		  root.suspendedLanes |= suspendedLanes;
		  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

		  var expirationTimes = root.expirationTimes;
		  var lanes = suspendedLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    expirationTimes[index] = NoTimestamp;
		    lanes &= ~lane;
		  }
		}
		function markRootPinged(root, pingedLanes, eventTime) {
		  root.pingedLanes |= root.suspendedLanes & pingedLanes;
		}
		function markRootExpired(root, expiredLanes) {
		  root.expiredLanes |= expiredLanes & root.pendingLanes;
		}
		function markDiscreteUpdatesExpired(root) {
		  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
		}
		function hasDiscreteLanes(lanes) {
		  return (lanes & InputDiscreteLanes) !== NoLanes;
		}
		function markRootMutableRead(root, updateLane) {
		  root.mutableReadLanes |= updateLane & root.pendingLanes;
		}
		function markRootFinished(root, remainingLanes) {
		  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
		  root.pendingLanes = remainingLanes; // Let's try everything again

		  root.suspendedLanes = 0;
		  root.pingedLanes = 0;
		  root.expiredLanes &= remainingLanes;
		  root.mutableReadLanes &= remainingLanes;
		  root.entangledLanes &= remainingLanes;
		  var entanglements = root.entanglements;
		  var eventTimes = root.eventTimes;
		  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

		  var lanes = noLongerPendingLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    entanglements[index] = NoLanes;
		    eventTimes[index] = NoTimestamp;
		    expirationTimes[index] = NoTimestamp;
		    lanes &= ~lane;
		  }
		}
		function markRootEntangled(root, entangledLanes) {
		  root.entangledLanes |= entangledLanes;
		  var entanglements = root.entanglements;
		  var lanes = entangledLanes;

		  while (lanes > 0) {
		    var index = pickArbitraryLaneIndex(lanes);
		    var lane = 1 << index;
		    entanglements[index] |= entangledLanes;
		    lanes &= ~lane;
		  }
		}
		var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
		// Based on:
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

		var log = Math.log;
		var LN2 = Math.LN2;

		function clz32Fallback(lanes) {
		  if (lanes === 0) {
		    return 32;
		  }

		  return 31 - (log(lanes) / LN2 | 0) | 0;
		}

		var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
		    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
		    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
		    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
		    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
		    Scheduler_now$1 = Scheduler.unstable_now,
		    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
		    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
		    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
		    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
		    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
		    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

		{
		  // Provide explicit error message when production+profiling bundle of e.g.
		  // react-dom is used with production (non-profiling) bundle of
		  // scheduler/tracing
		  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
		    {
		      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
		    }
		  }
		}

		var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
		// ascending numbers so we can compare them like numbers. They start at 90 to
		// avoid clashing with Scheduler's priorities.

		var ImmediatePriority$1 = 99;
		var UserBlockingPriority$1 = 98;
		var NormalPriority$1 = 97;
		var LowPriority$1 = 96;
		var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

		var NoPriority$1 = 90;
		var shouldYield = Scheduler_shouldYield;
		var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
		Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
		var syncQueue = null;
		var immediateQueueCallbackNode = null;
		var isFlushingSyncQueue = false;
		var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
		// This will be the case for modern browsers that support `performance.now`. In
		// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
		// timestamp. In that case, subtract the module initialization time to simulate
		// the behavior of performance.now and keep our times small enough to fit
		// within 32 bits.
		// TODO: Consider lifting this into Scheduler.

		var now$1 = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
		  return Scheduler_now$1() - initialTimeMs$1;
		};
		function getCurrentPriorityLevel() {
		  switch (Scheduler_getCurrentPriorityLevel()) {
		    case Scheduler_ImmediatePriority:
		      return ImmediatePriority$1;

		    case Scheduler_UserBlockingPriority:
		      return UserBlockingPriority$1;

		    case Scheduler_NormalPriority:
		      return NormalPriority$1;

		    case Scheduler_LowPriority:
		      return LowPriority$1;

		    case Scheduler_IdlePriority:
		      return IdlePriority$1;

		    default:
		      {
		        {
		          throw Error( "Unknown priority level." );
		        }
		      }

		  }
		}

		function reactPriorityToSchedulerPriority(reactPriorityLevel) {
		  switch (reactPriorityLevel) {
		    case ImmediatePriority$1:
		      return Scheduler_ImmediatePriority;

		    case UserBlockingPriority$1:
		      return Scheduler_UserBlockingPriority;

		    case NormalPriority$1:
		      return Scheduler_NormalPriority;

		    case LowPriority$1:
		      return Scheduler_LowPriority;

		    case IdlePriority$1:
		      return Scheduler_IdlePriority;

		    default:
		      {
		        {
		          throw Error( "Unknown priority level." );
		        }
		      }

		  }
		}

		function runWithPriority(reactPriorityLevel, fn) {
		  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
		  return Scheduler_runWithPriority(priorityLevel, fn);
		}
		function scheduleCallback(reactPriorityLevel, callback, options) {
		  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
		  return Scheduler_scheduleCallback(priorityLevel, callback, options);
		}
		function scheduleSyncCallback(callback) {
		  // Push this callback into an internal queue. We'll flush these either in
		  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
		  if (syncQueue === null) {
		    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

		    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
		  } else {
		    // Push onto existing queue. Don't need to schedule a callback because
		    // we already scheduled one when we created the queue.
		    syncQueue.push(callback);
		  }

		  return fakeCallbackNode;
		}
		function cancelCallback(callbackNode) {
		  if (callbackNode !== fakeCallbackNode) {
		    Scheduler_cancelCallback(callbackNode);
		  }
		}
		function flushSyncCallbackQueue() {
		  if (immediateQueueCallbackNode !== null) {
		    var node = immediateQueueCallbackNode;
		    immediateQueueCallbackNode = null;
		    Scheduler_cancelCallback(node);
		  }

		  flushSyncCallbackQueueImpl();
		}

		function flushSyncCallbackQueueImpl() {
		  if (!isFlushingSyncQueue && syncQueue !== null) {
		    // Prevent re-entrancy.
		    isFlushingSyncQueue = true;
		    var i = 0;

		    {
		      try {
		        var _isSync2 = true;
		        var _queue = syncQueue;
		        runWithPriority(ImmediatePriority$1, function () {
		          for (; i < _queue.length; i++) {
		            var callback = _queue[i];

		            do {
		              callback = callback(_isSync2);
		            } while (callback !== null);
		          }
		        });
		        syncQueue = null;
		      } catch (error) {
		        // If something throws, leave the remaining callbacks on the queue.
		        if (syncQueue !== null) {
		          syncQueue = syncQueue.slice(i + 1);
		        } // Resume flushing in the next tick


		        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
		        throw error;
		      } finally {
		        isFlushingSyncQueue = false;
		      }
		    }
		  }
		}

		var NoMode = 0;
		var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
		// tag instead

		var BlockingMode = 2;
		var ConcurrentMode = 4;
		var ProfileMode = 8;
		var DebugTracingMode = 16;

		var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
		var NoTransition = 0;
		function requestCurrentTransition() {
		  return ReactCurrentBatchConfig.transition;
		}

		/**
		 * inlined Object.is polyfill to avoid requiring consumers ship their own
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		 */
		function is(x, y) {
		  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
		  ;
		}

		var objectIs = typeof Object.is === 'function' ? Object.is : is;

		var hasOwnProperty = Object.prototype.hasOwnProperty;
		/**
		 * Performs equality by iterating through keys on an object and returning false
		 * when any key has values which are not strictly equal between the arguments.
		 * Returns true when the values of all keys are strictly equal.
		 */

		function shallowEqual(objA, objB) {
		  if (objectIs(objA, objB)) {
		    return true;
		  }

		  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
		    return false;
		  }

		  var keysA = Object.keys(objA);
		  var keysB = Object.keys(objB);

		  if (keysA.length !== keysB.length) {
		    return false;
		  } // Test for A's keys different from B.


		  for (var i = 0; i < keysA.length; i++) {
		    if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
		      return false;
		    }
		  }

		  return true;
		}

		function describeFiber(fiber) {
		  fiber._debugOwner ? fiber._debugOwner.type : null ;
		  fiber._debugSource ;

		  switch (fiber.tag) {
		    case HostComponent:
		      return describeBuiltInComponentFrame(fiber.type);

		    case LazyComponent:
		      return describeBuiltInComponentFrame('Lazy');

		    case SuspenseComponent:
		      return describeBuiltInComponentFrame('Suspense');

		    case SuspenseListComponent:
		      return describeBuiltInComponentFrame('SuspenseList');

		    case FunctionComponent:
		    case IndeterminateComponent:
		    case SimpleMemoComponent:
		      return describeFunctionComponentFrame(fiber.type);

		    case ForwardRef:
		      return describeFunctionComponentFrame(fiber.type.render);

		    case Block:
		      return describeFunctionComponentFrame(fiber.type._render);

		    case ClassComponent:
		      return describeClassComponentFrame(fiber.type);

		    default:
		      return '';
		  }
		}

		function getStackByFiberInDevAndProd(workInProgress) {
		  try {
		    var info = '';
		    var node = workInProgress;

		    do {
		      info += describeFiber(node);
		      node = node.return;
		    } while (node);

		    return info;
		  } catch (x) {
		    return '\nError generating stack: ' + x.message + '\n' + x.stack;
		  }
		}

		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
		var current = null;
		var isRendering = false;
		function getCurrentFiberOwnerNameInDevOrNull() {
		  {
		    if (current === null) {
		      return null;
		    }

		    var owner = current._debugOwner;

		    if (owner !== null && typeof owner !== 'undefined') {
		      return getComponentName(owner.type);
		    }
		  }

		  return null;
		}

		function getCurrentFiberStackInDev() {
		  {
		    if (current === null) {
		      return '';
		    } // Safe because if current fiber exists, we are reconciling,
		    // and it is guaranteed to be the work-in-progress version.


		    return getStackByFiberInDevAndProd(current);
		  }
		}

		function resetCurrentFiber() {
		  {
		    ReactDebugCurrentFrame$1.getCurrentStack = null;
		    current = null;
		    isRendering = false;
		  }
		}
		function setCurrentFiber(fiber) {
		  {
		    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
		    current = fiber;
		    isRendering = false;
		  }
		}
		function setIsRendering(rendering) {
		  {
		    isRendering = rendering;
		  }
		}
		function getIsRendering() {
		  {
		    return isRendering;
		  }
		}

		var ReactStrictModeWarnings = {
		  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
		  flushPendingUnsafeLifecycleWarnings: function () {},
		  recordLegacyContextWarning: function (fiber, instance) {},
		  flushLegacyContextWarning: function () {},
		  discardPendingWarnings: function () {}
		};

		{
		  var findStrictRoot = function (fiber) {
		    var maybeStrictRoot = null;
		    var node = fiber;

		    while (node !== null) {
		      if (node.mode & StrictMode) {
		        maybeStrictRoot = node;
		      }

		      node = node.return;
		    }

		    return maybeStrictRoot;
		  };

		  var setToSortedString = function (set) {
		    var array = [];
		    set.forEach(function (value) {
		      array.push(value);
		    });
		    return array.sort().join(', ');
		  };

		  var pendingComponentWillMountWarnings = [];
		  var pendingUNSAFE_ComponentWillMountWarnings = [];
		  var pendingComponentWillReceivePropsWarnings = [];
		  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		  var pendingComponentWillUpdateWarnings = [];
		  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

		  var didWarnAboutUnsafeLifecycles = new Set();

		  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
		    // Dedup strategy: Warn once per component.
		    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
		      return;
		    }

		    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
		    instance.componentWillMount.__suppressDeprecationWarning !== true) {
		      pendingComponentWillMountWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
		      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
		    }

		    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
		      pendingComponentWillReceivePropsWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
		    }

		    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
		      pendingComponentWillUpdateWarnings.push(fiber);
		    }

		    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
		      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
		    }
		  };

		  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
		    // We do an initial pass to gather component names
		    var componentWillMountUniqueNames = new Set();

		    if (pendingComponentWillMountWarnings.length > 0) {
		      pendingComponentWillMountWarnings.forEach(function (fiber) {
		        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillMountWarnings = [];
		    }

		    var UNSAFE_componentWillMountUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillMountWarnings = [];
		    }

		    var componentWillReceivePropsUniqueNames = new Set();

		    if (pendingComponentWillReceivePropsWarnings.length > 0) {
		      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
		        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillReceivePropsWarnings = [];
		    }

		    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		    }

		    var componentWillUpdateUniqueNames = new Set();

		    if (pendingComponentWillUpdateWarnings.length > 0) {
		      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
		        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingComponentWillUpdateWarnings = [];
		    }

		    var UNSAFE_componentWillUpdateUniqueNames = new Set();

		    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
		      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
		        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutUnsafeLifecycles.add(fiber.type);
		      });
		      pendingUNSAFE_ComponentWillUpdateWarnings = [];
		    } // Finally, we flush all the warnings
		    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


		    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
		      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

		      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
		    }

		    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
		      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

		      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
		    }

		    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
		      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

		      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
		    }

		    if (componentWillMountUniqueNames.size > 0) {
		      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

		      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
		    }

		    if (componentWillReceivePropsUniqueNames.size > 0) {
		      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

		      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
		    }

		    if (componentWillUpdateUniqueNames.size > 0) {
		      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

		      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
		    }
		  };

		  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

		  var didWarnAboutLegacyContext = new Set();

		  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
		    var strictRoot = findStrictRoot(fiber);

		    if (strictRoot === null) {
		      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

		      return;
		    } // Dedup strategy: Warn once per component.


		    if (didWarnAboutLegacyContext.has(fiber.type)) {
		      return;
		    }

		    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

		    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
		      if (warningsForRoot === undefined) {
		        warningsForRoot = [];
		        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
		      }

		      warningsForRoot.push(fiber);
		    }
		  };

		  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
		    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
		      if (fiberArray.length === 0) {
		        return;
		      }

		      var firstFiber = fiberArray[0];
		      var uniqueNames = new Set();
		      fiberArray.forEach(function (fiber) {
		        uniqueNames.add(getComponentName(fiber.type) || 'Component');
		        didWarnAboutLegacyContext.add(fiber.type);
		      });
		      var sortedNames = setToSortedString(uniqueNames);

		      try {
		        setCurrentFiber(firstFiber);

		        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
		      } finally {
		        resetCurrentFiber();
		      }
		    });
		  };

		  ReactStrictModeWarnings.discardPendingWarnings = function () {
		    pendingComponentWillMountWarnings = [];
		    pendingUNSAFE_ComponentWillMountWarnings = [];
		    pendingComponentWillReceivePropsWarnings = [];
		    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		    pendingComponentWillUpdateWarnings = [];
		    pendingUNSAFE_ComponentWillUpdateWarnings = [];
		    pendingLegacyContextWarning = new Map();
		  };
		}

		function resolveDefaultProps(Component, baseProps) {
		  if (Component && Component.defaultProps) {
		    // Resolve default props. Taken from ReactElement
		    var props = _assign({}, baseProps);

		    var defaultProps = Component.defaultProps;

		    for (var propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }

		    return props;
		  }

		  return baseProps;
		}

		// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111
		var MAX_SIGNED_31_BIT_INT = 1073741823;

		var valueCursor = createCursor(null);
		var rendererSigil;

		{
		  // Use this to detect multiple renderers using the same context
		  rendererSigil = {};
		}

		var currentlyRenderingFiber = null;
		var lastContextDependency = null;
		var lastContextWithAllBitsObserved = null;
		var isDisallowedContextReadInDEV = false;
		function resetContextDependencies() {
		  // This is called right before React yields execution, to ensure `readContext`
		  // cannot be called outside the render phase.
		  currentlyRenderingFiber = null;
		  lastContextDependency = null;
		  lastContextWithAllBitsObserved = null;

		  {
		    isDisallowedContextReadInDEV = false;
		  }
		}
		function enterDisallowedContextReadInDEV() {
		  {
		    isDisallowedContextReadInDEV = true;
		  }
		}
		function exitDisallowedContextReadInDEV() {
		  {
		    isDisallowedContextReadInDEV = false;
		  }
		}
		function pushProvider(providerFiber, nextValue) {
		  var context = providerFiber.type._context;

		  if (isPrimaryRenderer) {
		    push(valueCursor, context._currentValue, providerFiber);
		    context._currentValue = nextValue;

		    {
		      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
		        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
		      }

		      context._currentRenderer = rendererSigil;
		    }
		  } else {
		    push(valueCursor, context._currentValue2, providerFiber);
		    context._currentValue2 = nextValue;

		    {
		      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
		        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
		      }

		      context._currentRenderer2 = rendererSigil;
		    }
		  }
		}
		function popProvider(providerFiber) {
		  var currentValue = valueCursor.current;
		  pop(valueCursor, providerFiber);
		  var context = providerFiber.type._context;

		  if (isPrimaryRenderer) {
		    context._currentValue = currentValue;
		  } else {
		    context._currentValue2 = currentValue;
		  }
		}
		function calculateChangedBits(context, newValue, oldValue) {
		  if (objectIs(oldValue, newValue)) {
		    // No change
		    return 0;
		  } else {
		    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

		    {
		      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
		        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
		      }
		    }

		    return changedBits | 0;
		  }
		}
		function scheduleWorkOnParentPath(parent, renderLanes) {
		  // Update the child lanes of all the ancestors, including the alternates.
		  var node = parent;

		  while (node !== null) {
		    var alternate = node.alternate;

		    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
		      node.childLanes = mergeLanes(node.childLanes, renderLanes);

		      if (alternate !== null) {
		        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
		      }
		    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
		      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
		    } else {
		      // Neither alternate was updated, which means the rest of the
		      // ancestor path already has sufficient priority.
		      break;
		    }

		    node = node.return;
		  }
		}
		function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
		  var fiber = workInProgress.child;

		  if (fiber !== null) {
		    // Set the return pointer of the child to the work-in-progress fiber.
		    fiber.return = workInProgress;
		  }

		  while (fiber !== null) {
		    var nextFiber = void 0; // Visit this fiber.

		    var list = fiber.dependencies;

		    if (list !== null) {
		      nextFiber = fiber.child;
		      var dependency = list.firstContext;

		      while (dependency !== null) {
		        // Check if the context matches.
		        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
		          // Match! Schedule an update on this fiber.
		          if (fiber.tag === ClassComponent) {
		            // Schedule a force update on the work-in-progress.
		            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
		            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
		            // update to the current fiber, too, which means it will persist even if
		            // this render is thrown away. Since it's a race condition, not sure it's
		            // worth fixing.

		            enqueueUpdate(fiber, update);
		          }

		          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
		          var alternate = fiber.alternate;

		          if (alternate !== null) {
		            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
		          }

		          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

		          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
		          // dependency list.

		          break;
		        }

		        dependency = dependency.next;
		      }
		    } else if (fiber.tag === ContextProvider) {
		      // Don't scan deeper if this is a matching provider
		      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
		    } else {
		      // Traverse down.
		      nextFiber = fiber.child;
		    }

		    if (nextFiber !== null) {
		      // Set the return pointer of the child to the work-in-progress fiber.
		      nextFiber.return = fiber;
		    } else {
		      // No child. Traverse to next sibling.
		      nextFiber = fiber;

		      while (nextFiber !== null) {
		        if (nextFiber === workInProgress) {
		          // We're back to the root of this subtree. Exit.
		          nextFiber = null;
		          break;
		        }

		        var sibling = nextFiber.sibling;

		        if (sibling !== null) {
		          // Set the return pointer of the sibling to the work-in-progress fiber.
		          sibling.return = nextFiber.return;
		          nextFiber = sibling;
		          break;
		        } // No more siblings. Traverse up.


		        nextFiber = nextFiber.return;
		      }
		    }

		    fiber = nextFiber;
		  }
		}
		function prepareToReadContext(workInProgress, renderLanes) {
		  currentlyRenderingFiber = workInProgress;
		  lastContextDependency = null;
		  lastContextWithAllBitsObserved = null;
		  var dependencies = workInProgress.dependencies;

		  if (dependencies !== null) {
		    var firstContext = dependencies.firstContext;

		    if (firstContext !== null) {
		      if (includesSomeLane(dependencies.lanes, renderLanes)) {
		        // Context list has a pending update. Mark that this fiber performed work.
		        markWorkInProgressReceivedUpdate();
		      } // Reset the work-in-progress list


		      dependencies.firstContext = null;
		    }
		  }
		}
		function readContext(context, observedBits) {
		  {
		    // This warning would fire if you read context inside a Hook like useMemo.
		    // Unlike the class check below, it's not enforced in production for perf.
		    if (isDisallowedContextReadInDEV) {
		      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
		    }
		  }

		  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
		    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

		    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
		      // Observe all updates.
		      lastContextWithAllBitsObserved = context;
		      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
		    } else {
		      resolvedObservedBits = observedBits;
		    }

		    var contextItem = {
		      context: context,
		      observedBits: resolvedObservedBits,
		      next: null
		    };

		    if (lastContextDependency === null) {
		      if (!(currentlyRenderingFiber !== null)) {
		        {
		          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
		        }
		      } // This is the first dependency for this component. Create a new list.


		      lastContextDependency = contextItem;
		      currentlyRenderingFiber.dependencies = {
		        lanes: NoLanes,
		        firstContext: contextItem,
		        responders: null
		      };
		    } else {
		      // Append a new context item.
		      lastContextDependency = lastContextDependency.next = contextItem;
		    }
		  }

		  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
		}

		var UpdateState = 0;
		var ReplaceState = 1;
		var ForceUpdate = 2;
		var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
		// It should only be read right after calling `processUpdateQueue`, via
		// `checkHasForceUpdateAfterProcessing`.

		var hasForceUpdate = false;
		var didWarnUpdateInsideUpdate;
		var currentlyProcessingQueue;

		{
		  didWarnUpdateInsideUpdate = false;
		  currentlyProcessingQueue = null;
		}

		function initializeUpdateQueue(fiber) {
		  var queue = {
		    baseState: fiber.memoizedState,
		    firstBaseUpdate: null,
		    lastBaseUpdate: null,
		    shared: {
		      pending: null
		    },
		    effects: null
		  };
		  fiber.updateQueue = queue;
		}
		function cloneUpdateQueue(current, workInProgress) {
		  // Clone the update queue from current. Unless it's already a clone.
		  var queue = workInProgress.updateQueue;
		  var currentQueue = current.updateQueue;

		  if (queue === currentQueue) {
		    var clone = {
		      baseState: currentQueue.baseState,
		      firstBaseUpdate: currentQueue.firstBaseUpdate,
		      lastBaseUpdate: currentQueue.lastBaseUpdate,
		      shared: currentQueue.shared,
		      effects: currentQueue.effects
		    };
		    workInProgress.updateQueue = clone;
		  }
		}
		function createUpdate(eventTime, lane) {
		  var update = {
		    eventTime: eventTime,
		    lane: lane,
		    tag: UpdateState,
		    payload: null,
		    callback: null,
		    next: null
		  };
		  return update;
		}
		function enqueueUpdate(fiber, update) {
		  var updateQueue = fiber.updateQueue;

		  if (updateQueue === null) {
		    // Only occurs if the fiber has been unmounted.
		    return;
		  }

		  var sharedQueue = updateQueue.shared;
		  var pending = sharedQueue.pending;

		  if (pending === null) {
		    // This is the first update. Create a circular list.
		    update.next = update;
		  } else {
		    update.next = pending.next;
		    pending.next = update;
		  }

		  sharedQueue.pending = update;

		  {
		    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
		      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

		      didWarnUpdateInsideUpdate = true;
		    }
		  }
		}
		function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
		  // Captured updates are updates that are thrown by a child during the render
		  // phase. They should be discarded if the render is aborted. Therefore,
		  // we should only put them on the work-in-progress queue, not the current one.
		  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

		  var current = workInProgress.alternate;

		  if (current !== null) {
		    var currentQueue = current.updateQueue;

		    if (queue === currentQueue) {
		      // The work-in-progress queue is the same as current. This happens when
		      // we bail out on a parent fiber that then captures an error thrown by
		      // a child. Since we want to append the update only to the work-in
		      // -progress queue, we need to clone the updates. We usually clone during
		      // processUpdateQueue, but that didn't happen in this case because we
		      // skipped over the parent when we bailed out.
		      var newFirst = null;
		      var newLast = null;
		      var firstBaseUpdate = queue.firstBaseUpdate;

		      if (firstBaseUpdate !== null) {
		        // Loop through the updates and clone them.
		        var update = firstBaseUpdate;

		        do {
		          var clone = {
		            eventTime: update.eventTime,
		            lane: update.lane,
		            tag: update.tag,
		            payload: update.payload,
		            callback: update.callback,
		            next: null
		          };

		          if (newLast === null) {
		            newFirst = newLast = clone;
		          } else {
		            newLast.next = clone;
		            newLast = clone;
		          }

		          update = update.next;
		        } while (update !== null); // Append the captured update the end of the cloned list.


		        if (newLast === null) {
		          newFirst = newLast = capturedUpdate;
		        } else {
		          newLast.next = capturedUpdate;
		          newLast = capturedUpdate;
		        }
		      } else {
		        // There are no base updates.
		        newFirst = newLast = capturedUpdate;
		      }

		      queue = {
		        baseState: currentQueue.baseState,
		        firstBaseUpdate: newFirst,
		        lastBaseUpdate: newLast,
		        shared: currentQueue.shared,
		        effects: currentQueue.effects
		      };
		      workInProgress.updateQueue = queue;
		      return;
		    }
		  } // Append the update to the end of the list.


		  var lastBaseUpdate = queue.lastBaseUpdate;

		  if (lastBaseUpdate === null) {
		    queue.firstBaseUpdate = capturedUpdate;
		  } else {
		    lastBaseUpdate.next = capturedUpdate;
		  }

		  queue.lastBaseUpdate = capturedUpdate;
		}

		function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
		  switch (update.tag) {
		    case ReplaceState:
		      {
		        var payload = update.payload;

		        if (typeof payload === 'function') {
		          // Updater function
		          {
		            enterDisallowedContextReadInDEV();
		          }

		          var nextState = payload.call(instance, prevState, nextProps);

		          {
		            if ( workInProgress.mode & StrictMode) {
		              disableLogs();

		              try {
		                payload.call(instance, prevState, nextProps);
		              } finally {
		                reenableLogs();
		              }
		            }

		            exitDisallowedContextReadInDEV();
		          }

		          return nextState;
		        } // State object


		        return payload;
		      }

		    case CaptureUpdate:
		      {
		        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
		      }
		    // Intentional fallthrough

		    case UpdateState:
		      {
		        var _payload = update.payload;
		        var partialState;

		        if (typeof _payload === 'function') {
		          // Updater function
		          {
		            enterDisallowedContextReadInDEV();
		          }

		          partialState = _payload.call(instance, prevState, nextProps);

		          {
		            if ( workInProgress.mode & StrictMode) {
		              disableLogs();

		              try {
		                _payload.call(instance, prevState, nextProps);
		              } finally {
		                reenableLogs();
		              }
		            }

		            exitDisallowedContextReadInDEV();
		          }
		        } else {
		          // Partial state object
		          partialState = _payload;
		        }

		        if (partialState === null || partialState === undefined) {
		          // Null and undefined are treated as no-ops.
		          return prevState;
		        } // Merge the partial state and the previous state.


		        return _assign({}, prevState, partialState);
		      }

		    case ForceUpdate:
		      {
		        hasForceUpdate = true;
		        return prevState;
		      }
		  }

		  return prevState;
		}

		function processUpdateQueue(workInProgress, props, instance, renderLanes) {
		  // This is always non-null on a ClassComponent or HostRoot
		  var queue = workInProgress.updateQueue;
		  hasForceUpdate = false;

		  {
		    currentlyProcessingQueue = queue.shared;
		  }

		  var firstBaseUpdate = queue.firstBaseUpdate;
		  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

		  var pendingQueue = queue.shared.pending;

		  if (pendingQueue !== null) {
		    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
		    // and last so that it's non-circular.

		    var lastPendingUpdate = pendingQueue;
		    var firstPendingUpdate = lastPendingUpdate.next;
		    lastPendingUpdate.next = null; // Append pending updates to base queue

		    if (lastBaseUpdate === null) {
		      firstBaseUpdate = firstPendingUpdate;
		    } else {
		      lastBaseUpdate.next = firstPendingUpdate;
		    }

		    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
		    // we need to transfer the updates to that queue, too. Because the base
		    // queue is a singly-linked list with no cycles, we can append to both
		    // lists and take advantage of structural sharing.
		    // TODO: Pass `current` as argument

		    var current = workInProgress.alternate;

		    if (current !== null) {
		      // This is always non-null on a ClassComponent or HostRoot
		      var currentQueue = current.updateQueue;
		      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

		      if (currentLastBaseUpdate !== lastBaseUpdate) {
		        if (currentLastBaseUpdate === null) {
		          currentQueue.firstBaseUpdate = firstPendingUpdate;
		        } else {
		          currentLastBaseUpdate.next = firstPendingUpdate;
		        }

		        currentQueue.lastBaseUpdate = lastPendingUpdate;
		      }
		    }
		  } // These values may change as we process the queue.


		  if (firstBaseUpdate !== null) {
		    // Iterate through the list of updates to compute the result.
		    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
		    // from the original lanes.

		    var newLanes = NoLanes;
		    var newBaseState = null;
		    var newFirstBaseUpdate = null;
		    var newLastBaseUpdate = null;
		    var update = firstBaseUpdate;

		    do {
		      var updateLane = update.lane;
		      var updateEventTime = update.eventTime;

		      if (!isSubsetOfLanes(renderLanes, updateLane)) {
		        // Priority is insufficient. Skip this update. If this is the first
		        // skipped update, the previous update/state is the new base
		        // update/state.
		        var clone = {
		          eventTime: updateEventTime,
		          lane: updateLane,
		          tag: update.tag,
		          payload: update.payload,
		          callback: update.callback,
		          next: null
		        };

		        if (newLastBaseUpdate === null) {
		          newFirstBaseUpdate = newLastBaseUpdate = clone;
		          newBaseState = newState;
		        } else {
		          newLastBaseUpdate = newLastBaseUpdate.next = clone;
		        } // Update the remaining priority in the queue.


		        newLanes = mergeLanes(newLanes, updateLane);
		      } else {
		        // This update does have sufficient priority.
		        if (newLastBaseUpdate !== null) {
		          var _clone = {
		            eventTime: updateEventTime,
		            // This update is going to be committed so we never want uncommit
		            // it. Using NoLane works because 0 is a subset of all bitmasks, so
		            // this will never be skipped by the check above.
		            lane: NoLane,
		            tag: update.tag,
		            payload: update.payload,
		            callback: update.callback,
		            next: null
		          };
		          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
		        } // Process this update.


		        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
		        var callback = update.callback;

		        if (callback !== null) {
		          workInProgress.flags |= Callback;
		          var effects = queue.effects;

		          if (effects === null) {
		            queue.effects = [update];
		          } else {
		            effects.push(update);
		          }
		        }
		      }

		      update = update.next;

		      if (update === null) {
		        pendingQueue = queue.shared.pending;

		        if (pendingQueue === null) {
		          break;
		        } else {
		          // An update was scheduled from inside a reducer. Add the new
		          // pending updates to the end of the list and keep processing.
		          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
		          // unravel them when transferring them to the base queue.

		          var _firstPendingUpdate = _lastPendingUpdate.next;
		          _lastPendingUpdate.next = null;
		          update = _firstPendingUpdate;
		          queue.lastBaseUpdate = _lastPendingUpdate;
		          queue.shared.pending = null;
		        }
		      }
		    } while (true);

		    if (newLastBaseUpdate === null) {
		      newBaseState = newState;
		    }

		    queue.baseState = newBaseState;
		    queue.firstBaseUpdate = newFirstBaseUpdate;
		    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
		    // This should be fine because the only two other things that contribute to
		    // expiration time are props and context. We're already in the middle of the
		    // begin phase by the time we start processing the queue, so we've already
		    // dealt with the props. Context in components that specify
		    // shouldComponentUpdate is tricky; but we'll have to account for
		    // that regardless.

		    markSkippedUpdateLanes(newLanes);
		    workInProgress.lanes = newLanes;
		    workInProgress.memoizedState = newState;
		  }

		  {
		    currentlyProcessingQueue = null;
		  }
		}

		function callCallback(callback, context) {
		  if (!(typeof callback === 'function')) {
		    {
		      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
		    }
		  }

		  callback.call(context);
		}

		function resetHasForceUpdateBeforeProcessing() {
		  hasForceUpdate = false;
		}
		function checkHasForceUpdateAfterProcessing() {
		  return hasForceUpdate;
		}
		function commitUpdateQueue(finishedWork, finishedQueue, instance) {
		  // Commit the effects
		  var effects = finishedQueue.effects;
		  finishedQueue.effects = null;

		  if (effects !== null) {
		    for (var i = 0; i < effects.length; i++) {
		      var effect = effects[i];
		      var callback = effect.callback;

		      if (callback !== null) {
		        effect.callback = null;
		        callCallback(callback, instance);
		      }
		    }
		  }
		}

		var fakeInternalInstance = {};
		var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
		// We'll use it to determine whether we need to initialize legacy refs.

		var emptyRefsObject = new React.Component().refs;
		var didWarnAboutStateAssignmentForComponent;
		var didWarnAboutUninitializedState;
		var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
		var didWarnAboutLegacyLifecyclesAndDerivedState;
		var didWarnAboutUndefinedDerivedState;
		var warnOnUndefinedDerivedState;
		var warnOnInvalidCallback;
		var didWarnAboutDirectlyAssigningPropsToState;
		var didWarnAboutContextTypeAndContextTypes;
		var didWarnAboutInvalidateContextType;

		{
		  didWarnAboutStateAssignmentForComponent = new Set();
		  didWarnAboutUninitializedState = new Set();
		  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
		  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
		  didWarnAboutDirectlyAssigningPropsToState = new Set();
		  didWarnAboutUndefinedDerivedState = new Set();
		  didWarnAboutContextTypeAndContextTypes = new Set();
		  didWarnAboutInvalidateContextType = new Set();
		  var didWarnOnInvalidCallback = new Set();

		  warnOnInvalidCallback = function (callback, callerName) {
		    if (callback === null || typeof callback === 'function') {
		      return;
		    }

		    var key = callerName + '_' + callback;

		    if (!didWarnOnInvalidCallback.has(key)) {
		      didWarnOnInvalidCallback.add(key);

		      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
		    }
		  };

		  warnOnUndefinedDerivedState = function (type, partialState) {
		    if (partialState === undefined) {
		      var componentName = getComponentName(type) || 'Component';

		      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
		        didWarnAboutUndefinedDerivedState.add(componentName);

		        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
		      }
		    }
		  }; // This is so gross but it's at least non-critical and can be removed if
		  // it causes problems. This is meant to give a nicer error message for
		  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
		  // ...)) which otherwise throws a "_processChildContext is not a function"
		  // exception.


		  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
		    enumerable: false,
		    value: function () {
		      {
		        {
		          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
		        }
		      }
		    }
		  });
		  Object.freeze(fakeInternalInstance);
		}

		function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
		  var prevState = workInProgress.memoizedState;

		  {
		    if ( workInProgress.mode & StrictMode) {
		      disableLogs();

		      try {
		        // Invoke the function an extra time to help detect side-effects.
		        getDerivedStateFromProps(nextProps, prevState);
		      } finally {
		        reenableLogs();
		      }
		    }
		  }

		  var partialState = getDerivedStateFromProps(nextProps, prevState);

		  {
		    warnOnUndefinedDerivedState(ctor, partialState);
		  } // Merge the partial state and the previous state.


		  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
		  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
		  // base state.

		  if (workInProgress.lanes === NoLanes) {
		    // Queue is always non-null for classes
		    var updateQueue = workInProgress.updateQueue;
		    updateQueue.baseState = memoizedState;
		  }
		}
		var classComponentUpdater = {
		  isMounted: isMounted,
		  enqueueSetState: function (inst, payload, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.payload = payload;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'setState');
		      }

		      update.callback = callback;
		    }

		    enqueueUpdate(fiber, update);
		    scheduleUpdateOnFiber(fiber, lane, eventTime);
		  },
		  enqueueReplaceState: function (inst, payload, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.tag = ReplaceState;
		    update.payload = payload;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'replaceState');
		      }

		      update.callback = callback;
		    }

		    enqueueUpdate(fiber, update);
		    scheduleUpdateOnFiber(fiber, lane, eventTime);
		  },
		  enqueueForceUpdate: function (inst, callback) {
		    var fiber = get(inst);
		    var eventTime = requestEventTime();
		    var lane = requestUpdateLane(fiber);
		    var update = createUpdate(eventTime, lane);
		    update.tag = ForceUpdate;

		    if (callback !== undefined && callback !== null) {
		      {
		        warnOnInvalidCallback(callback, 'forceUpdate');
		      }

		      update.callback = callback;
		    }

		    enqueueUpdate(fiber, update);
		    scheduleUpdateOnFiber(fiber, lane, eventTime);
		  }
		};

		function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
		  var instance = workInProgress.stateNode;

		  if (typeof instance.shouldComponentUpdate === 'function') {
		    {
		      if ( workInProgress.mode & StrictMode) {
		        disableLogs();

		        try {
		          // Invoke the function an extra time to help detect side-effects.
		          instance.shouldComponentUpdate(newProps, newState, nextContext);
		        } finally {
		          reenableLogs();
		        }
		      }
		    }

		    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

		    {
		      if (shouldUpdate === undefined) {
		        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
		      }
		    }

		    return shouldUpdate;
		  }

		  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
		    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
		  }

		  return true;
		}

		function checkClassInstance(workInProgress, ctor, newProps) {
		  var instance = workInProgress.stateNode;

		  {
		    var name = getComponentName(ctor) || 'Component';
		    var renderPresent = instance.render;

		    if (!renderPresent) {
		      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
		        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
		      } else {
		        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
		      }
		    }

		    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
		      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
		    }

		    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
		    }

		    if (instance.propTypes) {
		      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
		    }

		    if (instance.contextType) {
		      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
		    }

		    {
		      if (instance.contextTypes) {
		        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
		      }

		      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
		        didWarnAboutContextTypeAndContextTypes.add(ctor);

		        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
		      }
		    }

		    if (typeof instance.componentShouldUpdate === 'function') {
		      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
		    }

		    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
		      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
		    }

		    if (typeof instance.componentDidUnmount === 'function') {
		      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
		    }

		    if (typeof instance.componentDidReceiveProps === 'function') {
		      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
		    }

		    if (typeof instance.componentWillRecieveProps === 'function') {
		      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
		    }

		    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
		      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
		    }

		    var hasMutatedProps = instance.props !== newProps;

		    if (instance.props !== undefined && hasMutatedProps) {
		      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
		    }

		    if (instance.defaultProps) {
		      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
		      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

		      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
		    }

		    if (typeof instance.getDerivedStateFromProps === 'function') {
		      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
		    }

		    if (typeof instance.getDerivedStateFromError === 'function') {
		      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
		    }

		    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
		      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
		    }

		    var _state = instance.state;

		    if (_state && (typeof _state !== 'object' || isArray(_state))) {
		      error('%s.state: must be set to an object or null', name);
		    }

		    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
		      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
		    }
		  }
		}

		function adoptClassInstance(workInProgress, instance) {
		  instance.updater = classComponentUpdater;
		  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

		  set(instance, workInProgress);

		  {
		    instance._reactInternalInstance = fakeInternalInstance;
		  }
		}

		function constructClassInstance(workInProgress, ctor, props) {
		  var isLegacyContextConsumer = false;
		  var unmaskedContext = emptyContextObject;
		  var context = emptyContextObject;
		  var contextType = ctor.contextType;

		  {
		    if ('contextType' in ctor) {
		      var isValid = // Allow null for conditional declaration
		      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

		      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
		        didWarnAboutInvalidateContextType.add(ctor);
		        var addendum = '';

		        if (contextType === undefined) {
		          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
		        } else if (typeof contextType !== 'object') {
		          addendum = ' However, it is set to a ' + typeof contextType + '.';
		        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
		          addendum = ' Did you accidentally pass the Context.Provider instead?';
		        } else if (contextType._context !== undefined) {
		          // <Context.Consumer>
		          addendum = ' Did you accidentally pass the Context.Consumer instead?';
		        } else {
		          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
		        }

		        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
		      }
		    }
		  }

		  if (typeof contextType === 'object' && contextType !== null) {
		    context = readContext(contextType);
		  } else {
		    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    var contextTypes = ctor.contextTypes;
		    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
		    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
		  } // Instantiate twice to help detect side-effects.


		  {
		    if ( workInProgress.mode & StrictMode) {
		      disableLogs();

		      try {
		        new ctor(props, context); // eslint-disable-line no-new
		      } finally {
		        reenableLogs();
		      }
		    }
		  }

		  var instance = new ctor(props, context);
		  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
		  adoptClassInstance(workInProgress, instance);

		  {
		    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
		      var componentName = getComponentName(ctor) || 'Component';

		      if (!didWarnAboutUninitializedState.has(componentName)) {
		        didWarnAboutUninitializedState.add(componentName);

		        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
		      }
		    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
		    // Warn about these lifecycles if they are present.
		    // Don't warn about react-lifecycles-compat polyfilled methods though.


		    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
		      var foundWillMountName = null;
		      var foundWillReceivePropsName = null;
		      var foundWillUpdateName = null;

		      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
		        foundWillMountName = 'componentWillMount';
		      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
		        foundWillMountName = 'UNSAFE_componentWillMount';
		      }

		      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
		        foundWillReceivePropsName = 'componentWillReceiveProps';
		      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
		      }

		      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
		        foundWillUpdateName = 'componentWillUpdate';
		      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
		        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
		      }

		      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
		        var _componentName = getComponentName(ctor) || 'Component';

		        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

		        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
		          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

		          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
		        }
		      }
		    }
		  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
		  // ReactFiberContext usually updates this cache but can't for newly-created instances.


		  if (isLegacyContextConsumer) {
		    cacheContext(workInProgress, unmaskedContext, context);
		  }

		  return instance;
		}

		function callComponentWillMount(workInProgress, instance) {
		  var oldState = instance.state;

		  if (typeof instance.componentWillMount === 'function') {
		    instance.componentWillMount();
		  }

		  if (typeof instance.UNSAFE_componentWillMount === 'function') {
		    instance.UNSAFE_componentWillMount();
		  }

		  if (oldState !== instance.state) {
		    {
		      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
		    }

		    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		  }
		}

		function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
		  var oldState = instance.state;

		  if (typeof instance.componentWillReceiveProps === 'function') {
		    instance.componentWillReceiveProps(newProps, nextContext);
		  }

		  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
		    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
		  }

		  if (instance.state !== oldState) {
		    {
		      var componentName = getComponentName(workInProgress.type) || 'Component';

		      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
		        didWarnAboutStateAssignmentForComponent.add(componentName);

		        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
		      }
		    }

		    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		  }
		} // Invokes the mount life-cycles on a previously never rendered instance.


		function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
		  {
		    checkClassInstance(workInProgress, ctor, newProps);
		  }

		  var instance = workInProgress.stateNode;
		  instance.props = newProps;
		  instance.state = workInProgress.memoizedState;
		  instance.refs = emptyRefsObject;
		  initializeUpdateQueue(workInProgress);
		  var contextType = ctor.contextType;

		  if (typeof contextType === 'object' && contextType !== null) {
		    instance.context = readContext(contextType);
		  } else {
		    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    instance.context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  {
		    if (instance.state === newProps) {
		      var componentName = getComponentName(ctor) || 'Component';

		      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
		        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

		        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
		      }
		    }

		    if (workInProgress.mode & StrictMode) {
		      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
		    }

		    {
		      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
		    }
		  }

		  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		  instance.state = workInProgress.memoizedState;
		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    instance.state = workInProgress.memoizedState;
		  } // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.


		  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
		    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
		    // process them now.

		    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		    instance.state = workInProgress.memoizedState;
		  }

		  if (typeof instance.componentDidMount === 'function') {
		    workInProgress.flags |= Update;
		  }
		}

		function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
		  var instance = workInProgress.stateNode;
		  var oldProps = workInProgress.memoizedProps;
		  instance.props = oldProps;
		  var oldContext = instance.context;
		  var contextType = ctor.contextType;
		  var nextContext = emptyContextObject;

		  if (typeof contextType === 'object' && contextType !== null) {
		    nextContext = readContext(contextType);
		  } else {
		    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
		  }

		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
		  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
		  // ever the previously attempted to render - not the "current". However,
		  // during componentDidUpdate we pass the "current" props.
		  // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.

		  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
		    if (oldProps !== newProps || oldContext !== nextContext) {
		      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
		    }
		  }

		  resetHasForceUpdateBeforeProcessing();
		  var oldState = workInProgress.memoizedState;
		  var newState = instance.state = oldState;
		  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		  newState = workInProgress.memoizedState;

		  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidMount === 'function') {
		      workInProgress.flags |= Update;
		    }

		    return false;
		  }

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    newState = workInProgress.memoizedState;
		  }

		  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

		  if (shouldUpdate) {
		    // In order to support react-lifecycles-compat polyfilled components,
		    // Unsafe lifecycles should not be invoked for components using the new APIs.
		    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
		      if (typeof instance.componentWillMount === 'function') {
		        instance.componentWillMount();
		      }

		      if (typeof instance.UNSAFE_componentWillMount === 'function') {
		        instance.UNSAFE_componentWillMount();
		      }
		    }

		    if (typeof instance.componentDidMount === 'function') {
		      workInProgress.flags |= Update;
		    }
		  } else {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidMount === 'function') {
		      workInProgress.flags |= Update;
		    } // If shouldComponentUpdate returned false, we should still update the
		    // memoized state to indicate that this work can be reused.


		    workInProgress.memoizedProps = newProps;
		    workInProgress.memoizedState = newState;
		  } // Update the existing instance's state, props, and context pointers even
		  // if shouldComponentUpdate returns false.


		  instance.props = newProps;
		  instance.state = newState;
		  instance.context = nextContext;
		  return shouldUpdate;
		} // Invokes the update life-cycles and returns false if it shouldn't rerender.


		function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
		  var instance = workInProgress.stateNode;
		  cloneUpdateQueue(current, workInProgress);
		  var unresolvedOldProps = workInProgress.memoizedProps;
		  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
		  instance.props = oldProps;
		  var unresolvedNewProps = workInProgress.pendingProps;
		  var oldContext = instance.context;
		  var contextType = ctor.contextType;
		  var nextContext = emptyContextObject;

		  if (typeof contextType === 'object' && contextType !== null) {
		    nextContext = readContext(contextType);
		  } else {
		    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
		    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
		  }

		  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
		  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
		  // ever the previously attempted to render - not the "current". However,
		  // during componentDidUpdate we pass the "current" props.
		  // In order to support react-lifecycles-compat polyfilled components,
		  // Unsafe lifecycles should not be invoked for components using the new APIs.

		  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
		    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
		      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
		    }
		  }

		  resetHasForceUpdateBeforeProcessing();
		  var oldState = workInProgress.memoizedState;
		  var newState = instance.state = oldState;
		  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
		  newState = workInProgress.memoizedState;

		  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Update;
		      }
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Snapshot;
		      }
		    }

		    return false;
		  }

		  if (typeof getDerivedStateFromProps === 'function') {
		    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
		    newState = workInProgress.memoizedState;
		  }

		  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

		  if (shouldUpdate) {
		    // In order to support react-lifecycles-compat polyfilled components,
		    // Unsafe lifecycles should not be invoked for components using the new APIs.
		    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
		      if (typeof instance.componentWillUpdate === 'function') {
		        instance.componentWillUpdate(newProps, newState, nextContext);
		      }

		      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
		        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
		      }
		    }

		    if (typeof instance.componentDidUpdate === 'function') {
		      workInProgress.flags |= Update;
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      workInProgress.flags |= Snapshot;
		    }
		  } else {
		    // If an update was already in progress, we should schedule an Update
		    // effect even though we're bailing out, so that cWU/cDU are called.
		    if (typeof instance.componentDidUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Update;
		      }
		    }

		    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
		      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
		        workInProgress.flags |= Snapshot;
		      }
		    } // If shouldComponentUpdate returned false, we should still update the
		    // memoized props/state to indicate that this work can be reused.


		    workInProgress.memoizedProps = newProps;
		    workInProgress.memoizedState = newState;
		  } // Update the existing instance's state, props, and context pointers even
		  // if shouldComponentUpdate returns false.


		  instance.props = newProps;
		  instance.state = newState;
		  instance.context = nextContext;
		  return shouldUpdate;
		}

		var didWarnAboutMaps;
		var didWarnAboutGenerators;
		var didWarnAboutStringRefs;
		var ownerHasKeyUseWarning;
		var ownerHasFunctionTypeWarning;

		var warnForMissingKey = function (child, returnFiber) {};

		{
		  didWarnAboutMaps = false;
		  didWarnAboutGenerators = false;
		  didWarnAboutStringRefs = {};
		  /**
		   * Warn if there's no key explicitly set on dynamic arrays of children or
		   * object keys are not valid. This allows us to keep track of children between
		   * updates.
		   */

		  ownerHasKeyUseWarning = {};
		  ownerHasFunctionTypeWarning = {};

		  warnForMissingKey = function (child, returnFiber) {
		    if (child === null || typeof child !== 'object') {
		      return;
		    }

		    if (!child._store || child._store.validated || child.key != null) {
		      return;
		    }

		    if (!(typeof child._store === 'object')) {
		      {
		        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }

		    child._store.validated = true;
		    var componentName = getComponentName(returnFiber.type) || 'Component';

		    if (ownerHasKeyUseWarning[componentName]) {
		      return;
		    }

		    ownerHasKeyUseWarning[componentName] = true;

		    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
		  };
		}

		var isArray$1 = Array.isArray;

		function coerceRef(returnFiber, current, element) {
		  var mixedRef = element.ref;

		  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
		    {
		      // TODO: Clean this up once we turn on the string ref warning for
		      // everyone, because the strict mode case will no longer be relevant
		      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
		      // because these cannot be automatically converted to an arrow function
		      // using a codemod. Therefore, we don't have to warn about string refs again.
		      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
		        var componentName = getComponentName(returnFiber.type) || 'Component';

		        if (!didWarnAboutStringRefs[componentName]) {
		          {
		            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
		          }

		          didWarnAboutStringRefs[componentName] = true;
		        }
		      }
		    }

		    if (element._owner) {
		      var owner = element._owner;
		      var inst;

		      if (owner) {
		        var ownerFiber = owner;

		        if (!(ownerFiber.tag === ClassComponent)) {
		          {
		            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
		          }
		        }

		        inst = ownerFiber.stateNode;
		      }

		      if (!inst) {
		        {
		          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
		        }
		      }

		      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

		      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
		        return current.ref;
		      }

		      var ref = function (value) {
		        var refs = inst.refs;

		        if (refs === emptyRefsObject) {
		          // This is a lazy pooled frozen object, so we need to initialize.
		          refs = inst.refs = {};
		        }

		        if (value === null) {
		          delete refs[stringRef];
		        } else {
		          refs[stringRef] = value;
		        }
		      };

		      ref._stringRef = stringRef;
		      return ref;
		    } else {
		      if (!(typeof mixedRef === 'string')) {
		        {
		          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
		        }
		      }

		      if (!element._owner) {
		        {
		          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
		        }
		      }
		    }
		  }

		  return mixedRef;
		}

		function throwOnInvalidObjectType(returnFiber, newChild) {
		  if (returnFiber.type !== 'textarea') {
		    {
		      {
		        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
		      }
		    }
		  }
		}

		function warnOnFunctionType(returnFiber) {
		  {
		    var componentName = getComponentName(returnFiber.type) || 'Component';

		    if (ownerHasFunctionTypeWarning[componentName]) {
		      return;
		    }

		    ownerHasFunctionTypeWarning[componentName] = true;

		    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
		  }
		} // We avoid inlining this to avoid potential deopts from using try/catch.
		// to be able to optimize each path individually by branching early. This needs
		// a compiler or we can do it manually. Helpers that don't need this branching
		// live outside of this function.


		function ChildReconciler(shouldTrackSideEffects) {
		  function deleteChild(returnFiber, childToDelete) {
		    if (!shouldTrackSideEffects) {
		      // Noop.
		      return;
		    } // Deletions are added in reversed order so we add it to the front.
		    // At this point, the return fiber's effect list is empty except for
		    // deletions, so we can just append the deletion to the list. The remaining
		    // effects aren't added until the complete phase. Once we implement
		    // resuming, this may not be true.


		    var last = returnFiber.lastEffect;

		    if (last !== null) {
		      last.nextEffect = childToDelete;
		      returnFiber.lastEffect = childToDelete;
		    } else {
		      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
		    }

		    childToDelete.nextEffect = null;
		    childToDelete.flags = Deletion;
		  }

		  function deleteRemainingChildren(returnFiber, currentFirstChild) {
		    if (!shouldTrackSideEffects) {
		      // Noop.
		      return null;
		    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
		    // assuming that after the first child we've already added everything.


		    var childToDelete = currentFirstChild;

		    while (childToDelete !== null) {
		      deleteChild(returnFiber, childToDelete);
		      childToDelete = childToDelete.sibling;
		    }

		    return null;
		  }

		  function mapRemainingChildren(returnFiber, currentFirstChild) {
		    // Add the remaining children to a temporary map so that we can find them by
		    // keys quickly. Implicit (null) keys get added to this set with their index
		    // instead.
		    var existingChildren = new Map();
		    var existingChild = currentFirstChild;

		    while (existingChild !== null) {
		      if (existingChild.key !== null) {
		        existingChildren.set(existingChild.key, existingChild);
		      } else {
		        existingChildren.set(existingChild.index, existingChild);
		      }

		      existingChild = existingChild.sibling;
		    }

		    return existingChildren;
		  }

		  function useFiber(fiber, pendingProps) {
		    // We currently set sibling to null and index to 0 here because it is easy
		    // to forget to do before returning it. E.g. for the single child case.
		    var clone = createWorkInProgress(fiber, pendingProps);
		    clone.index = 0;
		    clone.sibling = null;
		    return clone;
		  }

		  function placeChild(newFiber, lastPlacedIndex, newIndex) {
		    newFiber.index = newIndex;

		    if (!shouldTrackSideEffects) {
		      // Noop.
		      return lastPlacedIndex;
		    }

		    var current = newFiber.alternate;

		    if (current !== null) {
		      var oldIndex = current.index;

		      if (oldIndex < lastPlacedIndex) {
		        // This is a move.
		        newFiber.flags = Placement;
		        return lastPlacedIndex;
		      } else {
		        // This item can stay in place.
		        return oldIndex;
		      }
		    } else {
		      // This is an insertion.
		      newFiber.flags = Placement;
		      return lastPlacedIndex;
		    }
		  }

		  function placeSingleChild(newFiber) {
		    // This is simpler for the single child case. We only need to do a
		    // placement for inserting new children.
		    if (shouldTrackSideEffects && newFiber.alternate === null) {
		      newFiber.flags = Placement;
		    }

		    return newFiber;
		  }

		  function updateTextNode(returnFiber, current, textContent, lanes) {
		    if (current === null || current.tag !== HostText) {
		      // Insert
		      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, textContent);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function updateElement(returnFiber, current, element, lanes) {
		    if (current !== null) {
		      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
		       isCompatibleFamilyForHotReloading(current, element) )) {
		        // Move based on index
		        var existing = useFiber(current, element.props);
		        existing.ref = coerceRef(returnFiber, current, element);
		        existing.return = returnFiber;

		        {
		          existing._debugSource = element._source;
		          existing._debugOwner = element._owner;
		        }

		        return existing;
		      }
		    } // Insert


		    var created = createFiberFromElement(element, returnFiber.mode, lanes);
		    created.ref = coerceRef(returnFiber, current, element);
		    created.return = returnFiber;
		    return created;
		  }

		  function updatePortal(returnFiber, current, portal, lanes) {
		    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
		      // Insert
		      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, portal.children || []);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function updateFragment(returnFiber, current, fragment, lanes, key) {
		    if (current === null || current.tag !== Fragment) {
		      // Insert
		      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
		      created.return = returnFiber;
		      return created;
		    } else {
		      // Update
		      var existing = useFiber(current, fragment);
		      existing.return = returnFiber;
		      return existing;
		    }
		  }

		  function createChild(returnFiber, newChild, lanes) {
		    if (typeof newChild === 'string' || typeof newChild === 'number') {
		      // Text nodes don't have keys. If the previous node is implicitly keyed
		      // we can continue to replace it without aborting even if it is not a text
		      // node.
		      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
		      created.return = returnFiber;
		      return created;
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

		            _created.ref = coerceRef(returnFiber, null, newChild);
		            _created.return = returnFiber;
		            return _created;
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

		            _created2.return = returnFiber;
		            return _created2;
		          }
		      }

		      if (isArray$1(newChild) || getIteratorFn(newChild)) {
		        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

		        _created3.return = returnFiber;
		        return _created3;
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }

		  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
		    // Update the fiber if the keys match, otherwise return null.
		    var key = oldFiber !== null ? oldFiber.key : null;

		    if (typeof newChild === 'string' || typeof newChild === 'number') {
		      // Text nodes don't have keys. If the previous node is implicitly keyed
		      // we can continue to replace it without aborting even if it is not a text
		      // node.
		      if (key !== null) {
		        return null;
		      }

		      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            if (newChild.key === key) {
		              if (newChild.type === REACT_FRAGMENT_TYPE) {
		                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
		              }

		              return updateElement(returnFiber, oldFiber, newChild, lanes);
		            } else {
		              return null;
		            }
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            if (newChild.key === key) {
		              return updatePortal(returnFiber, oldFiber, newChild, lanes);
		            } else {
		              return null;
		            }
		          }
		      }

		      if (isArray$1(newChild) || getIteratorFn(newChild)) {
		        if (key !== null) {
		          return null;
		        }

		        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }

		  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
		    if (typeof newChild === 'string' || typeof newChild === 'number') {
		      // Text nodes don't have keys, so we neither have to check the old nor
		      // new node for the key. If both are text nodes, they match.
		      var matchedFiber = existingChildren.get(newIdx) || null;
		      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
		    }

		    if (typeof newChild === 'object' && newChild !== null) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          {
		            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

		            if (newChild.type === REACT_FRAGMENT_TYPE) {
		              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
		            }

		            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
		          }

		        case REACT_PORTAL_TYPE:
		          {
		            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

		            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
		          }

		      }

		      if (isArray$1(newChild) || getIteratorFn(newChild)) {
		        var _matchedFiber3 = existingChildren.get(newIdx) || null;

		        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
		      }

		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    return null;
		  }
		  /**
		   * Warns if there is a duplicate or missing key
		   */


		  function warnOnInvalidKey(child, knownKeys, returnFiber) {
		    {
		      if (typeof child !== 'object' || child === null) {
		        return knownKeys;
		      }

		      switch (child.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		        case REACT_PORTAL_TYPE:
		          warnForMissingKey(child, returnFiber);
		          var key = child.key;

		          if (typeof key !== 'string') {
		            break;
		          }

		          if (knownKeys === null) {
		            knownKeys = new Set();
		            knownKeys.add(key);
		            break;
		          }

		          if (!knownKeys.has(key)) {
		            knownKeys.add(key);
		            break;
		          }

		          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

		          break;
		      }
		    }

		    return knownKeys;
		  }

		  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
		    // This algorithm can't optimize by searching from both ends since we
		    // don't have backpointers on fibers. I'm trying to see how far we can get
		    // with that model. If it ends up not being worth the tradeoffs, we can
		    // add it later.
		    // Even with a two ended optimization, we'd want to optimize for the case
		    // where there are few changes and brute force the comparison instead of
		    // going for the Map. It'd like to explore hitting that path first in
		    // forward-only mode and only go for the Map once we notice that we need
		    // lots of look ahead. This doesn't handle reversal as well as two ended
		    // search but that's unusual. Besides, for the two ended optimization to
		    // work on Iterables, we'd need to copy the whole set.
		    // In this first iteration, we'll just live with hitting the bad case
		    // (adding everything to a Map) in for every insert/move.
		    // If you change this code, also update reconcileChildrenIterator() which
		    // uses the same algorithm.
		    {
		      // First, validate keys.
		      var knownKeys = null;

		      for (var i = 0; i < newChildren.length; i++) {
		        var child = newChildren[i];
		        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
		      }
		    }

		    var resultingFirstChild = null;
		    var previousNewFiber = null;
		    var oldFiber = currentFirstChild;
		    var lastPlacedIndex = 0;
		    var newIdx = 0;
		    var nextOldFiber = null;

		    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
		      if (oldFiber.index > newIdx) {
		        nextOldFiber = oldFiber;
		        oldFiber = null;
		      } else {
		        nextOldFiber = oldFiber.sibling;
		      }

		      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

		      if (newFiber === null) {
		        // TODO: This breaks on empty slots like null children. That's
		        // unfortunate because it triggers the slow path all the time. We need
		        // a better way to communicate whether this was a miss or null,
		        // boolean, undefined, etc.
		        if (oldFiber === null) {
		          oldFiber = nextOldFiber;
		        }

		        break;
		      }

		      if (shouldTrackSideEffects) {
		        if (oldFiber && newFiber.alternate === null) {
		          // We matched the slot, but we didn't reuse the existing fiber, so we
		          // need to delete the existing child.
		          deleteChild(returnFiber, oldFiber);
		        }
		      }

		      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

		      if (previousNewFiber === null) {
		        // TODO: Move out of the loop. This only happens for the first run.
		        resultingFirstChild = newFiber;
		      } else {
		        // TODO: Defer siblings if we're not at the right index for this slot.
		        // I.e. if we had null values before, then we want to defer this
		        // for each null value. However, we also don't want to call updateSlot
		        // with the previous one.
		        previousNewFiber.sibling = newFiber;
		      }

		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }

		    if (newIdx === newChildren.length) {
		      // We've reached the end of the new children. We can delete the rest.
		      deleteRemainingChildren(returnFiber, oldFiber);
		      return resultingFirstChild;
		    }

		    if (oldFiber === null) {
		      // If we don't have any more existing children we can choose a fast path
		      // since the rest will all be insertions.
		      for (; newIdx < newChildren.length; newIdx++) {
		        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

		        if (_newFiber === null) {
		          continue;
		        }

		        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          // TODO: Move out of the loop. This only happens for the first run.
		          resultingFirstChild = _newFiber;
		        } else {
		          previousNewFiber.sibling = _newFiber;
		        }

		        previousNewFiber = _newFiber;
		      }

		      return resultingFirstChild;
		    } // Add all children to a key map for quick lookups.


		    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

		    for (; newIdx < newChildren.length; newIdx++) {
		      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

		      if (_newFiber2 !== null) {
		        if (shouldTrackSideEffects) {
		          if (_newFiber2.alternate !== null) {
		            // The new fiber is a work in progress, but if there exists a
		            // current, that means that we reused the fiber. We need to delete
		            // it from the child list so that we don't add it to the deletion
		            // list.
		            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
		          }
		        }

		        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          resultingFirstChild = _newFiber2;
		        } else {
		          previousNewFiber.sibling = _newFiber2;
		        }

		        previousNewFiber = _newFiber2;
		      }
		    }

		    if (shouldTrackSideEffects) {
		      // Any existing children that weren't consumed above were deleted. We need
		      // to add them to the deletion list.
		      existingChildren.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    }

		    return resultingFirstChild;
		  }

		  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
		    // This is the same implementation as reconcileChildrenArray(),
		    // but using the iterator instead.
		    var iteratorFn = getIteratorFn(newChildrenIterable);

		    if (!(typeof iteratorFn === 'function')) {
		      {
		        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }

		    {
		      // We don't support rendering Generators because it's a mutation.
		      // See https://github.com/facebook/react/issues/12995
		      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
		      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
		        if (!didWarnAboutGenerators) {
		          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
		        }

		        didWarnAboutGenerators = true;
		      } // Warn about using Maps as children


		      if (newChildrenIterable.entries === iteratorFn) {
		        if (!didWarnAboutMaps) {
		          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		        }

		        didWarnAboutMaps = true;
		      } // First, validate keys.
		      // We'll get a different iterator later for the main pass.


		      var _newChildren = iteratorFn.call(newChildrenIterable);

		      if (_newChildren) {
		        var knownKeys = null;

		        var _step = _newChildren.next();

		        for (; !_step.done; _step = _newChildren.next()) {
		          var child = _step.value;
		          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
		        }
		      }
		    }

		    var newChildren = iteratorFn.call(newChildrenIterable);

		    if (!(newChildren != null)) {
		      {
		        throw Error( "An iterable object provided no iterator." );
		      }
		    }

		    var resultingFirstChild = null;
		    var previousNewFiber = null;
		    var oldFiber = currentFirstChild;
		    var lastPlacedIndex = 0;
		    var newIdx = 0;
		    var nextOldFiber = null;
		    var step = newChildren.next();

		    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
		      if (oldFiber.index > newIdx) {
		        nextOldFiber = oldFiber;
		        oldFiber = null;
		      } else {
		        nextOldFiber = oldFiber.sibling;
		      }

		      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

		      if (newFiber === null) {
		        // TODO: This breaks on empty slots like null children. That's
		        // unfortunate because it triggers the slow path all the time. We need
		        // a better way to communicate whether this was a miss or null,
		        // boolean, undefined, etc.
		        if (oldFiber === null) {
		          oldFiber = nextOldFiber;
		        }

		        break;
		      }

		      if (shouldTrackSideEffects) {
		        if (oldFiber && newFiber.alternate === null) {
		          // We matched the slot, but we didn't reuse the existing fiber, so we
		          // need to delete the existing child.
		          deleteChild(returnFiber, oldFiber);
		        }
		      }

		      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

		      if (previousNewFiber === null) {
		        // TODO: Move out of the loop. This only happens for the first run.
		        resultingFirstChild = newFiber;
		      } else {
		        // TODO: Defer siblings if we're not at the right index for this slot.
		        // I.e. if we had null values before, then we want to defer this
		        // for each null value. However, we also don't want to call updateSlot
		        // with the previous one.
		        previousNewFiber.sibling = newFiber;
		      }

		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }

		    if (step.done) {
		      // We've reached the end of the new children. We can delete the rest.
		      deleteRemainingChildren(returnFiber, oldFiber);
		      return resultingFirstChild;
		    }

		    if (oldFiber === null) {
		      // If we don't have any more existing children we can choose a fast path
		      // since the rest will all be insertions.
		      for (; !step.done; newIdx++, step = newChildren.next()) {
		        var _newFiber3 = createChild(returnFiber, step.value, lanes);

		        if (_newFiber3 === null) {
		          continue;
		        }

		        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          // TODO: Move out of the loop. This only happens for the first run.
		          resultingFirstChild = _newFiber3;
		        } else {
		          previousNewFiber.sibling = _newFiber3;
		        }

		        previousNewFiber = _newFiber3;
		      }

		      return resultingFirstChild;
		    } // Add all children to a key map for quick lookups.


		    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

		    for (; !step.done; newIdx++, step = newChildren.next()) {
		      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

		      if (_newFiber4 !== null) {
		        if (shouldTrackSideEffects) {
		          if (_newFiber4.alternate !== null) {
		            // The new fiber is a work in progress, but if there exists a
		            // current, that means that we reused the fiber. We need to delete
		            // it from the child list so that we don't add it to the deletion
		            // list.
		            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
		          }
		        }

		        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

		        if (previousNewFiber === null) {
		          resultingFirstChild = _newFiber4;
		        } else {
		          previousNewFiber.sibling = _newFiber4;
		        }

		        previousNewFiber = _newFiber4;
		      }
		    }

		    if (shouldTrackSideEffects) {
		      // Any existing children that weren't consumed above were deleted. We need
		      // to add them to the deletion list.
		      existingChildren.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    }

		    return resultingFirstChild;
		  }

		  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
		    // There's no need to check for keys on text nodes since we don't have a
		    // way to define them.
		    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
		      // We already have an existing node so let's just update it and delete
		      // the rest.
		      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
		      var existing = useFiber(currentFirstChild, textContent);
		      existing.return = returnFiber;
		      return existing;
		    } // The existing first child is not a text node so we need to create one
		    // and delete the existing ones.


		    deleteRemainingChildren(returnFiber, currentFirstChild);
		    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
		    created.return = returnFiber;
		    return created;
		  }

		  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
		    var key = element.key;
		    var child = currentFirstChild;

		    while (child !== null) {
		      // TODO: If key === null and child.key === null, then this only applies to
		      // the first item in the list.
		      if (child.key === key) {
		        switch (child.tag) {
		          case Fragment:
		            {
		              if (element.type === REACT_FRAGMENT_TYPE) {
		                deleteRemainingChildren(returnFiber, child.sibling);
		                var existing = useFiber(child, element.props.children);
		                existing.return = returnFiber;

		                {
		                  existing._debugSource = element._source;
		                  existing._debugOwner = element._owner;
		                }

		                return existing;
		              }

		              break;
		            }

		          case Block:

		          // We intentionally fallthrough here if enableBlocksAPI is not on.
		          // eslint-disable-next-lined no-fallthrough

		          default:
		            {
		              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
		               isCompatibleFamilyForHotReloading(child, element) )) {
		                deleteRemainingChildren(returnFiber, child.sibling);

		                var _existing3 = useFiber(child, element.props);

		                _existing3.ref = coerceRef(returnFiber, child, element);
		                _existing3.return = returnFiber;

		                {
		                  _existing3._debugSource = element._source;
		                  _existing3._debugOwner = element._owner;
		                }

		                return _existing3;
		              }

		              break;
		            }
		        } // Didn't match.


		        deleteRemainingChildren(returnFiber, child);
		        break;
		      } else {
		        deleteChild(returnFiber, child);
		      }

		      child = child.sibling;
		    }

		    if (element.type === REACT_FRAGMENT_TYPE) {
		      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
		      created.return = returnFiber;
		      return created;
		    } else {
		      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

		      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
		      _created4.return = returnFiber;
		      return _created4;
		    }
		  }

		  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
		    var key = portal.key;
		    var child = currentFirstChild;

		    while (child !== null) {
		      // TODO: If key === null and child.key === null, then this only applies to
		      // the first item in the list.
		      if (child.key === key) {
		        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
		          deleteRemainingChildren(returnFiber, child.sibling);
		          var existing = useFiber(child, portal.children || []);
		          existing.return = returnFiber;
		          return existing;
		        } else {
		          deleteRemainingChildren(returnFiber, child);
		          break;
		        }
		      } else {
		        deleteChild(returnFiber, child);
		      }

		      child = child.sibling;
		    }

		    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
		    created.return = returnFiber;
		    return created;
		  } // This API will tag the children with the side-effect of the reconciliation
		  // itself. They will be added to the side-effect list as we pass through the
		  // children and the parent.


		  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
		    // This function is not recursive.
		    // If the top level item is an array, we treat it as a set of children,
		    // not as a fragment. Nested arrays on the other hand will be treated as
		    // fragment nodes. Recursion happens at the normal flow.
		    // Handle top level unkeyed fragments as if they were arrays.
		    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
		    // We treat the ambiguous cases above the same.
		    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

		    if (isUnkeyedTopLevelFragment) {
		      newChild = newChild.props.children;
		    } // Handle object types


		    var isObject = typeof newChild === 'object' && newChild !== null;

		    if (isObject) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

		        case REACT_PORTAL_TYPE:
		          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

		      }
		    }

		    if (typeof newChild === 'string' || typeof newChild === 'number') {
		      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
		    }

		    if (isArray$1(newChild)) {
		      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
		    }

		    if (getIteratorFn(newChild)) {
		      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
		    }

		    if (isObject) {
		      throwOnInvalidObjectType(returnFiber, newChild);
		    }

		    {
		      if (typeof newChild === 'function') {
		        warnOnFunctionType(returnFiber);
		      }
		    }

		    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
		      // If the new child is undefined, and the return fiber is a composite
		      // component, throw an error. If Fiber return types are disabled,
		      // we already threw above.
		      switch (returnFiber.tag) {
		        case ClassComponent:
		          {
		            {
		              var instance = returnFiber.stateNode;

		              if (instance.render._isMockFunction) {
		                // We allow auto-mocks to proceed as if they're returning null.
		                break;
		              }
		            }
		          }
		        // Intentionally fall through to the next case, which handles both
		        // functions and classes
		        // eslint-disable-next-lined no-fallthrough

		        case Block:
		        case FunctionComponent:
		        case ForwardRef:
		        case SimpleMemoComponent:
		          {
		            {
		              {
		                throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
		              }
		            }
		          }
		      }
		    } // Remaining cases are all treated as empty.


		    return deleteRemainingChildren(returnFiber, currentFirstChild);
		  }

		  return reconcileChildFibers;
		}

		var reconcileChildFibers = ChildReconciler(true);
		var mountChildFibers = ChildReconciler(false);
		function cloneChildFibers(current, workInProgress) {
		  if (!(current === null || workInProgress.child === current.child)) {
		    {
		      throw Error( "Resuming work not yet implemented." );
		    }
		  }

		  if (workInProgress.child === null) {
		    return;
		  }

		  var currentChild = workInProgress.child;
		  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
		  workInProgress.child = newChild;
		  newChild.return = workInProgress;

		  while (currentChild.sibling !== null) {
		    currentChild = currentChild.sibling;
		    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
		    newChild.return = workInProgress;
		  }

		  newChild.sibling = null;
		} // Reset a workInProgress child set to prepare it for a second pass.

		function resetChildFibers(workInProgress, lanes) {
		  var child = workInProgress.child;

		  while (child !== null) {
		    resetWorkInProgress(child, lanes);
		    child = child.sibling;
		  }
		}

		var NO_CONTEXT = {};
		var contextStackCursor$1 = createCursor(NO_CONTEXT);
		var contextFiberStackCursor = createCursor(NO_CONTEXT);
		var rootInstanceStackCursor = createCursor(NO_CONTEXT);

		function requiredContext(c) {
		  if (!(c !== NO_CONTEXT)) {
		    {
		      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }

		  return c;
		}

		function getRootHostContainer() {
		  var rootInstance = requiredContext(rootInstanceStackCursor.current);
		  return rootInstance;
		}

		function pushHostContainer(fiber, nextRootInstance) {
		  // Push current root instance onto the stack;
		  // This allows us to reset root when portals are popped.
		  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
		  // This enables us to pop only Fibers that provide unique contexts.

		  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
		  // However, we can't just call getRootHostContext() and push it because
		  // we'd have a different number of entries on the stack depending on
		  // whether getRootHostContext() throws somewhere in renderer code or not.
		  // So we push an empty value first. This lets us safely unwind on errors.

		  push(contextStackCursor$1, NO_CONTEXT, fiber);
		  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

		  pop(contextStackCursor$1, fiber);
		  push(contextStackCursor$1, nextRootContext, fiber);
		}

		function popHostContainer(fiber) {
		  pop(contextStackCursor$1, fiber);
		  pop(contextFiberStackCursor, fiber);
		  pop(rootInstanceStackCursor, fiber);
		}

		function getHostContext() {
		  var context = requiredContext(contextStackCursor$1.current);
		  return context;
		}

		function pushHostContext(fiber) {
		  var rootInstance = requiredContext(rootInstanceStackCursor.current);
		  var context = requiredContext(contextStackCursor$1.current);
		  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

		  if (context === nextContext) {
		    return;
		  } // Track the context and the Fiber that provided it.
		  // This enables us to pop only Fibers that provide unique contexts.


		  push(contextFiberStackCursor, fiber, fiber);
		  push(contextStackCursor$1, nextContext, fiber);
		}

		function popHostContext(fiber) {
		  // Do not pop unless this Fiber provided the current context.
		  // pushHostContext() only pushes Fibers that provide unique contexts.
		  if (contextFiberStackCursor.current !== fiber) {
		    return;
		  }

		  pop(contextStackCursor$1, fiber);
		  pop(contextFiberStackCursor, fiber);
		}

		var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
		// inherited deeply down the subtree. The upper bits only affect
		// this immediate suspense boundary and gets reset each new
		// boundary or suspense list.

		var SubtreeSuspenseContextMask = 1; // Subtree Flags:
		// InvisibleParentSuspenseContext indicates that one of our parent Suspense
		// boundaries is not currently showing visible main content.
		// Either because it is already showing a fallback or is not mounted at all.
		// We can use this to determine if it is desirable to trigger a fallback at
		// the parent. If not, then we might need to trigger undesirable boundaries
		// and/or suspend the commit to avoid hiding the parent content.

		var InvisibleParentSuspenseContext = 1; // Shallow Flags:
		// ForceSuspenseFallback can be used by SuspenseList to force newly added
		// items into their fallback state during one of the render passes.

		var ForceSuspenseFallback = 2;
		var suspenseStackCursor = createCursor(DefaultSuspenseContext);
		function hasSuspenseContext(parentContext, flag) {
		  return (parentContext & flag) !== 0;
		}
		function setDefaultShallowSuspenseContext(parentContext) {
		  return parentContext & SubtreeSuspenseContextMask;
		}
		function setShallowSuspenseContext(parentContext, shallowContext) {
		  return parentContext & SubtreeSuspenseContextMask | shallowContext;
		}
		function addSubtreeSuspenseContext(parentContext, subtreeContext) {
		  return parentContext | subtreeContext;
		}
		function pushSuspenseContext(fiber, newContext) {
		  push(suspenseStackCursor, newContext, fiber);
		}
		function popSuspenseContext(fiber) {
		  pop(suspenseStackCursor, fiber);
		}

		function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
		  // If it was the primary children that just suspended, capture and render the
		  // fallback. Otherwise, don't capture and bubble to the next boundary.
		  var nextState = workInProgress.memoizedState;

		  if (nextState !== null) {
		    if (nextState.dehydrated !== null) {
		      // A dehydrated boundary always captures.
		      return true;
		    }

		    return false;
		  }

		  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

		  if (props.fallback === undefined) {
		    return false;
		  } // Regular boundaries always capture.


		  if (props.unstable_avoidThisFallback !== true) {
		    return true;
		  } // If it's a boundary we should avoid, then we prefer to bubble up to the
		  // parent boundary if it is currently invisible.


		  if (hasInvisibleParent) {
		    return false;
		  } // If the parent is not able to handle it, we must handle it.


		  return true;
		}
		function findFirstSuspended(row) {
		  var node = row;

		  while (node !== null) {
		    if (node.tag === SuspenseComponent) {
		      var state = node.memoizedState;

		      if (state !== null) {
		        var dehydrated = state.dehydrated;

		        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
		          return node;
		        }
		      }
		    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
		    // keep track of whether it suspended or not.
		    node.memoizedProps.revealOrder !== undefined) {
		      var didSuspend = (node.flags & DidCapture) !== NoFlags;

		      if (didSuspend) {
		        return node;
		      }
		    } else if (node.child !== null) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === row) {
		      return null;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === row) {
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }

		  return null;
		}

		var NoFlags$1 =
		/*  */
		0; // Represents whether effect should fire.

		var HasEffect =
		/* */
		1; // Represents the phase in which the effect (not the clean-up) fires.

		var Layout =
		/*    */
		2;
		var Passive$1 =
		/*   */
		4;

		// This may have been an insertion or a hydration.

		var hydrationParentFiber = null;
		var nextHydratableInstance = null;
		var isHydrating = false;

		function enterHydrationState(fiber) {
		  if (!supportsHydration) {
		    return false;
		  }

		  var parentInstance = fiber.stateNode.containerInfo;
		  nextHydratableInstance = getFirstHydratableChild(parentInstance);
		  hydrationParentFiber = fiber;
		  isHydrating = true;
		  return true;
		}

		function deleteHydratableInstance(returnFiber, instance) {
		  {
		    switch (returnFiber.tag) {
		      case HostRoot:
		        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
		        break;

		      case HostComponent:
		        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
		        break;
		    }
		  }

		  var childToDelete = createFiberFromHostInstanceForDeletion();
		  childToDelete.stateNode = instance;
		  childToDelete.return = returnFiber;
		  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
		  // these children are not part of the reconciliation list of children.
		  // Even if we abort and rereconcile the children, that will try to hydrate
		  // again and the nodes are still in the host tree so these will be
		  // recreated.

		  if (returnFiber.lastEffect !== null) {
		    returnFiber.lastEffect.nextEffect = childToDelete;
		    returnFiber.lastEffect = childToDelete;
		  } else {
		    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
		  }
		}

		function insertNonHydratedInstance(returnFiber, fiber) {
		  fiber.flags = fiber.flags & ~Hydrating | Placement;

		  {
		    switch (returnFiber.tag) {
		      case HostRoot:
		        {
		          var parentContainer = returnFiber.stateNode.containerInfo;

		          switch (fiber.tag) {
		            case HostComponent:
		              var type = fiber.type;
		              var props = fiber.pendingProps;
		              didNotFindHydratableContainerInstance(parentContainer, type, props);
		              break;

		            case HostText:
		              var text = fiber.pendingProps;
		              didNotFindHydratableContainerTextInstance(parentContainer, text);
		              break;

		            case SuspenseComponent:
		              didNotFindHydratableContainerSuspenseInstance(parentContainer);
		              break;
		          }

		          break;
		        }

		      case HostComponent:
		        {
		          var parentType = returnFiber.type;
		          var parentProps = returnFiber.memoizedProps;
		          var parentInstance = returnFiber.stateNode;

		          switch (fiber.tag) {
		            case HostComponent:
		              var _type = fiber.type;
		              var _props = fiber.pendingProps;
		              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
		              break;

		            case HostText:
		              var _text = fiber.pendingProps;
		              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
		              break;

		            case SuspenseComponent:
		              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
		              break;
		          }

		          break;
		        }

		      default:
		        return;
		    }
		  }
		}

		function tryHydrate(fiber, nextInstance) {
		  switch (fiber.tag) {
		    case HostComponent:
		      {
		        var type = fiber.type;
		        var props = fiber.pendingProps;
		        var instance = canHydrateInstance(nextInstance, type, props);

		        if (instance !== null) {
		          fiber.stateNode = instance;
		          return true;
		        }

		        return false;
		      }

		    case HostText:
		      {
		        var text = fiber.pendingProps;
		        var textInstance = canHydrateTextInstance(nextInstance, text);

		        if (textInstance !== null) {
		          fiber.stateNode = textInstance;
		          return true;
		        }

		        return false;
		      }

		    case SuspenseComponent:
		      {

		        return false;
		      }

		    default:
		      return false;
		  }
		}

		function tryToClaimNextHydratableInstance(fiber) {
		  if (!isHydrating) {
		    return;
		  }

		  var nextInstance = nextHydratableInstance;

		  if (!nextInstance) {
		    // Nothing to hydrate. Make it an insertion.
		    insertNonHydratedInstance(hydrationParentFiber, fiber);
		    isHydrating = false;
		    hydrationParentFiber = fiber;
		    return;
		  }

		  var firstAttemptedInstance = nextInstance;

		  if (!tryHydrate(fiber, nextInstance)) {
		    // If we can't hydrate this instance let's try the next one.
		    // We use this as a heuristic. It's based on intuition and not data so it
		    // might be flawed or unnecessary.
		    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

		    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
		      // Nothing to hydrate. Make it an insertion.
		      insertNonHydratedInstance(hydrationParentFiber, fiber);
		      isHydrating = false;
		      hydrationParentFiber = fiber;
		      return;
		    } // We matched the next one, we'll now assume that the first one was
		    // superfluous and we'll delete it. Since we can't eagerly delete it
		    // we'll have to schedule a deletion. To do that, this node needs a dummy
		    // fiber associated with it.


		    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
		  }

		  hydrationParentFiber = fiber;
		  nextHydratableInstance = getFirstHydratableChild(nextInstance);
		}

		function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
		  if (!supportsHydration) {
		    {
		      {
		        throw Error( "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }

		  var instance = fiber.stateNode;
		  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

		  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
		  // is a new ref we mark this as an update.

		  if (updatePayload !== null) {
		    return true;
		  }

		  return false;
		}

		function prepareToHydrateHostTextInstance(fiber) {
		  if (!supportsHydration) {
		    {
		      {
		        throw Error( "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }

		  var textInstance = fiber.stateNode;
		  var textContent = fiber.memoizedProps;
		  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

		  {
		    if (shouldUpdate) {
		      // We assume that prepareToHydrateHostTextInstance is called in a context where the
		      // hydration parent is the parent host component of this host text.
		      var returnFiber = hydrationParentFiber;

		      if (returnFiber !== null) {
		        switch (returnFiber.tag) {
		          case HostRoot:
		            {
		              var parentContainer = returnFiber.stateNode.containerInfo;
		              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
		              break;
		            }

		          case HostComponent:
		            {
		              var parentType = returnFiber.type;
		              var parentProps = returnFiber.memoizedProps;
		              var parentInstance = returnFiber.stateNode;
		              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
		              break;
		            }
		        }
		      }
		    }
		  }

		  return shouldUpdate;
		}

		function skipPastDehydratedSuspenseInstance(fiber) {
		  if (!supportsHydration) {
		    {
		      {
		        throw Error( "Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }

		  var suspenseState = fiber.memoizedState;
		  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

		  if (!suspenseInstance) {
		    {
		      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }

		  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
		}

		function popToNextHostParent(fiber) {
		  var parent = fiber.return;

		  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
		    parent = parent.return;
		  }

		  hydrationParentFiber = parent;
		}

		function popHydrationState(fiber) {
		  if (!supportsHydration) {
		    return false;
		  }

		  if (fiber !== hydrationParentFiber) {
		    // We're deeper than the current hydration context, inside an inserted
		    // tree.
		    return false;
		  }

		  if (!isHydrating) {
		    // If we're not currently hydrating but we're in a hydration context, then
		    // we were an insertion and now need to pop up reenter hydration of our
		    // siblings.
		    popToNextHostParent(fiber);
		    isHydrating = true;
		    return false;
		  }

		  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
		  // We only do this deeper than head and body since they tend to have random
		  // other nodes in them. We also ignore components with pure text content in
		  // side of them.
		  // TODO: Better heuristic.

		  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
		    var nextInstance = nextHydratableInstance;

		    while (nextInstance) {
		      deleteHydratableInstance(fiber, nextInstance);
		      nextInstance = getNextHydratableSibling(nextInstance);
		    }
		  }

		  popToNextHostParent(fiber);

		  if (fiber.tag === SuspenseComponent) {
		    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
		  } else {
		    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
		  }

		  return true;
		}

		function resetHydrationState() {
		  if (!supportsHydration) {
		    return;
		  }

		  hydrationParentFiber = null;
		  nextHydratableInstance = null;
		  isHydrating = false;
		}

		function getIsHydrating() {
		  return isHydrating;
		}

		// and should be reset before starting a new render.
		// This tracks which mutable sources need to be reset after a render.

		var workInProgressSources = [];
		var rendererSigil$1;

		{
		  // Used to detect multiple renderers using the same mutable source.
		  rendererSigil$1 = {};
		}

		function markSourceAsDirty(mutableSource) {
		  workInProgressSources.push(mutableSource);
		}
		function resetWorkInProgressVersions() {
		  for (var i = 0; i < workInProgressSources.length; i++) {
		    var mutableSource = workInProgressSources[i];

		    if (isPrimaryRenderer) {
		      mutableSource._workInProgressVersionPrimary = null;
		    } else {
		      mutableSource._workInProgressVersionSecondary = null;
		    }
		  }

		  workInProgressSources.length = 0;
		}
		function getWorkInProgressVersion(mutableSource) {
		  if (isPrimaryRenderer) {
		    return mutableSource._workInProgressVersionPrimary;
		  } else {
		    return mutableSource._workInProgressVersionSecondary;
		  }
		}
		function setWorkInProgressVersion(mutableSource, version) {
		  if (isPrimaryRenderer) {
		    mutableSource._workInProgressVersionPrimary = version;
		  } else {
		    mutableSource._workInProgressVersionSecondary = version;
		  }

		  workInProgressSources.push(mutableSource);
		}
		function warnAboutMultipleRenderersDEV(mutableSource) {
		  {
		    if (isPrimaryRenderer) {
		      if (mutableSource._currentPrimaryRenderer == null) {
		        mutableSource._currentPrimaryRenderer = rendererSigil$1;
		      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
		        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
		      }
		    } else {
		      if (mutableSource._currentSecondaryRenderer == null) {
		        mutableSource._currentSecondaryRenderer = rendererSigil$1;
		      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil$1) {
		        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
		      }
		    }
		  }
		} // Eager reads the version of a mutable source and stores it on the root.

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
		    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
		var didWarnAboutMismatchedHooksForComponent;
		var didWarnAboutUseOpaqueIdentifier;

		{
		  didWarnAboutUseOpaqueIdentifier = {};
		  didWarnAboutMismatchedHooksForComponent = new Set();
		}

		// These are set right before calling the component.
		var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
		// the work-in-progress hook.

		var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
		// current hook list is the list that belongs to the current fiber. The
		// work-in-progress hook list is a new list that will be added to the
		// work-in-progress fiber.

		var currentHook = null;
		var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
		// does not get reset if we do another render pass; only when we're completely
		// finished evaluating this component. This is an optimization so we know
		// whether we need to clear render phase updates after a throw.

		var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
		// gets reset after each attempt.
		// TODO: Maybe there's some way to consolidate this with
		// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

		var didScheduleRenderPhaseUpdateDuringThisPass = false;
		var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

		var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
		// The list stores the order of hooks used during the initial render (mount).
		// Subsequent renders (updates) reference this list.

		var hookTypesDev = null;
		var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
		// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
		// When true, such Hooks will always be "remounted". Only used during hot reload.

		var ignorePreviousDependencies = false;

		function mountHookTypesDev() {
		  {
		    var hookName = currentHookNameInDev;

		    if (hookTypesDev === null) {
		      hookTypesDev = [hookName];
		    } else {
		      hookTypesDev.push(hookName);
		    }
		  }
		}

		function updateHookTypesDev() {
		  {
		    var hookName = currentHookNameInDev;

		    if (hookTypesDev !== null) {
		      hookTypesUpdateIndexDev++;

		      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
		        warnOnHookMismatchInDev(hookName);
		      }
		    }
		  }
		}

		function checkDepsAreArrayDev(deps) {
		  {
		    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
		      // Verify deps, but only on mount to avoid extra checks.
		      // It's unlikely their type would change as usually you define them inline.
		      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
		    }
		  }
		}

		function warnOnHookMismatchInDev(currentHookName) {
		  {
		    var componentName = getComponentName(currentlyRenderingFiber$1.type);

		    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
		      didWarnAboutMismatchedHooksForComponent.add(componentName);

		      if (hookTypesDev !== null) {
		        var table = '';
		        var secondColumnStart = 30;

		        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
		          var oldHookName = hookTypesDev[i];
		          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
		          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
		          // lol @ IE not supporting String#repeat

		          while (row.length < secondColumnStart) {
		            row += ' ';
		          }

		          row += newHookName + '\n';
		          table += row;
		        }

		        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
		      }
		    }
		  }
		}

		function throwInvalidHookError() {
		  {
		    {
		      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
		    }
		  }
		}

		function areHookInputsEqual(nextDeps, prevDeps) {
		  {
		    if (ignorePreviousDependencies) {
		      // Only true when this component is being hot reloaded.
		      return false;
		    }
		  }

		  if (prevDeps === null) {
		    {
		      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
		    }

		    return false;
		  }

		  {
		    // Don't bother comparing lengths in prod because these arrays should be
		    // passed inline.
		    if (nextDeps.length !== prevDeps.length) {
		      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
		    }
		  }

		  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
		    if (objectIs(nextDeps[i], prevDeps[i])) {
		      continue;
		    }

		    return false;
		  }

		  return true;
		}

		function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
		  renderLanes = nextRenderLanes;
		  currentlyRenderingFiber$1 = workInProgress;

		  {
		    hookTypesDev = current !== null ? current._debugHookTypes : null;
		    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

		    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
		  }

		  workInProgress.memoizedState = null;
		  workInProgress.updateQueue = null;
		  workInProgress.lanes = NoLanes; // The following should have already been reset
		  // currentHook = null;
		  // workInProgressHook = null;
		  // didScheduleRenderPhaseUpdate = false;
		  // TODO Warn if no hooks are used at all during mount, then some are used during update.
		  // Currently we will identify the update render as a mount because memoizedState === null.
		  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
		  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
		  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
		  // so memoizedState would be null during updates and mounts.

		  {
		    if (current !== null && current.memoizedState !== null) {
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
		    } else if (hookTypesDev !== null) {
		      // This dispatcher handles an edge case where a component is updating,
		      // but no stateful hooks have been used.
		      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
		      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
		      // This dispatcher does that.
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
		    } else {
		      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
		    }
		  }

		  var children = Component(props, secondArg); // Check if there was a render phase update

		  if (didScheduleRenderPhaseUpdateDuringThisPass) {
		    // Keep rendering in a loop for as long as render phase updates continue to
		    // be scheduled. Use a counter to prevent infinite loops.
		    var numberOfReRenders = 0;

		    do {
		      didScheduleRenderPhaseUpdateDuringThisPass = false;

		      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
		        {
		          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
		        }
		      }

		      numberOfReRenders += 1;

		      {
		        // Even when hot reloading, allow dependencies to stabilize
		        // after first render to prevent infinite render phase updates.
		        ignorePreviousDependencies = false;
		      } // Start over from the beginning of the list


		      currentHook = null;
		      workInProgressHook = null;
		      workInProgress.updateQueue = null;

		      {
		        // Also validate hook order for cascading updates.
		        hookTypesUpdateIndexDev = -1;
		      }

		      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
		      children = Component(props, secondArg);
		    } while (didScheduleRenderPhaseUpdateDuringThisPass);
		  } // We can assume the previous dispatcher is always this one, since we set it
		  // at the beginning of the render phase and there's no re-entrancy.


		  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

		  {
		    workInProgress._debugHookTypes = hookTypesDev;
		  } // This check uses currentHook so that it works the same in DEV and prod bundles.
		  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


		  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
		  renderLanes = NoLanes;
		  currentlyRenderingFiber$1 = null;
		  currentHook = null;
		  workInProgressHook = null;

		  {
		    currentHookNameInDev = null;
		    hookTypesDev = null;
		    hookTypesUpdateIndexDev = -1;
		  }

		  didScheduleRenderPhaseUpdate = false;

		  if (!!didRenderTooFewHooks) {
		    {
		      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
		    }
		  }

		  return children;
		}
		function bailoutHooks(current, workInProgress, lanes) {
		  workInProgress.updateQueue = current.updateQueue;
		  workInProgress.flags &= ~(Passive | Update);
		  current.lanes = removeLanes(current.lanes, lanes);
		}
		function resetHooksAfterThrow() {
		  // We can assume the previous dispatcher is always this one, since we set it
		  // at the beginning of the render phase and there's no re-entrancy.
		  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

		  if (didScheduleRenderPhaseUpdate) {
		    // There were render phase updates. These are only valid for this render
		    // phase, which we are now aborting. Remove the updates from the queues so
		    // they do not persist to the next render. Do not remove updates from hooks
		    // that weren't processed.
		    //
		    // Only reset the updates from the queue if it has a clone. If it does
		    // not have a clone, that means it wasn't processed, and the updates were
		    // scheduled before we entered the render phase.
		    var hook = currentlyRenderingFiber$1.memoizedState;

		    while (hook !== null) {
		      var queue = hook.queue;

		      if (queue !== null) {
		        queue.pending = null;
		      }

		      hook = hook.next;
		    }

		    didScheduleRenderPhaseUpdate = false;
		  }

		  renderLanes = NoLanes;
		  currentlyRenderingFiber$1 = null;
		  currentHook = null;
		  workInProgressHook = null;

		  {
		    hookTypesDev = null;
		    hookTypesUpdateIndexDev = -1;
		    currentHookNameInDev = null;
		    isUpdatingOpaqueValueInRenderPhase = false;
		  }

		  didScheduleRenderPhaseUpdateDuringThisPass = false;
		}

		function mountWorkInProgressHook() {
		  var hook = {
		    memoizedState: null,
		    baseState: null,
		    baseQueue: null,
		    queue: null,
		    next: null
		  };

		  if (workInProgressHook === null) {
		    // This is the first hook in the list
		    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
		  } else {
		    // Append to the end of the list
		    workInProgressHook = workInProgressHook.next = hook;
		  }

		  return workInProgressHook;
		}

		function updateWorkInProgressHook() {
		  // This function is used both for updates and for re-renders triggered by a
		  // render phase update. It assumes there is either a current hook we can
		  // clone, or a work-in-progress hook from a previous render pass that we can
		  // use as a base. When we reach the end of the base list, we must switch to
		  // the dispatcher used for mounts.
		  var nextCurrentHook;

		  if (currentHook === null) {
		    var current = currentlyRenderingFiber$1.alternate;

		    if (current !== null) {
		      nextCurrentHook = current.memoizedState;
		    } else {
		      nextCurrentHook = null;
		    }
		  } else {
		    nextCurrentHook = currentHook.next;
		  }

		  var nextWorkInProgressHook;

		  if (workInProgressHook === null) {
		    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
		  } else {
		    nextWorkInProgressHook = workInProgressHook.next;
		  }

		  if (nextWorkInProgressHook !== null) {
		    // There's already a work-in-progress. Reuse it.
		    workInProgressHook = nextWorkInProgressHook;
		    nextWorkInProgressHook = workInProgressHook.next;
		    currentHook = nextCurrentHook;
		  } else {
		    // Clone from the current hook.
		    if (!(nextCurrentHook !== null)) {
		      {
		        throw Error( "Rendered more hooks than during the previous render." );
		      }
		    }

		    currentHook = nextCurrentHook;
		    var newHook = {
		      memoizedState: currentHook.memoizedState,
		      baseState: currentHook.baseState,
		      baseQueue: currentHook.baseQueue,
		      queue: currentHook.queue,
		      next: null
		    };

		    if (workInProgressHook === null) {
		      // This is the first hook in the list.
		      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
		    } else {
		      // Append to the end of the list.
		      workInProgressHook = workInProgressHook.next = newHook;
		    }
		  }

		  return workInProgressHook;
		}

		function createFunctionComponentUpdateQueue() {
		  return {
		    lastEffect: null
		  };
		}

		function basicStateReducer(state, action) {
		  // $FlowFixMe: Flow doesn't like mixed types
		  return typeof action === 'function' ? action(state) : action;
		}

		function mountReducer(reducer, initialArg, init) {
		  var hook = mountWorkInProgressHook();
		  var initialState;

		  if (init !== undefined) {
		    initialState = init(initialArg);
		  } else {
		    initialState = initialArg;
		  }

		  hook.memoizedState = hook.baseState = initialState;
		  var queue = hook.queue = {
		    pending: null,
		    dispatch: null,
		    lastRenderedReducer: reducer,
		    lastRenderedState: initialState
		  };
		  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
		  return [hook.memoizedState, dispatch];
		}

		function updateReducer(reducer, initialArg, init) {
		  var hook = updateWorkInProgressHook();
		  var queue = hook.queue;

		  if (!(queue !== null)) {
		    {
		      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
		    }
		  }

		  queue.lastRenderedReducer = reducer;
		  var current = currentHook; // The last rebase update that is NOT part of the base state.

		  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

		  var pendingQueue = queue.pending;

		  if (pendingQueue !== null) {
		    // We have new updates that haven't been processed yet.
		    // We'll add them to the base queue.
		    if (baseQueue !== null) {
		      // Merge the pending queue and the base queue.
		      var baseFirst = baseQueue.next;
		      var pendingFirst = pendingQueue.next;
		      baseQueue.next = pendingFirst;
		      pendingQueue.next = baseFirst;
		    }

		    {
		      if (current.baseQueue !== baseQueue) {
		        // Internal invariant that should never happen, but feasibly could in
		        // the future if we implement resuming, or some form of that.
		        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
		      }
		    }

		    current.baseQueue = baseQueue = pendingQueue;
		    queue.pending = null;
		  }

		  if (baseQueue !== null) {
		    // We have a queue to process.
		    var first = baseQueue.next;
		    var newState = current.baseState;
		    var newBaseState = null;
		    var newBaseQueueFirst = null;
		    var newBaseQueueLast = null;
		    var update = first;

		    do {
		      var updateLane = update.lane;

		      if (!isSubsetOfLanes(renderLanes, updateLane)) {
		        // Priority is insufficient. Skip this update. If this is the first
		        // skipped update, the previous update/state is the new base
		        // update/state.
		        var clone = {
		          lane: updateLane,
		          action: update.action,
		          eagerReducer: update.eagerReducer,
		          eagerState: update.eagerState,
		          next: null
		        };

		        if (newBaseQueueLast === null) {
		          newBaseQueueFirst = newBaseQueueLast = clone;
		          newBaseState = newState;
		        } else {
		          newBaseQueueLast = newBaseQueueLast.next = clone;
		        } // Update the remaining priority in the queue.
		        // TODO: Don't need to accumulate this. Instead, we can remove
		        // renderLanes from the original lanes.


		        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
		        markSkippedUpdateLanes(updateLane);
		      } else {
		        // This update does have sufficient priority.
		        if (newBaseQueueLast !== null) {
		          var _clone = {
		            // This update is going to be committed so we never want uncommit
		            // it. Using NoLane works because 0 is a subset of all bitmasks, so
		            // this will never be skipped by the check above.
		            lane: NoLane,
		            action: update.action,
		            eagerReducer: update.eagerReducer,
		            eagerState: update.eagerState,
		            next: null
		          };
		          newBaseQueueLast = newBaseQueueLast.next = _clone;
		        } // Process this update.


		        if (update.eagerReducer === reducer) {
		          // If this update was processed eagerly, and its reducer matches the
		          // current reducer, we can use the eagerly computed state.
		          newState = update.eagerState;
		        } else {
		          var action = update.action;
		          newState = reducer(newState, action);
		        }
		      }

		      update = update.next;
		    } while (update !== null && update !== first);

		    if (newBaseQueueLast === null) {
		      newBaseState = newState;
		    } else {
		      newBaseQueueLast.next = newBaseQueueFirst;
		    } // Mark that the fiber performed work, but only if the new state is
		    // different from the current state.


		    if (!objectIs(newState, hook.memoizedState)) {
		      markWorkInProgressReceivedUpdate();
		    }

		    hook.memoizedState = newState;
		    hook.baseState = newBaseState;
		    hook.baseQueue = newBaseQueueLast;
		    queue.lastRenderedState = newState;
		  }

		  var dispatch = queue.dispatch;
		  return [hook.memoizedState, dispatch];
		}

		function rerenderReducer(reducer, initialArg, init) {
		  var hook = updateWorkInProgressHook();
		  var queue = hook.queue;

		  if (!(queue !== null)) {
		    {
		      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
		    }
		  }

		  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
		  // work-in-progress hook.

		  var dispatch = queue.dispatch;
		  var lastRenderPhaseUpdate = queue.pending;
		  var newState = hook.memoizedState;

		  if (lastRenderPhaseUpdate !== null) {
		    // The queue doesn't persist past this render pass.
		    queue.pending = null;
		    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
		    var update = firstRenderPhaseUpdate;

		    do {
		      // Process this render phase update. We don't have to check the
		      // priority because it will always be the same as the current
		      // render's.
		      var action = update.action;
		      newState = reducer(newState, action);
		      update = update.next;
		    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
		    // different from the current state.


		    if (!objectIs(newState, hook.memoizedState)) {
		      markWorkInProgressReceivedUpdate();
		    }

		    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
		    // the base state unless the queue is empty.
		    // TODO: Not sure if this is the desired semantics, but it's what we
		    // do for gDSFP. I can't remember why.

		    if (hook.baseQueue === null) {
		      hook.baseState = newState;
		    }

		    queue.lastRenderedState = newState;
		  }

		  return [newState, dispatch];
		}

		function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
		  {
		    warnAboutMultipleRenderersDEV(source);
		  }

		  var getVersion = source._getVersion;
		  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

		  var isSafeToReadFromSource = false; // Check the version first.
		  // If this render has already been started with a specific version,
		  // we can use it alone to determine if we can safely read from the source.

		  var currentRenderVersion = getWorkInProgressVersion(source);

		  if (currentRenderVersion !== null) {
		    // It's safe to read if the store hasn't been mutated since the last time
		    // we read something.
		    isSafeToReadFromSource = currentRenderVersion === version;
		  } else {
		    // If there's no version, then this is the first time we've read from the
		    // source during the current render pass, so we need to do a bit more work.
		    // What we need to determine is if there are any hooks that already
		    // subscribed to the source, and if so, whether there are any pending
		    // mutations that haven't been synchronized yet.
		    //
		    // If there are no pending mutations, then `root.mutableReadLanes` will be
		    // empty, and we know we can safely read.
		    //
		    // If there *are* pending mutations, we may still be able to safely read
		    // if the currently rendering lanes are inclusive of the pending mutation
		    // lanes, since that guarantees that the value we're about to read from
		    // the source is consistent with the values that we read during the most
		    // recent mutation.
		    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

		    if (isSafeToReadFromSource) {
		      // If it's safe to read from this source during the current render,
		      // store the version in case other components read from it.
		      // A changed version number will let those components know to throw and restart the render.
		      setWorkInProgressVersion(source, version);
		    }
		  }

		  if (isSafeToReadFromSource) {
		    var snapshot = getSnapshot(source._source);

		    {
		      if (typeof snapshot === 'function') {
		        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
		      }
		    }

		    return snapshot;
		  } else {
		    // This handles the special case of a mutable source being shared between renderers.
		    // In that case, if the source is mutated between the first and second renderer,
		    // The second renderer don't know that it needs to reset the WIP version during unwind,
		    // (because the hook only marks sources as dirty if it's written to their WIP version).
		    // That would cause this tear check to throw again and eventually be visible to the user.
		    // We can avoid this infinite loop by explicitly marking the source as dirty.
		    //
		    // This can lead to tearing in the first renderer when it resumes,
		    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
		    markSourceAsDirty(source);

		    {
		      {
		        throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
		      }
		    }
		  }
		}

		function useMutableSource(hook, source, getSnapshot, subscribe) {
		  var root = getWorkInProgressRoot();

		  if (!(root !== null)) {
		    {
		      throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
		    }
		  }

		  var getVersion = source._getVersion;
		  var version = getVersion(source._source);
		  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

		  var _dispatcher$useState = dispatcher.useState(function () {
		    return readFromUnsubcribedMutableSource(root, source, getSnapshot);
		  }),
		      currentSnapshot = _dispatcher$useState[0],
		      setSnapshot = _dispatcher$useState[1];

		  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
		  // We use it to clear the pending update queue if we have a new source.

		  var stateHook = workInProgressHook;
		  var memoizedState = hook.memoizedState;
		  var refs = memoizedState.refs;
		  var prevGetSnapshot = refs.getSnapshot;
		  var prevSource = memoizedState.source;
		  var prevSubscribe = memoizedState.subscribe;
		  var fiber = currentlyRenderingFiber$1;
		  hook.memoizedState = {
		    refs: refs,
		    source: source,
		    subscribe: subscribe
		  }; // Sync the values needed by our subscription handler after each commit.

		  dispatcher.useEffect(function () {
		    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
		    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
		    // handleChange() below needs to reference the dispatch function without re-subscribing,
		    // so we use a ref to ensure that it always has the latest version.

		    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

		    var maybeNewVersion = getVersion(source._source);

		    if (!objectIs(version, maybeNewVersion)) {
		      var maybeNewSnapshot = getSnapshot(source._source);

		      {
		        if (typeof maybeNewSnapshot === 'function') {
		          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
		        }
		      }

		      if (!objectIs(snapshot, maybeNewSnapshot)) {
		        setSnapshot(maybeNewSnapshot);
		        var lane = requestUpdateLane(fiber);
		        markRootMutableRead(root, lane);
		      } // If the source mutated between render and now,
		      // there may be state updates already scheduled from the old source.
		      // Entangle the updates so that they render in the same batch.


		      markRootEntangled(root, root.mutableReadLanes);
		    }
		  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

		  dispatcher.useEffect(function () {
		    var handleChange = function () {
		      var latestGetSnapshot = refs.getSnapshot;
		      var latestSetSnapshot = refs.setSnapshot;

		      try {
		        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

		        var lane = requestUpdateLane(fiber);
		        markRootMutableRead(root, lane);
		      } catch (error) {
		        // A selector might throw after a source mutation.
		        // e.g. it might try to read from a part of the store that no longer exists.
		        // In this case we should still schedule an update with React.
		        // Worst case the selector will throw again and then an error boundary will handle it.
		        latestSetSnapshot(function () {
		          throw error;
		        });
		      }
		    };

		    var unsubscribe = subscribe(source._source, handleChange);

		    {
		      if (typeof unsubscribe !== 'function') {
		        error('Mutable source subscribe function must return an unsubscribe function.');
		      }
		    }

		    return unsubscribe;
		  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
		  //
		  // If either the source or the subscription have changed we can't can't trust the update queue.
		  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
		  //
		  // If the getSnapshot function changed, we also shouldn't rely on the update queue.
		  // It's possible that the underlying source was mutated between the when the last "change" event fired,
		  // and when the current render (with the new getSnapshot function) is processed.
		  //
		  // In both cases, we need to throw away pending updates (since they are no longer relevant)
		  // and treat reading from the source as we do in the mount case.

		  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
		    // Create a new queue and setState method,
		    // So if there are interleaved updates, they get pushed to the older queue.
		    // When this becomes current, the previous queue and dispatch method will be discarded,
		    // including any interleaving updates that occur.
		    var newQueue = {
		      pending: null,
		      dispatch: null,
		      lastRenderedReducer: basicStateReducer,
		      lastRenderedState: snapshot
		    };
		    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
		    stateHook.queue = newQueue;
		    stateHook.baseQueue = null;
		    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
		    stateHook.memoizedState = stateHook.baseState = snapshot;
		  }

		  return snapshot;
		}

		function mountMutableSource(source, getSnapshot, subscribe) {
		  var hook = mountWorkInProgressHook();
		  hook.memoizedState = {
		    refs: {
		      getSnapshot: getSnapshot,
		      setSnapshot: null
		    },
		    source: source,
		    subscribe: subscribe
		  };
		  return useMutableSource(hook, source, getSnapshot, subscribe);
		}

		function updateMutableSource(source, getSnapshot, subscribe) {
		  var hook = updateWorkInProgressHook();
		  return useMutableSource(hook, source, getSnapshot, subscribe);
		}

		function mountState(initialState) {
		  var hook = mountWorkInProgressHook();

		  if (typeof initialState === 'function') {
		    // $FlowFixMe: Flow doesn't like mixed types
		    initialState = initialState();
		  }

		  hook.memoizedState = hook.baseState = initialState;
		  var queue = hook.queue = {
		    pending: null,
		    dispatch: null,
		    lastRenderedReducer: basicStateReducer,
		    lastRenderedState: initialState
		  };
		  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
		  return [hook.memoizedState, dispatch];
		}

		function updateState(initialState) {
		  return updateReducer(basicStateReducer);
		}

		function rerenderState(initialState) {
		  return rerenderReducer(basicStateReducer);
		}

		function pushEffect(tag, create, destroy, deps) {
		  var effect = {
		    tag: tag,
		    create: create,
		    destroy: destroy,
		    deps: deps,
		    // Circular
		    next: null
		  };
		  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

		  if (componentUpdateQueue === null) {
		    componentUpdateQueue = createFunctionComponentUpdateQueue();
		    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
		    componentUpdateQueue.lastEffect = effect.next = effect;
		  } else {
		    var lastEffect = componentUpdateQueue.lastEffect;

		    if (lastEffect === null) {
		      componentUpdateQueue.lastEffect = effect.next = effect;
		    } else {
		      var firstEffect = lastEffect.next;
		      lastEffect.next = effect;
		      effect.next = firstEffect;
		      componentUpdateQueue.lastEffect = effect;
		    }
		  }

		  return effect;
		}

		function mountRef(initialValue) {
		  var hook = mountWorkInProgressHook();
		  var ref = {
		    current: initialValue
		  };

		  {
		    Object.seal(ref);
		  }

		  hook.memoizedState = ref;
		  return ref;
		}

		function updateRef(initialValue) {
		  var hook = updateWorkInProgressHook();
		  return hook.memoizedState;
		}

		function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  currentlyRenderingFiber$1.flags |= fiberFlags;
		  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
		}

		function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var destroy = undefined;

		  if (currentHook !== null) {
		    var prevEffect = currentHook.memoizedState;
		    destroy = prevEffect.destroy;

		    if (nextDeps !== null) {
		      var prevDeps = prevEffect.deps;

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        pushEffect(hookFlags, create, destroy, nextDeps);
		        return;
		      }
		    }
		  }

		  currentlyRenderingFiber$1.flags |= fiberFlags;
		  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
		}

		function mountEffect(create, deps) {
		  {
		    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		    if ('undefined' !== typeof jest) {
		      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
		    }
		  }

		  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
		}

		function updateEffect(create, deps) {
		  {
		    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		    if ('undefined' !== typeof jest) {
		      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
		    }
		  }

		  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
		}

		function mountLayoutEffect(create, deps) {
		  return mountEffectImpl(Update, Layout, create, deps);
		}

		function updateLayoutEffect(create, deps) {
		  return updateEffectImpl(Update, Layout, create, deps);
		}

		function imperativeHandleEffect(create, ref) {
		  if (typeof ref === 'function') {
		    var refCallback = ref;

		    var _inst = create();

		    refCallback(_inst);
		    return function () {
		      refCallback(null);
		    };
		  } else if (ref !== null && ref !== undefined) {
		    var refObject = ref;

		    {
		      if (!refObject.hasOwnProperty('current')) {
		        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
		      }
		    }

		    var _inst2 = create();

		    refObject.current = _inst2;
		    return function () {
		      refObject.current = null;
		    };
		  }
		}

		function mountImperativeHandle(ref, create, deps) {
		  {
		    if (typeof create !== 'function') {
		      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
		    }
		  } // TODO: If deps are provided, should we skip comparing the ref itself?


		  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
		  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
		}

		function updateImperativeHandle(ref, create, deps) {
		  {
		    if (typeof create !== 'function') {
		      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
		    }
		  } // TODO: If deps are provided, should we skip comparing the ref itself?


		  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
		  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
		}

		function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
		  // The react-debug-hooks package injects its own implementation
		  // so that e.g. DevTools can display custom hook values.
		}

		var updateDebugValue = mountDebugValue;

		function mountCallback(callback, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  hook.memoizedState = [callback, nextDeps];
		  return callback;
		}

		function updateCallback(callback, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var prevState = hook.memoizedState;

		  if (prevState !== null) {
		    if (nextDeps !== null) {
		      var prevDeps = prevState[1];

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        return prevState[0];
		      }
		    }
		  }

		  hook.memoizedState = [callback, nextDeps];
		  return callback;
		}

		function mountMemo(nextCreate, deps) {
		  var hook = mountWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var nextValue = nextCreate();
		  hook.memoizedState = [nextValue, nextDeps];
		  return nextValue;
		}

		function updateMemo(nextCreate, deps) {
		  var hook = updateWorkInProgressHook();
		  var nextDeps = deps === undefined ? null : deps;
		  var prevState = hook.memoizedState;

		  if (prevState !== null) {
		    // Assume these are defined. If they're not, areHookInputsEqual will warn.
		    if (nextDeps !== null) {
		      var prevDeps = prevState[1];

		      if (areHookInputsEqual(nextDeps, prevDeps)) {
		        return prevState[0];
		      }
		    }
		  }

		  var nextValue = nextCreate();
		  hook.memoizedState = [nextValue, nextDeps];
		  return nextValue;
		}

		function mountDeferredValue(value) {
		  var _mountState = mountState(value),
		      prevValue = _mountState[0],
		      setValue = _mountState[1];

		  mountEffect(function () {
		    var prevTransition = ReactCurrentBatchConfig$1.transition;
		    ReactCurrentBatchConfig$1.transition = 1;

		    try {
		      setValue(value);
		    } finally {
		      ReactCurrentBatchConfig$1.transition = prevTransition;
		    }
		  }, [value]);
		  return prevValue;
		}

		function updateDeferredValue(value) {
		  var _updateState = updateState(),
		      prevValue = _updateState[0],
		      setValue = _updateState[1];

		  updateEffect(function () {
		    var prevTransition = ReactCurrentBatchConfig$1.transition;
		    ReactCurrentBatchConfig$1.transition = 1;

		    try {
		      setValue(value);
		    } finally {
		      ReactCurrentBatchConfig$1.transition = prevTransition;
		    }
		  }, [value]);
		  return prevValue;
		}

		function rerenderDeferredValue(value) {
		  var _rerenderState = rerenderState(),
		      prevValue = _rerenderState[0],
		      setValue = _rerenderState[1];

		  updateEffect(function () {
		    var prevTransition = ReactCurrentBatchConfig$1.transition;
		    ReactCurrentBatchConfig$1.transition = 1;

		    try {
		      setValue(value);
		    } finally {
		      ReactCurrentBatchConfig$1.transition = prevTransition;
		    }
		  }, [value]);
		  return prevValue;
		}

		function startTransition(setPending, callback) {
		  var priorityLevel = getCurrentPriorityLevel();

		  {
		    runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
		      setPending(true);
		    });
		    runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
		      var prevTransition = ReactCurrentBatchConfig$1.transition;
		      ReactCurrentBatchConfig$1.transition = 1;

		      try {
		        setPending(false);
		        callback();
		      } finally {
		        ReactCurrentBatchConfig$1.transition = prevTransition;
		      }
		    });
		  }
		}

		function mountTransition() {
		  var _mountState2 = mountState(false),
		      isPending = _mountState2[0],
		      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
		  // never changes.


		  var start = startTransition.bind(null, setPending);
		  mountRef(start);
		  return [start, isPending];
		}

		function updateTransition() {
		  var _updateState2 = updateState(),
		      isPending = _updateState2[0];

		  var startRef = updateRef();
		  var start = startRef.current;
		  return [start, isPending];
		}

		function rerenderTransition() {
		  var _rerenderState2 = rerenderState(),
		      isPending = _rerenderState2[0];

		  var startRef = updateRef();
		  var start = startRef.current;
		  return [start, isPending];
		}

		var isUpdatingOpaqueValueInRenderPhase = false;
		function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
		  {
		    return isUpdatingOpaqueValueInRenderPhase;
		  }
		}

		function warnOnOpaqueIdentifierAccessInDEV(fiber) {
		  {
		    // TODO: Should warn in effects and callbacks, too
		    var name = getComponentName(fiber.type) || 'Unknown';

		    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
		      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

		      didWarnAboutUseOpaqueIdentifier[name] = true;
		    }
		  }
		}

		function mountOpaqueIdentifier() {
		  var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

		  if (getIsHydrating()) {
		    var didUpgrade = false;
		    var fiber = currentlyRenderingFiber$1;

		    var readValue = function () {
		      if (!didUpgrade) {
		        // Only upgrade once. This works even inside the render phase because
		        // the update is added to a shared queue, which outlasts the
		        // in-progress render.
		        didUpgrade = true;

		        {
		          isUpdatingOpaqueValueInRenderPhase = true;
		          setId(makeId());
		          isUpdatingOpaqueValueInRenderPhase = false;
		          warnOnOpaqueIdentifierAccessInDEV(fiber);
		        }
		      }

		      {
		        {
		          throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
		        }
		      }
		    };

		    var id = makeOpaqueHydratingObject(readValue);
		    var setId = mountState(id)[1];

		    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
		      currentlyRenderingFiber$1.flags |= Update | Passive;
		      pushEffect(HasEffect | Passive$1, function () {
		        setId(makeId());
		      }, undefined, null);
		    }

		    return id;
		  } else {
		    var _id = makeId();

		    mountState(_id);
		    return _id;
		  }
		}

		function updateOpaqueIdentifier() {
		  var id = updateState()[0];
		  return id;
		}

		function rerenderOpaqueIdentifier() {
		  var id = rerenderState()[0];
		  return id;
		}

		function dispatchAction(fiber, queue, action) {
		  {
		    if (typeof arguments[3] === 'function') {
		      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
		    }
		  }

		  var eventTime = requestEventTime();
		  var lane = requestUpdateLane(fiber);
		  var update = {
		    lane: lane,
		    action: action,
		    eagerReducer: null,
		    eagerState: null,
		    next: null
		  }; // Append the update to the end of the list.

		  var pending = queue.pending;

		  if (pending === null) {
		    // This is the first update. Create a circular list.
		    update.next = update;
		  } else {
		    update.next = pending.next;
		    pending.next = update;
		  }

		  queue.pending = update;
		  var alternate = fiber.alternate;

		  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
		    // This is a render phase update. Stash it in a lazily-created map of
		    // queue -> linked list of updates. After this render pass, we'll restart
		    // and apply the stashed updates on top of the work-in-progress hook.
		    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
		  } else {
		    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
		      // The queue is currently empty, which means we can eagerly compute the
		      // next state before entering the render phase. If the new state is the
		      // same as the current state, we may be able to bail out entirely.
		      var lastRenderedReducer = queue.lastRenderedReducer;

		      if (lastRenderedReducer !== null) {
		        var prevDispatcher;

		        {
		          prevDispatcher = ReactCurrentDispatcher$1.current;
		          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        }

		        try {
		          var currentState = queue.lastRenderedState;
		          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
		          // it, on the update object. If the reducer hasn't changed by the
		          // time we enter the render phase, then the eager state can be used
		          // without calling the reducer again.

		          update.eagerReducer = lastRenderedReducer;
		          update.eagerState = eagerState;

		          if (objectIs(eagerState, currentState)) {
		            // Fast path. We can bail out without scheduling React to re-render.
		            // It's still possible that we'll need to rebase this update later,
		            // if the component re-renders for a different reason and by that
		            // time the reducer has changed.
		            return;
		          }
		        } catch (error) {// Suppress the error. It will throw again in the render phase.
		        } finally {
		          {
		            ReactCurrentDispatcher$1.current = prevDispatcher;
		          }
		        }
		      }
		    }

		    {
		      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		      if ('undefined' !== typeof jest) {
		        warnIfNotScopedWithMatchingAct(fiber);
		        warnIfNotCurrentlyActingUpdatesInDev(fiber);
		      }
		    }

		    scheduleUpdateOnFiber(fiber, lane, eventTime);
		  }
		}

		var ContextOnlyDispatcher = {
		  readContext: readContext,
		  useCallback: throwInvalidHookError,
		  useContext: throwInvalidHookError,
		  useEffect: throwInvalidHookError,
		  useImperativeHandle: throwInvalidHookError,
		  useLayoutEffect: throwInvalidHookError,
		  useMemo: throwInvalidHookError,
		  useReducer: throwInvalidHookError,
		  useRef: throwInvalidHookError,
		  useState: throwInvalidHookError,
		  useDebugValue: throwInvalidHookError,
		  useDeferredValue: throwInvalidHookError,
		  useTransition: throwInvalidHookError,
		  useMutableSource: throwInvalidHookError,
		  useOpaqueIdentifier: throwInvalidHookError,
		  unstable_isNewReconciler: enableNewReconciler
		};
		var HooksDispatcherOnMountInDEV = null;
		var HooksDispatcherOnMountWithHookTypesInDEV = null;
		var HooksDispatcherOnUpdateInDEV = null;
		var HooksDispatcherOnRerenderInDEV = null;
		var InvalidNestedHooksDispatcherOnMountInDEV = null;
		var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
		var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

		{
		  var warnInvalidContextAccess = function () {
		    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
		  };

		  var warnInvalidHookAccess = function () {
		    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
		  };

		  HooksDispatcherOnMountInDEV = {
		    readContext: function (context, observedBits) {
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      mountHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      mountHookTypesDev();
		      checkDepsAreArrayDev(deps);
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      mountHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      mountHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      mountHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      mountHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      mountHookTypesDev();
		      return mountMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      mountHookTypesDev();
		      return mountOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  HooksDispatcherOnMountWithHookTypesInDEV = {
		    readContext: function (context, observedBits) {
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return mountMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      updateHookTypesDev();
		      return mountOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  HooksDispatcherOnUpdateInDEV = {
		    readContext: function (context, observedBits) {
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return updateDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return updateTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return updateMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      updateHookTypesDev();
		      return updateOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  HooksDispatcherOnRerenderInDEV = {
		    readContext: function (context, observedBits) {
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      updateHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return rerenderReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

		      try {
		        return rerenderState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      updateHookTypesDev();
		      return rerenderDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      updateHookTypesDev();
		      return rerenderTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      updateHookTypesDev();
		      return updateMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      updateHookTypesDev();
		      return rerenderOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  InvalidNestedHooksDispatcherOnMountInDEV = {
		    readContext: function (context, observedBits) {
		      warnInvalidContextAccess();
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountRef(initialValue);
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

		      try {
		        return mountState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  InvalidNestedHooksDispatcherOnUpdateInDEV = {
		    readContext: function (context, observedBits) {
		      warnInvalidContextAccess();
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		  InvalidNestedHooksDispatcherOnRerenderInDEV = {
		    readContext: function (context, observedBits) {
		      warnInvalidContextAccess();
		      return readContext(context, observedBits);
		    },
		    useCallback: function (callback, deps) {
		      currentHookNameInDev = 'useCallback';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateCallback(callback, deps);
		    },
		    useContext: function (context, observedBits) {
		      currentHookNameInDev = 'useContext';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return readContext(context, observedBits);
		    },
		    useEffect: function (create, deps) {
		      currentHookNameInDev = 'useEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateEffect(create, deps);
		    },
		    useImperativeHandle: function (ref, create, deps) {
		      currentHookNameInDev = 'useImperativeHandle';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateImperativeHandle(ref, create, deps);
		    },
		    useLayoutEffect: function (create, deps) {
		      currentHookNameInDev = 'useLayoutEffect';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateLayoutEffect(create, deps);
		    },
		    useMemo: function (create, deps) {
		      currentHookNameInDev = 'useMemo';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return updateMemo(create, deps);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useReducer: function (reducer, initialArg, init) {
		      currentHookNameInDev = 'useReducer';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return rerenderReducer(reducer, initialArg, init);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useRef: function (initialValue) {
		      currentHookNameInDev = 'useRef';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateRef();
		    },
		    useState: function (initialState) {
		      currentHookNameInDev = 'useState';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      var prevDispatcher = ReactCurrentDispatcher$1.current;
		      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

		      try {
		        return rerenderState(initialState);
		      } finally {
		        ReactCurrentDispatcher$1.current = prevDispatcher;
		      }
		    },
		    useDebugValue: function (value, formatterFn) {
		      currentHookNameInDev = 'useDebugValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateDebugValue();
		    },
		    useDeferredValue: function (value) {
		      currentHookNameInDev = 'useDeferredValue';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderDeferredValue(value);
		    },
		    useTransition: function () {
		      currentHookNameInDev = 'useTransition';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderTransition();
		    },
		    useMutableSource: function (source, getSnapshot, subscribe) {
		      currentHookNameInDev = 'useMutableSource';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateMutableSource(source, getSnapshot, subscribe);
		    },
		    useOpaqueIdentifier: function () {
		      currentHookNameInDev = 'useOpaqueIdentifier';
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderOpaqueIdentifier();
		    },
		    unstable_isNewReconciler: enableNewReconciler
		  };
		}

		var now$2 = Scheduler.unstable_now;
		var commitTime = 0;
		var profilerStartTime = -1;

		function getCommitTime() {
		  return commitTime;
		}

		function recordCommitTime() {

		  commitTime = now$2();
		}

		function startProfilerTimer(fiber) {

		  profilerStartTime = now$2();

		  if (fiber.actualStartTime < 0) {
		    fiber.actualStartTime = now$2();
		  }
		}

		function stopProfilerTimerIfRunning(fiber) {

		  profilerStartTime = -1;
		}

		function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

		  if (profilerStartTime >= 0) {
		    var elapsedTime = now$2() - profilerStartTime;
		    fiber.actualDuration += elapsedTime;

		    if (overrideBaseTime) {
		      fiber.selfBaseDuration = elapsedTime;
		    }

		    profilerStartTime = -1;
		  }
		}

		function transferActualDuration(fiber) {
		  // Transfer time spent rendering these children so we don't lose it
		  // after we rerender. This is used as a helper in special cases
		  // where we should count the work of multiple passes.
		  var child = fiber.child;

		  while (child) {
		    fiber.actualDuration += child.actualDuration;
		    child = child.sibling;
		  }
		}

		var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
		var didReceiveUpdate = false;
		var didWarnAboutBadClass;
		var didWarnAboutModulePatternComponent;
		var didWarnAboutContextTypeOnFunctionComponent;
		var didWarnAboutGetDerivedStateOnFunctionComponent;
		var didWarnAboutFunctionRefs;
		var didWarnAboutReassigningProps;
		var didWarnAboutRevealOrder;
		var didWarnAboutTailOptions;

		{
		  didWarnAboutBadClass = {};
		  didWarnAboutModulePatternComponent = {};
		  didWarnAboutContextTypeOnFunctionComponent = {};
		  didWarnAboutGetDerivedStateOnFunctionComponent = {};
		  didWarnAboutFunctionRefs = {};
		  didWarnAboutReassigningProps = false;
		  didWarnAboutRevealOrder = {};
		  didWarnAboutTailOptions = {};
		}

		function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
		  if (current === null) {
		    // If this is a fresh new component that hasn't been rendered yet, we
		    // won't update its child set by applying minimal side-effects. Instead,
		    // we will add them all to the child before it gets rendered. That means
		    // we can optimize this reconciliation pass by not tracking side-effects.
		    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
		  } else {
		    // If the current child is the same as the work in progress, it means that
		    // we haven't yet started any work on these children. Therefore, we use
		    // the clone algorithm to create a copy of all the current children.
		    // If we had any progressed work already, that is invalid at this point so
		    // let's throw it out.
		    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
		  }
		}

		function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
		  // This function is fork of reconcileChildren. It's used in cases where we
		  // want to reconcile without matching against the existing set. This has the
		  // effect of all current children being unmounted; even if the type and key
		  // are the same, the old child is unmounted and a new child is created.
		  //
		  // To do this, we're going to go through the reconcile algorithm twice. In
		  // the first pass, we schedule a deletion for all the current children by
		  // passing null.
		  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
		  // pass null in place of where we usually pass the current child set. This has
		  // the effect of remounting all children regardless of whether their
		  // identities match.

		  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
		}

		function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
		  // TODO: current can be non-null here even if the component
		  // hasn't yet mounted. This happens after the first render suspends.
		  // We'll need to figure out if this is fine or can cause issues.
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentName(Component));
		      }
		    }
		  }

		  var render = Component.render;
		  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

		  var nextChildren;
		  prepareToReadContext(workInProgress, renderLanes);

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

		    if ( workInProgress.mode & StrictMode) {
		      disableLogs();

		      try {
		        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
		      } finally {
		        reenableLogs();
		      }
		    }

		    setIsRendering(false);
		  }

		  if (current !== null && !didReceiveUpdate) {
		    bailoutHooks(current, workInProgress, renderLanes);
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
		  if (current === null) {
		    var type = Component.type;

		    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
		    Component.defaultProps === undefined) {
		      var resolvedType = type;

		      {
		        resolvedType = resolveFunctionForHotReloading(type);
		      } // If this is a plain function component without default props,
		      // and with only the default shallow comparison, we upgrade it
		      // to a SimpleMemoComponent to allow fast path updates.


		      workInProgress.tag = SimpleMemoComponent;
		      workInProgress.type = resolvedType;

		      {
		        validateFunctionComponentInDev(workInProgress, type);
		      }

		      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
		    }

		    {
		      var innerPropTypes = type.propTypes;

		      if (innerPropTypes) {
		        // Inner memo component props aren't currently validated in createElement.
		        // We could move it there, but we'd still need this for lazy code path.
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentName(type));
		      }
		    }

		    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
		    child.ref = workInProgress.ref;
		    child.return = workInProgress;
		    workInProgress.child = child;
		    return child;
		  }

		  {
		    var _type = Component.type;
		    var _innerPropTypes = _type.propTypes;

		    if (_innerPropTypes) {
		      // Inner memo component props aren't currently validated in createElement.
		      // We could move it there, but we'd still need this for lazy code path.
		      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
		      'prop', getComponentName(_type));
		    }
		  }

		  var currentChild = current.child; // This is always exactly one child

		  if (!includesSomeLane(updateLanes, renderLanes)) {
		    // This will be the props with resolved defaultProps,
		    // unlike current.memoizedProps which will be the unresolved ones.
		    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

		    var compare = Component.compare;
		    compare = compare !== null ? compare : shallowEqual;

		    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		    }
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  var newChild = createWorkInProgress(currentChild, nextProps);
		  newChild.ref = workInProgress.ref;
		  newChild.return = workInProgress;
		  workInProgress.child = newChild;
		  return newChild;
		}

		function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
		  // TODO: current can be non-null here even if the component
		  // hasn't yet mounted. This happens when the inner render suspends.
		  // We'll need to figure out if this is fine or can cause issues.
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var outerMemoType = workInProgress.elementType;

		      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
		        // We warn when you define propTypes on lazy()
		        // so let's just skip over it to find memo() outer wrapper.
		        // Inner props for memo are validated later.
		        var lazyComponent = outerMemoType;
		        var payload = lazyComponent._payload;
		        var init = lazyComponent._init;

		        try {
		          outerMemoType = init(payload);
		        } catch (x) {
		          outerMemoType = null;
		        } // Inner propTypes will be validated in the function component path.


		        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

		        if (outerPropTypes) {
		          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
		          'prop', getComponentName(outerMemoType));
		        }
		      }
		    }
		  }

		  if (current !== null) {
		    var prevProps = current.memoizedProps;

		    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
		     workInProgress.type === current.type )) {
		      didReceiveUpdate = false;

		      if (!includesSomeLane(renderLanes, updateLanes)) {
		        // The pending lanes were cleared at the beginning of beginWork. We're
		        // about to bail out, but there might be other lanes that weren't
		        // included in the current render. Usually, the priority level of the
		        // remaining updates is accumlated during the evaluation of the
		        // component (i.e. when processing the update queue). But since since
		        // we're bailing out early *without* evaluating the component, we need
		        // to account for it here, too. Reset to the value of the current fiber.
		        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
		        // because a MemoComponent fiber does not have hooks or an update queue;
		        // rather, it wraps around an inner component, which may or may not
		        // contains hooks.
		        // TODO: Move the reset at in beginWork out of the common path so that
		        // this is no longer necessary.
		        workInProgress.lanes = current.lanes;
		        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
		        // This is a special case that only exists for legacy mode.
		        // See https://github.com/facebook/react/pull/19216.
		        didReceiveUpdate = true;
		      }
		    }
		  }

		  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
		}

		function updateOffscreenComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps;
		  var nextChildren = nextProps.children;
		  var prevState = current !== null ? current.memoizedState : null;

		  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
		    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
		      // In legacy sync mode, don't defer the subtree. Render it now.
		      // TODO: Figure out what we should do in Blocking mode.
		      var nextState = {
		        baseLanes: NoLanes
		      };
		      workInProgress.memoizedState = nextState;
		      pushRenderLanes(workInProgress, renderLanes);
		    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
		      var nextBaseLanes;

		      if (prevState !== null) {
		        var prevBaseLanes = prevState.baseLanes;
		        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
		      } else {
		        nextBaseLanes = renderLanes;
		      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


		      {
		        markSpawnedWork(OffscreenLane);
		      }

		      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
		      var _nextState = {
		        baseLanes: nextBaseLanes
		      };
		      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
		      // to avoid a push/pop misalignment.

		      pushRenderLanes(workInProgress, nextBaseLanes);
		      return null;
		    } else {
		      // Rendering at offscreen, so we can clear the base lanes.
		      var _nextState2 = {
		        baseLanes: NoLanes
		      };
		      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

		      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
		      pushRenderLanes(workInProgress, subtreeRenderLanes);
		    }
		  } else {
		    var _subtreeRenderLanes;

		    if (prevState !== null) {
		      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

		      workInProgress.memoizedState = null;
		    } else {
		      // We weren't previously hidden, and we still aren't, so there's nothing
		      // special to do. Need to push to the stack regardless, though, to avoid
		      // a push/pop misalignment.
		      _subtreeRenderLanes = renderLanes;
		    }

		    pushRenderLanes(workInProgress, _subtreeRenderLanes);
		  }

		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		} // Note: These happen to have identical begin phases, for now. We shouldn't hold
		// ourselves to this constraint, though. If the behavior diverges, we should
		// fork the function.


		var updateLegacyHiddenComponent = updateOffscreenComponent;

		function updateFragment(current, workInProgress, renderLanes) {
		  var nextChildren = workInProgress.pendingProps;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateMode(current, workInProgress, renderLanes) {
		  var nextChildren = workInProgress.pendingProps.children;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateProfiler(current, workInProgress, renderLanes) {
		  {
		    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
		    // These are reset during render to allow the DevTools commit hook a chance to read them,

		    var stateNode = workInProgress.stateNode;
		    stateNode.effectDuration = 0;
		    stateNode.passiveEffectDuration = 0;
		  }

		  var nextProps = workInProgress.pendingProps;
		  var nextChildren = nextProps.children;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function markRef(current, workInProgress) {
		  var ref = workInProgress.ref;

		  if (current === null && ref !== null || current !== null && current.ref !== ref) {
		    // Schedule a Ref effect
		    workInProgress.flags |= Ref;
		  }
		}

		function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentName(Component));
		      }
		    }
		  }

		  var context;

		  {
		    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
		    context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  var nextChildren;
		  prepareToReadContext(workInProgress, renderLanes);

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

		    if ( workInProgress.mode & StrictMode) {
		      disableLogs();

		      try {
		        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
		      } finally {
		        reenableLogs();
		      }
		    }

		    setIsRendering(false);
		  }

		  if (current !== null && !didReceiveUpdate) {
		    bailoutHooks(current, workInProgress, renderLanes);
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
		  {
		    if (workInProgress.type !== workInProgress.elementType) {
		      // Lazy component props can't be validated in createElement
		      // because they're only guaranteed to be resolved here.
		      var innerPropTypes = Component.propTypes;

		      if (innerPropTypes) {
		        checkPropTypes(innerPropTypes, nextProps, // Resolved props
		        'prop', getComponentName(Component));
		      }
		    }
		  } // Push context providers early to prevent context stack mismatches.
		  // During mounting we don't know the child context yet as the instance doesn't exist.
		  // We will invalidate the child context in finishClassComponent() right after rendering.


		  var hasContext;

		  if (isContextProvider(Component)) {
		    hasContext = true;
		    pushContextProvider(workInProgress);
		  } else {
		    hasContext = false;
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var instance = workInProgress.stateNode;
		  var shouldUpdate;

		  if (instance === null) {
		    if (current !== null) {
		      // A class component without an instance only mounts if it suspended
		      // inside a non-concurrent tree, in an inconsistent state. We want to
		      // treat it like a new mount, even though an empty version of it already
		      // committed. Disconnect the alternate pointers.
		      current.alternate = null;
		      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

		      workInProgress.flags |= Placement;
		    } // In the initial pass we might need to construct the instance.


		    constructClassInstance(workInProgress, Component, nextProps);
		    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
		    shouldUpdate = true;
		  } else if (current === null) {
		    // In a resume, we'll already have an instance we can reuse.
		    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
		  } else {
		    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
		  }

		  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

		  {
		    var inst = workInProgress.stateNode;

		    if (shouldUpdate && inst.props !== nextProps) {
		      if (!didWarnAboutReassigningProps) {
		        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
		      }

		      didWarnAboutReassigningProps = true;
		    }
		  }

		  return nextUnitOfWork;
		}

		function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
		  // Refs should update even if shouldComponentUpdate returns false
		  markRef(current, workInProgress);
		  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

		  if (!shouldUpdate && !didCaptureError) {
		    // Context providers should defer to sCU for rendering
		    if (hasContext) {
		      invalidateContextProvider(workInProgress, Component, false);
		    }

		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }

		  var instance = workInProgress.stateNode; // Rerender

		  ReactCurrentOwner$1.current = workInProgress;
		  var nextChildren;

		  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
		    // If we captured an error, but getDerivedStateFromError is not defined,
		    // unmount all the children. componentDidCatch will schedule an update to
		    // re-render a fallback. This is temporary until we migrate everyone to
		    // the new API.
		    // TODO: Warn in a future release.
		    nextChildren = null;

		    {
		      stopProfilerTimerIfRunning();
		    }
		  } else {
		    {
		      setIsRendering(true);
		      nextChildren = instance.render();

		      if ( workInProgress.mode & StrictMode) {
		        disableLogs();

		        try {
		          instance.render();
		        } finally {
		          reenableLogs();
		        }
		      }

		      setIsRendering(false);
		    }
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;

		  if (current !== null && didCaptureError) {
		    // If we're recovering from an error, reconcile without reusing any of
		    // the existing children. Conceptually, the normal children and the children
		    // that are shown on error are two different sets, so we shouldn't reuse
		    // normal children even if their identities match.
		    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
		  } else {
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  } // Memoize state using the values we just used to render.
		  // TODO: Restructure so we never read values from the instance.


		  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

		  if (hasContext) {
		    invalidateContextProvider(workInProgress, Component, true);
		  }

		  return workInProgress.child;
		}

		function pushHostRootContext(workInProgress) {
		  var root = workInProgress.stateNode;

		  if (root.pendingContext) {
		    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
		  } else if (root.context) {
		    // Should always be set
		    pushTopLevelContextObject(workInProgress, root.context, false);
		  }

		  pushHostContainer(workInProgress, root.containerInfo);
		}

		function updateHostRoot(current, workInProgress, renderLanes) {
		  pushHostRootContext(workInProgress);
		  var updateQueue = workInProgress.updateQueue;

		  if (!(current !== null && updateQueue !== null)) {
		    {
		      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }

		  var nextProps = workInProgress.pendingProps;
		  var prevState = workInProgress.memoizedState;
		  var prevChildren = prevState !== null ? prevState.element : null;
		  cloneUpdateQueue(current, workInProgress);
		  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
		  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
		  // being called "element".

		  var nextChildren = nextState.element;

		  if (nextChildren === prevChildren) {
		    resetHydrationState();
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }

		  var root = workInProgress.stateNode;

		  if (root.hydrate && enterHydrationState(workInProgress)) {
		    // If we don't have any current children this might be the first pass.
		    // We always try to hydrate. If this isn't a hydration pass there won't
		    // be any children to hydrate which is effectively the same thing as
		    // not hydrating.
		    if (supportsHydration) {
		      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

		      if (mutableSourceEagerHydrationData != null) {
		        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
		          var mutableSource = mutableSourceEagerHydrationData[i];
		          var version = mutableSourceEagerHydrationData[i + 1];
		          setWorkInProgressVersion(mutableSource, version);
		        }
		      }
		    }

		    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
		    workInProgress.child = child;
		    var node = child;

		    while (node) {
		      // Mark each child as hydrating. This is a fast path to know whether this
		      // tree is part of a hydrating tree. This is used to determine if a child
		      // node has fully mounted yet, and for scheduling event replaying.
		      // Conceptually this is similar to Placement in that a new subtree is
		      // inserted into the React tree here. It just happens to not need DOM
		      // mutations because it already exists.
		      node.flags = node.flags & ~Placement | Hydrating;
		      node = node.sibling;
		    }
		  } else {
		    // Otherwise reset hydration state in case we aborted and resumed another
		    // root.
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		    resetHydrationState();
		  }

		  return workInProgress.child;
		}

		function updateHostComponent(current, workInProgress, renderLanes) {
		  pushHostContext(workInProgress);

		  if (current === null) {
		    tryToClaimNextHydratableInstance(workInProgress);
		  }

		  var type = workInProgress.type;
		  var nextProps = workInProgress.pendingProps;
		  var prevProps = current !== null ? current.memoizedProps : null;
		  var nextChildren = nextProps.children;
		  var isDirectTextChild = shouldSetTextContent(type, nextProps);

		  if (isDirectTextChild) {
		    // We special case a direct text child of a host node. This is a common
		    // case. We won't handle it as a reified child. We will instead handle
		    // this in the host environment that also has access to this prop. That
		    // avoids allocating another HostText fiber and traversing it.
		    nextChildren = null;
		  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
		    // If we're switching from a direct text child to a normal child, or to
		    // empty, we need to schedule the text content to be reset.
		    workInProgress.flags |= ContentReset;
		  }

		  markRef(current, workInProgress);
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}

		function updateHostText(current, workInProgress) {
		  if (current === null) {
		    tryToClaimNextHydratableInstance(workInProgress);
		  } // Nothing to do here. This is terminal. We'll do the completion step
		  // immediately after.


		  return null;
		}

		function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
		  if (_current !== null) {
		    // A lazy component only mounts if it suspended inside a non-
		    // concurrent tree, in an inconsistent state. We want to treat it like
		    // a new mount, even though an empty version of it already committed.
		    // Disconnect the alternate pointers.
		    _current.alternate = null;
		    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

		    workInProgress.flags |= Placement;
		  }

		  var props = workInProgress.pendingProps;
		  var lazyComponent = elementType;
		  var payload = lazyComponent._payload;
		  var init = lazyComponent._init;
		  var Component = init(payload); // Store the unwrapped component in the type.

		  workInProgress.type = Component;
		  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
		  var resolvedProps = resolveDefaultProps(Component, props);
		  var child;

		  switch (resolvedTag) {
		    case FunctionComponent:
		      {
		        {
		          validateFunctionComponentInDev(workInProgress, Component);
		          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
		        }

		        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case ClassComponent:
		      {
		        {
		          workInProgress.type = Component = resolveClassForHotReloading(Component);
		        }

		        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case ForwardRef:
		      {
		        {
		          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
		        }

		        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
		        return child;
		      }

		    case MemoComponent:
		      {
		        {
		          if (workInProgress.type !== workInProgress.elementType) {
		            var outerPropTypes = Component.propTypes;

		            if (outerPropTypes) {
		              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
		              'prop', getComponentName(Component));
		            }
		          }
		        }

		        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
		        updateLanes, renderLanes);
		        return child;
		      }
		  }

		  var hint = '';

		  {
		    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
		      hint = ' Did you wrap a component in React.lazy() more than once?';
		    }
		  } // This message intentionally doesn't mention ForwardRef or MemoComponent
		  // because the fact that it's a separate type of work is an
		  // implementation detail.


		  {
		    {
		      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
		    }
		  }
		}

		function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
		  if (_current !== null) {
		    // An incomplete component only mounts if it suspended inside a non-
		    // concurrent tree, in an inconsistent state. We want to treat it like
		    // a new mount, even though an empty version of it already committed.
		    // Disconnect the alternate pointers.
		    _current.alternate = null;
		    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

		    workInProgress.flags |= Placement;
		  } // Promote the fiber to a class and try rendering again.


		  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
		  // Push context providers early to prevent context stack mismatches.
		  // During mounting we don't know the child context yet as the instance doesn't exist.
		  // We will invalidate the child context in finishClassComponent() right after rendering.

		  var hasContext;

		  if (isContextProvider(Component)) {
		    hasContext = true;
		    pushContextProvider(workInProgress);
		  } else {
		    hasContext = false;
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  constructClassInstance(workInProgress, Component, nextProps);
		  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
		  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
		}

		function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
		  if (_current !== null) {
		    // An indeterminate component only mounts if it suspended inside a non-
		    // concurrent tree, in an inconsistent state. We want to treat it like
		    // a new mount, even though an empty version of it already committed.
		    // Disconnect the alternate pointers.
		    _current.alternate = null;
		    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

		    workInProgress.flags |= Placement;
		  }

		  var props = workInProgress.pendingProps;
		  var context;

		  {
		    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
		    context = getMaskedContext(workInProgress, unmaskedContext);
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var value;

		  {
		    if (Component.prototype && typeof Component.prototype.render === 'function') {
		      var componentName = getComponentName(Component) || 'Unknown';

		      if (!didWarnAboutBadClass[componentName]) {
		        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

		        didWarnAboutBadClass[componentName] = true;
		      }
		    }

		    if (workInProgress.mode & StrictMode) {
		      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
		    }

		    setIsRendering(true);
		    ReactCurrentOwner$1.current = workInProgress;
		    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
		    setIsRendering(false);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;

		  {
		    // Support for module components is deprecated and is removed behind a flag.
		    // Whether or not it would crash later, we want to show a good message in DEV first.
		    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
		      var _componentName = getComponentName(Component) || 'Unknown';

		      if (!didWarnAboutModulePatternComponent[_componentName]) {
		        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

		        didWarnAboutModulePatternComponent[_componentName] = true;
		      }
		    }
		  }

		  if ( // Run these checks in production only if the flag is off.
		  // Eventually we'll delete this branch altogether.
		   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
		    {
		      var _componentName2 = getComponentName(Component) || 'Unknown';

		      if (!didWarnAboutModulePatternComponent[_componentName2]) {
		        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

		        didWarnAboutModulePatternComponent[_componentName2] = true;
		      }
		    } // Proceed under the assumption that this is a class instance


		    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

		    workInProgress.memoizedState = null;
		    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
		    // During mounting we don't know the child context yet as the instance doesn't exist.
		    // We will invalidate the child context in finishClassComponent() right after rendering.

		    var hasContext = false;

		    if (isContextProvider(Component)) {
		      hasContext = true;
		      pushContextProvider(workInProgress);
		    } else {
		      hasContext = false;
		    }

		    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
		    initializeUpdateQueue(workInProgress);
		    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

		    if (typeof getDerivedStateFromProps === 'function') {
		      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
		    }

		    adoptClassInstance(workInProgress, value);
		    mountClassInstance(workInProgress, Component, props, renderLanes);
		    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
		  } else {
		    // Proceed under the assumption that this is a function component
		    workInProgress.tag = FunctionComponent;

		    {

		      if ( workInProgress.mode & StrictMode) {
		        disableLogs();

		        try {
		          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
		        } finally {
		          reenableLogs();
		        }
		      }
		    }

		    reconcileChildren(null, workInProgress, value, renderLanes);

		    {
		      validateFunctionComponentInDev(workInProgress, Component);
		    }

		    return workInProgress.child;
		  }
		}

		function validateFunctionComponentInDev(workInProgress, Component) {
		  {
		    if (Component) {
		      if (Component.childContextTypes) {
		        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
		      }
		    }

		    if (workInProgress.ref !== null) {
		      var info = '';
		      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

		      if (ownerName) {
		        info += '\n\nCheck the render method of `' + ownerName + '`.';
		      }

		      var warningKey = ownerName || workInProgress._debugID || '';
		      var debugSource = workInProgress._debugSource;

		      if (debugSource) {
		        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
		      }

		      if (!didWarnAboutFunctionRefs[warningKey]) {
		        didWarnAboutFunctionRefs[warningKey] = true;

		        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
		      }
		    }

		    if (typeof Component.getDerivedStateFromProps === 'function') {
		      var _componentName3 = getComponentName(Component) || 'Unknown';

		      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
		        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

		        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
		      }
		    }

		    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
		      var _componentName4 = getComponentName(Component) || 'Unknown';

		      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
		        error('%s: Function components do not support contextType.', _componentName4);

		        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
		      }
		    }
		  }
		}

		var SUSPENDED_MARKER = {
		  dehydrated: null,
		  retryLane: NoLane
		};

		function mountSuspenseOffscreenState(renderLanes) {
		  return {
		    baseLanes: renderLanes
		  };
		}

		function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
		  return {
		    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
		  };
		} // TODO: Probably should inline this back


		function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
		  // If we're already showing a fallback, there are cases where we need to
		  // remain on that fallback regardless of whether the content has resolved.
		  // For example, SuspenseList coordinates when nested content appears.
		  if (current !== null) {
		    var suspenseState = current.memoizedState;

		    if (suspenseState === null) {
		      // Currently showing content. Don't hide it, even if ForceSuspenseFallack
		      // is true. More precise name might be "ForceRemainSuspenseFallback".
		      // Note: This is a factoring smell. Can't remain on a fallback if there's
		      // no fallback to remain on.
		      return false;
		    }
		  } // Not currently showing content. Consult the Suspense context.


		  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
		}

		function getRemainingWorkInPrimaryTree(current, renderLanes) {
		  // TODO: Should not remove render lanes that were pinged during this render
		  return removeLanes(current.childLanes, renderLanes);
		}

		function updateSuspenseComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

		  {
		    if (shouldSuspend(workInProgress)) {
		      workInProgress.flags |= DidCapture;
		    }
		  }

		  var suspenseContext = suspenseStackCursor.current;
		  var showFallback = false;
		  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

		  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
		    // Something in this boundary's subtree already suspended. Switch to
		    // rendering the fallback children.
		    showFallback = true;
		    workInProgress.flags &= ~DidCapture;
		  } else {
		    // Attempting the main content
		    if (current === null || current.memoizedState !== null) {
		      // This is a new mount or this boundary is already showing a fallback state.
		      // Mark this subtree context as having at least one invisible parent that could
		      // handle the fallback state.
		      // Boundaries without fallbacks or should be avoided are not considered since
		      // they cannot handle preferred fallback states.
		      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
		        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
		      }
		    }
		  }

		  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
		  // boundary's children. This involves some custom reconcilation logic. Two
		  // main reasons this is so complicated.
		  //
		  // First, Legacy Mode has different semantics for backwards compatibility. The
		  // primary tree will commit in an inconsistent state, so when we do the
		  // second pass to render the fallback, we do some exceedingly, uh, clever
		  // hacks to make that not totally break. Like transferring effects and
		  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
		  // because we bailout on the primary tree completely and leave it in its old
		  // state, no effects. Same as what we do for Offscreen (except that
		  // Offscreen doesn't have the first render pass).
		  //
		  // Second is hydration. During hydration, the Suspense fiber has a slightly
		  // different layout, where the child points to a dehydrated fragment, which
		  // contains the DOM rendered by the server.
		  //
		  // Third, even if you set all that aside, Suspense is like error boundaries in
		  // that we first we try to render one tree, and if that fails, we render again
		  // and switch to a different tree. Like a try/catch block. So we have to track
		  // which branch we're currently rendering. Ideally we would model this using
		  // a stack.

		  if (current === null) {
		    // Initial mount
		    // If we're currently hydrating, try to hydrate this boundary.
		    // But only if this has a fallback.
		    if (nextProps.fallback !== undefined) {
		      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
		    }

		    var nextPrimaryChildren = nextProps.children;
		    var nextFallbackChildren = nextProps.fallback;

		    if (showFallback) {
		      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
		      var primaryChildFragment = workInProgress.child;
		      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
		      workInProgress.memoizedState = SUSPENDED_MARKER;
		      return fallbackFragment;
		    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
		      // This is a CPU-bound tree. Skip this tree and show a placeholder to
		      // unblock the surrounding content. Then immediately retry after the
		      // initial commit.
		      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

		      var _primaryChildFragment = workInProgress.child;
		      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
		      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
		      // get it started back up to attempt the next item. While in terms of
		      // priority this work has the same priority as this current render, it's
		      // not part of the same transition once the transition has committed. If
		      // it's sync, we still want to yield so that it can be painted.
		      // Conceptually, this is really the same as pinging. We can use any
		      // RetryLane even if it's the one currently rendering since we're leaving
		      // it behind on this node.

		      workInProgress.lanes = SomeRetryLane;

		      {
		        markSpawnedWork(SomeRetryLane);
		      }

		      return _fallbackFragment;
		    } else {
		      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
		    }
		  } else {
		    // This is an update.
		    // If the current fiber has a SuspenseState, that means it's already showing
		    // a fallback.
		    var prevState = current.memoizedState;

		    if (prevState !== null) {

		      if (showFallback) {
		        var _nextFallbackChildren2 = nextProps.fallback;
		        var _nextPrimaryChildren2 = nextProps.children;

		        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

		        var _primaryChildFragment3 = workInProgress.child;
		        var prevOffscreenState = current.child.memoizedState;
		        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
		        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
		        workInProgress.memoizedState = SUSPENDED_MARKER;
		        return _fallbackChildFragment;
		      } else {
		        var _nextPrimaryChildren3 = nextProps.children;

		        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

		        workInProgress.memoizedState = null;
		        return _primaryChildFragment4;
		      }
		    } else {
		      // The current tree is not already showing a fallback.
		      if (showFallback) {
		        // Timed out.
		        var _nextFallbackChildren3 = nextProps.fallback;
		        var _nextPrimaryChildren4 = nextProps.children;

		        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

		        var _primaryChildFragment5 = workInProgress.child;
		        var _prevOffscreenState = current.child.memoizedState;
		        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
		        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
		        // fallback children.

		        workInProgress.memoizedState = SUSPENDED_MARKER;
		        return _fallbackChildFragment2;
		      } else {
		        // Still haven't timed out. Continue rendering the children, like we
		        // normally do.
		        var _nextPrimaryChildren5 = nextProps.children;

		        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

		        workInProgress.memoizedState = null;
		        return _primaryChildFragment6;
		      }
		    }
		  }
		}

		function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var primaryChildProps = {
		    mode: 'visible',
		    children: primaryChildren
		  };
		  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
		  primaryChildFragment.return = workInProgress;
		  workInProgress.child = primaryChildFragment;
		  return primaryChildFragment;
		}

		function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var progressedPrimaryFragment = workInProgress.child;
		  var primaryChildProps = {
		    mode: 'hidden',
		    children: primaryChildren
		  };
		  var primaryChildFragment;
		  var fallbackChildFragment;

		  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
		    // In legacy mode, we commit the primary tree as if it successfully
		    // completed, even though it's in an inconsistent state.
		    primaryChildFragment = progressedPrimaryFragment;
		    primaryChildFragment.childLanes = NoLanes;
		    primaryChildFragment.pendingProps = primaryChildProps;

		    if ( workInProgress.mode & ProfileMode) {
		      // Reset the durations from the first pass so they aren't included in the
		      // final amounts. This seems counterintuitive, since we're intentionally
		      // not measuring part of the render phase, but this makes it match what we
		      // do in Concurrent Mode.
		      primaryChildFragment.actualDuration = 0;
		      primaryChildFragment.actualStartTime = -1;
		      primaryChildFragment.selfBaseDuration = 0;
		      primaryChildFragment.treeBaseDuration = 0;
		    }

		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
		  } else {
		    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
		  }

		  primaryChildFragment.return = workInProgress;
		  fallbackChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = fallbackChildFragment;
		  workInProgress.child = primaryChildFragment;
		  return fallbackChildFragment;
		}

		function createWorkInProgressOffscreenFiber(current, offscreenProps) {
		  // The props argument to `createWorkInProgress` is `any` typed, so we use this
		  // wrapper function to constrain it.
		  return createWorkInProgress(current, offscreenProps);
		}

		function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
		  var currentPrimaryChildFragment = current.child;
		  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
		  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
		    mode: 'visible',
		    children: primaryChildren
		  });

		  if ((workInProgress.mode & BlockingMode) === NoMode) {
		    primaryChildFragment.lanes = renderLanes;
		  }

		  primaryChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = null;

		  if (currentFallbackChildFragment !== null) {
		    // Delete the fallback child fragment
		    currentFallbackChildFragment.nextEffect = null;
		    currentFallbackChildFragment.flags = Deletion;
		    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
		  }

		  workInProgress.child = primaryChildFragment;
		  return primaryChildFragment;
		}

		function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
		  var mode = workInProgress.mode;
		  var currentPrimaryChildFragment = current.child;
		  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
		  var primaryChildProps = {
		    mode: 'hidden',
		    children: primaryChildren
		  };
		  var primaryChildFragment;

		  if ( // In legacy mode, we commit the primary tree as if it successfully
		  // completed, even though it's in an inconsistent state.
		  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
		  // already cloned. In legacy mode, the only case where this isn't true is
		  // when DevTools forces us to display a fallback; we skip the first render
		  // pass entirely and go straight to rendering the fallback. (In Concurrent
		  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
		  // only codepath.)
		  workInProgress.child !== currentPrimaryChildFragment) {
		    var progressedPrimaryFragment = workInProgress.child;
		    primaryChildFragment = progressedPrimaryFragment;
		    primaryChildFragment.childLanes = NoLanes;
		    primaryChildFragment.pendingProps = primaryChildProps;

		    if ( workInProgress.mode & ProfileMode) {
		      // Reset the durations from the first pass so they aren't included in the
		      // final amounts. This seems counterintuitive, since we're intentionally
		      // not measuring part of the render phase, but this makes it match what we
		      // do in Concurrent Mode.
		      primaryChildFragment.actualDuration = 0;
		      primaryChildFragment.actualStartTime = -1;
		      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
		      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
		    } // The fallback fiber was added as a deletion effect during the first pass.
		    // However, since we're going to remain on the fallback, we no longer want
		    // to delete it. So we need to remove it from the list. Deletions are stored
		    // on the same list as effects. We want to keep the effects from the primary
		    // tree. So we copy the primary child fragment's effect list, which does not
		    // include the fallback deletion effect.


		    var progressedLastEffect = primaryChildFragment.lastEffect;

		    if (progressedLastEffect !== null) {
		      workInProgress.firstEffect = primaryChildFragment.firstEffect;
		      workInProgress.lastEffect = progressedLastEffect;
		      progressedLastEffect.nextEffect = null;
		    } else {
		      // TODO: Reset this somewhere else? Lol legacy mode is so weird.
		      workInProgress.firstEffect = workInProgress.lastEffect = null;
		    }
		  } else {
		    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
		  }

		  var fallbackChildFragment;

		  if (currentFallbackChildFragment !== null) {
		    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
		  } else {
		    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
		    // mounted but this is a new fiber.

		    fallbackChildFragment.flags |= Placement;
		  }

		  fallbackChildFragment.return = workInProgress;
		  primaryChildFragment.return = workInProgress;
		  primaryChildFragment.sibling = fallbackChildFragment;
		  workInProgress.child = primaryChildFragment;
		  return fallbackChildFragment;
		}

		function scheduleWorkOnFiber(fiber, renderLanes) {
		  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
		  var alternate = fiber.alternate;

		  if (alternate !== null) {
		    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
		  }

		  scheduleWorkOnParentPath(fiber.return, renderLanes);
		}

		function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
		  // Mark any Suspense boundaries with fallbacks as having work to do.
		  // If they were previously forced into fallbacks, they may now be able
		  // to unblock.
		  var node = firstChild;

		  while (node !== null) {
		    if (node.tag === SuspenseComponent) {
		      var state = node.memoizedState;

		      if (state !== null) {
		        scheduleWorkOnFiber(node, renderLanes);
		      }
		    } else if (node.tag === SuspenseListComponent) {
		      // If the tail is hidden there might not be an Suspense boundaries
		      // to schedule work on. In this case we have to schedule it on the
		      // list itself.
		      // We don't have to traverse to the children of the list since
		      // the list will propagate the change when it rerenders.
		      scheduleWorkOnFiber(node, renderLanes);
		    } else if (node.child !== null) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === workInProgress) {
		      return;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === workInProgress) {
		        return;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }
		}

		function findLastContentRow(firstChild) {
		  // This is going to find the last row among these children that is already
		  // showing content on the screen, as opposed to being in fallback state or
		  // new. If a row has multiple Suspense boundaries, any of them being in the
		  // fallback state, counts as the whole row being in a fallback state.
		  // Note that the "rows" will be workInProgress, but any nested children
		  // will still be current since we haven't rendered them yet. The mounted
		  // order may not be the same as the new order. We use the new order.
		  var row = firstChild;
		  var lastContentRow = null;

		  while (row !== null) {
		    var currentRow = row.alternate; // New rows can't be content rows.

		    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
		      lastContentRow = row;
		    }

		    row = row.sibling;
		  }

		  return lastContentRow;
		}

		function validateRevealOrder(revealOrder) {
		  {
		    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
		      didWarnAboutRevealOrder[revealOrder] = true;

		      if (typeof revealOrder === 'string') {
		        switch (revealOrder.toLowerCase()) {
		          case 'together':
		          case 'forwards':
		          case 'backwards':
		            {
		              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

		              break;
		            }

		          case 'forward':
		          case 'backward':
		            {
		              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

		              break;
		            }

		          default:
		            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

		            break;
		        }
		      } else {
		        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
		      }
		    }
		  }
		}

		function validateTailOptions(tailMode, revealOrder) {
		  {
		    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
		      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
		        didWarnAboutTailOptions[tailMode] = true;

		        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
		      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
		        didWarnAboutTailOptions[tailMode] = true;

		        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
		      }
		    }
		  }
		}

		function validateSuspenseListNestedChild(childSlot, index) {
		  {
		    var isArray = Array.isArray(childSlot);
		    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

		    if (isArray || isIterable) {
		      var type = isArray ? 'array' : 'iterable';

		      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

		      return false;
		    }
		  }

		  return true;
		}

		function validateSuspenseListChildren(children, revealOrder) {
		  {
		    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
		      if (Array.isArray(children)) {
		        for (var i = 0; i < children.length; i++) {
		          if (!validateSuspenseListNestedChild(children[i], i)) {
		            return;
		          }
		        }
		      } else {
		        var iteratorFn = getIteratorFn(children);

		        if (typeof iteratorFn === 'function') {
		          var childrenIterator = iteratorFn.call(children);

		          if (childrenIterator) {
		            var step = childrenIterator.next();
		            var _i = 0;

		            for (; !step.done; step = childrenIterator.next()) {
		              if (!validateSuspenseListNestedChild(step.value, _i)) {
		                return;
		              }

		              _i++;
		            }
		          }
		        } else {
		          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
		        }
		      }
		    }
		  }
		}

		function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
		  var renderState = workInProgress.memoizedState;

		  if (renderState === null) {
		    workInProgress.memoizedState = {
		      isBackwards: isBackwards,
		      rendering: null,
		      renderingStartTime: 0,
		      last: lastContentRow,
		      tail: tail,
		      tailMode: tailMode,
		      lastEffect: lastEffectBeforeRendering
		    };
		  } else {
		    // We can reuse the existing object from previous renders.
		    renderState.isBackwards = isBackwards;
		    renderState.rendering = null;
		    renderState.renderingStartTime = 0;
		    renderState.last = lastContentRow;
		    renderState.tail = tail;
		    renderState.tailMode = tailMode;
		    renderState.lastEffect = lastEffectBeforeRendering;
		  }
		} // This can end up rendering this component multiple passes.
		// The first pass splits the children fibers into two sets. A head and tail.
		// We first render the head. If anything is in fallback state, we do another
		// pass through beginWork to rerender all children (including the tail) with
		// the force suspend context. If the first render didn't have anything in
		// in fallback state. Then we render each row in the tail one-by-one.
		// That happens in the completeWork phase without going back to beginWork.


		function updateSuspenseListComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps;
		  var revealOrder = nextProps.revealOrder;
		  var tailMode = nextProps.tail;
		  var newChildren = nextProps.children;
		  validateRevealOrder(revealOrder);
		  validateTailOptions(tailMode, revealOrder);
		  validateSuspenseListChildren(newChildren, revealOrder);
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  var suspenseContext = suspenseStackCursor.current;
		  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

		  if (shouldForceFallback) {
		    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
		    workInProgress.flags |= DidCapture;
		  } else {
		    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

		    if (didSuspendBefore) {
		      // If we previously forced a fallback, we need to schedule work
		      // on any nested boundaries to let them know to try to render
		      // again. This is the same as context updating.
		      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
		    }

		    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		  }

		  pushSuspenseContext(workInProgress, suspenseContext);

		  if ((workInProgress.mode & BlockingMode) === NoMode) {
		    // In legacy mode, SuspenseList doesn't work so we just
		    // use make it a noop by treating it as the default revealOrder.
		    workInProgress.memoizedState = null;
		  } else {
		    switch (revealOrder) {
		      case 'forwards':
		        {
		          var lastContentRow = findLastContentRow(workInProgress.child);
		          var tail;

		          if (lastContentRow === null) {
		            // The whole list is part of the tail.
		            // TODO: We could fast path by just rendering the tail now.
		            tail = workInProgress.child;
		            workInProgress.child = null;
		          } else {
		            // Disconnect the tail rows after the content row.
		            // We're going to render them separately later.
		            tail = lastContentRow.sibling;
		            lastContentRow.sibling = null;
		          }

		          initSuspenseListRenderState(workInProgress, false, // isBackwards
		          tail, lastContentRow, tailMode, workInProgress.lastEffect);
		          break;
		        }

		      case 'backwards':
		        {
		          // We're going to find the first row that has existing content.
		          // At the same time we're going to reverse the list of everything
		          // we pass in the meantime. That's going to be our tail in reverse
		          // order.
		          var _tail = null;
		          var row = workInProgress.child;
		          workInProgress.child = null;

		          while (row !== null) {
		            var currentRow = row.alternate; // New rows can't be content rows.

		            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
		              // This is the beginning of the main content.
		              workInProgress.child = row;
		              break;
		            }

		            var nextRow = row.sibling;
		            row.sibling = _tail;
		            _tail = row;
		            row = nextRow;
		          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


		          initSuspenseListRenderState(workInProgress, true, // isBackwards
		          _tail, null, // last
		          tailMode, workInProgress.lastEffect);
		          break;
		        }

		      case 'together':
		        {
		          initSuspenseListRenderState(workInProgress, false, // isBackwards
		          null, // tail
		          null, // last
		          undefined, workInProgress.lastEffect);
		          break;
		        }

		      default:
		        {
		          // The default reveal order is the same as not having
		          // a boundary.
		          workInProgress.memoizedState = null;
		        }
		    }
		  }

		  return workInProgress.child;
		}

		function updatePortalComponent(current, workInProgress, renderLanes) {
		  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		  var nextChildren = workInProgress.pendingProps;

		  if (current === null) {
		    // Portals are special because we don't append the children during mount
		    // but at commit. Therefore we need to track insertions which the normal
		    // flow doesn't do during mount. This doesn't happen at the root because
		    // the root always starts with a "current" with a null child.
		    // TODO: Consider unifying this with how the root works.
		    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
		  } else {
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  }

		  return workInProgress.child;
		}

		var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

		function updateContextProvider(current, workInProgress, renderLanes) {
		  var providerType = workInProgress.type;
		  var context = providerType._context;
		  var newProps = workInProgress.pendingProps;
		  var oldProps = workInProgress.memoizedProps;
		  var newValue = newProps.value;

		  {
		    if (!('value' in newProps)) {
		      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
		        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

		        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
		      }
		    }

		    var providerPropTypes = workInProgress.type.propTypes;

		    if (providerPropTypes) {
		      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
		    }
		  }

		  pushProvider(workInProgress, newValue);

		  if (oldProps !== null) {
		    var oldValue = oldProps.value;
		    var changedBits = calculateChangedBits(context, newValue, oldValue);

		    if (changedBits === 0) {
		      // No change. Bailout early if children are the same.
		      if (oldProps.children === newProps.children && !hasContextChanged()) {
		        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		      }
		    } else {
		      // The context value changed. Search for matching consumers and schedule
		      // them to update.
		      propagateContextChange(workInProgress, context, changedBits, renderLanes);
		    }
		  }

		  var newChildren = newProps.children;
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  return workInProgress.child;
		}

		var hasWarnedAboutUsingContextAsConsumer = false;

		function updateContextConsumer(current, workInProgress, renderLanes) {
		  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
		  // DEV mode, we create a separate object for Context.Consumer that acts
		  // like a proxy to Context. This proxy object adds unnecessary code in PROD
		  // so we use the old behaviour (Context.Consumer references Context) to
		  // reduce size and overhead. The separate object references context via
		  // a property called "_context", which also gives us the ability to check
		  // in DEV mode if this property exists or not and warn if it does not.

		  {
		    if (context._context === undefined) {
		      // This may be because it's a Context (rather than a Consumer).
		      // Or it may be because it's older React where they're the same thing.
		      // We only want to warn if we're sure it's a new React.
		      if (context !== context.Consumer) {
		        if (!hasWarnedAboutUsingContextAsConsumer) {
		          hasWarnedAboutUsingContextAsConsumer = true;

		          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		        }
		      }
		    } else {
		      context = context._context;
		    }
		  }

		  var newProps = workInProgress.pendingProps;
		  var render = newProps.children;

		  {
		    if (typeof render !== 'function') {
		      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
		    }
		  }

		  prepareToReadContext(workInProgress, renderLanes);
		  var newValue = readContext(context, newProps.unstable_observedBits);
		  var newChildren;

		  {
		    ReactCurrentOwner$1.current = workInProgress;
		    setIsRendering(true);
		    newChildren = render(newValue);
		    setIsRendering(false);
		  } // React DevTools reads this flag.


		  workInProgress.flags |= PerformedWork;
		  reconcileChildren(current, workInProgress, newChildren, renderLanes);
		  return workInProgress.child;
		}

		function markWorkInProgressReceivedUpdate() {
		  didReceiveUpdate = true;
		}

		function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
		  if (current !== null) {
		    // Reuse previous dependencies
		    workInProgress.dependencies = current.dependencies;
		  }

		  {
		    // Don't update "base" render times for bailouts.
		    stopProfilerTimerIfRunning();
		  }

		  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

		  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
		    // The children don't have any work either. We can skip them.
		    // TODO: Once we add back resuming, we should check if the children are
		    // a work-in-progress set. If so, we need to transfer their effects.
		    return null;
		  } else {
		    // This fiber doesn't have work, but its subtree does. Clone the child
		    // fibers and continue.
		    cloneChildFibers(current, workInProgress);
		    return workInProgress.child;
		  }
		}

		function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
		  {
		    var returnFiber = oldWorkInProgress.return;

		    if (returnFiber === null) {
		      throw new Error('Cannot swap the root fiber.');
		    } // Disconnect from the old current.
		    // It will get deleted.


		    current.alternate = null;
		    oldWorkInProgress.alternate = null; // Connect to the new tree.

		    newWorkInProgress.index = oldWorkInProgress.index;
		    newWorkInProgress.sibling = oldWorkInProgress.sibling;
		    newWorkInProgress.return = oldWorkInProgress.return;
		    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

		    if (oldWorkInProgress === returnFiber.child) {
		      returnFiber.child = newWorkInProgress;
		    } else {
		      var prevSibling = returnFiber.child;

		      if (prevSibling === null) {
		        throw new Error('Expected parent to have a child.');
		      }

		      while (prevSibling.sibling !== oldWorkInProgress) {
		        prevSibling = prevSibling.sibling;

		        if (prevSibling === null) {
		          throw new Error('Expected to find the previous sibling.');
		        }
		      }

		      prevSibling.sibling = newWorkInProgress;
		    } // Delete the old fiber and place the new one.
		    // Since the old fiber is disconnected, we have to schedule it manually.


		    var last = returnFiber.lastEffect;

		    if (last !== null) {
		      last.nextEffect = current;
		      returnFiber.lastEffect = current;
		    } else {
		      returnFiber.firstEffect = returnFiber.lastEffect = current;
		    }

		    current.nextEffect = null;
		    current.flags = Deletion;
		    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

		    return newWorkInProgress;
		  }
		}

		function beginWork(current, workInProgress, renderLanes) {
		  var updateLanes = workInProgress.lanes;

		  {
		    if (workInProgress._debugNeedsRemount && current !== null) {
		      // This will restart the begin phase with a new fiber.
		      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
		    }
		  }

		  if (current !== null) {
		    var oldProps = current.memoizedProps;
		    var newProps = workInProgress.pendingProps;

		    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
		     workInProgress.type !== current.type )) {
		      // If props or context changed, mark the fiber as having performed work.
		      // This may be unset if the props are determined to be equal later (memo).
		      didReceiveUpdate = true;
		    } else if (!includesSomeLane(renderLanes, updateLanes)) {
		      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
		      // the begin phase. There's still some bookkeeping we that needs to be done
		      // in this optimized path, mostly pushing stuff onto the stack.

		      switch (workInProgress.tag) {
		        case HostRoot:
		          pushHostRootContext(workInProgress);
		          resetHydrationState();
		          break;

		        case HostComponent:
		          pushHostContext(workInProgress);
		          break;

		        case ClassComponent:
		          {
		            var Component = workInProgress.type;

		            if (isContextProvider(Component)) {
		              pushContextProvider(workInProgress);
		            }

		            break;
		          }

		        case HostPortal:
		          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		          break;

		        case ContextProvider:
		          {
		            var newValue = workInProgress.memoizedProps.value;
		            pushProvider(workInProgress, newValue);
		            break;
		          }

		        case Profiler:
		          {
		            // Profiler should only call onRender when one of its descendants actually rendered.
		            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

		            if (hasChildWork) {
		              workInProgress.flags |= Update;
		            } // Reset effect durations for the next eventual effect phase.
		            // These are reset during render to allow the DevTools commit hook a chance to read them,


		            var stateNode = workInProgress.stateNode;
		            stateNode.effectDuration = 0;
		            stateNode.passiveEffectDuration = 0;
		          }

		          break;

		        case SuspenseComponent:
		          {
		            var state = workInProgress.memoizedState;

		            if (state !== null) {
		              // whether to retry the primary children, or to skip over it and
		              // go straight to the fallback. Check the priority of the primary
		              // child fragment.


		              var primaryChildFragment = workInProgress.child;
		              var primaryChildLanes = primaryChildFragment.childLanes;

		              if (includesSomeLane(renderLanes, primaryChildLanes)) {
		                // The primary children have pending work. Use the normal path
		                // to attempt to render the primary children again.
		                return updateSuspenseComponent(current, workInProgress, renderLanes);
		              } else {
		                // The primary child fragment does not have pending work marked
		                // on it
		                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
		                // priority. Bailout.

		                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

		                if (child !== null) {
		                  // The fallback children have pending work. Skip over the
		                  // primary children and work on the fallback.
		                  return child.sibling;
		                } else {
		                  return null;
		                }
		              }
		            } else {
		              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
		            }

		            break;
		          }

		        case SuspenseListComponent:
		          {
		            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

		            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

		            if (didSuspendBefore) {
		              if (_hasChildWork) {
		                // If something was in fallback state last time, and we have all the
		                // same children then we're still in progressive loading state.
		                // Something might get unblocked by state updates or retries in the
		                // tree which will affect the tail. So we need to use the normal
		                // path to compute the correct tail.
		                return updateSuspenseListComponent(current, workInProgress, renderLanes);
		              } // If none of the children had any work, that means that none of
		              // them got retried so they'll still be blocked in the same way
		              // as before. We can fast bail out.


		              workInProgress.flags |= DidCapture;
		            } // If nothing suspended before and we're rendering the same children,
		            // then the tail doesn't matter. Anything new that suspends will work
		            // in the "together" mode, so we can continue from the state we had.


		            var renderState = workInProgress.memoizedState;

		            if (renderState !== null) {
		              // Reset to the "together" mode in case we've started a different
		              // update in the past but didn't complete it.
		              renderState.rendering = null;
		              renderState.tail = null;
		              renderState.lastEffect = null;
		            }

		            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

		            if (_hasChildWork) {
		              break;
		            } else {
		              // If none of the children had any work, that means that none of
		              // them got retried so they'll still be blocked in the same way
		              // as before. We can fast bail out.
		              return null;
		            }
		          }

		        case OffscreenComponent:
		        case LegacyHiddenComponent:
		          {
		            // Need to check if the tree still needs to be deferred. This is
		            // almost identical to the logic used in the normal update path,
		            // so we'll just enter that. The only difference is we'll bail out
		            // at the next level instead of this one, because the child props
		            // have not changed. Which is fine.
		            // TODO: Probably should refactor `beginWork` to split the bailout
		            // path from the normal path. I'm tempted to do a labeled break here
		            // but I won't :)
		            workInProgress.lanes = NoLanes;
		            return updateOffscreenComponent(current, workInProgress, renderLanes);
		          }
		      }

		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		    } else {
		      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
		        // This is a special case that only exists for legacy mode.
		        // See https://github.com/facebook/react/pull/19216.
		        didReceiveUpdate = true;
		      } else {
		        // An update was scheduled on this fiber, but there are no new props
		        // nor legacy context. Set this to false. If an update queue or context
		        // consumer produces a changed value, it will set this to true. Otherwise,
		        // the component will assume the children have not changed and bail out.
		        didReceiveUpdate = false;
		      }
		    }
		  } else {
		    didReceiveUpdate = false;
		  } // Before entering the begin phase, clear pending update priority.
		  // TODO: This assumes that we're about to evaluate the component and process
		  // the update queue. However, there's an exception: SimpleMemoComponent
		  // sometimes bails out later in the begin phase. This indicates that we should
		  // move this assignment out of the common path and into each branch.


		  workInProgress.lanes = NoLanes;

		  switch (workInProgress.tag) {
		    case IndeterminateComponent:
		      {
		        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
		      }

		    case LazyComponent:
		      {
		        var elementType = workInProgress.elementType;
		        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
		      }

		    case FunctionComponent:
		      {
		        var _Component = workInProgress.type;
		        var unresolvedProps = workInProgress.pendingProps;
		        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
		        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
		      }

		    case ClassComponent:
		      {
		        var _Component2 = workInProgress.type;
		        var _unresolvedProps = workInProgress.pendingProps;

		        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

		        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
		      }

		    case HostRoot:
		      return updateHostRoot(current, workInProgress, renderLanes);

		    case HostComponent:
		      return updateHostComponent(current, workInProgress, renderLanes);

		    case HostText:
		      return updateHostText(current, workInProgress);

		    case SuspenseComponent:
		      return updateSuspenseComponent(current, workInProgress, renderLanes);

		    case HostPortal:
		      return updatePortalComponent(current, workInProgress, renderLanes);

		    case ForwardRef:
		      {
		        var type = workInProgress.type;
		        var _unresolvedProps2 = workInProgress.pendingProps;

		        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

		        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
		      }

		    case Fragment:
		      return updateFragment(current, workInProgress, renderLanes);

		    case Mode:
		      return updateMode(current, workInProgress, renderLanes);

		    case Profiler:
		      return updateProfiler(current, workInProgress, renderLanes);

		    case ContextProvider:
		      return updateContextProvider(current, workInProgress, renderLanes);

		    case ContextConsumer:
		      return updateContextConsumer(current, workInProgress, renderLanes);

		    case MemoComponent:
		      {
		        var _type2 = workInProgress.type;
		        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

		        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

		        {
		          if (workInProgress.type !== workInProgress.elementType) {
		            var outerPropTypes = _type2.propTypes;

		            if (outerPropTypes) {
		              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
		              'prop', getComponentName(_type2));
		            }
		          }
		        }

		        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
		        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
		      }

		    case SimpleMemoComponent:
		      {
		        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
		      }

		    case IncompleteClassComponent:
		      {
		        var _Component3 = workInProgress.type;
		        var _unresolvedProps4 = workInProgress.pendingProps;

		        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

		        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
		      }

		    case SuspenseListComponent:
		      {
		        return updateSuspenseListComponent(current, workInProgress, renderLanes);
		      }

		    case FundamentalComponent:
		      {

		        break;
		      }

		    case ScopeComponent:
		      {

		        break;
		      }

		    case Block:
		      {

		        break;
		      }

		    case OffscreenComponent:
		      {
		        return updateOffscreenComponent(current, workInProgress, renderLanes);
		      }

		    case LegacyHiddenComponent:
		      {
		        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
		      }
		  }

		  {
		    {
		      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function markUpdate(workInProgress) {
		  // Tag the fiber with an update effect. This turns a Placement into
		  // a PlacementAndUpdate.
		  workInProgress.flags |= Update;
		}

		function markRef$1(workInProgress) {
		  workInProgress.flags |= Ref;
		}

		var appendAllChildren;
		var updateHostContainer;
		var updateHostComponent$1;
		var updateHostText$1;

		if (supportsMutation) {
		  // Mutation mode
		  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
		    // We only have the top Fiber that was created but we need recurse down its
		    // children to find all the terminal nodes.
		    var node = workInProgress.child;

		    while (node !== null) {
		      if (node.tag === HostComponent || node.tag === HostText) {
		        appendInitialChild(parent, node.stateNode);
		      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === workInProgress) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === workInProgress) {
		          return;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  };

		  updateHostContainer = function (workInProgress) {// Noop
		  };

		  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
		    // If we have an alternate, that means this is an update and we need to
		    // schedule a side-effect to do the updates.
		    var oldProps = current.memoizedProps;

		    if (oldProps === newProps) {
		      // In mutation mode, this is sufficient for a bailout because
		      // we won't touch this node even if children changed.
		      return;
		    } // If we get updated because one of our children updated, we don't
		    // have newProps so we'll have to reuse them.
		    // TODO: Split the update API as separate for the props vs. children.
		    // Even better would be if children weren't special cased at all tho.


		    var instance = workInProgress.stateNode;
		    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
		    // component is hitting the resume path. Figure out why. Possibly
		    // related to `hidden`.

		    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

		    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
		    // is a new ref we mark this as an update. All the work is done in commitWork.

		    if (updatePayload) {
		      markUpdate(workInProgress);
		    }
		  };

		  updateHostText$1 = function (current, workInProgress, oldText, newText) {
		    // If the text differs, mark it as an update. All the work in done in commitWork.
		    if (oldText !== newText) {
		      markUpdate(workInProgress);
		    }
		  };
		} else if (supportsPersistence) {
		  // Persistent host tree mode
		  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
		    // We only have the top Fiber that was created but we need recurse down its
		    // children to find all the terminal nodes.
		    var node = workInProgress.child;

		    while (node !== null) {
		      // eslint-disable-next-line no-labels
		       if (node.tag === HostComponent) {
		        var instance = node.stateNode;

		        if (needsVisibilityToggle && isHidden) {
		          // This child is inside a timed out tree. Hide it.
		          var props = node.memoizedProps;
		          var type = node.type;
		          instance = cloneHiddenInstance(instance, type, props, node);
		        }

		        appendInitialChild(parent, instance);
		      } else if (node.tag === HostText) {
		        var _instance = node.stateNode;

		        if (needsVisibilityToggle && isHidden) {
		          // This child is inside a timed out tree. Hide it.
		          var text = node.memoizedProps;
		          _instance = cloneHiddenTextInstance(_instance, text, node);
		        }

		        appendInitialChild(parent, _instance);
		      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {
		        if ((node.flags & Update) !== NoFlags) {
		          // Need to toggle the visibility of the primary children.
		          var newIsHidden = node.memoizedState !== null;

		          if (newIsHidden) {
		            var primaryChildParent = node.child;

		            if (primaryChildParent !== null) {
		              if (primaryChildParent.child !== null) {
		                primaryChildParent.child.return = primaryChildParent;
		                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
		              }

		              var fallbackChildParent = primaryChildParent.sibling;

		              if (fallbackChildParent !== null) {
		                fallbackChildParent.return = node;
		                node = fallbackChildParent;
		                continue;
		              }
		            }
		          }
		        }

		        if (node.child !== null) {
		          // Continue traversing like normal
		          node.child.return = node;
		          node = node.child;
		          continue;
		        }
		      } else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


		      node = node;

		      if (node === workInProgress) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === workInProgress) {
		          return;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


		  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
		    // We only have the top Fiber that was created but we need recurse down its
		    // children to find all the terminal nodes.
		    var node = workInProgress.child;

		    while (node !== null) {
		      // eslint-disable-next-line no-labels
		       if (node.tag === HostComponent) {
		        var instance = node.stateNode;

		        if (needsVisibilityToggle && isHidden) {
		          // This child is inside a timed out tree. Hide it.
		          var props = node.memoizedProps;
		          var type = node.type;
		          instance = cloneHiddenInstance(instance, type, props, node);
		        }

		        appendChildToContainerChildSet(containerChildSet, instance);
		      } else if (node.tag === HostText) {
		        var _instance3 = node.stateNode;

		        if (needsVisibilityToggle && isHidden) {
		          // This child is inside a timed out tree. Hide it.
		          var text = node.memoizedProps;
		          _instance3 = cloneHiddenTextInstance(_instance3, text, node);
		        }

		        appendChildToContainerChildSet(containerChildSet, _instance3);
		      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {
		        if ((node.flags & Update) !== NoFlags) {
		          // Need to toggle the visibility of the primary children.
		          var newIsHidden = node.memoizedState !== null;

		          if (newIsHidden) {
		            var primaryChildParent = node.child;

		            if (primaryChildParent !== null) {
		              if (primaryChildParent.child !== null) {
		                primaryChildParent.child.return = primaryChildParent;
		                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
		              }

		              var fallbackChildParent = primaryChildParent.sibling;

		              if (fallbackChildParent !== null) {
		                fallbackChildParent.return = node;
		                node = fallbackChildParent;
		                continue;
		              }
		            }
		          }
		        }

		        if (node.child !== null) {
		          // Continue traversing like normal
		          node.child.return = node;
		          node = node.child;
		          continue;
		        }
		      } else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


		      node = node;

		      if (node === workInProgress) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === workInProgress) {
		          return;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  };

		  updateHostContainer = function (workInProgress) {
		    var portalOrRoot = workInProgress.stateNode;
		    var childrenUnchanged = workInProgress.firstEffect === null;

		    if (childrenUnchanged) ; else {
		      var container = portalOrRoot.containerInfo;
		      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

		      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
		      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

		      markUpdate(workInProgress);
		      finalizeContainerChildren(container, newChildSet);
		    }
		  };

		  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
		    var currentInstance = current.stateNode;
		    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
		    // This guarantees that we can reuse all of them.

		    var childrenUnchanged = workInProgress.firstEffect === null;

		    if (childrenUnchanged && oldProps === newProps) {
		      // No changes, just reuse the existing instance.
		      // Note that this might release a previous clone.
		      workInProgress.stateNode = currentInstance;
		      return;
		    }

		    var recyclableInstance = workInProgress.stateNode;
		    var currentHostContext = getHostContext();
		    var updatePayload = null;

		    if (oldProps !== newProps) {
		      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
		    }

		    if (childrenUnchanged && updatePayload === null) {
		      // No changes, just reuse the existing instance.
		      // Note that this might release a previous clone.
		      workInProgress.stateNode = currentInstance;
		      return;
		    }

		    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

		    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
		      markUpdate(workInProgress);
		    }

		    workInProgress.stateNode = newInstance;

		    if (childrenUnchanged) {
		      // If there are no other effects in this tree, we need to flag this node as having one.
		      // Even though we're not going to use it for anything.
		      // Otherwise parents won't know that there are new children to propagate upwards.
		      markUpdate(workInProgress);
		    } else {
		      // If children might have changed, we have to add them all to the set.
		      appendAllChildren(newInstance, workInProgress, false, false);
		    }
		  };

		  updateHostText$1 = function (current, workInProgress, oldText, newText) {
		    if (oldText !== newText) {
		      // If the text content differs, we'll create a new text instance for it.
		      var rootContainerInstance = getRootHostContainer();
		      var currentHostContext = getHostContext();
		      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
		      // This lets the parents know that at least one of their children has changed.

		      markUpdate(workInProgress);
		    } else {
		      workInProgress.stateNode = current.stateNode;
		    }
		  };
		} else {
		  // No host operations
		  updateHostContainer = function (workInProgress) {// Noop
		  };

		  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
		  };

		  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
		  };
		}

		function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
		  if (getIsHydrating()) {
		    // If we're hydrating, we should consume as many items as we can
		    // so we don't leave any behind.
		    return;
		  }

		  switch (renderState.tailMode) {
		    case 'hidden':
		      {
		        // Any insertions at the end of the tail list after this point
		        // should be invisible. If there are already mounted boundaries
		        // anything before them are not considered for collapsing.
		        // Therefore we need to go through the whole tail to find if
		        // there are any.
		        var tailNode = renderState.tail;
		        var lastTailNode = null;

		        while (tailNode !== null) {
		          if (tailNode.alternate !== null) {
		            lastTailNode = tailNode;
		          }

		          tailNode = tailNode.sibling;
		        } // Next we're simply going to delete all insertions after the
		        // last rendered item.


		        if (lastTailNode === null) {
		          // All remaining items in the tail are insertions.
		          renderState.tail = null;
		        } else {
		          // Detach the insertion after the last node that was already
		          // inserted.
		          lastTailNode.sibling = null;
		        }

		        break;
		      }

		    case 'collapsed':
		      {
		        // Any insertions at the end of the tail list after this point
		        // should be invisible. If there are already mounted boundaries
		        // anything before them are not considered for collapsing.
		        // Therefore we need to go through the whole tail to find if
		        // there are any.
		        var _tailNode = renderState.tail;
		        var _lastTailNode = null;

		        while (_tailNode !== null) {
		          if (_tailNode.alternate !== null) {
		            _lastTailNode = _tailNode;
		          }

		          _tailNode = _tailNode.sibling;
		        } // Next we're simply going to delete all insertions after the
		        // last rendered item.


		        if (_lastTailNode === null) {
		          // All remaining items in the tail are insertions.
		          if (!hasRenderedATailFallback && renderState.tail !== null) {
		            // We suspended during the head. We want to show at least one
		            // row at the tail. So we'll keep on and cut off the rest.
		            renderState.tail.sibling = null;
		          } else {
		            renderState.tail = null;
		          }
		        } else {
		          // Detach the insertion after the last node that was already
		          // inserted.
		          _lastTailNode.sibling = null;
		        }

		        break;
		      }
		  }
		}

		function completeWork(current, workInProgress, renderLanes) {
		  var newProps = workInProgress.pendingProps;

		  switch (workInProgress.tag) {
		    case IndeterminateComponent:
		    case LazyComponent:
		    case SimpleMemoComponent:
		    case FunctionComponent:
		    case ForwardRef:
		    case Fragment:
		    case Mode:
		    case Profiler:
		    case ContextConsumer:
		    case MemoComponent:
		      return null;

		    case ClassComponent:
		      {
		        var Component = workInProgress.type;

		        if (isContextProvider(Component)) {
		          popContext(workInProgress);
		        }

		        return null;
		      }

		    case HostRoot:
		      {
		        popHostContainer(workInProgress);
		        popTopLevelContextObject(workInProgress);
		        resetWorkInProgressVersions();
		        var fiberRoot = workInProgress.stateNode;

		        if (fiberRoot.pendingContext) {
		          fiberRoot.context = fiberRoot.pendingContext;
		          fiberRoot.pendingContext = null;
		        }

		        if (current === null || current.child === null) {
		          // If we hydrated, pop so that we can delete any remaining children
		          // that weren't hydrated.
		          var wasHydrated = popHydrationState(workInProgress);

		          if (wasHydrated) {
		            // If we hydrated, then we'll need to schedule an update for
		            // the commit side-effects on the root.
		            markUpdate(workInProgress);
		          } else if (!fiberRoot.hydrate) {
		            // Schedule an effect to clear this container at the start of the next commit.
		            // This handles the case of React rendering into a container with previous children.
		            // It's also safe to do for updates too, because current.child would only be null
		            // if the previous render was null (so the the container would already be empty).
		            workInProgress.flags |= Snapshot;
		          }
		        }

		        updateHostContainer(workInProgress);
		        return null;
		      }

		    case HostComponent:
		      {
		        popHostContext(workInProgress);
		        var rootContainerInstance = getRootHostContainer();
		        var type = workInProgress.type;

		        if (current !== null && workInProgress.stateNode != null) {
		          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

		          if (current.ref !== workInProgress.ref) {
		            markRef$1(workInProgress);
		          }
		        } else {
		          if (!newProps) {
		            if (!(workInProgress.stateNode !== null)) {
		              {
		                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
		              }
		            } // This can happen when we abort work.


		            return null;
		          }

		          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
		          // "stack" as the parent. Then append children as we go in beginWork
		          // or completeWork depending on whether we want to add them top->down or
		          // bottom->up. Top->down is faster in IE11.

		          var _wasHydrated = popHydrationState(workInProgress);

		          if (_wasHydrated) {
		            // TODO: Move this and createInstance step into the beginPhase
		            // to consolidate.
		            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
		              // If changes to the hydrated node need to be applied at the
		              // commit-phase we mark this as such.
		              markUpdate(workInProgress);
		            }
		          } else {
		            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
		            appendAllChildren(instance, workInProgress, false, false);
		            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
		            // (eg DOM renderer supports auto-focus for certain elements).
		            // Make sure such renderers get scheduled for later work.

		            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
		              markUpdate(workInProgress);
		            }
		          }

		          if (workInProgress.ref !== null) {
		            // If there is a ref on a host node we need to schedule a callback
		            markRef$1(workInProgress);
		          }
		        }

		        return null;
		      }

		    case HostText:
		      {
		        var newText = newProps;

		        if (current && workInProgress.stateNode != null) {
		          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
		          // to schedule a side-effect to do the updates.

		          updateHostText$1(current, workInProgress, oldText, newText);
		        } else {
		          if (typeof newText !== 'string') {
		            if (!(workInProgress.stateNode !== null)) {
		              {
		                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
		              }
		            } // This can happen when we abort work.

		          }

		          var _rootContainerInstance = getRootHostContainer();

		          var _currentHostContext = getHostContext();

		          var _wasHydrated2 = popHydrationState(workInProgress);

		          if (_wasHydrated2) {
		            if (prepareToHydrateHostTextInstance(workInProgress)) {
		              markUpdate(workInProgress);
		            }
		          } else {
		            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
		          }
		        }

		        return null;
		      }

		    case SuspenseComponent:
		      {
		        popSuspenseContext(workInProgress);
		        var nextState = workInProgress.memoizedState;

		        if ((workInProgress.flags & DidCapture) !== NoFlags) {
		          // Something suspended. Re-render with the fallback children.
		          workInProgress.lanes = renderLanes; // Do not reset the effect list.

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          }

		          return workInProgress;
		        }

		        var nextDidTimeout = nextState !== null;
		        var prevDidTimeout = false;

		        if (current === null) {
		          if (workInProgress.memoizedProps.fallback !== undefined) {
		            popHydrationState(workInProgress);
		          }
		        } else {
		          var prevState = current.memoizedState;
		          prevDidTimeout = prevState !== null;
		        }

		        if (nextDidTimeout && !prevDidTimeout) {
		          // If this subtreee is running in blocking mode we can suspend,
		          // otherwise we won't suspend.
		          // TODO: This will still suspend a synchronous tree if anything
		          // in the concurrent tree already suspended during this render.
		          // This is a known bug.
		          if ((workInProgress.mode & BlockingMode) !== NoMode) {
		            // TODO: Move this back to throwException because this is too late
		            // if this is a large tree which is common for initial loads. We
		            // don't know if we should restart a render or not until we get
		            // this marker, and this is too late.
		            // If this render already had a ping or lower pri updates,
		            // and this is the first time we know we're going to suspend we
		            // should be able to immediately restart from within throwException.
		            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

		            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
		              // If this was in an invisible tree or a new render, then showing
		              // this boundary is ok.
		              renderDidSuspend();
		            } else {
		              // Otherwise, we're going to have to hide content so we should
		              // suspend for longer if possible.
		              renderDidSuspendDelayIfPossible();
		            }
		          }
		        }

		        if (supportsPersistence) {
		          // TODO: Only schedule updates if not prevDidTimeout.
		          if (nextDidTimeout) {
		            // If this boundary just timed out, schedule an effect to attach a
		            // retry listener to the promise. This flag is also used to hide the
		            // primary children.
		            workInProgress.flags |= Update;
		          }
		        }

		        if (supportsMutation) {
		          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
		          if (nextDidTimeout || prevDidTimeout) {
		            // If this boundary just timed out, schedule an effect to attach a
		            // retry listener to the promise. This flag is also used to hide the
		            // primary children. In mutation mode, we also need the flag to
		            // *unhide* children that were previously hidden, so check if this
		            // is currently timed out, too.
		            workInProgress.flags |= Update;
		          }
		        }

		        return null;
		      }

		    case HostPortal:
		      popHostContainer(workInProgress);
		      updateHostContainer(workInProgress);

		      if (current === null) {
		        preparePortalMount(workInProgress.stateNode.containerInfo);
		      }

		      return null;

		    case ContextProvider:
		      // Pop provider fiber
		      popProvider(workInProgress);
		      return null;

		    case IncompleteClassComponent:
		      {
		        // Same as class component case. I put it down here so that the tags are
		        // sequential to ensure this switch is compiled to a jump table.
		        var _Component = workInProgress.type;

		        if (isContextProvider(_Component)) {
		          popContext(workInProgress);
		        }

		        return null;
		      }

		    case SuspenseListComponent:
		      {
		        popSuspenseContext(workInProgress);
		        var renderState = workInProgress.memoizedState;

		        if (renderState === null) {
		          // We're running in the default, "independent" mode.
		          // We don't do anything in this mode.
		          return null;
		        }

		        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
		        var renderedTail = renderState.rendering;

		        if (renderedTail === null) {
		          // We just rendered the head.
		          if (!didSuspendAlready) {
		            // This is the first pass. We need to figure out if anything is still
		            // suspended in the rendered set.
		            // If new content unsuspended, but there's still some content that
		            // didn't. Then we need to do a second pass that forces everything
		            // to keep showing their fallbacks.
		            // We might be suspended if something in this render pass suspended, or
		            // something in the previous committed pass suspended. Otherwise,
		            // there's no chance so we can skip the expensive call to
		            // findFirstSuspended.
		            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

		            if (!cannotBeSuspended) {
		              var row = workInProgress.child;

		              while (row !== null) {
		                var suspended = findFirstSuspended(row);

		                if (suspended !== null) {
		                  didSuspendAlready = true;
		                  workInProgress.flags |= DidCapture;
		                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
		                  // part of the second pass. In that case nothing will subscribe to
		                  // its thennables. Instead, we'll transfer its thennables to the
		                  // SuspenseList so that it can retry if they resolve.
		                  // There might be multiple of these in the list but since we're
		                  // going to wait for all of them anyway, it doesn't really matter
		                  // which ones gets to ping. In theory we could get clever and keep
		                  // track of how many dependencies remain but it gets tricky because
		                  // in the meantime, we can add/remove/change items and dependencies.
		                  // We might bail out of the loop before finding any but that
		                  // doesn't matter since that means that the other boundaries that
		                  // we did find already has their listeners attached.

		                  var newThennables = suspended.updateQueue;

		                  if (newThennables !== null) {
		                    workInProgress.updateQueue = newThennables;
		                    workInProgress.flags |= Update;
		                  } // Rerender the whole list, but this time, we'll force fallbacks
		                  // to stay in place.
		                  // Reset the effect list before doing the second pass since that's now invalid.


		                  if (renderState.lastEffect === null) {
		                    workInProgress.firstEffect = null;
		                  }

		                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

		                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
		                  // rerender the children.

		                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
		                  return workInProgress.child;
		                }

		                row = row.sibling;
		              }
		            }

		            if (renderState.tail !== null && now$1() > getRenderTargetTime()) {
		              // We have already passed our CPU deadline but we still have rows
		              // left in the tail. We'll just give up further attempts to render
		              // the main content and only render fallbacks.
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true;
		              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
		              // to get it started back up to attempt the next item. While in terms
		              // of priority this work has the same priority as this current render,
		              // it's not part of the same transition once the transition has
		              // committed. If it's sync, we still want to yield so that it can be
		              // painted. Conceptually, this is really the same as pinging.
		              // We can use any RetryLane even if it's the one currently rendering
		              // since we're leaving it behind on this node.

		              workInProgress.lanes = SomeRetryLane;

		              {
		                markSpawnedWork(SomeRetryLane);
		              }
		            }
		          } else {
		            cutOffTailIfNeeded(renderState, false);
		          } // Next we're going to render the tail.

		        } else {
		          // Append the rendered row to the child list.
		          if (!didSuspendAlready) {
		            var _suspended = findFirstSuspended(renderedTail);

		            if (_suspended !== null) {
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
		              // get lost if this row ends up dropped during a second pass.

		              var _newThennables = _suspended.updateQueue;

		              if (_newThennables !== null) {
		                workInProgress.updateQueue = _newThennables;
		                workInProgress.flags |= Update;
		              }

		              cutOffTailIfNeeded(renderState, true); // This might have been modified.

		              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
		              ) {
		                  // We need to delete the row we just rendered.
		                  // Reset the effect list to what it was before we rendered this
		                  // child. The nested children have already appended themselves.
		                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

		                  if (lastEffect !== null) {
		                    lastEffect.nextEffect = null;
		                  } // We're done.


		                  return null;
		                }
		            } else if ( // The time it took to render last row is greater than the remaining
		            // time we have to render. So rendering one more row would likely
		            // exceed it.
		            now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
		              // We have now passed our CPU deadline and we'll just give up further
		              // attempts to render the main content and only render fallbacks.
		              // The assumption is that this is usually faster.
		              workInProgress.flags |= DidCapture;
		              didSuspendAlready = true;
		              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
		              // to get it started back up to attempt the next item. While in terms
		              // of priority this work has the same priority as this current render,
		              // it's not part of the same transition once the transition has
		              // committed. If it's sync, we still want to yield so that it can be
		              // painted. Conceptually, this is really the same as pinging.
		              // We can use any RetryLane even if it's the one currently rendering
		              // since we're leaving it behind on this node.

		              workInProgress.lanes = SomeRetryLane;

		              {
		                markSpawnedWork(SomeRetryLane);
		              }
		            }
		          }

		          if (renderState.isBackwards) {
		            // The effect list of the backwards tail will have been added
		            // to the end. This breaks the guarantee that life-cycles fire in
		            // sibling order but that isn't a strong guarantee promised by React.
		            // Especially since these might also just pop in during future commits.
		            // Append to the beginning of the list.
		            renderedTail.sibling = workInProgress.child;
		            workInProgress.child = renderedTail;
		          } else {
		            var previousSibling = renderState.last;

		            if (previousSibling !== null) {
		              previousSibling.sibling = renderedTail;
		            } else {
		              workInProgress.child = renderedTail;
		            }

		            renderState.last = renderedTail;
		          }
		        }

		        if (renderState.tail !== null) {
		          // We still have tail rows to render.
		          // Pop a row.
		          var next = renderState.tail;
		          renderState.rendering = next;
		          renderState.tail = next.sibling;
		          renderState.lastEffect = workInProgress.lastEffect;
		          renderState.renderingStartTime = now$1();
		          next.sibling = null; // Restore the context.
		          // TODO: We can probably just avoid popping it instead and only
		          // setting it the first time we go from not suspended to suspended.

		          var suspenseContext = suspenseStackCursor.current;

		          if (didSuspendAlready) {
		            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
		          } else {
		            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
		          }

		          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

		          return next;
		        }

		        return null;
		      }

		    case FundamentalComponent:
		      {

		        break;
		      }

		    case ScopeComponent:
		      {

		        break;
		      }

		    case Block:

		      break;

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      {
		        popRenderLanes(workInProgress);

		        if (current !== null) {
		          var _nextState = workInProgress.memoizedState;
		          var _prevState = current.memoizedState;
		          var prevIsHidden = _prevState !== null;
		          var nextIsHidden = _nextState !== null;

		          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
		            workInProgress.flags |= Update;
		          }
		        }

		        return null;
		      }
		  }

		  {
		    {
		      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function unwindWork(workInProgress, renderLanes) {
		  switch (workInProgress.tag) {
		    case ClassComponent:
		      {
		        var Component = workInProgress.type;

		        if (isContextProvider(Component)) {
		          popContext(workInProgress);
		        }

		        var flags = workInProgress.flags;

		        if (flags & ShouldCapture) {
		          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          }

		          return workInProgress;
		        }

		        return null;
		      }

		    case HostRoot:
		      {
		        popHostContainer(workInProgress);
		        popTopLevelContextObject(workInProgress);
		        resetWorkInProgressVersions();
		        var _flags = workInProgress.flags;

		        if (!((_flags & DidCapture) === NoFlags)) {
		          {
		            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
		          }
		        }

		        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
		        return workInProgress;
		      }

		    case HostComponent:
		      {
		        // TODO: popHydrationState
		        popHostContext(workInProgress);
		        return null;
		      }

		    case SuspenseComponent:
		      {
		        popSuspenseContext(workInProgress);

		        var _flags2 = workInProgress.flags;

		        if (_flags2 & ShouldCapture) {
		          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

		          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
		            transferActualDuration(workInProgress);
		          }

		          return workInProgress;
		        }

		        return null;
		      }

		    case SuspenseListComponent:
		      {
		        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
		        // caught by a nested boundary. If not, it should bubble through.

		        return null;
		      }

		    case HostPortal:
		      popHostContainer(workInProgress);
		      return null;

		    case ContextProvider:
		      popProvider(workInProgress);
		      return null;

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      popRenderLanes(workInProgress);
		      return null;

		    default:
		      return null;
		  }
		}

		function unwindInterruptedWork(interruptedWork) {
		  switch (interruptedWork.tag) {
		    case ClassComponent:
		      {
		        var childContextTypes = interruptedWork.type.childContextTypes;

		        if (childContextTypes !== null && childContextTypes !== undefined) {
		          popContext(interruptedWork);
		        }

		        break;
		      }

		    case HostRoot:
		      {
		        popHostContainer(interruptedWork);
		        popTopLevelContextObject(interruptedWork);
		        resetWorkInProgressVersions();
		        break;
		      }

		    case HostComponent:
		      {
		        popHostContext(interruptedWork);
		        break;
		      }

		    case HostPortal:
		      popHostContainer(interruptedWork);
		      break;

		    case SuspenseComponent:
		      popSuspenseContext(interruptedWork);
		      break;

		    case SuspenseListComponent:
		      popSuspenseContext(interruptedWork);
		      break;

		    case ContextProvider:
		      popProvider(interruptedWork);
		      break;

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      popRenderLanes(interruptedWork);
		      break;
		  }
		}

		function createCapturedValue(value, source) {
		  // If the value is an error, call this function immediately after it is thrown
		  // so the stack is accurate.
		  return {
		    value: value,
		    source: source,
		    stack: getStackByFiberInDevAndProd(source)
		  };
		}

		// This module is forked in different environments.
		// By default, return `true` to log errors to the console.
		// Forks can return `false` if this isn't desirable.
		function showErrorDialog(boundary, errorInfo) {
		  return true;
		}

		function logCapturedError(boundary, errorInfo) {
		  try {
		    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
		    // This enables renderers like ReactNative to better manage redbox behavior.

		    if (logError === false) {
		      return;
		    }

		    var error = errorInfo.value;

		    if (true) {
		      var source = errorInfo.source;
		      var stack = errorInfo.stack;
		      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
		      // `preventDefault()` in window `error` handler.
		      // We record this information as an expando on the error.

		      if (error != null && error._suppressLogging) {
		        if (boundary.tag === ClassComponent) {
		          // The error is recoverable and was silenced.
		          // Ignore it and don't print the stack addendum.
		          // This is handy for testing error boundaries without noise.
		          return;
		        } // The error is fatal. Since the silencing might have
		        // been accidental, we'll surface it anyway.
		        // However, the browser would have silenced the original error
		        // so we'll print it first, and then print the stack addendum.


		        console['error'](error); // Don't transform to our wrapper
		        // For a more detailed description of this block, see:
		        // https://github.com/facebook/react/pull/13384
		      }

		      var componentName = source ? getComponentName(source.type) : null;
		      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
		      var errorBoundaryMessage;
		      var errorBoundaryName = getComponentName(boundary.type);

		      if (errorBoundaryName) {
		        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
		      } else {
		        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
		      }

		      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
		      // We don't include the original error message and JS stack because the browser
		      // has already printed it. Even if the application swallows the error, it is still
		      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

		      console['error'](combinedMessage); // Don't transform to our wrapper
		    }
		  } catch (e) {
		    // This method must not throw, or React internal state will get messed up.
		    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
		    // we want to report this error outside of the normal stack as a last resort.
		    // https://github.com/facebook/react/issues/13188
		    setTimeout(function () {
		      throw e;
		    });
		  }
		}

		var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

		function createRootErrorUpdate(fiber, errorInfo, lane) {
		  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

		  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
		  // being called "element".

		  update.payload = {
		    element: null
		  };
		  var error = errorInfo.value;

		  update.callback = function () {
		    onUncaughtError(error);
		    logCapturedError(fiber, errorInfo);
		  };

		  return update;
		}

		function createClassErrorUpdate(fiber, errorInfo, lane) {
		  var update = createUpdate(NoTimestamp, lane);
		  update.tag = CaptureUpdate;
		  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

		  if (typeof getDerivedStateFromError === 'function') {
		    var error$1 = errorInfo.value;

		    update.payload = function () {
		      logCapturedError(fiber, errorInfo);
		      return getDerivedStateFromError(error$1);
		    };
		  }

		  var inst = fiber.stateNode;

		  if (inst !== null && typeof inst.componentDidCatch === 'function') {
		    update.callback = function callback() {
		      {
		        markFailedErrorBoundaryForHotReloading(fiber);
		      }

		      if (typeof getDerivedStateFromError !== 'function') {
		        // To preserve the preexisting retry behavior of error boundaries,
		        // we keep track of which ones already failed during this batch.
		        // This gets reset before we yield back to the browser.
		        // TODO: Warn in strict mode if getDerivedStateFromError is
		        // not defined.
		        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

		        logCapturedError(fiber, errorInfo);
		      }

		      var error$1 = errorInfo.value;
		      var stack = errorInfo.stack;
		      this.componentDidCatch(error$1, {
		        componentStack: stack !== null ? stack : ''
		      });

		      {
		        if (typeof getDerivedStateFromError !== 'function') {
		          // If componentDidCatch is the only error boundary method defined,
		          // then it needs to call setState to recover from errors.
		          // If no state update is scheduled then the boundary will swallow the error.
		          if (!includesSomeLane(fiber.lanes, SyncLane)) {
		            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
		          }
		        }
		      }
		    };
		  } else {
		    update.callback = function () {
		      markFailedErrorBoundaryForHotReloading(fiber);
		    };
		  }

		  return update;
		}

		function attachPingListener(root, wakeable, lanes) {
		  // Attach a listener to the promise to "ping" the root and retry. But only if
		  // one does not already exist for the lanes we're currently rendering (which
		  // acts like a "thread ID" here).
		  var pingCache = root.pingCache;
		  var threadIDs;

		  if (pingCache === null) {
		    pingCache = root.pingCache = new PossiblyWeakMap$1();
		    threadIDs = new Set();
		    pingCache.set(wakeable, threadIDs);
		  } else {
		    threadIDs = pingCache.get(wakeable);

		    if (threadIDs === undefined) {
		      threadIDs = new Set();
		      pingCache.set(wakeable, threadIDs);
		    }
		  }

		  if (!threadIDs.has(lanes)) {
		    // Memoize using the thread ID to prevent redundant listeners.
		    threadIDs.add(lanes);
		    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
		    wakeable.then(ping, ping);
		  }
		}

		function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
		  // The source fiber did not complete.
		  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

		  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

		  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
		    // This is a wakeable.
		    var wakeable = value;

		    if ((sourceFiber.mode & BlockingMode) === NoMode) {
		      // Reset the memoizedState to what it was before we attempted
		      // to render it.
		      var currentSource = sourceFiber.alternate;

		      if (currentSource) {
		        sourceFiber.updateQueue = currentSource.updateQueue;
		        sourceFiber.memoizedState = currentSource.memoizedState;
		        sourceFiber.lanes = currentSource.lanes;
		      } else {
		        sourceFiber.updateQueue = null;
		        sourceFiber.memoizedState = null;
		      }
		    }

		    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

		    var _workInProgress = returnFiber;

		    do {
		      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
		        // Found the nearest boundary.
		        // Stash the promise on the boundary fiber. If the boundary times out, we'll
		        // attach another listener to flip the boundary back to its normal state.
		        var wakeables = _workInProgress.updateQueue;

		        if (wakeables === null) {
		          var updateQueue = new Set();
		          updateQueue.add(wakeable);
		          _workInProgress.updateQueue = updateQueue;
		        } else {
		          wakeables.add(wakeable);
		        } // If the boundary is outside of blocking mode, we should *not*
		        // suspend the commit. Pretend as if the suspended component rendered
		        // null and keep rendering. In the commit phase, we'll schedule a
		        // subsequent synchronous update to re-render the Suspense.
		        //
		        // Note: It doesn't matter whether the component that suspended was
		        // inside a blocking mode tree. If the Suspense is outside of it, we
		        // should *not* suspend the commit.


		        if ((_workInProgress.mode & BlockingMode) === NoMode) {
		          _workInProgress.flags |= DidCapture;
		          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
		          // But we shouldn't call any lifecycle methods or callbacks. Remove
		          // all lifecycle effect tags.

		          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

		          if (sourceFiber.tag === ClassComponent) {
		            var currentSourceFiber = sourceFiber.alternate;

		            if (currentSourceFiber === null) {
		              // This is a new mount. Change the tag so it's not mistaken for a
		              // completed class component. For example, we should not call
		              // componentWillUnmount if it is deleted.
		              sourceFiber.tag = IncompleteClassComponent;
		            } else {
		              // When we try rendering again, we should not reuse the current fiber,
		              // since it's known to be in an inconsistent state. Use a force update to
		              // prevent a bail out.
		              var update = createUpdate(NoTimestamp, SyncLane);
		              update.tag = ForceUpdate;
		              enqueueUpdate(sourceFiber, update);
		            }
		          } // The source fiber did not complete. Mark it with Sync priority to
		          // indicate that it still has pending work.


		          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

		          return;
		        } // Confirmed that the boundary is in a concurrent mode tree. Continue
		        // with the normal suspend path.
		        //
		        // After this we'll use a set of heuristics to determine whether this
		        // render pass will run to completion or restart or "suspend" the commit.
		        // The actual logic for this is spread out in different places.
		        //
		        // This first principle is that if we're going to suspend when we complete
		        // a root, then we should also restart if we get an update or ping that
		        // might unsuspend it, and vice versa. The only reason to suspend is
		        // because you think you might want to restart before committing. However,
		        // it doesn't make sense to restart only while in the period we're suspended.
		        //
		        // Restarting too aggressively is also not good because it starves out any
		        // intermediate loading state. So we use heuristics to determine when.
		        // Suspense Heuristics
		        //
		        // If nothing threw a Promise or all the same fallbacks are already showing,
		        // then don't suspend/restart.
		        //
		        // If this is an initial render of a new tree of Suspense boundaries and
		        // those trigger a fallback, then don't suspend/restart. We want to ensure
		        // that we can show the initial loading state as quickly as possible.
		        //
		        // If we hit a "Delayed" case, such as when we'd switch from content back into
		        // a fallback, then we should always suspend/restart. Transitions apply
		        // to this case. If none is defined, JND is used instead.
		        //
		        // If we're already showing a fallback and it gets "retried", allowing us to show
		        // another level, but there's still an inner boundary that would show a fallback,
		        // then we suspend/restart for 500ms since the last time we showed a fallback
		        // anywhere in the tree. This effectively throttles progressive loading into a
		        // consistent train of commits. This also gives us an opportunity to restart to
		        // get to the completed state slightly earlier.
		        //
		        // If there's ambiguity due to batching it's resolved in preference of:
		        // 1) "delayed", 2) "initial render", 3) "retry".
		        //
		        // We want to ensure that a "busy" state doesn't get force committed. We want to
		        // ensure that new initial loading states can commit as soon as possible.


		        attachPingListener(root, wakeable, rootRenderLanes);
		        _workInProgress.flags |= ShouldCapture;
		        _workInProgress.lanes = rootRenderLanes;
		        return;
		      } // This boundary already captured during this render. Continue to the next
		      // boundary.


		      _workInProgress = _workInProgress.return;
		    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
		    // TODO: Use invariant so the message is stripped in prod?


		    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
		  } // We didn't find a boundary that could handle this type of exception. Start
		  // over and traverse parent path again, this time treating the exception
		  // as an error.


		  renderDidError();
		  value = createCapturedValue(value, sourceFiber);
		  var workInProgress = returnFiber;

		  do {
		    switch (workInProgress.tag) {
		      case HostRoot:
		        {
		          var _errorInfo = value;
		          workInProgress.flags |= ShouldCapture;
		          var lane = pickArbitraryLane(rootRenderLanes);
		          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

		          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

		          enqueueCapturedUpdate(workInProgress, _update);
		          return;
		        }

		      case ClassComponent:
		        // Capture and retry
		        var errorInfo = value;
		        var ctor = workInProgress.type;
		        var instance = workInProgress.stateNode;

		        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
		          workInProgress.flags |= ShouldCapture;

		          var _lane = pickArbitraryLane(rootRenderLanes);

		          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

		          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

		          enqueueCapturedUpdate(workInProgress, _update2);
		          return;
		        }

		        break;
		    }

		    workInProgress = workInProgress.return;
		  } while (workInProgress !== null);
		}

		function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
		  var funcArgs = Array.prototype.slice.call(arguments, 3);

		  try {
		    func.apply(context, funcArgs);
		  } catch (error) {
		    this.onError(error);
		  }
		}

		var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

		{
		  // In DEV mode, we swap out invokeGuardedCallback for a special version
		  // that plays more nicely with the browser's DevTools. The idea is to preserve
		  // "Pause on exceptions" behavior. Because React wraps all user-provided
		  // functions in invokeGuardedCallback, and the production version of
		  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
		  // like caught exceptions, and the DevTools won't pause unless the developer
		  // takes the extra step of enabling pause on caught exceptions. This is
		  // unintuitive, though, because even though React has caught the error, from
		  // the developer's perspective, the error is uncaught.
		  //
		  // To preserve the expected "Pause on exceptions" behavior, we don't use a
		  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
		  // DOM node, and call the user-provided callback from inside an event handler
		  // for that fake event. If the callback throws, the error is "captured" using
		  // a global event handler. But because the error happens in a different
		  // event loop context, it does not interrupt the normal program flow.
		  // Effectively, this gives us try-catch behavior without actually using
		  // try-catch. Neat!
		  // Check that the browser supports the APIs we need to implement our special
		  // DEV version of invokeGuardedCallback
		  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
		    var fakeNode = document.createElement('react');

		    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
		      // If document doesn't exist we know for sure we will crash in this method
		      // when we call document.createEvent(). However this can cause confusing
		      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
		      // So we preemptively throw with a better message instead.
		      if (!(typeof document !== 'undefined')) {
		        {
		          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
		        }
		      }

		      var evt = document.createEvent('Event');
		      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
		      // set this to true at the beginning, then set it to false right after
		      // calling the function. If the function errors, `didError` will never be
		      // set to false. This strategy works even if the browser is flaky and
		      // fails to call our global error handler, because it doesn't rely on
		      // the error event at all.

		      var didError = true; // Keeps track of the value of window.event so that we can reset it
		      // during the callback to let user code access window.event in the
		      // browsers that support it.

		      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
		      // dispatching: https://github.com/facebook/react/issues/13688

		      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

		      function restoreAfterDispatch() {
		        // We immediately remove the callback from event listeners so that
		        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
		        // nested call would trigger the fake event handlers of any call higher
		        // in the stack.
		        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
		        // window.event assignment in both IE <= 10 as they throw an error
		        // "Member not found" in strict mode, and in Firefox which does not
		        // support window.event.

		        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
		          window.event = windowEvent;
		        }
		      } // Create an event handler for our fake event. We will synchronously
		      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
		      // call the user-provided callback.


		      var funcArgs = Array.prototype.slice.call(arguments, 3);

		      function callCallback() {
		        didCall = true;
		        restoreAfterDispatch();
		        func.apply(context, funcArgs);
		        didError = false;
		      } // Create a global error event handler. We use this to capture the value
		      // that was thrown. It's possible that this error handler will fire more
		      // than once; for example, if non-React code also calls `dispatchEvent`
		      // and a handler for that event throws. We should be resilient to most of
		      // those cases. Even if our error event handler fires more than once, the
		      // last error event is always used. If the callback actually does error,
		      // we know that the last error event is the correct one, because it's not
		      // possible for anything else to have happened in between our callback
		      // erroring and the code that follows the `dispatchEvent` call below. If
		      // the callback doesn't error, but the error event was fired, we know to
		      // ignore it because `didError` will be false, as described above.


		      var error; // Use this to track whether the error event is ever called.

		      var didSetError = false;
		      var isCrossOriginError = false;

		      function handleWindowError(event) {
		        error = event.error;
		        didSetError = true;

		        if (error === null && event.colno === 0 && event.lineno === 0) {
		          isCrossOriginError = true;
		        }

		        if (event.defaultPrevented) {
		          // Some other error handler has prevented default.
		          // Browsers silence the error report if this happens.
		          // We'll remember this to later decide whether to log it or not.
		          if (error != null && typeof error === 'object') {
		            try {
		              error._suppressLogging = true;
		            } catch (inner) {// Ignore.
		            }
		          }
		        }
		      } // Create a fake event type.


		      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

		      window.addEventListener('error', handleWindowError);
		      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
		      // errors, it will trigger our global error handler.

		      evt.initEvent(evtType, false, false);
		      fakeNode.dispatchEvent(evt);

		      if (windowEventDescriptor) {
		        Object.defineProperty(window, 'event', windowEventDescriptor);
		      }

		      if (didCall && didError) {
		        if (!didSetError) {
		          // The callback errored, but the error event never fired.
		          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
		        } else if (isCrossOriginError) {
		          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
		        }

		        this.onError(error);
		      } // Remove our event listeners


		      window.removeEventListener('error', handleWindowError);

		      if (!didCall) {
		        // Something went really wrong, and our event was not dispatched.
		        // https://github.com/facebook/react/issues/16734
		        // https://github.com/facebook/react/issues/16585
		        // Fall back to the production implementation.
		        restoreAfterDispatch();
		        return invokeGuardedCallbackProd.apply(this, arguments);
		      }
		    };
		  }
		}

		var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

		var hasError = false;
		var caughtError = null; // Used by event system to capture/rethrow the first error.
		var reporter = {
		  onError: function (error) {
		    hasError = true;
		    caughtError = error;
		  }
		};
		/**
		 * Call a function while guarding against errors that happens within it.
		 * Returns an error if it throws, otherwise null.
		 *
		 * In production, this is implemented using a try-catch. The reason we don't
		 * use a try-catch directly is so that we can swap out a different
		 * implementation in DEV mode.
		 *
		 * @param {String} name of the guard to use for logging or debugging
		 * @param {Function} func The function to invoke
		 * @param {*} context The context to use when calling the function
		 * @param {...*} args Arguments for function
		 */

		function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
		  hasError = false;
		  caughtError = null;
		  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
		}
		function hasCaughtError() {
		  return hasError;
		}
		function clearCaughtError() {
		  if (hasError) {
		    var error = caughtError;
		    hasError = false;
		    caughtError = null;
		    return error;
		  } else {
		    {
		      {
		        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }
		}

		var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

		{
		  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
		}

		var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

		var callComponentWillUnmountWithTimer = function (current, instance) {
		  instance.props = current.memoizedProps;
		  instance.state = current.memoizedState;

		  {
		    instance.componentWillUnmount();
		  }
		}; // Capture errors so they don't interrupt unmounting.


		function safelyCallComponentWillUnmount(current, instance) {
		  {
		    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

		    if (hasCaughtError()) {
		      var unmountError = clearCaughtError();
		      captureCommitPhaseError(current, unmountError);
		    }
		  }
		}

		function safelyDetachRef(current) {
		  var ref = current.ref;

		  if (ref !== null) {
		    if (typeof ref === 'function') {
		      {
		        invokeGuardedCallback(null, ref, null, null);

		        if (hasCaughtError()) {
		          var refError = clearCaughtError();
		          captureCommitPhaseError(current, refError);
		        }
		      }
		    } else {
		      ref.current = null;
		    }
		  }
		}

		function safelyCallDestroy(current, destroy) {
		  {
		    invokeGuardedCallback(null, destroy, null);

		    if (hasCaughtError()) {
		      var error = clearCaughtError();
		      captureCommitPhaseError(current, error);
		    }
		  }
		}

		function commitBeforeMutationLifeCycles(current, finishedWork) {
		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		    case Block:
		      {
		        return;
		      }

		    case ClassComponent:
		      {
		        if (finishedWork.flags & Snapshot) {
		          if (current !== null) {
		            var prevProps = current.memoizedProps;
		            var prevState = current.memoizedState;
		            var instance = finishedWork.stateNode; // We could update instance props and state here,
		            // but instead we rely on them being set during last render.
		            // TODO: revisit this when we implement resuming.

		            {
		              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                if (instance.props !== finishedWork.memoizedProps) {
		                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }

		                if (instance.state !== finishedWork.memoizedState) {
		                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }
		              }
		            }

		            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

		            {
		              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

		              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
		                didWarnSet.add(finishedWork.type);

		                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
		              }
		            }

		            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
		          }
		        }

		        return;
		      }

		    case HostRoot:
		      {
		        if (supportsMutation) {
		          if (finishedWork.flags & Snapshot) {
		            var root = finishedWork.stateNode;
		            clearContainer(root.containerInfo);
		          }
		        }

		        return;
		      }

		    case HostComponent:
		    case HostText:
		    case HostPortal:
		    case IncompleteClassComponent:
		      // Nothing to do for these component types
		      return;
		  }

		  {
		    {
		      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function commitHookEffectListUnmount(tag, finishedWork) {
		  var updateQueue = finishedWork.updateQueue;
		  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

		  if (lastEffect !== null) {
		    var firstEffect = lastEffect.next;
		    var effect = firstEffect;

		    do {
		      if ((effect.tag & tag) === tag) {
		        // Unmount
		        var destroy = effect.destroy;
		        effect.destroy = undefined;

		        if (destroy !== undefined) {
		          destroy();
		        }
		      }

		      effect = effect.next;
		    } while (effect !== firstEffect);
		  }
		}

		function commitHookEffectListMount(tag, finishedWork) {
		  var updateQueue = finishedWork.updateQueue;
		  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

		  if (lastEffect !== null) {
		    var firstEffect = lastEffect.next;
		    var effect = firstEffect;

		    do {
		      if ((effect.tag & tag) === tag) {
		        // Mount
		        var create = effect.create;
		        effect.destroy = create();

		        {
		          var destroy = effect.destroy;

		          if (destroy !== undefined && typeof destroy !== 'function') {
		            var addendum = void 0;

		            if (destroy === null) {
		              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
		            } else if (typeof destroy.then === 'function') {
		              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
		            } else {
		              addendum = ' You returned: ' + destroy;
		            }

		            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
		          }
		        }
		      }

		      effect = effect.next;
		    } while (effect !== firstEffect);
		  }
		}

		function schedulePassiveEffects(finishedWork) {
		  var updateQueue = finishedWork.updateQueue;
		  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

		  if (lastEffect !== null) {
		    var firstEffect = lastEffect.next;
		    var effect = firstEffect;

		    do {
		      var _effect = effect,
		          next = _effect.next,
		          tag = _effect.tag;

		      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
		        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
		        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
		      }

		      effect = next;
		    } while (effect !== firstEffect);
		  }
		}

		function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case SimpleMemoComponent:
		    case Block:
		      {
		        // At this point layout effects have already been destroyed (during mutation phase).
		        // This is done to prevent sibling component effects from interfering with each other,
		        // e.g. a destroy function in one component should never override a ref set
		        // by a create function in another component during the same commit.
		        {
		          commitHookEffectListMount(Layout | HasEffect, finishedWork);
		        }

		        schedulePassiveEffects(finishedWork);
		        return;
		      }

		    case ClassComponent:
		      {
		        var instance = finishedWork.stateNode;

		        if (finishedWork.flags & Update) {
		          if (current === null) {
		            // We could update instance props and state here,
		            // but instead we rely on them being set during last render.
		            // TODO: revisit this when we implement resuming.
		            {
		              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                if (instance.props !== finishedWork.memoizedProps) {
		                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }

		                if (instance.state !== finishedWork.memoizedState) {
		                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }
		              }
		            }

		            {
		              instance.componentDidMount();
		            }
		          } else {
		            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
		            var prevState = current.memoizedState; // We could update instance props and state here,
		            // but instead we rely on them being set during last render.
		            // TODO: revisit this when we implement resuming.

		            {
		              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		                if (instance.props !== finishedWork.memoizedProps) {
		                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }

		                if (instance.state !== finishedWork.memoizedState) {
		                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		                }
		              }
		            }

		            {
		              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
		            }
		          }
		        } // TODO: I think this is now always non-null by the time it reaches the
		        // commit phase. Consider removing the type check.


		        var updateQueue = finishedWork.updateQueue;

		        if (updateQueue !== null) {
		          {
		            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
		              if (instance.props !== finishedWork.memoizedProps) {
		                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		              }

		              if (instance.state !== finishedWork.memoizedState) {
		                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
		              }
		            }
		          } // We could update instance props and state here,
		          // but instead we rely on them being set during last render.
		          // TODO: revisit this when we implement resuming.


		          commitUpdateQueue(finishedWork, updateQueue, instance);
		        }

		        return;
		      }

		    case HostRoot:
		      {
		        // TODO: I think this is now always non-null by the time it reaches the
		        // commit phase. Consider removing the type check.
		        var _updateQueue = finishedWork.updateQueue;

		        if (_updateQueue !== null) {
		          var _instance = null;

		          if (finishedWork.child !== null) {
		            switch (finishedWork.child.tag) {
		              case HostComponent:
		                _instance = getPublicInstance(finishedWork.child.stateNode);
		                break;

		              case ClassComponent:
		                _instance = finishedWork.child.stateNode;
		                break;
		            }
		          }

		          commitUpdateQueue(finishedWork, _updateQueue, _instance);
		        }

		        return;
		      }

		    case HostComponent:
		      {
		        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
		        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
		        // These effects should only be committed when components are first mounted,
		        // aka when there is no current/alternate.

		        if (current === null && finishedWork.flags & Update) {
		          var type = finishedWork.type;
		          var props = finishedWork.memoizedProps;
		          commitMount(_instance2, type, props, finishedWork);
		        }

		        return;
		      }

		    case HostText:
		      {
		        // We have no life-cycles associated with text.
		        return;
		      }

		    case HostPortal:
		      {
		        // We have no life-cycles associated with portals.
		        return;
		      }

		    case Profiler:
		      {
		        {
		          var _finishedWork$memoize2 = finishedWork.memoizedProps;
		              _finishedWork$memoize2.onCommit;
		              var onRender = _finishedWork$memoize2.onRender;
		          finishedWork.stateNode.effectDuration;
		          var commitTime = getCommitTime();

		          if (typeof onRender === 'function') {
		            {
		              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
		            }
		          }
		        }

		        return;
		      }

		    case SuspenseComponent:
		      {
		        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		        return;
		      }

		    case SuspenseListComponent:
		    case IncompleteClassComponent:
		    case FundamentalComponent:
		    case ScopeComponent:
		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      return;
		  }

		  {
		    {
		      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function hideOrUnhideAllChildren(finishedWork, isHidden) {
		  if (supportsMutation) {
		    // We only have the top Fiber that was inserted but we need to recurse down its
		    // children to find all the terminal nodes.
		    var node = finishedWork;

		    while (true) {
		      if (node.tag === HostComponent) {
		        var instance = node.stateNode;

		        if (isHidden) {
		          hideInstance(instance);
		        } else {
		          unhideInstance(node.stateNode, node.memoizedProps);
		        }
		      } else if (node.tag === HostText) {
		        var _instance3 = node.stateNode;

		        if (isHidden) {
		          hideTextInstance(_instance3);
		        } else {
		          unhideTextInstance(_instance3, node.memoizedProps);
		        }
		      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === finishedWork) {
		        return;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === finishedWork) {
		          return;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }
		}

		function commitAttachRef(finishedWork) {
		  var ref = finishedWork.ref;

		  if (ref !== null) {
		    var instance = finishedWork.stateNode;
		    var instanceToUse;

		    switch (finishedWork.tag) {
		      case HostComponent:
		        instanceToUse = getPublicInstance(instance);
		        break;

		      default:
		        instanceToUse = instance;
		    } // Moved outside to ensure DCE works with this flag

		    if (typeof ref === 'function') {
		      ref(instanceToUse);
		    } else {
		      {
		        if (!ref.hasOwnProperty('current')) {
		          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
		        }
		      }

		      ref.current = instanceToUse;
		    }
		  }
		}

		function commitDetachRef(current) {
		  var currentRef = current.ref;

		  if (currentRef !== null) {
		    if (typeof currentRef === 'function') {
		      currentRef(null);
		    } else {
		      currentRef.current = null;
		    }
		  }
		} // User-originating errors (lifecycles and refs) should not interrupt
		// deletion, so don't let them throw. Host-originating errors should
		// interrupt deletion, so it's okay


		function commitUnmount(finishedRoot, current, renderPriorityLevel) {
		  onCommitUnmount(current);

		  switch (current.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case MemoComponent:
		    case SimpleMemoComponent:
		    case Block:
		      {
		        var updateQueue = current.updateQueue;

		        if (updateQueue !== null) {
		          var lastEffect = updateQueue.lastEffect;

		          if (lastEffect !== null) {
		            var firstEffect = lastEffect.next;
		            var effect = firstEffect;

		            do {
		              var _effect2 = effect,
		                  destroy = _effect2.destroy,
		                  tag = _effect2.tag;

		              if (destroy !== undefined) {
		                if ((tag & Passive$1) !== NoFlags$1) {
		                  enqueuePendingPassiveHookEffectUnmount(current, effect);
		                } else {
		                  {
		                    safelyCallDestroy(current, destroy);
		                  }
		                }
		              }

		              effect = effect.next;
		            } while (effect !== firstEffect);
		          }
		        }

		        return;
		      }

		    case ClassComponent:
		      {
		        safelyDetachRef(current);
		        var instance = current.stateNode;

		        if (typeof instance.componentWillUnmount === 'function') {
		          safelyCallComponentWillUnmount(current, instance);
		        }

		        return;
		      }

		    case HostComponent:
		      {
		        safelyDetachRef(current);
		        return;
		      }

		    case HostPortal:
		      {
		        // TODO: this is recursive.
		        // We are also not using this parent because
		        // the portal will get pushed immediately.
		        if (supportsMutation) {
		          unmountHostComponents(finishedRoot, current);
		        } else if (supportsPersistence) {
		          emptyPortalContainer(current);
		        }

		        return;
		      }

		    case FundamentalComponent:
		      {

		        return;
		      }

		    case DehydratedFragment:
		      {

		        return;
		      }

		    case ScopeComponent:
		      {

		        return;
		      }
		  }
		}

		function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
		  // While we're inside a removed host node we don't want to call
		  // removeChild on the inner nodes because they're removed by the top
		  // call anyway. We also want to call componentWillUnmount on all
		  // composites before this host node is removed from the tree. Therefore
		  // we do an inner loop while we're still inside the host node.
		  var node = root;

		  while (true) {
		    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
		    // Skip portals because commitUnmount() currently visits them recursively.

		    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
		    // If we don't use mutation we drill down into portals here instead.
		    !supportsMutation || node.tag !== HostPortal)) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }

		    if (node === root) {
		      return;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === root) {
		        return;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }
		}

		function detachFiberMutation(fiber) {
		  // Cut off the return pointers to disconnect it from the tree. Ideally, we
		  // should clear the child pointer of the parent alternate to let this
		  // get GC:ed but we don't know which for sure which parent is the current
		  // one so we'll settle for GC:ing the subtree of this child. This child
		  // itself will be GC:ed when the parent updates the next time.
		  // Note: we cannot null out sibling here, otherwise it can cause issues
		  // with findDOMNode and how it requires the sibling field to carry out
		  // traversal in a later effect. See PR #16820. We now clear the sibling
		  // field after effects, see: detachFiberAfterEffects.
		  //
		  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
		  // It may be required if the current component is an error boundary,
		  // and one of its descendants throws while unmounting a passive effect.
		  fiber.alternate = null;
		  fiber.child = null;
		  fiber.dependencies = null;
		  fiber.firstEffect = null;
		  fiber.lastEffect = null;
		  fiber.memoizedProps = null;
		  fiber.memoizedState = null;
		  fiber.pendingProps = null;
		  fiber.return = null;
		  fiber.updateQueue = null;

		  {
		    fiber._debugOwner = null;
		  }
		}

		function emptyPortalContainer(current) {
		  if (!supportsPersistence) {
		    return;
		  }

		  var portal = current.stateNode;
		  var containerInfo = portal.containerInfo;
		  var emptyChildSet = createContainerChildSet(containerInfo);
		  replaceContainerChildren(containerInfo, emptyChildSet);
		}

		function commitContainer(finishedWork) {
		  if (!supportsPersistence) {
		    return;
		  }

		  switch (finishedWork.tag) {
		    case ClassComponent:
		    case HostComponent:
		    case HostText:
		    case FundamentalComponent:
		      {
		        return;
		      }

		    case HostRoot:
		    case HostPortal:
		      {
		        var portalOrRoot = finishedWork.stateNode;
		        var containerInfo = portalOrRoot.containerInfo,
		            pendingChildren = portalOrRoot.pendingChildren;
		        replaceContainerChildren(containerInfo, pendingChildren);
		        return;
		      }
		  }

		  {
		    {
		      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function getHostParentFiber(fiber) {
		  var parent = fiber.return;

		  while (parent !== null) {
		    if (isHostParent(parent)) {
		      return parent;
		    }

		    parent = parent.return;
		  }

		  {
		    {
		      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function isHostParent(fiber) {
		  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
		}

		function getHostSibling(fiber) {
		  // We're going to search forward into the tree until we find a sibling host
		  // node. Unfortunately, if multiple insertions are done in a row we have to
		  // search past them. This leads to exponential search for the next sibling.
		  // TODO: Find a more efficient way to do this.
		  var node = fiber;

		  siblings: while (true) {
		    // If we didn't find anything, let's try the next sibling.
		    while (node.sibling === null) {
		      if (node.return === null || isHostParent(node.return)) {
		        // If we pop out of the root or hit the parent the fiber we are the
		        // last sibling.
		        return null;
		      }

		      node = node.return;
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;

		    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
		      // If it is not host node and, we might have a host node inside it.
		      // Try to search down until we find one.
		      if (node.flags & Placement) {
		        // If we don't have a child, try the siblings instead.
		        continue siblings;
		      } // If we don't have a child, try the siblings instead.
		      // We also skip portals because they are not part of this host tree.


		      if (node.child === null || node.tag === HostPortal) {
		        continue siblings;
		      } else {
		        node.child.return = node;
		        node = node.child;
		      }
		    } // Check if this host node is stable or about to be placed.


		    if (!(node.flags & Placement)) {
		      // Found it!
		      return node.stateNode;
		    }
		  }
		}

		function commitPlacement(finishedWork) {
		  if (!supportsMutation) {
		    return;
		  } // Recursively insert all host nodes into the parent.


		  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

		  var parent;
		  var isContainer;
		  var parentStateNode = parentFiber.stateNode;

		  switch (parentFiber.tag) {
		    case HostComponent:
		      parent = parentStateNode;
		      isContainer = false;
		      break;

		    case HostRoot:
		      parent = parentStateNode.containerInfo;
		      isContainer = true;
		      break;

		    case HostPortal:
		      parent = parentStateNode.containerInfo;
		      isContainer = true;
		      break;

		    case FundamentalComponent:

		    // eslint-disable-next-line-no-fallthrough

		    default:
		      {
		        {
		          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
		        }
		      }

		  }

		  if (parentFiber.flags & ContentReset) {
		    // Reset the text content of the parent before doing any insertions
		    resetTextContent(parent); // Clear ContentReset from the effect tag

		    parentFiber.flags &= ~ContentReset;
		  }

		  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
		  // children to find all the terminal nodes.

		  if (isContainer) {
		    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
		  } else {
		    insertOrAppendPlacementNode(finishedWork, before, parent);
		  }
		}

		function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
		  var tag = node.tag;
		  var isHost = tag === HostComponent || tag === HostText;

		  if (isHost || enableFundamentalAPI ) {
		    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

		    if (before) {
		      insertInContainerBefore(parent, stateNode, before);
		    } else {
		      appendChildToContainer(parent, stateNode);
		    }
		  } else if (tag === HostPortal) ; else {
		    var child = node.child;

		    if (child !== null) {
		      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
		      var sibling = child.sibling;

		      while (sibling !== null) {
		        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
		        sibling = sibling.sibling;
		      }
		    }
		  }
		}

		function insertOrAppendPlacementNode(node, before, parent) {
		  var tag = node.tag;
		  var isHost = tag === HostComponent || tag === HostText;

		  if (isHost || enableFundamentalAPI ) {
		    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

		    if (before) {
		      insertBefore(parent, stateNode, before);
		    } else {
		      appendChild(parent, stateNode);
		    }
		  } else if (tag === HostPortal) ; else {
		    var child = node.child;

		    if (child !== null) {
		      insertOrAppendPlacementNode(child, before, parent);
		      var sibling = child.sibling;

		      while (sibling !== null) {
		        insertOrAppendPlacementNode(sibling, before, parent);
		        sibling = sibling.sibling;
		      }
		    }
		  }
		}

		function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
		  // We only have the top Fiber that was deleted but we need to recurse down its
		  // children to find all the terminal nodes.
		  var node = current; // Each iteration, currentParent is populated with node's host parent if not
		  // currentParentIsValid.

		  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

		  var currentParent;
		  var currentParentIsContainer;

		  while (true) {
		    if (!currentParentIsValid) {
		      var parent = node.return;

		      findParent: while (true) {
		        if (!(parent !== null)) {
		          {
		            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
		          }
		        }

		        var parentStateNode = parent.stateNode;

		        switch (parent.tag) {
		          case HostComponent:
		            currentParent = parentStateNode;
		            currentParentIsContainer = false;
		            break findParent;

		          case HostRoot:
		            currentParent = parentStateNode.containerInfo;
		            currentParentIsContainer = true;
		            break findParent;

		          case HostPortal:
		            currentParent = parentStateNode.containerInfo;
		            currentParentIsContainer = true;
		            break findParent;

		        }

		        parent = parent.return;
		      }

		      currentParentIsValid = true;
		    }

		    if (node.tag === HostComponent || node.tag === HostText) {
		      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
		      // node from the tree.

		      if (currentParentIsContainer) {
		        removeChildFromContainer(currentParent, node.stateNode);
		      } else {
		        removeChild(currentParent, node.stateNode);
		      } // Don't visit children because we already visited them.

		    } else if (node.tag === HostPortal) {
		      if (node.child !== null) {
		        // When we go into a portal, it becomes the parent to remove from.
		        // We will reassign it back when we pop the portal on the way up.
		        currentParent = node.stateNode.containerInfo;
		        currentParentIsContainer = true; // Visit children because portals might contain host components.

		        node.child.return = node;
		        node = node.child;
		        continue;
		      }
		    } else {
		      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

		      if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }
		    }

		    if (node === current) {
		      return;
		    }

		    while (node.sibling === null) {
		      if (node.return === null || node.return === current) {
		        return;
		      }

		      node = node.return;

		      if (node.tag === HostPortal) {
		        // When we go out of the portal, we need to restore the parent.
		        // Since we don't keep a stack of them, we will search for it.
		        currentParentIsValid = false;
		      }
		    }

		    node.sibling.return = node.return;
		    node = node.sibling;
		  }
		}

		function commitDeletion(finishedRoot, current, renderPriorityLevel) {
		  if (supportsMutation) {
		    // Recursively delete all host nodes from the parent.
		    // Detach refs and call componentWillUnmount() on the whole subtree.
		    unmountHostComponents(finishedRoot, current);
		  } else {
		    // Detach refs and call componentWillUnmount() on the whole subtree.
		    commitNestedUnmounts(finishedRoot, current);
		  }

		  var alternate = current.alternate;
		  detachFiberMutation(current);

		  if (alternate !== null) {
		    detachFiberMutation(alternate);
		  }
		}

		function commitWork(current, finishedWork) {
		  if (!supportsMutation) {
		    switch (finishedWork.tag) {
		      case FunctionComponent:
		      case ForwardRef:
		      case MemoComponent:
		      case SimpleMemoComponent:
		      case Block:
		        {
		          // Layout effects are destroyed during the mutation phase so that all
		          // destroy functions for all fibers are called before any create functions.
		          // This prevents sibling component effects from interfering with each other,
		          // e.g. a destroy function in one component should never override a ref set
		          // by a create function in another component during the same commit.
		          {
		            commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
		          }

		          return;
		        }

		      case Profiler:
		        {
		          return;
		        }

		      case SuspenseComponent:
		        {
		          commitSuspenseComponent(finishedWork);
		          attachSuspenseRetryListeners(finishedWork);
		          return;
		        }

		      case SuspenseListComponent:
		        {
		          attachSuspenseRetryListeners(finishedWork);
		          return;
		        }

		      case HostRoot:
		        {
		          if (supportsHydration) {
		            var root = finishedWork.stateNode;

		            if (root.hydrate) {
		              // We've just hydrated. No need to hydrate again.
		              root.hydrate = false;
		              commitHydratedContainer(root.containerInfo);
		            }
		          }

		          break;
		        }

		      case OffscreenComponent:
		      case LegacyHiddenComponent:
		        {
		          return;
		        }
		    }

		    commitContainer(finishedWork);
		    return;
		  }

		  switch (finishedWork.tag) {
		    case FunctionComponent:
		    case ForwardRef:
		    case MemoComponent:
		    case SimpleMemoComponent:
		    case Block:
		      {
		        // Layout effects are destroyed during the mutation phase so that all
		        // destroy functions for all fibers are called before any create functions.
		        // This prevents sibling component effects from interfering with each other,
		        // e.g. a destroy function in one component should never override a ref set
		        // by a create function in another component during the same commit.
		        {
		          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
		        }

		        return;
		      }

		    case ClassComponent:
		      {
		        return;
		      }

		    case HostComponent:
		      {
		        var instance = finishedWork.stateNode;

		        if (instance != null) {
		          // Commit the work prepared earlier.
		          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
		          // as the newProps. The updatePayload will contain the real change in
		          // this case.

		          var oldProps = current !== null ? current.memoizedProps : newProps;
		          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

		          var updatePayload = finishedWork.updateQueue;
		          finishedWork.updateQueue = null;

		          if (updatePayload !== null) {
		            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
		          }
		        }

		        return;
		      }

		    case HostText:
		      {
		        if (!(finishedWork.stateNode !== null)) {
		          {
		            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
		          }
		        }

		        var textInstance = finishedWork.stateNode;
		        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
		        // as the newProps. The updatePayload will contain the real change in
		        // this case.

		        var oldText = current !== null ? current.memoizedProps : newText;
		        commitTextUpdate(textInstance, oldText, newText);
		        return;
		      }

		    case HostRoot:
		      {
		        if (supportsHydration) {
		          var _root = finishedWork.stateNode;

		          if (_root.hydrate) {
		            // We've just hydrated. No need to hydrate again.
		            _root.hydrate = false;
		            commitHydratedContainer(_root.containerInfo);
		          }
		        }

		        return;
		      }

		    case Profiler:
		      {
		        return;
		      }

		    case SuspenseComponent:
		      {
		        commitSuspenseComponent(finishedWork);
		        attachSuspenseRetryListeners(finishedWork);
		        return;
		      }

		    case SuspenseListComponent:
		      {
		        attachSuspenseRetryListeners(finishedWork);
		        return;
		      }

		    case IncompleteClassComponent:
		      {
		        return;
		      }

		    case FundamentalComponent:
		      {

		        break;
		      }

		    case ScopeComponent:
		      {

		        break;
		      }

		    case OffscreenComponent:
		    case LegacyHiddenComponent:
		      {
		        var newState = finishedWork.memoizedState;
		        var isHidden = newState !== null;
		        hideOrUnhideAllChildren(finishedWork, isHidden);
		        return;
		      }
		  }

		  {
		    {
		      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  }
		}

		function commitSuspenseComponent(finishedWork) {
		  var newState = finishedWork.memoizedState;

		  if (newState !== null) {
		    markCommitTimeOfFallback();

		    if (supportsMutation) {
		      // Hide the Offscreen component that contains the primary children. TODO:
		      // Ideally, this effect would have been scheduled on the Offscreen fiber
		      // itself. That's how unhiding works: the Offscreen component schedules an
		      // effect on itself. However, in this case, the component didn't complete,
		      // so the fiber was never added to the effect list in the normal path. We
		      // could have appended it to the effect list in the Suspense component's
		      // second pass, but doing it this way is less complicated. This would be
		      // simpler if we got rid of the effect list and traversed the tree, like
		      // we're planning to do.
		      var primaryChildParent = finishedWork.child;
		      hideOrUnhideAllChildren(primaryChildParent, true);
		    }
		  }
		}

		function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
		  if (!supportsHydration) {
		    return;
		  }

		  var newState = finishedWork.memoizedState;

		  if (newState === null) {
		    var current = finishedWork.alternate;

		    if (current !== null) {
		      var prevState = current.memoizedState;

		      if (prevState !== null) {
		        var suspenseInstance = prevState.dehydrated;

		        if (suspenseInstance !== null) {
		          commitHydratedSuspenseInstance(suspenseInstance);
		        }
		      }
		    }
		  }
		}

		function attachSuspenseRetryListeners(finishedWork) {
		  // If this boundary just timed out, then it will have a set of wakeables.
		  // For each wakeable, attach a listener so that when it resolves, React
		  // attempts to re-render the boundary in the primary (pre-timeout) state.
		  var wakeables = finishedWork.updateQueue;

		  if (wakeables !== null) {
		    finishedWork.updateQueue = null;
		    var retryCache = finishedWork.stateNode;

		    if (retryCache === null) {
		      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
		    }

		    wakeables.forEach(function (wakeable) {
		      // Memoize using the boundary fiber to prevent redundant listeners.
		      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

		      if (!retryCache.has(wakeable)) {
		        {
		          if (wakeable.__reactDoNotTraceInteractions !== true) {
		            retry = tracing.unstable_wrap(retry);
		          }
		        }

		        retryCache.add(wakeable);
		        wakeable.then(retry, retry);
		      }
		    });
		  }
		} // This function detects when a Suspense boundary goes from visible to hidden.
		// It returns false if the boundary is already hidden.
		// TODO: Use an effect tag.


		function isSuspenseBoundaryBeingHidden(current, finishedWork) {
		  if (current !== null) {
		    var oldState = current.memoizedState;

		    if (oldState === null || oldState.dehydrated !== null) {
		      var newState = finishedWork.memoizedState;
		      return newState !== null && newState.dehydrated === null;
		    }
		  }

		  return false;
		}

		function commitResetTextContent(current) {
		  if (!supportsMutation) {
		    return;
		  }

		  resetTextContent(current.stateNode);
		}

		var COMPONENT_TYPE = 0;
		var HAS_PSEUDO_CLASS_TYPE = 1;
		var ROLE_TYPE = 2;
		var TEST_NAME_TYPE = 3;
		var TEXT_TYPE = 4;

		if (typeof Symbol === 'function' && Symbol.for) {
		  var symbolFor$1 = Symbol.for;
		  COMPONENT_TYPE = symbolFor$1('selector.component');
		  HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
		  ROLE_TYPE = symbolFor$1('selector.role');
		  TEST_NAME_TYPE = symbolFor$1('selector.test_id');
		  TEXT_TYPE = symbolFor$1('selector.text');
		}

		function createComponentSelector(component) {
		  return {
		    $$typeof: COMPONENT_TYPE,
		    value: component
		  };
		}
		function createHasPsuedoClassSelector(selectors) {
		  return {
		    $$typeof: HAS_PSEUDO_CLASS_TYPE,
		    value: selectors
		  };
		}
		function createRoleSelector(role) {
		  return {
		    $$typeof: ROLE_TYPE,
		    value: role
		  };
		}
		function createTextSelector(text) {
		  return {
		    $$typeof: TEXT_TYPE,
		    value: text
		  };
		}
		function createTestNameSelector(id) {
		  return {
		    $$typeof: TEST_NAME_TYPE,
		    value: id
		  };
		}

		function findFiberRootForHostRoot(hostRoot) {
		  var maybeFiber = getInstanceFromNode(hostRoot);

		  if (maybeFiber != null) {
		    if (!(typeof maybeFiber.memoizedProps['data-testname'] === 'string')) {
		      {
		        throw Error( "Invalid host root specified. Should be either a React container or a node with a testname attribute." );
		      }
		    }

		    return maybeFiber;
		  } else {
		    var fiberRoot = findFiberRoot(hostRoot);

		    if (!(fiberRoot !== null)) {
		      {
		        throw Error( "Could not find React container within specified host subtree." );
		      }
		    } // The Flow type for FiberRoot is a little funky.
		    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.


		    return fiberRoot.stateNode.current;
		  }
		}

		function matchSelector(fiber, selector) {
		  switch (selector.$$typeof) {
		    case COMPONENT_TYPE:
		      if (fiber.type === selector.value) {
		        return true;
		      }

		      break;

		    case HAS_PSEUDO_CLASS_TYPE:
		      return hasMatchingPaths(fiber, selector.value);

		    case ROLE_TYPE:
		      if (fiber.tag === HostComponent) {
		        var node = fiber.stateNode;

		        if (matchAccessibilityRole(node, selector.value)) {
		          return true;
		        }
		      }

		      break;

		    case TEXT_TYPE:
		      if (fiber.tag === HostComponent || fiber.tag === HostText) {
		        var textContent = getTextContent(fiber);

		        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {
		          return true;
		        }
		      }

		      break;

		    case TEST_NAME_TYPE:
		      if (fiber.tag === HostComponent) {
		        var dataTestID = fiber.memoizedProps['data-testname'];

		        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {
		          return true;
		        }
		      }

		      break;

		    default:
		      {
		        {
		          throw Error( "Invalid selector type " + selector + " specified." );
		        }
		      }
		  }

		  return false;
		}

		function selectorToString(selector) {
		  switch (selector.$$typeof) {
		    case COMPONENT_TYPE:
		      var displayName = getComponentName(selector.value) || 'Unknown';
		      return "<" + displayName + ">";

		    case HAS_PSEUDO_CLASS_TYPE:
		      return ":has(" + (selectorToString(selector) || '') + ")";

		    case ROLE_TYPE:
		      return "[role=\"" + selector.value + "\"]";

		    case TEXT_TYPE:
		      return "\"" + selector.value + "\"";

		    case TEST_NAME_TYPE:
		      return "[data-testname=\"" + selector.value + "\"]";

		    default:
		      {
		        {
		          throw Error( "Invalid selector type " + selector + " specified." );
		        }
		      }
		  }
		}

		function findPaths(root, selectors) {
		  var matchingFibers = [];
		  var stack = [root, 0];
		  var index = 0;

		  while (index < stack.length) {
		    var fiber = stack[index++];
		    var selectorIndex = stack[index++];
		    var selector = selectors[selectorIndex];

		    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
		      continue;
		    } else {
		      while (selector != null && matchSelector(fiber, selector)) {
		        selectorIndex++;
		        selector = selectors[selectorIndex];
		      }
		    }

		    if (selectorIndex === selectors.length) {
		      matchingFibers.push(fiber);
		    } else {
		      var child = fiber.child;

		      while (child !== null) {
		        stack.push(child, selectorIndex);
		        child = child.sibling;
		      }
		    }
		  }

		  return matchingFibers;
		} // Same as findPaths but with eager bailout on first match


		function hasMatchingPaths(root, selectors) {
		  var stack = [root, 0];
		  var index = 0;

		  while (index < stack.length) {
		    var fiber = stack[index++];
		    var selectorIndex = stack[index++];
		    var selector = selectors[selectorIndex];

		    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
		      continue;
		    } else {
		      while (selector != null && matchSelector(fiber, selector)) {
		        selectorIndex++;
		        selector = selectors[selectorIndex];
		      }
		    }

		    if (selectorIndex === selectors.length) {
		      return true;
		    } else {
		      var child = fiber.child;

		      while (child !== null) {
		        stack.push(child, selectorIndex);
		        child = child.sibling;
		      }
		    }
		  }

		  return false;
		}

		function findAllNodes(hostRoot, selectors) {
		  if (!supportsTestSelectors) {
		    {
		      {
		        throw Error( "Test selector API is not supported by this renderer." );
		      }
		    }
		  }

		  var root = findFiberRootForHostRoot(hostRoot);
		  var matchingFibers = findPaths(root, selectors);
		  var instanceRoots = [];
		  var stack = Array.from(matchingFibers);
		  var index = 0;

		  while (index < stack.length) {
		    var node = stack[index++];

		    if (node.tag === HostComponent) {
		      if (isHiddenSubtree(node)) {
		        continue;
		      }

		      instanceRoots.push(node.stateNode);
		    } else {
		      var child = node.child;

		      while (child !== null) {
		        stack.push(child);
		        child = child.sibling;
		      }
		    }
		  }

		  return instanceRoots;
		}
		function getFindAllNodesFailureDescription(hostRoot, selectors) {
		  if (!supportsTestSelectors) {
		    {
		      {
		        throw Error( "Test selector API is not supported by this renderer." );
		      }
		    }
		  }

		  var root = findFiberRootForHostRoot(hostRoot);
		  var maxSelectorIndex = 0;
		  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()

		  var stack = [root, 0];
		  var index = 0;

		  while (index < stack.length) {
		    var fiber = stack[index++];
		    var selectorIndex = stack[index++];
		    var selector = selectors[selectorIndex];

		    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
		      continue;
		    } else if (matchSelector(fiber, selector)) {
		      matchedNames.push(selectorToString(selector));
		      selectorIndex++;

		      if (selectorIndex > maxSelectorIndex) {
		        maxSelectorIndex = selectorIndex;
		      }
		    }

		    if (selectorIndex < selectors.length) {
		      var child = fiber.child;

		      while (child !== null) {
		        stack.push(child, selectorIndex);
		        child = child.sibling;
		      }
		    }
		  }

		  if (maxSelectorIndex < selectors.length) {
		    var unmatchedNames = [];

		    for (var i = maxSelectorIndex; i < selectors.length; i++) {
		      unmatchedNames.push(selectorToString(selectors[i]));
		    }

		    return 'findAllNodes was able to match part of the selector:\n' + ("  " + matchedNames.join(' > ') + "\n\n") + 'No matching component was found for:\n' + ("  " + unmatchedNames.join(' > '));
		  }

		  return null;
		}
		function findBoundingRects(hostRoot, selectors) {
		  if (!supportsTestSelectors) {
		    {
		      {
		        throw Error( "Test selector API is not supported by this renderer." );
		      }
		    }
		  }

		  var instanceRoots = findAllNodes(hostRoot, selectors);
		  var boundingRects = [];

		  for (var i = 0; i < instanceRoots.length; i++) {
		    boundingRects.push(getBoundingRect(instanceRoots[i]));
		  }

		  for (var _i = boundingRects.length - 1; _i > 0; _i--) {
		    var targetRect = boundingRects[_i];
		    var targetLeft = targetRect.x;
		    var targetRight = targetLeft + targetRect.width;
		    var targetTop = targetRect.y;
		    var targetBottom = targetTop + targetRect.height;

		    for (var j = _i - 1; j >= 0; j--) {
		      if (_i !== j) {
		        var otherRect = boundingRects[j];
		        var otherLeft = otherRect.x;
		        var otherRight = otherLeft + otherRect.width;
		        var otherTop = otherRect.y;
		        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,
		        // but we can handle the most common cases:
		        // 1. completely overlapping rects
		        // 2. adjacent rects that are the same width or height (e.g. items in a list)
		        //
		        // Even given the above constraints,
		        // we still won't end up with the fewest possible rects without doing multiple passes,
		        // but it's good enough for this purpose.

		        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {
		          // Complete overlapping rects; remove the inner one.
		          boundingRects.splice(_i, 1);
		          break;
		        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {
		          // Adjacent vertical rects; merge them.
		          if (otherTop > targetTop) {
		            otherRect.height += otherTop - targetTop;
		            otherRect.y = targetTop;
		          }

		          if (otherBottom < targetBottom) {
		            otherRect.height = targetBottom - otherTop;
		          }

		          boundingRects.splice(_i, 1);
		          break;
		        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {
		          // Adjacent horizontal rects; merge them.
		          if (otherLeft > targetLeft) {
		            otherRect.width += otherLeft - targetLeft;
		            otherRect.x = targetLeft;
		          }

		          if (otherRight < targetRight) {
		            otherRect.width = targetRight - otherLeft;
		          }

		          boundingRects.splice(_i, 1);
		          break;
		        }
		      }
		    }
		  }

		  return boundingRects;
		}
		function focusWithin(hostRoot, selectors) {
		  if (!supportsTestSelectors) {
		    {
		      {
		        throw Error( "Test selector API is not supported by this renderer." );
		      }
		    }
		  }

		  var root = findFiberRootForHostRoot(hostRoot);
		  var matchingFibers = findPaths(root, selectors);
		  var stack = Array.from(matchingFibers);
		  var index = 0;

		  while (index < stack.length) {
		    var fiber = stack[index++];

		    if (isHiddenSubtree(fiber)) {
		      continue;
		    }

		    if (fiber.tag === HostComponent) {
		      var node = fiber.stateNode;

		      if (setFocusIfFocusable(node)) {
		        return true;
		      }
		    }

		    var child = fiber.child;

		    while (child !== null) {
		      stack.push(child);
		      child = child.sibling;
		    }
		  }

		  return false;
		}
		var commitHooks = [];
		function onCommitRoot$1() {
		  if (supportsTestSelectors) {
		    commitHooks.forEach(function (commitHook) {
		      return commitHook();
		    });
		  }
		}
		function observeVisibleRects(hostRoot, selectors, callback, options) {
		  if (!supportsTestSelectors) {
		    {
		      {
		        throw Error( "Test selector API is not supported by this renderer." );
		      }
		    }
		  }

		  var instanceRoots = findAllNodes(hostRoot, selectors);

		  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),
		      disconnect = _setupIntersectionObs.disconnect,
		      observe = _setupIntersectionObs.observe,
		      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.


		  var commitHook = function () {
		    var nextInstanceRoots = findAllNodes(hostRoot, selectors);
		    instanceRoots.forEach(function (target) {
		      if (nextInstanceRoots.indexOf(target) < 0) {
		        unobserve(target);
		      }
		    });
		    nextInstanceRoots.forEach(function (target) {
		      if (instanceRoots.indexOf(target) < 0) {
		        observe(target);
		      }
		    });
		  };

		  commitHooks.push(commitHook);
		  return {
		    disconnect: function () {
		      // Stop listening for React mutations:
		      var index = commitHooks.indexOf(commitHook);

		      if (index >= 0) {
		        commitHooks.splice(index, 1);
		      } // Disconnect the host observer:


		      disconnect();
		    }
		  };
		}

		var didWarnAboutMessageChannel = false;
		var enqueueTaskImpl = null;
		function enqueueTask(task) {
		  if (enqueueTaskImpl === null) {
		    try {
		      // read require off the module object to get around the bundlers.
		      // we don't want them to detect a require and bundle a Node polyfill.
		      var requireString = ('require' + Math.random()).slice(0, 7);
		      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
		      // version of setImmediate, bypassing fake timers if any.

		      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
		    } catch (_err) {
		      // we're in a browser
		      // we can't use regular timers because they may still be faked
		      // so we try MessageChannel+postMessage instead
		      enqueueTaskImpl = function (callback) {
		        {
		          if (didWarnAboutMessageChannel === false) {
		            didWarnAboutMessageChannel = true;

		            if (typeof MessageChannel === 'undefined') {
		              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
		            }
		          }
		        }

		        var channel = new MessageChannel();
		        channel.port1.onmessage = callback;
		        channel.port2.postMessage(undefined);
		      };
		    }
		  }

		  return enqueueTaskImpl(task);
		}

		var ceil = Math.ceil;
		var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
		    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
		    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
		var NoContext =
		/*             */
		0;
		var BatchedContext =
		/*               */
		1;
		var EventContext =
		/*                 */
		2;
		var DiscreteEventContext =
		/*         */
		4;
		var LegacyUnbatchedContext =
		/*       */
		8;
		var RenderContext =
		/*                */
		16;
		var CommitContext =
		/*                */
		32;
		var RetryAfterError =
		/*       */
		64;
		var RootIncomplete = 0;
		var RootFatalErrored = 1;
		var RootErrored = 2;
		var RootSuspended = 3;
		var RootSuspendedWithDelay = 4;
		var RootCompleted = 5; // Describes where we are in the React execution stack

		var executionContext = NoContext; // The root we're working on

		var workInProgressRoot = null; // The fiber we're working on

		var workInProgress = null; // The lanes we're rendering

		var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
		// This is a superset of the lanes we started working on at the root. The only
		// case where it's different from `workInProgressRootRenderLanes` is when we
		// enter a subtree that is hidden and needs to be unhidden: Suspense and
		// Offscreen component.
		//
		// Most things in the work loop should deal with workInProgressRootRenderLanes.
		// Most things in begin/complete phases should deal with subtreeRenderLanes.

		var subtreeRenderLanes = NoLanes;
		var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

		var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

		var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
		// slightly different than `renderLanes` because `renderLanes` can change as you
		// enter and exit an Offscreen tree. This value is the combination of all render
		// lanes for the entire render phase.

		var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
		// includes unprocessed updates, not work in bailed out children.

		var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

		var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

		var workInProgressRootPingedLanes = NoLanes;
		var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
		// model where we don't commit new loading states in too quick succession.

		var globalMostRecentFallbackTime = 0;
		var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
		// more and prefer CPU suspense heuristics instead.

		var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
		// suspense heuristics and opt out of rendering more content.

		var RENDER_TIMEOUT_MS = 500;

		function resetRenderTimer() {
		  workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
		}

		function getRenderTargetTime() {
		  return workInProgressRootRenderTargetTime;
		}
		var nextEffect = null;
		var hasUncaughtError = false;
		var firstUncaughtError = null;
		var legacyErrorBoundariesThatAlreadyFailed = null;
		var rootDoesHavePassiveEffects = false;
		var rootWithPendingPassiveEffects = null;
		var pendingPassiveEffectsRenderPriority = NoPriority$1;
		var pendingPassiveEffectsLanes = NoLanes;
		var pendingPassiveHookEffectsMount = [];
		var pendingPassiveHookEffectsUnmount = [];
		var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

		var NESTED_UPDATE_LIMIT = 50;
		var nestedUpdateCount = 0;
		var rootWithNestedUpdates = null;
		var NESTED_PASSIVE_UPDATE_LIMIT = 50;
		var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
		// during the commit phase. This enables them to be traced across components
		// that spawn new work during render. E.g. hidden boundaries, suspended SSR
		// hydration or SuspenseList.
		// TODO: Can use a bitmask instead of an array

		var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
		// event times as simultaneous, even if the actual clock time has advanced
		// between the first and second call.

		var currentEventTime = NoTimestamp;
		var currentEventWipLanes = NoLanes;
		var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
		// We warn about state updates for unmounted components differently in this case.

		var isFlushingPassiveEffects = false;
		var focusedInstanceHandle = null;
		var shouldFireAfterActiveInstanceBlur = false;
		function getWorkInProgressRoot() {
		  return workInProgressRoot;
		}
		function requestEventTime() {
		  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
		    // We're inside React, so it's fine to read the actual time.
		    return now$1();
		  } // We're not inside React, so we may be in the middle of a browser event.


		  if (currentEventTime !== NoTimestamp) {
		    // Use the same start time for all updates until we enter React again.
		    return currentEventTime;
		  } // This is the first update since React yielded. Compute a new start time.


		  currentEventTime = now$1();
		  return currentEventTime;
		}
		function requestUpdateLane(fiber) {
		  // Special cases
		  var mode = fiber.mode;

		  if ((mode & BlockingMode) === NoMode) {
		    return SyncLane;
		  } else if ((mode & ConcurrentMode) === NoMode) {
		    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
		  } // The algorithm for assigning an update to a lane should be stable for all
		  // updates at the same priority within the same event. To do this, the inputs
		  // to the algorithm must be the same. For example, we use the `renderLanes`
		  // to avoid choosing a lane that is already in the middle of rendering.
		  //
		  // However, the "included" lanes could be mutated in between updates in the
		  // same event, like if you perform an update inside `flushSync`. Or any other
		  // code path that might call `prepareFreshStack`.
		  //
		  // The trick we use is to cache the first of each of these inputs within an
		  // event. Then reset the cached values once we can be sure the event is over.
		  // Our heuristic for that is whenever we enter a concurrent work loop.
		  //
		  // We'll do the same for `currentEventPendingLanes` below.


		  if (currentEventWipLanes === NoLanes) {
		    currentEventWipLanes = workInProgressRootIncludedLanes;
		  }

		  var isTransition = requestCurrentTransition() !== NoTransition;

		  if (isTransition) {
		    if (currentEventPendingLanes !== NoLanes) {
		      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
		    }

		    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
		  } // TODO: Remove this dependency on the Scheduler priority.
		  // To do that, we're replacing it with an update lane priority.


		  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
		  // This couples React to the Scheduler internals, so we're replacing it
		  // with the currentUpdateLanePriority above. As an example of how this
		  // could be problematic, if we're not inside `Scheduler.runWithPriority`,
		  // then we'll get the priority of the current running Scheduler task,
		  // which is probably not what we want.

		  var lane;

		  if ( // TODO: Temporary. We're removing the concept of discrete updates.
		  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {
		    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
		  } else {
		    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

		    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
		  }

		  return lane;
		}

		function requestRetryLane(fiber) {
		  // This is a fork of `requestUpdateLane` designed specifically for Suspense
		  // "retries" — a special update that attempts to flip a Suspense boundary
		  // from its placeholder state to its primary/resolved state.
		  // Special cases
		  var mode = fiber.mode;

		  if ((mode & BlockingMode) === NoMode) {
		    return SyncLane;
		  } else if ((mode & ConcurrentMode) === NoMode) {
		    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
		  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


		  if (currentEventWipLanes === NoLanes) {
		    currentEventWipLanes = workInProgressRootIncludedLanes;
		  }

		  return findRetryLane(currentEventWipLanes);
		}

		function scheduleUpdateOnFiber(fiber, lane, eventTime) {
		  checkForNestedUpdates();
		  warnAboutRenderPhaseUpdatesInDEV(fiber);
		  var root = markUpdateLaneFromFiberToRoot(fiber, lane);

		  if (root === null) {
		    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
		    return null;
		  } // Mark that the root has a pending update.


		  markRootUpdated(root, lane, eventTime);

		  if (root === workInProgressRoot) {
		    // Received an update to a tree that's in the middle of rendering. Mark
		    // that there was an interleaved update work on this root. Unless the
		    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
		    // phase update. In that case, we don't treat render phase updates as if
		    // they were interleaved, for backwards compat reasons.
		    {
		      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
		    }

		    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
		      // The root already suspended with a delay, which means this render
		      // definitely won't finish. Since we have a new update, let's mark it as
		      // suspended now, right before marking the incoming update. This has the
		      // effect of interrupting the current render and switching to the update.
		      // TODO: Make sure this doesn't override pings that happen while we've
		      // already started rendering.
		      markRootSuspended$1(root, workInProgressRootRenderLanes);
		    }
		  } // TODO: requestUpdateLanePriority also reads the priority. Pass the
		  // priority as an argument to that function and this one.


		  var priorityLevel = getCurrentPriorityLevel();

		  if (lane === SyncLane) {
		    if ( // Check if we're inside unbatchedUpdates
		    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
		    (executionContext & (RenderContext | CommitContext)) === NoContext) {
		      // Register pending interactions on the root to avoid losing traced interaction data.
		      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
		      // root inside of batchedUpdates should be synchronous, but layout updates
		      // should be deferred until the end of the batch.

		      performSyncWorkOnRoot(root);
		    } else {
		      ensureRootIsScheduled(root, eventTime);
		      schedulePendingInteractions(root, lane);

		      if (executionContext === NoContext) {
		        // Flush the synchronous work now, unless we're already working or inside
		        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
		        // scheduleCallbackForFiber to preserve the ability to schedule a callback
		        // without immediately flushing it. We only do this for user-initiated
		        // updates, to preserve historical behavior of legacy mode.
		        resetRenderTimer();
		        flushSyncCallbackQueue();
		      }
		    }
		  } else {
		    // Schedule a discrete update but only if it's not Sync.
		    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
		    // discrete, even inside a discrete event.
		    priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {
		      // This is the result of a discrete event. Track the lowest priority
		      // discrete update per root so we can flush them early, if needed.
		      if (rootsWithPendingDiscreteUpdates === null) {
		        rootsWithPendingDiscreteUpdates = new Set([root]);
		      } else {
		        rootsWithPendingDiscreteUpdates.add(root);
		      }
		    } // Schedule other updates after in case the callback is sync.


		    ensureRootIsScheduled(root, eventTime);
		    schedulePendingInteractions(root, lane);
		  } // We use this when assigning a lane for a transition inside
		  // `requestUpdateLane`. We assume it's the same as the root being updated,
		  // since in the common case of a single root app it probably is. If it's not
		  // the same root, then it's not a huge deal, we just might batch more stuff
		  // together more than necessary.


		  mostRecentlyUpdatedRoot = root;
		} // This is split into a separate function so we can mark a fiber with pending
		// work without treating it as a typical update that originates from an event;
		// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
		// on a fiber.

		function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
		  // Update the source fiber's lanes
		  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
		  var alternate = sourceFiber.alternate;

		  if (alternate !== null) {
		    alternate.lanes = mergeLanes(alternate.lanes, lane);
		  }

		  {
		    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
		      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
		    }
		  } // Walk the parent path to the root and update the child expiration time.


		  var node = sourceFiber;
		  var parent = sourceFiber.return;

		  while (parent !== null) {
		    parent.childLanes = mergeLanes(parent.childLanes, lane);
		    alternate = parent.alternate;

		    if (alternate !== null) {
		      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
		    } else {
		      {
		        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
		          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
		        }
		      }
		    }

		    node = parent;
		    parent = parent.return;
		  }

		  if (node.tag === HostRoot) {
		    var root = node.stateNode;
		    return root;
		  } else {
		    return null;
		  }
		} // Use this function to schedule a task for a root. There's only one task per
		// root; if a task was already scheduled, we'll check to make sure the priority
		// of the existing task is the same as the priority of the next level that the
		// root has work on. This function is called on every update, and right before
		// exiting a task.


		function ensureRootIsScheduled(root, currentTime) {
		  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
		  // expired so we know to work on those next.

		  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

		  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

		  var newCallbackPriority = returnNextLanesPriority();

		  if (nextLanes === NoLanes) {
		    // Special case: There's nothing to work on.
		    if (existingCallbackNode !== null) {
		      cancelCallback(existingCallbackNode);
		      root.callbackNode = null;
		      root.callbackPriority = NoLanePriority;
		    }

		    return;
		  } // Check if there's an existing task. We may be able to reuse it.


		  if (existingCallbackNode !== null) {
		    var existingCallbackPriority = root.callbackPriority;

		    if (existingCallbackPriority === newCallbackPriority) {
		      // The priority hasn't changed. We can reuse the existing task. Exit.
		      return;
		    } // The priority changed. Cancel the existing callback. We'll schedule a new
		    // one below.


		    cancelCallback(existingCallbackNode);
		  } // Schedule a new callback.


		  var newCallbackNode;

		  if (newCallbackPriority === SyncLanePriority) {
		    // Special case: Sync React callbacks are scheduled on a special
		    // internal queue
		    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
		  } else if (newCallbackPriority === SyncBatchedLanePriority) {
		    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
		  } else {
		    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
		    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
		  }

		  root.callbackPriority = newCallbackPriority;
		  root.callbackNode = newCallbackNode;
		} // This is the entry point for every concurrent task, i.e. anything that
		// goes through Scheduler.


		function performConcurrentWorkOnRoot(root) {
		  // Since we know we're in a React event, we can clear the current
		  // event time. The next update will compute a new event time.
		  currentEventTime = NoTimestamp;
		  currentEventWipLanes = NoLanes;
		  currentEventPendingLanes = NoLanes;

		  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
		    {
		      throw Error( "Should not already be working." );
		    }
		  } // Flush any pending passive effects before deciding which lanes to work on,
		  // in case they schedule additional work.


		  var originalCallbackNode = root.callbackNode;
		  var didFlushPassiveEffects = flushPassiveEffects();

		  if (didFlushPassiveEffects) {
		    // Something in the passive effect phase may have canceled the current task.
		    // Check if the task node for this root was changed.
		    if (root.callbackNode !== originalCallbackNode) {
		      // The current task was canceled. Exit. We don't need to call
		      // `ensureRootIsScheduled` because the check above implies either that
		      // there's a new task, or that there's no remaining work on this root.
		      return null;
		    }
		  } // Determine the next expiration time to work on, using the fields stored
		  // on the root.


		  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

		  if (lanes === NoLanes) {
		    // Defensive coding. This is never expected to happen.
		    return null;
		  }

		  var exitStatus = renderRootConcurrent(root, lanes);

		  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
		    // The render included lanes that were updated during the render phase.
		    // For example, when unhiding a hidden tree, we include all the lanes
		    // that were previously skipped when the tree was hidden. That set of
		    // lanes is a superset of the lanes we started rendering with.
		    //
		    // So we'll throw out the current work and restart.
		    prepareFreshStack(root, NoLanes);
		  } else if (exitStatus !== RootIncomplete) {
		    if (exitStatus === RootErrored) {
		      executionContext |= RetryAfterError; // If an error occurred during hydration,
		      // discard server response and fall back to client side render.

		      if (root.hydrate) {
		        root.hydrate = false;
		        clearContainer(root.containerInfo);
		      } // If something threw an error, try rendering one more time. We'll render
		      // synchronously to block concurrent data mutations, and we'll includes
		      // all pending updates are included. If it still fails after the second
		      // attempt, we'll give up and commit the resulting tree.


		      lanes = getLanesToRetrySynchronouslyOnError(root);

		      if (lanes !== NoLanes) {
		        exitStatus = renderRootSync(root, lanes);
		      }
		    }

		    if (exitStatus === RootFatalErrored) {
		      var fatalError = workInProgressRootFatalError;
		      prepareFreshStack(root, NoLanes);
		      markRootSuspended$1(root, lanes);
		      ensureRootIsScheduled(root, now$1());
		      throw fatalError;
		    } // We now have a consistent tree. The next step is either to commit it,
		    // or, if something suspended, wait to commit it after a timeout.


		    var finishedWork = root.current.alternate;
		    root.finishedWork = finishedWork;
		    root.finishedLanes = lanes;
		    finishConcurrentRender(root, exitStatus, lanes);
		  }

		  ensureRootIsScheduled(root, now$1());

		  if (root.callbackNode === originalCallbackNode) {
		    // The task node scheduled for this root is the same one that's
		    // currently executed. Need to return a continuation.
		    return performConcurrentWorkOnRoot.bind(null, root);
		  }

		  return null;
		}

		function finishConcurrentRender(root, exitStatus, lanes) {
		  switch (exitStatus) {
		    case RootIncomplete:
		    case RootFatalErrored:
		      {
		        {
		          {
		            throw Error( "Root did not complete. This is a bug in React." );
		          }
		        }
		      }
		    // Flow knows about invariant, so it complains if I add a break
		    // statement, but eslint doesn't know about invariant, so it complains
		    // if I do. eslint-disable-next-line no-fallthrough

		    case RootErrored:
		      {
		        // We should have already attempted to retry this tree. If we reached
		        // this point, it errored again. Commit it.
		        commitRoot(root);
		        break;
		      }

		    case RootSuspended:
		      {
		        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
		        // should immediately commit it or wait a bit.

		        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
		        !shouldForceFlushFallbacksInDEV()) {
		          // This render only included retries, no updates. Throttle committing
		          // retries so that we don't show too many loading states too quickly.
		          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.

		          if (msUntilTimeout > 10) {
		            var nextLanes = getNextLanes(root, NoLanes);

		            if (nextLanes !== NoLanes) {
		              // There's additional work on this root.
		              break;
		            }

		            var suspendedLanes = root.suspendedLanes;

		            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
		              // We should prefer to render the fallback of at the last
		              // suspended level. Ping the last suspended level to try
		              // rendering it again.
		              // FIXME: What if the suspended lanes are Idle? Should not restart.
		              requestEventTime();
		              markRootPinged(root, suspendedLanes);
		              break;
		            } // The render is suspended, it hasn't timed out, and there's no
		            // lower priority work to do. Instead of committing the fallback
		            // immediately, wait for more data to arrive.


		            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
		            break;
		          }
		        } // The work expired. Commit immediately.


		        commitRoot(root);
		        break;
		      }

		    case RootSuspendedWithDelay:
		      {
		        markRootSuspended$1(root, lanes);

		        if (includesOnlyTransitions(lanes)) {
		          // This is a transition, so we should exit without committing a
		          // placeholder and without scheduling a timeout. Delay indefinitely
		          // until we receive more data.
		          break;
		        }

		        if (!shouldForceFlushFallbacksInDEV()) {
		          // This is not a transition, but we did trigger an avoided state.
		          // Schedule a placeholder to display after a short delay, using the Just
		          // Noticeable Difference.
		          // TODO: Is the JND optimization worth the added complexity? If this is
		          // the only reason we track the event time, then probably not.
		          // Consider removing.
		          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
		          var eventTimeMs = mostRecentEventTime;
		          var timeElapsedMs = now$1() - eventTimeMs;

		          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


		          if (_msUntilTimeout > 10) {
		            // Instead of committing the fallback immediately, wait for more data
		            // to arrive.
		            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
		            break;
		          }
		        } // Commit the placeholder.


		        commitRoot(root);
		        break;
		      }

		    case RootCompleted:
		      {
		        // The work completed. Ready to commit.
		        commitRoot(root);
		        break;
		      }

		    default:
		      {
		        {
		          {
		            throw Error( "Unknown root exit status." );
		          }
		        }
		      }
		  }
		}

		function markRootSuspended$1(root, suspendedLanes) {
		  // When suspending, we should always exclude lanes that were pinged or (more
		  // rarely, since we try to avoid it) updated during the render phase.
		  // TODO: Lol maybe there's a better way to factor this besides this
		  // obnoxiously named function :)
		  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
		  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
		  markRootSuspended(root, suspendedLanes);
		} // This is the entry point for synchronous tasks that don't go
		// through Scheduler


		function performSyncWorkOnRoot(root) {
		  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
		    {
		      throw Error( "Should not already be working." );
		    }
		  }

		  flushPassiveEffects();
		  var lanes;
		  var exitStatus;

		  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
		    // There's a partial tree, and at least one of its lanes has expired. Finish
		    // rendering it before rendering the rest of the expired work.
		    lanes = workInProgressRootRenderLanes;
		    exitStatus = renderRootSync(root, lanes);

		    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
		      // The render included lanes that were updated during the render phase.
		      // For example, when unhiding a hidden tree, we include all the lanes
		      // that were previously skipped when the tree was hidden. That set of
		      // lanes is a superset of the lanes we started rendering with.
		      //
		      // Note that this only happens when part of the tree is rendered
		      // concurrently. If the whole tree is rendered synchronously, then there
		      // are no interleaved events.
		      lanes = getNextLanes(root, lanes);
		      exitStatus = renderRootSync(root, lanes);
		    }
		  } else {
		    lanes = getNextLanes(root, NoLanes);
		    exitStatus = renderRootSync(root, lanes);
		  }

		  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
		    executionContext |= RetryAfterError; // If an error occurred during hydration,
		    // discard server response and fall back to client side render.

		    if (root.hydrate) {
		      root.hydrate = false;
		      clearContainer(root.containerInfo);
		    } // If something threw an error, try rendering one more time. We'll render
		    // synchronously to block concurrent data mutations, and we'll includes
		    // all pending updates are included. If it still fails after the second
		    // attempt, we'll give up and commit the resulting tree.


		    lanes = getLanesToRetrySynchronouslyOnError(root);

		    if (lanes !== NoLanes) {
		      exitStatus = renderRootSync(root, lanes);
		    }
		  }

		  if (exitStatus === RootFatalErrored) {
		    var fatalError = workInProgressRootFatalError;
		    prepareFreshStack(root, NoLanes);
		    markRootSuspended$1(root, lanes);
		    ensureRootIsScheduled(root, now$1());
		    throw fatalError;
		  } // We now have a consistent tree. Because this is a sync render, we
		  // will commit it even if something suspended.


		  var finishedWork = root.current.alternate;
		  root.finishedWork = finishedWork;
		  root.finishedLanes = lanes;
		  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
		  // pending level.

		  ensureRootIsScheduled(root, now$1());
		  return null;
		}

		function flushRoot(root, lanes) {
		  markRootExpired(root, lanes);
		  ensureRootIsScheduled(root, now$1());

		  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
		    resetRenderTimer();
		    flushSyncCallbackQueue();
		  }
		}
		function flushDiscreteUpdates() {
		  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
		  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
		  // those two cases. Need to fix this before exposing flushDiscreteUpdates
		  // as a public API.
		  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
		    {
		      if ((executionContext & RenderContext) !== NoContext) {
		        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
		      }
		    } // We're already rendering, so we can't synchronously flush pending work.
		    // This is probably a nested event dispatch triggered by a lifecycle/effect,
		    // like `el.focus()`. Exit.


		    return;
		  }

		  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
		  // they fire before the next serial event.

		  flushPassiveEffects();
		}
		function deferredUpdates(fn) {
		  {
		    return runWithPriority(NormalPriority$1, fn);
		  }
		}

		function flushPendingDiscreteUpdates() {
		  if (rootsWithPendingDiscreteUpdates !== null) {
		    // For each root with pending discrete updates, schedule a callback to
		    // immediately flush them.
		    var roots = rootsWithPendingDiscreteUpdates;
		    rootsWithPendingDiscreteUpdates = null;
		    roots.forEach(function (root) {
		      markDiscreteUpdatesExpired(root);
		      ensureRootIsScheduled(root, now$1());
		    });
		  } // Now flush the immediate queue.


		  flushSyncCallbackQueue();
		}

		function batchedUpdates(fn, a) {
		  var prevExecutionContext = executionContext;
		  executionContext |= BatchedContext;

		  try {
		    return fn(a);
		  } finally {
		    executionContext = prevExecutionContext;

		    if (executionContext === NoContext) {
		      // Flush the immediate callbacks that were scheduled during this batch
		      resetRenderTimer();
		      flushSyncCallbackQueue();
		    }
		  }
		}
		function batchedEventUpdates(fn, a) {
		  var prevExecutionContext = executionContext;
		  executionContext |= EventContext;

		  try {
		    return fn(a);
		  } finally {
		    executionContext = prevExecutionContext;

		    if (executionContext === NoContext) {
		      // Flush the immediate callbacks that were scheduled during this batch
		      resetRenderTimer();
		      flushSyncCallbackQueue();
		    }
		  }
		}
		function discreteUpdates(fn, a, b, c, d) {
		  var prevExecutionContext = executionContext;
		  executionContext |= DiscreteEventContext;

		  {
		    try {
		      return runWithPriority(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
		    } finally {
		      executionContext = prevExecutionContext;

		      if (executionContext === NoContext) {
		        // Flush the immediate callbacks that were scheduled during this batch
		        resetRenderTimer();
		        flushSyncCallbackQueue();
		      }
		    }
		  }
		}
		function unbatchedUpdates(fn, a) {
		  var prevExecutionContext = executionContext;
		  executionContext &= ~BatchedContext;
		  executionContext |= LegacyUnbatchedContext;

		  try {
		    return fn(a);
		  } finally {
		    executionContext = prevExecutionContext;

		    if (executionContext === NoContext) {
		      // Flush the immediate callbacks that were scheduled during this batch
		      resetRenderTimer();
		      flushSyncCallbackQueue();
		    }
		  }
		}
		function flushSync(fn, a) {
		  var prevExecutionContext = executionContext;

		  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
		    {
		      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
		    }

		    return fn(a);
		  }

		  executionContext |= BatchedContext;

		  {
		    try {
		      if (fn) {
		        return runWithPriority(ImmediatePriority$1, fn.bind(null, a));
		      } else {
		        return undefined;
		      }
		    } finally {
		      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
		      // Note that this will happen even if batchedUpdates is higher up
		      // the stack.

		      flushSyncCallbackQueue();
		    }
		  }
		}
		function flushControlled(fn) {
		  var prevExecutionContext = executionContext;
		  executionContext |= BatchedContext;

		  {
		    try {
		      runWithPriority(ImmediatePriority$1, fn);
		    } finally {
		      executionContext = prevExecutionContext;

		      if (executionContext === NoContext) {
		        // Flush the immediate callbacks that were scheduled during this batch
		        resetRenderTimer();
		        flushSyncCallbackQueue();
		      }
		    }
		  }
		}
		function pushRenderLanes(fiber, lanes) {
		  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
		  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
		  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
		}
		function popRenderLanes(fiber) {
		  subtreeRenderLanes = subtreeRenderLanesCursor.current;
		  pop(subtreeRenderLanesCursor, fiber);
		}

		function prepareFreshStack(root, lanes) {
		  root.finishedWork = null;
		  root.finishedLanes = NoLanes;
		  var timeoutHandle = root.timeoutHandle;

		  if (timeoutHandle !== noTimeout) {
		    // The root previous suspended and scheduled a timeout to commit a fallback
		    // state. Now that we have additional work, cancel the timeout.
		    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

		    cancelTimeout(timeoutHandle);
		  }

		  if (workInProgress !== null) {
		    var interruptedWork = workInProgress.return;

		    while (interruptedWork !== null) {
		      unwindInterruptedWork(interruptedWork);
		      interruptedWork = interruptedWork.return;
		    }
		  }

		  workInProgressRoot = root;
		  workInProgress = createWorkInProgress(root.current, null);
		  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
		  workInProgressRootExitStatus = RootIncomplete;
		  workInProgressRootFatalError = null;
		  workInProgressRootSkippedLanes = NoLanes;
		  workInProgressRootUpdatedLanes = NoLanes;
		  workInProgressRootPingedLanes = NoLanes;

		  {
		    spawnedWorkDuringRender = null;
		  }

		  {
		    ReactStrictModeWarnings.discardPendingWarnings();
		  }
		}

		function handleError(root, thrownValue) {
		  do {
		    var erroredWork = workInProgress;

		    try {
		      // Reset module-level state that was set during the render phase.
		      resetContextDependencies();
		      resetHooksAfterThrow();
		      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
		      // separate issue. Write a regression test using string refs.

		      ReactCurrentOwner$2.current = null;

		      if (erroredWork === null || erroredWork.return === null) {
		        // Expected to be working on a non-root fiber. This is a fatal error
		        // because there's no ancestor that can handle it; the root is
		        // supposed to capture all errors that weren't caught by an error
		        // boundary.
		        workInProgressRootExitStatus = RootFatalErrored;
		        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
		        // sibling, or the parent if there are no siblings. But since the root
		        // has no siblings nor a parent, we set it to null. Usually this is
		        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
		        // intentionally not calling those, we need set it here.
		        // TODO: Consider calling `unwindWork` to pop the contexts.

		        workInProgress = null;
		        return;
		      }

		      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
		        // Record the time spent rendering before an error was thrown. This
		        // avoids inaccurate Profiler durations in the case of a
		        // suspended render.
		        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
		      }

		      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
		      completeUnitOfWork(erroredWork);
		    } catch (yetAnotherThrownValue) {
		      // Something in the return path also threw.
		      thrownValue = yetAnotherThrownValue;

		      if (workInProgress === erroredWork && erroredWork !== null) {
		        // If this boundary has already errored, then we had trouble processing
		        // the error. Bubble it to the next boundary.
		        erroredWork = erroredWork.return;
		        workInProgress = erroredWork;
		      } else {
		        erroredWork = workInProgress;
		      }

		      continue;
		    } // Return to the normal work loop.


		    return;
		  } while (true);
		}

		function pushDispatcher() {
		  var prevDispatcher = ReactCurrentDispatcher$2.current;
		  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

		  if (prevDispatcher === null) {
		    // The React isomorphic package does not include a default dispatcher.
		    // Instead the first renderer will lazily attach one, in order to give
		    // nicer error messages.
		    return ContextOnlyDispatcher;
		  } else {
		    return prevDispatcher;
		  }
		}

		function popDispatcher(prevDispatcher) {
		  ReactCurrentDispatcher$2.current = prevDispatcher;
		}

		function pushInteractions(root) {
		  {
		    var prevInteractions = tracing.__interactionsRef.current;
		    tracing.__interactionsRef.current = root.memoizedInteractions;
		    return prevInteractions;
		  }
		}

		function popInteractions(prevInteractions) {
		  {
		    tracing.__interactionsRef.current = prevInteractions;
		  }
		}

		function markCommitTimeOfFallback() {
		  globalMostRecentFallbackTime = now$1();
		}
		function markSkippedUpdateLanes(lane) {
		  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
		}
		function renderDidSuspend() {
		  if (workInProgressRootExitStatus === RootIncomplete) {
		    workInProgressRootExitStatus = RootSuspended;
		  }
		}
		function renderDidSuspendDelayIfPossible() {
		  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
		    workInProgressRootExitStatus = RootSuspendedWithDelay;
		  } // Check if there are updates that we skipped tree that might have unblocked
		  // this render.


		  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
		    // Mark the current render as suspended so that we switch to working on
		    // the updates that were skipped. Usually we only suspend at the end of
		    // the render phase.
		    // TODO: We should probably always mark the root as suspended immediately
		    // (inside this function), since by suspending at the end of the render
		    // phase introduces a potential mistake where we suspend lanes that were
		    // pinged or updated while we were rendering.
		    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
		  }
		}
		function renderDidError() {
		  if (workInProgressRootExitStatus !== RootCompleted) {
		    workInProgressRootExitStatus = RootErrored;
		  }
		} // Called during render to determine if anything has suspended.
		// Returns false if we're not sure.

		function renderHasNotSuspendedYet() {
		  // If something errored or completed, we can't really be sure,
		  // so those are false.
		  return workInProgressRootExitStatus === RootIncomplete;
		}

		function renderRootSync(root, lanes) {
		  var prevExecutionContext = executionContext;
		  executionContext |= RenderContext;
		  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
		  // and prepare a fresh one. Otherwise we'll continue where we left off.

		  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
		    prepareFreshStack(root, lanes);
		    startWorkOnPendingInteractions(root, lanes);
		  }

		  var prevInteractions = pushInteractions(root);

		  do {
		    try {
		      workLoopSync();
		      break;
		    } catch (thrownValue) {
		      handleError(root, thrownValue);
		    }
		  } while (true);

		  resetContextDependencies();

		  {
		    popInteractions(prevInteractions);
		  }

		  executionContext = prevExecutionContext;
		  popDispatcher(prevDispatcher);

		  if (workInProgress !== null) {
		    // This is a sync render, so we should have finished the whole tree.
		    {
		      {
		        throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
		      }
		    }
		  }


		  workInProgressRoot = null;
		  workInProgressRootRenderLanes = NoLanes;
		  return workInProgressRootExitStatus;
		} // The work loop is an extremely hot path. Tell Closure not to inline it.

		/** @noinline */


		function workLoopSync() {
		  // Already timed out, so perform work without checking if we need to yield.
		  while (workInProgress !== null) {
		    performUnitOfWork(workInProgress);
		  }
		}

		function renderRootConcurrent(root, lanes) {
		  var prevExecutionContext = executionContext;
		  executionContext |= RenderContext;
		  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
		  // and prepare a fresh one. Otherwise we'll continue where we left off.

		  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
		    resetRenderTimer();
		    prepareFreshStack(root, lanes);
		    startWorkOnPendingInteractions(root, lanes);
		  }

		  var prevInteractions = pushInteractions(root);

		  do {
		    try {
		      workLoopConcurrent();
		      break;
		    } catch (thrownValue) {
		      handleError(root, thrownValue);
		    }
		  } while (true);

		  resetContextDependencies();

		  {
		    popInteractions(prevInteractions);
		  }

		  popDispatcher(prevDispatcher);
		  executionContext = prevExecutionContext;


		  if (workInProgress !== null) {

		    return RootIncomplete;
		  } else {


		    workInProgressRoot = null;
		    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

		    return workInProgressRootExitStatus;
		  }
		}
		/** @noinline */


		function workLoopConcurrent() {
		  // Perform work until Scheduler asks us to yield
		  while (workInProgress !== null && !shouldYield()) {
		    performUnitOfWork(workInProgress);
		  }
		}

		function performUnitOfWork(unitOfWork) {
		  // The current, flushed, state of this fiber is the alternate. Ideally
		  // nothing should rely on this, but relying on it here means that we don't
		  // need an additional field on the work in progress.
		  var current = unitOfWork.alternate;
		  setCurrentFiber(unitOfWork);
		  var next;

		  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
		    startProfilerTimer(unitOfWork);
		    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
		    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
		  } else {
		    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
		  }

		  resetCurrentFiber();
		  unitOfWork.memoizedProps = unitOfWork.pendingProps;

		  if (next === null) {
		    // If this doesn't spawn new work, complete the current work.
		    completeUnitOfWork(unitOfWork);
		  } else {
		    workInProgress = next;
		  }

		  ReactCurrentOwner$2.current = null;
		}

		function completeUnitOfWork(unitOfWork) {
		  // Attempt to complete the current unit of work, then move to the next
		  // sibling. If there are no more siblings, return to the parent fiber.
		  var completedWork = unitOfWork;

		  do {
		    // The current, flushed, state of this fiber is the alternate. Ideally
		    // nothing should rely on this, but relying on it here means that we don't
		    // need an additional field on the work in progress.
		    var current = completedWork.alternate;
		    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

		    if ((completedWork.flags & Incomplete) === NoFlags) {
		      setCurrentFiber(completedWork);
		      var next = void 0;

		      if ( (completedWork.mode & ProfileMode) === NoMode) {
		        next = completeWork(current, completedWork, subtreeRenderLanes);
		      } else {
		        startProfilerTimer(completedWork);
		        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

		        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
		      }

		      resetCurrentFiber();

		      if (next !== null) {
		        // Completing this fiber spawned new work. Work on that next.
		        workInProgress = next;
		        return;
		      }

		      resetChildLanes(completedWork);

		      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
		      (returnFiber.flags & Incomplete) === NoFlags) {
		        // Append all the effects of the subtree and this fiber onto the effect
		        // list of the parent. The completion order of the children affects the
		        // side-effect order.
		        if (returnFiber.firstEffect === null) {
		          returnFiber.firstEffect = completedWork.firstEffect;
		        }

		        if (completedWork.lastEffect !== null) {
		          if (returnFiber.lastEffect !== null) {
		            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
		          }

		          returnFiber.lastEffect = completedWork.lastEffect;
		        } // If this fiber had side-effects, we append it AFTER the children's
		        // side-effects. We can perform certain side-effects earlier if needed,
		        // by doing multiple passes over the effect list. We don't want to
		        // schedule our own side-effect on our own list because if end up
		        // reusing children we'll schedule this effect onto itself since we're
		        // at the end.


		        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
		        // list. PerformedWork effect is read by React DevTools but shouldn't be
		        // committed.

		        if (flags > PerformedWork) {
		          if (returnFiber.lastEffect !== null) {
		            returnFiber.lastEffect.nextEffect = completedWork;
		          } else {
		            returnFiber.firstEffect = completedWork;
		          }

		          returnFiber.lastEffect = completedWork;
		        }
		      }
		    } else {
		      // This fiber did not complete because something threw. Pop values off
		      // the stack without entering the complete phase. If this is a boundary,
		      // capture values if possible.
		      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


		      if (_next !== null) {
		        // If completing this work spawned new work, do that next. We'll come
		        // back here again.
		        // Since we're restarting, remove anything that is not a host effect
		        // from the effect tag.
		        _next.flags &= HostEffectMask;
		        workInProgress = _next;
		        return;
		      }

		      if ( (completedWork.mode & ProfileMode) !== NoMode) {
		        // Record the render duration for the fiber that errored.
		        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

		        var actualDuration = completedWork.actualDuration;
		        var child = completedWork.child;

		        while (child !== null) {
		          actualDuration += child.actualDuration;
		          child = child.sibling;
		        }

		        completedWork.actualDuration = actualDuration;
		      }

		      if (returnFiber !== null) {
		        // Mark the parent fiber as incomplete and clear its effect list.
		        returnFiber.firstEffect = returnFiber.lastEffect = null;
		        returnFiber.flags |= Incomplete;
		      }
		    }

		    var siblingFiber = completedWork.sibling;

		    if (siblingFiber !== null) {
		      // If there is more work to do in this returnFiber, do that next.
		      workInProgress = siblingFiber;
		      return;
		    } // Otherwise, return to the parent


		    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

		    workInProgress = completedWork;
		  } while (completedWork !== null); // We've reached the root.


		  if (workInProgressRootExitStatus === RootIncomplete) {
		    workInProgressRootExitStatus = RootCompleted;
		  }
		}

		function resetChildLanes(completedWork) {
		  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
		  // to switch statement in `completeWork`.
		  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
		    // The children of this component are hidden. Don't bubble their
		    // expiration times.
		    return;
		  }

		  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

		  if ( (completedWork.mode & ProfileMode) !== NoMode) {
		    // In profiling mode, resetChildExpirationTime is also used to reset
		    // profiler durations.
		    var actualDuration = completedWork.actualDuration;
		    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
		    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
		    // When work is done, it should bubble to the parent's actualDuration. If
		    // the fiber has not been cloned though, (meaning no work was done), then
		    // this value will reflect the amount of time spent working on a previous
		    // render. In that case it should not bubble. We determine whether it was
		    // cloned by comparing the child pointer.

		    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
		    var child = completedWork.child;

		    while (child !== null) {
		      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

		      if (shouldBubbleActualDurations) {
		        actualDuration += child.actualDuration;
		      }

		      treeBaseDuration += child.treeBaseDuration;
		      child = child.sibling;
		    }

		    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

		    if (isTimedOutSuspense) {
		      // Don't count time spent in a timed out Suspense subtree as part of the base duration.
		      var primaryChildFragment = completedWork.child;

		      if (primaryChildFragment !== null) {
		        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
		      }
		    }

		    completedWork.actualDuration = actualDuration;
		    completedWork.treeBaseDuration = treeBaseDuration;
		  } else {
		    var _child = completedWork.child;

		    while (_child !== null) {
		      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
		      _child = _child.sibling;
		    }
		  }

		  completedWork.childLanes = newChildLanes;
		}

		function commitRoot(root) {
		  var renderPriorityLevel = getCurrentPriorityLevel();
		  runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
		  return null;
		}

		function commitRootImpl(root, renderPriorityLevel) {
		  do {
		    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
		    // means `flushPassiveEffects` will sometimes result in additional
		    // passive effects. So we need to keep flushing in a loop until there are
		    // no more pending effects.
		    // TODO: Might be better if `flushPassiveEffects` did not automatically
		    // flush synchronous work at the end, to avoid factoring hazards like this.
		    flushPassiveEffects();
		  } while (rootWithPendingPassiveEffects !== null);

		  flushRenderPhaseStrictModeWarningsInDEV();

		  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
		    {
		      throw Error( "Should not already be working." );
		    }
		  }

		  var finishedWork = root.finishedWork;
		  var lanes = root.finishedLanes;

		  if (finishedWork === null) {

		    return null;
		  }

		  root.finishedWork = null;
		  root.finishedLanes = NoLanes;

		  if (!(finishedWork !== root.current)) {
		    {
		      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
		    }
		  } // commitRoot never returns a continuation; it always finishes synchronously.
		  // So we can clear these now to allow a new callback to be scheduled.


		  root.callbackNode = null; // Update the first and last pending times on this root. The new first
		  // pending time is whatever is left on the root fiber.

		  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
		  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
		  // `flushDiscreteUpdates` starts a useless render pass which may cancels
		  // a scheduled timeout.

		  if (rootsWithPendingDiscreteUpdates !== null) {
		    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
		      rootsWithPendingDiscreteUpdates.delete(root);
		    }
		  }

		  if (root === workInProgressRoot) {
		    // We can reset these now that they are finished.
		    workInProgressRoot = null;
		    workInProgress = null;
		    workInProgressRootRenderLanes = NoLanes;
		  } // Get the list of effects.


		  var firstEffect;

		  if (finishedWork.flags > PerformedWork) {
		    // A fiber's effect list consists only of its children, not itself. So if
		    // the root has an effect, we need to add it to the end of the list. The
		    // resulting list is the set that would belong to the root's parent, if it
		    // had one; that is, all the effects in the tree including the root.
		    if (finishedWork.lastEffect !== null) {
		      finishedWork.lastEffect.nextEffect = finishedWork;
		      firstEffect = finishedWork.firstEffect;
		    } else {
		      firstEffect = finishedWork;
		    }
		  } else {
		    // There is no effect on the root.
		    firstEffect = finishedWork.firstEffect;
		  }

		  if (firstEffect !== null) {

		    var prevExecutionContext = executionContext;
		    executionContext |= CommitContext;
		    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

		    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
		    // of the effect list for each phase: all mutation effects come before all
		    // layout effects, and so on.
		    // The first phase a "before mutation" phase. We use this phase to read the
		    // state of the host tree right before we mutate it. This is where
		    // getSnapshotBeforeUpdate is called.

		    focusedInstanceHandle = prepareForCommit(root.containerInfo);
		    shouldFireAfterActiveInstanceBlur = false;
		    nextEffect = firstEffect;

		    do {
		      {
		        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

		        if (hasCaughtError()) {
		          if (!(nextEffect !== null)) {
		            {
		              throw Error( "Should be working on an effect." );
		            }
		          }

		          var error = clearCaughtError();
		          captureCommitPhaseError(nextEffect, error);
		          nextEffect = nextEffect.nextEffect;
		        }
		      }
		    } while (nextEffect !== null); // We no longer need to track the active instance fiber


		    focusedInstanceHandle = null;

		    {
		      // Mark the current commit time to be shared by all Profilers in this
		      // batch. This enables them to be grouped later.
		      recordCommitTime();
		    } // The next phase is the mutation phase, where we mutate the host tree.


		    nextEffect = firstEffect;

		    do {
		      {
		        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

		        if (hasCaughtError()) {
		          if (!(nextEffect !== null)) {
		            {
		              throw Error( "Should be working on an effect." );
		            }
		          }

		          var _error = clearCaughtError();

		          captureCommitPhaseError(nextEffect, _error);
		          nextEffect = nextEffect.nextEffect;
		        }
		      }
		    } while (nextEffect !== null);

		    if (shouldFireAfterActiveInstanceBlur) {
		      afterActiveInstanceBlur();
		    }

		    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
		    // the mutation phase, so that the previous tree is still current during
		    // componentWillUnmount, but before the layout phase, so that the finished
		    // work is current during componentDidMount/Update.

		    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
		    // the host tree after it's been mutated. The idiomatic use case for this is
		    // layout, but class component lifecycles also fire here for legacy reasons.

		    nextEffect = firstEffect;

		    do {
		      {
		        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

		        if (hasCaughtError()) {
		          if (!(nextEffect !== null)) {
		            {
		              throw Error( "Should be working on an effect." );
		            }
		          }

		          var _error2 = clearCaughtError();

		          captureCommitPhaseError(nextEffect, _error2);
		          nextEffect = nextEffect.nextEffect;
		        }
		      }
		    } while (nextEffect !== null);

		    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
		    // opportunity to paint.

		    requestPaint();

		    {
		      popInteractions(prevInteractions);
		    }

		    executionContext = prevExecutionContext;
		  } else {
		    // No effects.
		    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
		    // no effects.
		    // TODO: Maybe there's a better way to report this.

		    {
		      recordCommitTime();
		    }
		  }

		  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

		  if (rootDoesHavePassiveEffects) {
		    // This commit has passive effects. Stash a reference to them. But don't
		    // schedule a callback until after flushing layout work.
		    rootDoesHavePassiveEffects = false;
		    rootWithPendingPassiveEffects = root;
		    pendingPassiveEffectsLanes = lanes;
		    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
		  } else {
		    // We are done with the effect chain at this point so let's clear the
		    // nextEffect pointers to assist with GC. If we have passive effects, we'll
		    // clear this in flushPassiveEffects.
		    nextEffect = firstEffect;

		    while (nextEffect !== null) {
		      var nextNextEffect = nextEffect.nextEffect;
		      nextEffect.nextEffect = null;

		      if (nextEffect.flags & Deletion) {
		        detachFiberAfterEffects(nextEffect);
		      }

		      nextEffect = nextNextEffect;
		    }
		  } // Read this again, since an effect might have updated it


		  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

		  if (remainingLanes !== NoLanes) {
		    {
		      if (spawnedWorkDuringRender !== null) {
		        var expirationTimes = spawnedWorkDuringRender;
		        spawnedWorkDuringRender = null;

		        for (var i = 0; i < expirationTimes.length; i++) {
		          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
		        }
		      }

		      schedulePendingInteractions(root, remainingLanes);
		    }
		  } else {
		    // If there's no remaining work, we can clear the set of already failed
		    // error boundaries.
		    legacyErrorBoundariesThatAlreadyFailed = null;
		  }

		  {
		    if (!rootDidHavePassiveEffects) {
		      // If there are no passive effects, then we can complete the pending interactions.
		      // Otherwise, we'll wait until after the passive effects are flushed.
		      // Wait to do this until after remaining work has been scheduled,
		      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
		      finishPendingInteractions(root, lanes);
		    }
		  }

		  if (remainingLanes === SyncLane) {
		    // Count the number of times the root synchronously re-renders without
		    // finishing. If there are too many, it indicates an infinite update loop.
		    if (root === rootWithNestedUpdates) {
		      nestedUpdateCount++;
		    } else {
		      nestedUpdateCount = 0;
		      rootWithNestedUpdates = root;
		    }
		  } else {
		    nestedUpdateCount = 0;
		  }

		  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

		  {
		    onCommitRoot$1();
		  } // Always call this before exiting `commitRoot`, to ensure that any
		  // additional work on this root is scheduled.


		  ensureRootIsScheduled(root, now$1());

		  if (hasUncaughtError) {
		    hasUncaughtError = false;
		    var _error3 = firstUncaughtError;
		    firstUncaughtError = null;
		    throw _error3;
		  }

		  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
		    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
		    // synchronously, but layout updates should be deferred until the end
		    // of the batch.


		    return null;
		  } // If layout work was scheduled, flush it now.


		  flushSyncCallbackQueue();

		  return null;
		}

		function commitBeforeMutationEffects() {
		  while (nextEffect !== null) {
		    var current = nextEffect.alternate;

		    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
		      if ((nextEffect.flags & Deletion) !== NoFlags) {
		        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
		          shouldFireAfterActiveInstanceBlur = true;
		          beforeActiveInstanceBlur();
		        }
		      } else {
		        // TODO: Move this out of the hot path using a dedicated effect tag.
		        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
		          shouldFireAfterActiveInstanceBlur = true;
		          beforeActiveInstanceBlur();
		        }
		      }
		    }

		    var flags = nextEffect.flags;

		    if ((flags & Snapshot) !== NoFlags) {
		      setCurrentFiber(nextEffect);
		      commitBeforeMutationLifeCycles(current, nextEffect);
		      resetCurrentFiber();
		    }

		    if ((flags & Passive) !== NoFlags) {
		      // If there are passive effects, schedule a callback to flush at
		      // the earliest opportunity.
		      if (!rootDoesHavePassiveEffects) {
		        rootDoesHavePassiveEffects = true;
		        scheduleCallback(NormalPriority$1, function () {
		          flushPassiveEffects();
		          return null;
		        });
		      }
		    }

		    nextEffect = nextEffect.nextEffect;
		  }
		}

		function commitMutationEffects(root, renderPriorityLevel) {
		  // TODO: Should probably move the bulk of this function to commitWork.
		  while (nextEffect !== null) {
		    setCurrentFiber(nextEffect);
		    var flags = nextEffect.flags;

		    if (flags & ContentReset) {
		      commitResetTextContent(nextEffect);
		    }

		    if (flags & Ref) {
		      var current = nextEffect.alternate;

		      if (current !== null) {
		        commitDetachRef(current);
		      }
		    } // The following switch statement is only concerned about placement,
		    // updates, and deletions. To avoid needing to add a case for every possible
		    // bitmap value, we remove the secondary effects from the effect tag and
		    // switch on that value.


		    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

		    switch (primaryFlags) {
		      case Placement:
		        {
		          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
		          // inserted, before any life-cycles like componentDidMount gets called.
		          // TODO: findDOMNode doesn't rely on this any more but isMounted does
		          // and isMounted is deprecated anyway so we should be able to kill this.

		          nextEffect.flags &= ~Placement;
		          break;
		        }

		      case PlacementAndUpdate:
		        {
		          // Placement
		          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
		          // inserted, before any life-cycles like componentDidMount gets called.

		          nextEffect.flags &= ~Placement; // Update

		          var _current = nextEffect.alternate;
		          commitWork(_current, nextEffect);
		          break;
		        }

		      case Hydrating:
		        {
		          nextEffect.flags &= ~Hydrating;
		          break;
		        }

		      case HydratingAndUpdate:
		        {
		          nextEffect.flags &= ~Hydrating; // Update

		          var _current2 = nextEffect.alternate;
		          commitWork(_current2, nextEffect);
		          break;
		        }

		      case Update:
		        {
		          var _current3 = nextEffect.alternate;
		          commitWork(_current3, nextEffect);
		          break;
		        }

		      case Deletion:
		        {
		          commitDeletion(root, nextEffect);
		          break;
		        }
		    }

		    resetCurrentFiber();
		    nextEffect = nextEffect.nextEffect;
		  }
		}

		function commitLayoutEffects(root, committedLanes) {


		  while (nextEffect !== null) {
		    setCurrentFiber(nextEffect);
		    var flags = nextEffect.flags;

		    if (flags & (Update | Callback)) {
		      var current = nextEffect.alternate;
		      commitLifeCycles(root, current, nextEffect);
		    }

		    {
		      if (flags & Ref) {
		        commitAttachRef(nextEffect);
		      }
		    }

		    resetCurrentFiber();
		    nextEffect = nextEffect.nextEffect;
		  }
		}

		function flushPassiveEffects() {
		  // Returns whether passive effects were flushed.
		  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
		    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
		    pendingPassiveEffectsRenderPriority = NoPriority$1;

		    {
		      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
		    }
		  }

		  return false;
		}
		function enqueuePendingPassiveHookEffectMount(fiber, effect) {
		  pendingPassiveHookEffectsMount.push(effect, fiber);

		  if (!rootDoesHavePassiveEffects) {
		    rootDoesHavePassiveEffects = true;
		    scheduleCallback(NormalPriority$1, function () {
		      flushPassiveEffects();
		      return null;
		    });
		  }
		}
		function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
		  pendingPassiveHookEffectsUnmount.push(effect, fiber);

		  {
		    fiber.flags |= PassiveUnmountPendingDev;
		    var alternate = fiber.alternate;

		    if (alternate !== null) {
		      alternate.flags |= PassiveUnmountPendingDev;
		    }
		  }

		  if (!rootDoesHavePassiveEffects) {
		    rootDoesHavePassiveEffects = true;
		    scheduleCallback(NormalPriority$1, function () {
		      flushPassiveEffects();
		      return null;
		    });
		  }
		}

		function invokePassiveEffectCreate(effect) {
		  var create = effect.create;
		  effect.destroy = create();
		}

		function flushPassiveEffectsImpl() {
		  if (rootWithPendingPassiveEffects === null) {
		    return false;
		  }

		  var root = rootWithPendingPassiveEffects;
		  var lanes = pendingPassiveEffectsLanes;
		  rootWithPendingPassiveEffects = null;
		  pendingPassiveEffectsLanes = NoLanes;

		  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
		    {
		      throw Error( "Cannot flush passive effects while already rendering." );
		    }
		  }

		  {
		    isFlushingPassiveEffects = true;
		  }

		  var prevExecutionContext = executionContext;
		  executionContext |= CommitContext;
		  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
		  // before ANY passive effect create functions are called.
		  // Otherwise effects in sibling components might interfere with each other.
		  // e.g. a destroy function in one component may unintentionally override a ref
		  // value set by a create function in another component.
		  // Layout effects have the same constraint.
		  // First pass: Destroy stale passive effects.

		  var unmountEffects = pendingPassiveHookEffectsUnmount;
		  pendingPassiveHookEffectsUnmount = [];

		  for (var i = 0; i < unmountEffects.length; i += 2) {
		    var _effect = unmountEffects[i];
		    var fiber = unmountEffects[i + 1];
		    var destroy = _effect.destroy;
		    _effect.destroy = undefined;

		    {
		      fiber.flags &= ~PassiveUnmountPendingDev;
		      var alternate = fiber.alternate;

		      if (alternate !== null) {
		        alternate.flags &= ~PassiveUnmountPendingDev;
		      }
		    }

		    if (typeof destroy === 'function') {
		      {
		        setCurrentFiber(fiber);

		        {
		          invokeGuardedCallback(null, destroy, null);
		        }

		        if (hasCaughtError()) {
		          if (!(fiber !== null)) {
		            {
		              throw Error( "Should be working on an effect." );
		            }
		          }

		          var error = clearCaughtError();
		          captureCommitPhaseError(fiber, error);
		        }

		        resetCurrentFiber();
		      }
		    }
		  } // Second pass: Create new passive effects.


		  var mountEffects = pendingPassiveHookEffectsMount;
		  pendingPassiveHookEffectsMount = [];

		  for (var _i = 0; _i < mountEffects.length; _i += 2) {
		    var _effect2 = mountEffects[_i];
		    var _fiber = mountEffects[_i + 1];

		    {
		      setCurrentFiber(_fiber);

		      {
		        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
		      }

		      if (hasCaughtError()) {
		        if (!(_fiber !== null)) {
		          {
		            throw Error( "Should be working on an effect." );
		          }
		        }

		        var _error4 = clearCaughtError();

		        captureCommitPhaseError(_fiber, _error4);
		      }

		      resetCurrentFiber();
		    }
		  } // Note: This currently assumes there are no passive effects on the root fiber
		  // because the root is not part of its own effect list.
		  // This could change in the future.


		  var effect = root.current.firstEffect;

		  while (effect !== null) {
		    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

		    effect.nextEffect = null;

		    if (effect.flags & Deletion) {
		      detachFiberAfterEffects(effect);
		    }

		    effect = nextNextEffect;
		  }

		  {
		    popInteractions(prevInteractions);
		    finishPendingInteractions(root, lanes);
		  }

		  {
		    isFlushingPassiveEffects = false;
		  }

		  executionContext = prevExecutionContext;
		  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
		  // exceeds the limit, we'll fire a warning.

		  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
		  return true;
		}

		function isAlreadyFailedLegacyErrorBoundary(instance) {
		  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
		}
		function markLegacyErrorBoundaryAsFailed(instance) {
		  if (legacyErrorBoundariesThatAlreadyFailed === null) {
		    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
		  } else {
		    legacyErrorBoundariesThatAlreadyFailed.add(instance);
		  }
		}

		function prepareToThrowUncaughtError(error) {
		  if (!hasUncaughtError) {
		    hasUncaughtError = true;
		    firstUncaughtError = error;
		  }
		}

		var onUncaughtError = prepareToThrowUncaughtError;

		function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
		  var errorInfo = createCapturedValue(error, sourceFiber);
		  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
		  enqueueUpdate(rootFiber, update);
		  var eventTime = requestEventTime();
		  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

		  if (root !== null) {
		    markRootUpdated(root, SyncLane, eventTime);
		    ensureRootIsScheduled(root, eventTime);
		    schedulePendingInteractions(root, SyncLane);
		  }
		}

		function captureCommitPhaseError(sourceFiber, error) {
		  if (sourceFiber.tag === HostRoot) {
		    // Error was thrown at the root. There is no parent, so the root
		    // itself should capture it.
		    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
		    return;
		  }

		  var fiber = sourceFiber.return;

		  while (fiber !== null) {
		    if (fiber.tag === HostRoot) {
		      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
		      return;
		    } else if (fiber.tag === ClassComponent) {
		      var ctor = fiber.type;
		      var instance = fiber.stateNode;

		      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
		        var errorInfo = createCapturedValue(error, sourceFiber);
		        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
		        enqueueUpdate(fiber, update);
		        var eventTime = requestEventTime();
		        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

		        if (root !== null) {
		          markRootUpdated(root, SyncLane, eventTime);
		          ensureRootIsScheduled(root, eventTime);
		          schedulePendingInteractions(root, SyncLane);
		        } else {
		          // This component has already been unmounted.
		          // We can't schedule any follow up work for the root because the fiber is already unmounted,
		          // but we can still call the log-only boundary so the error isn't swallowed.
		          //
		          // TODO This is only a temporary bandaid for the old reconciler fork.
		          // We can delete this special case once the new fork is merged.
		          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
		            try {
		              instance.componentDidCatch(error, errorInfo);
		            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
		              // This is kind of an edge case.
		            }
		          }
		        }

		        return;
		      }
		    }

		    fiber = fiber.return;
		  }
		}
		function pingSuspendedRoot(root, wakeable, pingedLanes) {
		  var pingCache = root.pingCache;

		  if (pingCache !== null) {
		    // The wakeable resolved, so we no longer need to memoize, because it will
		    // never be thrown again.
		    pingCache.delete(wakeable);
		  }

		  var eventTime = requestEventTime();
		  markRootPinged(root, pingedLanes);

		  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
		    // Received a ping at the same priority level at which we're currently
		    // rendering. We might want to restart this render. This should mirror
		    // the logic of whether or not a root suspends once it completes.
		    // TODO: If we're rendering sync either due to Sync, Batched or expired,
		    // we should probably never restart.
		    // If we're suspended with delay, or if it's a retry, we'll always suspend
		    // so we can always restart.
		    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
		      // Restart from the root.
		      prepareFreshStack(root, NoLanes);
		    } else {
		      // Even though we can't restart right now, we might get an
		      // opportunity later. So we mark this render as having a ping.
		      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
		    }
		  }

		  ensureRootIsScheduled(root, eventTime);
		  schedulePendingInteractions(root, pingedLanes);
		}

		function retryTimedOutBoundary(boundaryFiber, retryLane) {
		  // The boundary fiber (a Suspense component or SuspenseList component)
		  // previously was rendered in its fallback state. One of the promises that
		  // suspended it has resolved, which means at least part of the tree was
		  // likely unblocked. Try rendering again, at a new expiration time.
		  if (retryLane === NoLane) {
		    retryLane = requestRetryLane(boundaryFiber);
		  } // TODO: Special case idle priority?


		  var eventTime = requestEventTime();
		  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

		  if (root !== null) {
		    markRootUpdated(root, retryLane, eventTime);
		    ensureRootIsScheduled(root, eventTime);
		    schedulePendingInteractions(root, retryLane);
		  }
		}
		function resolveRetryWakeable(boundaryFiber, wakeable) {
		  var retryLane = NoLane; // Default

		  var retryCache;

		  {
		    retryCache = boundaryFiber.stateNode;
		  }

		  if (retryCache !== null) {
		    // The wakeable resolved, so we no longer need to memoize, because it will
		    // never be thrown again.
		    retryCache.delete(wakeable);
		  }

		  retryTimedOutBoundary(boundaryFiber, retryLane);
		} // Computes the next Just Noticeable Difference (JND) boundary.
		// The theory is that a person can't tell the difference between small differences in time.
		// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
		// difference in the experience. However, waiting for longer might mean that we can avoid
		// showing an intermediate loading state. The longer we have already waited, the harder it
		// is to tell small differences in time. Therefore, the longer we've already waited,
		// the longer we can wait additionally. At some point we have to give up though.
		// We pick a train model where the next boundary commits at a consistent schedule.
		// These particular numbers are vague estimates. We expect to adjust them based on research.

		function jnd(timeElapsed) {
		  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
		}

		function checkForNestedUpdates() {
		  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
		    nestedUpdateCount = 0;
		    rootWithNestedUpdates = null;

		    {
		      {
		        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
		      }
		    }
		  }

		  {
		    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
		      nestedPassiveUpdateCount = 0;

		      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
		    }
		  }
		}

		function flushRenderPhaseStrictModeWarningsInDEV() {
		  {
		    ReactStrictModeWarnings.flushLegacyContextWarning();

		    {
		      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
		    }
		  }
		}

		var didWarnStateUpdateForNotYetMountedComponent = null;

		function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
		  {
		    if ((executionContext & RenderContext) !== NoContext) {
		      // We let the other warning about render phase updates deal with this one.
		      return;
		    }

		    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
		      return;
		    }

		    var tag = fiber.tag;

		    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
		      // Only warn for user-defined components, not internal ones like Suspense.
		      return;
		    } // We show the whole stack but dedupe on the top component's name because
		    // the problematic code almost always lies inside that component.


		    var componentName = getComponentName(fiber.type) || 'ReactComponent';

		    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
		      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
		        return;
		      }

		      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
		    } else {
		      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
		    }

		    var previousFiber = current;

		    try {
		      setCurrentFiber(fiber);

		      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
		    } finally {
		      if (previousFiber) {
		        setCurrentFiber(fiber);
		      } else {
		        resetCurrentFiber();
		      }
		    }
		  }
		}

		var didWarnStateUpdateForUnmountedComponent = null;

		function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
		  {
		    var tag = fiber.tag;

		    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
		      // Only warn for user-defined components, not internal ones like Suspense.
		      return;
		    } // If there are pending passive effects unmounts for this Fiber,
		    // we can assume that they would have prevented this update.


		    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
		      return;
		    } // We show the whole stack but dedupe on the top component's name because
		    // the problematic code almost always lies inside that component.


		    var componentName = getComponentName(fiber.type) || 'ReactComponent';

		    if (didWarnStateUpdateForUnmountedComponent !== null) {
		      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
		        return;
		      }

		      didWarnStateUpdateForUnmountedComponent.add(componentName);
		    } else {
		      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
		    }

		    if (isFlushingPassiveEffects) ; else {
		      var previousFiber = current;

		      try {
		        setCurrentFiber(fiber);

		        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
		      } finally {
		        if (previousFiber) {
		          setCurrentFiber(fiber);
		        } else {
		          resetCurrentFiber();
		        }
		      }
		    }
		  }
		}

		var beginWork$1;

		{
		  var dummyFiber = null;

		  beginWork$1 = function (current, unitOfWork, lanes) {
		    // If a component throws an error, we replay it again in a synchronously
		    // dispatched event, so that the debugger will treat it as an uncaught
		    // error See ReactErrorUtils for more information.
		    // Before entering the begin phase, copy the work-in-progress onto a dummy
		    // fiber. If beginWork throws, we'll use this to reset the state.
		    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

		    try {
		      return beginWork(current, unitOfWork, lanes);
		    } catch (originalError) {
		      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
		        // Don't replay promises. Treat everything else like an error.
		        throw originalError;
		      } // Keep this code in sync with handleError; any changes here must have
		      // corresponding changes there.


		      resetContextDependencies();
		      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
		      // same fiber again.
		      // Unwind the failed stack frame

		      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

		      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

		      if ( unitOfWork.mode & ProfileMode) {
		        // Reset the profiler timer.
		        startProfilerTimer(unitOfWork);
		      } // Run beginWork again.


		      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

		      if (hasCaughtError()) {
		        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
		        // Rethrow this error instead of the original one.

		        throw replayError;
		      } else {
		        // This branch is reachable if the render phase is impure.
		        throw originalError;
		      }
		    }
		  };
		}

		var didWarnAboutUpdateInRender = false;
		var didWarnAboutUpdateInRenderForAnotherComponent;

		{
		  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
		}

		function warnAboutRenderPhaseUpdatesInDEV(fiber) {
		  {
		    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
		      switch (fiber.tag) {
		        case FunctionComponent:
		        case ForwardRef:
		        case SimpleMemoComponent:
		          {
		            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

		            var dedupeKey = renderingComponentName;

		            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
		              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
		              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

		              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
		            }

		            break;
		          }

		        case ClassComponent:
		          {
		            if (!didWarnAboutUpdateInRender) {
		              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

		              didWarnAboutUpdateInRender = true;
		            }

		            break;
		          }
		      }
		    }
		  }
		} // a 'shared' variable that changes when act() opens/closes in tests.


		var IsThisRendererActing = {
		  current: false
		};
		function warnIfNotScopedWithMatchingAct(fiber) {
		  {
		    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
		      var previousFiber = current;

		      try {
		        setCurrentFiber(fiber);

		        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
		      } finally {
		        if (previousFiber) {
		          setCurrentFiber(fiber);
		        } else {
		          resetCurrentFiber();
		        }
		      }
		    }
		  }
		}
		function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
		  {
		    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
		      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
		    }
		  }
		}

		function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
		  {
		    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
		      var previousFiber = current;

		      try {
		        setCurrentFiber(fiber);

		        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
		      } finally {
		        if (previousFiber) {
		          setCurrentFiber(fiber);
		        } else {
		          resetCurrentFiber();
		        }
		      }
		    }
		  }
		}

		var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

		var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
		// scheduler is the actual recommendation. The alternative could be a testing build,
		// a new lib, or whatever; we dunno just yet. This message is for early adopters
		// to get their tests right.

		function warnIfUnmockedScheduler(fiber) {
		  {
		    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
		      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
		        didWarnAboutUnmockedScheduler = true;

		        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
		        "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
		      }
		    }
		  }
		}

		function computeThreadID(root, lane) {
		  // Interaction threads are unique per root and expiration time.
		  // NOTE: Intentionally unsound cast. All that matters is that it's a number
		  // and it represents a batch of work. Could make a helper function instead,
		  // but meh this is fine for now.
		  return lane * 1000 + root.interactionThreadID;
		}

		function markSpawnedWork(lane) {

		  if (spawnedWorkDuringRender === null) {
		    spawnedWorkDuringRender = [lane];
		  } else {
		    spawnedWorkDuringRender.push(lane);
		  }
		}

		function scheduleInteractions(root, lane, interactions) {

		  if (interactions.size > 0) {
		    var pendingInteractionMap = root.pendingInteractionMap;
		    var pendingInteractions = pendingInteractionMap.get(lane);

		    if (pendingInteractions != null) {
		      interactions.forEach(function (interaction) {
		        if (!pendingInteractions.has(interaction)) {
		          // Update the pending async work count for previously unscheduled interaction.
		          interaction.__count++;
		        }

		        pendingInteractions.add(interaction);
		      });
		    } else {
		      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

		      interactions.forEach(function (interaction) {
		        interaction.__count++;
		      });
		    }

		    var subscriber = tracing.__subscriberRef.current;

		    if (subscriber !== null) {
		      var threadID = computeThreadID(root, lane);
		      subscriber.onWorkScheduled(interactions, threadID);
		    }
		  }
		}

		function schedulePendingInteractions(root, lane) {

		  scheduleInteractions(root, lane, tracing.__interactionsRef.current);
		}

		function startWorkOnPendingInteractions(root, lanes) {
		  // we can accurately attribute time spent working on it, And so that cascading
		  // work triggered during the render phase will be associated with it.


		  var interactions = new Set();
		  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
		    if (includesSomeLane(lanes, scheduledLane)) {
		      scheduledInteractions.forEach(function (interaction) {
		        return interactions.add(interaction);
		      });
		    }
		  }); // Store the current set of interactions on the FiberRoot for a few reasons:
		  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
		  // without having to recalculate it. We will also use it in commitWork() to
		  // pass to any Profiler onRender() hooks. This also provides DevTools with a
		  // way to access it when the onCommitRoot() hook is called.

		  root.memoizedInteractions = interactions;

		  if (interactions.size > 0) {
		    var subscriber = tracing.__subscriberRef.current;

		    if (subscriber !== null) {
		      var threadID = computeThreadID(root, lanes);

		      try {
		        subscriber.onWorkStarted(interactions, threadID);
		      } catch (error) {
		        // If the subscriber throws, rethrow it in a separate task
		        scheduleCallback(ImmediatePriority$1, function () {
		          throw error;
		        });
		      }
		    }
		  }
		}

		function finishPendingInteractions(root, committedLanes) {

		  var remainingLanesAfterCommit = root.pendingLanes;
		  var subscriber;

		  try {
		    subscriber = tracing.__subscriberRef.current;

		    if (subscriber !== null && root.memoizedInteractions.size > 0) {
		      // FIXME: More than one lane can finish in a single commit.
		      var threadID = computeThreadID(root, committedLanes);
		      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
		    }
		  } catch (error) {
		    // If the subscriber throws, rethrow it in a separate task
		    scheduleCallback(ImmediatePriority$1, function () {
		      throw error;
		    });
		  } finally {
		    // Clear completed interactions from the pending Map.
		    // Unless the render was suspended or cascading work was scheduled,
		    // In which case– leave pending interactions until the subsequent render.
		    var pendingInteractionMap = root.pendingInteractionMap;
		    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
		      // Only decrement the pending interaction count if we're done.
		      // If there's still work at the current priority,
		      // That indicates that we are waiting for suspense data.
		      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
		        pendingInteractionMap.delete(lane);
		        scheduledInteractions.forEach(function (interaction) {
		          interaction.__count--;

		          if (subscriber !== null && interaction.__count === 0) {
		            try {
		              subscriber.onInteractionScheduledWorkCompleted(interaction);
		            } catch (error) {
		              // If the subscriber throws, rethrow it in a separate task
		              scheduleCallback(ImmediatePriority$1, function () {
		                throw error;
		              });
		            }
		          }
		        });
		      }
		    });
		  }
		} // `act` testing API

		function shouldForceFlushFallbacksInDEV() {
		  // Never force flush in production. This function should get stripped out.
		  return  actingUpdatesScopeDepth > 0;
		}

		var flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;
		var isSchedulerMocked = typeof flushMockScheduler === 'function'; // Returns whether additional work was scheduled. Caller should keep flushing
		// until there's no work left.

		function flushActWork() {
		  if (flushMockScheduler !== undefined) {

		    try {
		      return flushMockScheduler();
		    } finally {
		    }
		  } else {

		    try {
		      var didFlushWork = false;

		      while (flushPassiveEffects()) {
		        didFlushWork = true;
		      }

		      return didFlushWork;
		    } finally {
		    }
		  }
		}

		function flushWorkAndMicroTasks(onDone) {
		  try {
		    flushActWork();
		    enqueueTask(function () {
		      if (flushActWork()) {
		        flushWorkAndMicroTasks(onDone);
		      } else {
		        onDone();
		      }
		    });
		  } catch (err) {
		    onDone(err);
		  }
		} // we track the 'depth' of the act() calls with this counter,
		// so we can tell if any async act() calls try to run in parallel.


		var actingUpdatesScopeDepth = 0;
		function act(callback) {

		  var previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;
		  actingUpdatesScopeDepth++;
		  var previousIsSomeRendererActing = IsSomeRendererActing.current;
		  var previousIsThisRendererActing = IsThisRendererActing.current;
		  IsSomeRendererActing.current = true;
		  IsThisRendererActing.current = true;

		  function onDone() {
		    actingUpdatesScopeDepth--;
		    IsSomeRendererActing.current = previousIsSomeRendererActing;
		    IsThisRendererActing.current = previousIsThisRendererActing;

		    {
		      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {
		        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned
		        error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
		      }
		    }
		  }

		  var result;

		  try {
		    result = batchedUpdates(callback);
		  } catch (error) {
		    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth
		    onDone();
		    throw error;
		  }

		  if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
		    // setup a boolean that gets set to true only
		    // once this act() call is await-ed
		    var called = false;

		    {
		      if (typeof Promise !== 'undefined') {
		        //eslint-disable-next-line no-undef
		        Promise.resolve().then(function () {}).then(function () {
		          if (called === false) {
		            error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, interleaving multiple act ' + 'calls and mixing their scopes. You should - await act(async () => ...);');
		          }
		        });
		      }
		    } // in the async case, the returned thenable runs the callback, flushes
		    // effects and  microtasks in a loop until flushPassiveEffects() === false,
		    // and cleans up


		    return {
		      then: function (resolve, reject) {
		        called = true;
		        result.then(function () {
		          if (actingUpdatesScopeDepth > 1 || isSchedulerMocked === true && previousIsSomeRendererActing === true) {
		            onDone();
		            resolve();
		            return;
		          } // we're about to exit the act() scope,
		          // now's the time to flush tasks/effects


		          flushWorkAndMicroTasks(function (err) {
		            onDone();

		            if (err) {
		              reject(err);
		            } else {
		              resolve();
		            }
		          });
		        }, function (err) {
		          onDone();
		          reject(err);
		        });
		      }
		    };
		  } else {
		    {
		      if (result !== undefined) {
		        error('The callback passed to act(...) function ' + 'must return undefined, or a Promise. You returned %s', result);
		      }
		    } // flush effects until none remain, and cleanup


		    try {
		      if (actingUpdatesScopeDepth === 1 && (isSchedulerMocked === false || previousIsSomeRendererActing === false)) {
		        // we're about to exit the act() scope,
		        // now's the time to flush effects
		        flushActWork();
		      }

		      onDone();
		    } catch (err) {
		      onDone();
		      throw err;
		    } // in the sync case, the returned thenable only warns *if* await-ed


		    return {
		      then: function (resolve) {
		        {
		          error('Do not await the result of calling act(...) with sync logic, it is not a Promise.');
		        }

		        resolve();
		      }
		    };
		  }
		}

		function detachFiberAfterEffects(fiber) {
		  fiber.sibling = null;
		  fiber.stateNode = null;
		}

		var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

		var failedBoundaries = null;
		var setRefreshHandler = function (handler) {
		  {
		    resolveFamily = handler;
		  }
		};
		function resolveFunctionForHotReloading(type) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return type;
		    }

		    var family = resolveFamily(type);

		    if (family === undefined) {
		      return type;
		    } // Use the latest known implementation.


		    return family.current;
		  }
		}
		function resolveClassForHotReloading(type) {
		  // No implementation differences.
		  return resolveFunctionForHotReloading(type);
		}
		function resolveForwardRefForHotReloading(type) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return type;
		    }

		    var family = resolveFamily(type);

		    if (family === undefined) {
		      // Check if we're dealing with a real forwardRef. Don't want to crash early.
		      if (type !== null && type !== undefined && typeof type.render === 'function') {
		        // ForwardRef is special because its resolved .type is an object,
		        // but it's possible that we only have its inner render function in the map.
		        // If that inner render function is different, we'll build a new forwardRef type.
		        var currentRender = resolveFunctionForHotReloading(type.render);

		        if (type.render !== currentRender) {
		          var syntheticType = {
		            $$typeof: REACT_FORWARD_REF_TYPE,
		            render: currentRender
		          };

		          if (type.displayName !== undefined) {
		            syntheticType.displayName = type.displayName;
		          }

		          return syntheticType;
		        }
		      }

		      return type;
		    } // Use the latest known implementation.


		    return family.current;
		  }
		}
		function isCompatibleFamilyForHotReloading(fiber, element) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return false;
		    }

		    var prevType = fiber.elementType;
		    var nextType = element.type; // If we got here, we know types aren't === equal.

		    var needsCompareFamilies = false;
		    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

		    switch (fiber.tag) {
		      case ClassComponent:
		        {
		          if (typeof nextType === 'function') {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case FunctionComponent:
		        {
		          if (typeof nextType === 'function') {
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            // We don't know the inner type yet.
		            // We're going to assume that the lazy inner type is stable,
		            // and so it is sufficient to avoid reconciling it away.
		            // We're not going to unwrap or actually use the new lazy type.
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case ForwardRef:
		        {
		          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      case MemoComponent:
		      case SimpleMemoComponent:
		        {
		          if ($$typeofNextType === REACT_MEMO_TYPE) {
		            // TODO: if it was but can no longer be simple,
		            // we shouldn't set this.
		            needsCompareFamilies = true;
		          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
		            needsCompareFamilies = true;
		          }

		          break;
		        }

		      default:
		        return false;
		    } // Check if both types have a family and it's the same one.


		    if (needsCompareFamilies) {
		      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
		      // This means both of them need to be registered to preserve state.
		      // If we unwrapped and compared the inner types for wrappers instead,
		      // then we would risk falsely saying two separate memo(Foo)
		      // calls are equivalent because they wrap the same Foo function.
		      var prevFamily = resolveFamily(prevType);

		      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
		        return true;
		      }
		    }

		    return false;
		  }
		}
		function markFailedErrorBoundaryForHotReloading(fiber) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return;
		    }

		    if (typeof WeakSet !== 'function') {
		      return;
		    }

		    if (failedBoundaries === null) {
		      failedBoundaries = new WeakSet();
		    }

		    failedBoundaries.add(fiber);
		  }
		}
		var scheduleRefresh = function (root, update) {
		  {
		    if (resolveFamily === null) {
		      // Hot reloading is disabled.
		      return;
		    }

		    var staleFamilies = update.staleFamilies,
		        updatedFamilies = update.updatedFamilies;
		    flushPassiveEffects();
		    flushSync(function () {
		      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
		    });
		  }
		};
		var scheduleRoot = function (root, element) {
		  {
		    if (root.context !== emptyContextObject) {
		      // Super edge case: root has a legacy _renderSubtree context
		      // but we don't know the parentComponent so we can't pass it.
		      // Just ignore. We'll delete this with _renderSubtree code path later.
		      return;
		    }

		    flushPassiveEffects();
		    flushSync(function () {
		      updateContainer(element, root, null, null);
		    });
		  }
		};

		function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
		  {
		    var alternate = fiber.alternate,
		        child = fiber.child,
		        sibling = fiber.sibling,
		        tag = fiber.tag,
		        type = fiber.type;
		    var candidateType = null;

		    switch (tag) {
		      case FunctionComponent:
		      case SimpleMemoComponent:
		      case ClassComponent:
		        candidateType = type;
		        break;

		      case ForwardRef:
		        candidateType = type.render;
		        break;
		    }

		    if (resolveFamily === null) {
		      throw new Error('Expected resolveFamily to be set during hot reload.');
		    }

		    var needsRender = false;
		    var needsRemount = false;

		    if (candidateType !== null) {
		      var family = resolveFamily(candidateType);

		      if (family !== undefined) {
		        if (staleFamilies.has(family)) {
		          needsRemount = true;
		        } else if (updatedFamilies.has(family)) {
		          if (tag === ClassComponent) {
		            needsRemount = true;
		          } else {
		            needsRender = true;
		          }
		        }
		      }
		    }

		    if (failedBoundaries !== null) {
		      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
		        needsRemount = true;
		      }
		    }

		    if (needsRemount) {
		      fiber._debugNeedsRemount = true;
		    }

		    if (needsRemount || needsRender) {
		      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		    }

		    if (child !== null && !needsRemount) {
		      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
		    }

		    if (sibling !== null) {
		      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
		    }
		  }
		}

		var findHostInstancesForRefresh = function (root, families) {
		  {
		    var hostInstances = new Set();
		    var types = new Set(families.map(function (family) {
		      return family.current;
		    }));
		    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
		    return hostInstances;
		  }
		};

		function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
		  {
		    var child = fiber.child,
		        sibling = fiber.sibling,
		        tag = fiber.tag,
		        type = fiber.type;
		    var candidateType = null;

		    switch (tag) {
		      case FunctionComponent:
		      case SimpleMemoComponent:
		      case ClassComponent:
		        candidateType = type;
		        break;

		      case ForwardRef:
		        candidateType = type.render;
		        break;
		    }

		    var didMatch = false;

		    if (candidateType !== null) {
		      if (types.has(candidateType)) {
		        didMatch = true;
		      }
		    }

		    if (didMatch) {
		      // We have a match. This only drills down to the closest host components.
		      // There's no need to search deeper because for the purpose of giving
		      // visual feedback, "flashing" outermost parent rectangles is sufficient.
		      findHostInstancesForFiberShallowly(fiber, hostInstances);
		    } else {
		      // If there's no match, maybe there will be one further down in the child tree.
		      if (child !== null) {
		        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
		      }
		    }

		    if (sibling !== null) {
		      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
		    }
		  }
		}

		function findHostInstancesForFiberShallowly(fiber, hostInstances) {
		  {
		    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

		    if (foundHostInstances) {
		      return;
		    } // If we didn't find any host children, fallback to closest host parent.


		    var node = fiber;

		    while (true) {
		      switch (node.tag) {
		        case HostComponent:
		          hostInstances.add(node.stateNode);
		          return;

		        case HostPortal:
		          hostInstances.add(node.stateNode.containerInfo);
		          return;

		        case HostRoot:
		          hostInstances.add(node.stateNode.containerInfo);
		          return;
		      }

		      if (node.return === null) {
		        throw new Error('Expected to reach root first.');
		      }

		      node = node.return;
		    }
		  }
		}

		function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
		  {
		    var node = fiber;
		    var foundHostInstances = false;

		    while (true) {
		      if (node.tag === HostComponent) {
		        // We got a match.
		        foundHostInstances = true;
		        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
		      } else if (node.child !== null) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === fiber) {
		        return foundHostInstances;
		      }

		      while (node.sibling === null) {
		        if (node.return === null || node.return === fiber) {
		          return foundHostInstances;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }

		  return false;
		}

		var hasBadMapPolyfill;

		{
		  hasBadMapPolyfill = false;

		  try {
		    var nonExtensibleObject = Object.preventExtensions({});
		    /* eslint-disable no-new */

		    new Map([[nonExtensibleObject, null]]);
		    new Set([nonExtensibleObject]);
		    /* eslint-enable no-new */
		  } catch (e) {
		    // TODO: Consider warning about bad polyfills
		    hasBadMapPolyfill = true;
		  }
		}

		var debugCounter = 1;

		function FiberNode(tag, pendingProps, key, mode) {
		  // Instance
		  this.tag = tag;
		  this.key = key;
		  this.elementType = null;
		  this.type = null;
		  this.stateNode = null; // Fiber

		  this.return = null;
		  this.child = null;
		  this.sibling = null;
		  this.index = 0;
		  this.ref = null;
		  this.pendingProps = pendingProps;
		  this.memoizedProps = null;
		  this.updateQueue = null;
		  this.memoizedState = null;
		  this.dependencies = null;
		  this.mode = mode; // Effects

		  this.flags = NoFlags;
		  this.nextEffect = null;
		  this.firstEffect = null;
		  this.lastEffect = null;
		  this.lanes = NoLanes;
		  this.childLanes = NoLanes;
		  this.alternate = null;

		  {
		    // Note: The following is done to avoid a v8 performance cliff.
		    //
		    // Initializing the fields below to smis and later updating them with
		    // double values will cause Fibers to end up having separate shapes.
		    // This behavior/bug has something to do with Object.preventExtension().
		    // Fortunately this only impacts DEV builds.
		    // Unfortunately it makes React unusably slow for some applications.
		    // To work around this, initialize the fields below with doubles.
		    //
		    // Learn more about this here:
		    // https://github.com/facebook/react/issues/14365
		    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
		    this.actualDuration = Number.NaN;
		    this.actualStartTime = Number.NaN;
		    this.selfBaseDuration = Number.NaN;
		    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
		    // This won't trigger the performance cliff mentioned above,
		    // and it simplifies other profiler code (including DevTools).

		    this.actualDuration = 0;
		    this.actualStartTime = -1;
		    this.selfBaseDuration = 0;
		    this.treeBaseDuration = 0;
		  }

		  {
		    // This isn't directly used but is handy for debugging internals:
		    this._debugID = debugCounter++;
		    this._debugSource = null;
		    this._debugOwner = null;
		    this._debugNeedsRemount = false;
		    this._debugHookTypes = null;

		    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
		      Object.preventExtensions(this);
		    }
		  }
		} // This is a constructor function, rather than a POJO constructor, still
		// please ensure we do the following:
		// 1) Nobody should add any instance methods on this. Instance methods can be
		//    more difficult to predict when they get optimized and they are almost
		//    never inlined properly in static compilers.
		// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
		//    always know when it is a fiber.
		// 3) We might want to experiment with using numeric keys since they are easier
		//    to optimize in a non-JIT environment.
		// 4) We can easily go from a constructor to a createFiber object literal if that
		//    is faster.
		// 5) It should be easy to port this to a C struct and keep a C implementation
		//    compatible.


		var createFiber = function (tag, pendingProps, key, mode) {
		  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
		  return new FiberNode(tag, pendingProps, key, mode);
		};

		function shouldConstruct$1(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function isSimpleFunctionComponent(type) {
		  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
		}
		function resolveLazyComponentTag(Component) {
		  if (typeof Component === 'function') {
		    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
		  } else if (Component !== undefined && Component !== null) {
		    var $$typeof = Component.$$typeof;

		    if ($$typeof === REACT_FORWARD_REF_TYPE) {
		      return ForwardRef;
		    }

		    if ($$typeof === REACT_MEMO_TYPE) {
		      return MemoComponent;
		    }
		  }

		  return IndeterminateComponent;
		} // This is used to create an alternate fiber to do work on.

		function createWorkInProgress(current, pendingProps) {
		  var workInProgress = current.alternate;

		  if (workInProgress === null) {
		    // We use a double buffering pooling technique because we know that we'll
		    // only ever need at most two versions of a tree. We pool the "other" unused
		    // node that we're free to reuse. This is lazily created to avoid allocating
		    // extra objects for things that are never updated. It also allow us to
		    // reclaim the extra memory if needed.
		    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
		    workInProgress.elementType = current.elementType;
		    workInProgress.type = current.type;
		    workInProgress.stateNode = current.stateNode;

		    {
		      // DEV-only fields
		      workInProgress._debugID = current._debugID;
		      workInProgress._debugSource = current._debugSource;
		      workInProgress._debugOwner = current._debugOwner;
		      workInProgress._debugHookTypes = current._debugHookTypes;
		    }

		    workInProgress.alternate = current;
		    current.alternate = workInProgress;
		  } else {
		    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

		    workInProgress.type = current.type; // We already have an alternate.
		    // Reset the effect tag.

		    workInProgress.flags = NoFlags; // The effect list is no longer valid.

		    workInProgress.nextEffect = null;
		    workInProgress.firstEffect = null;
		    workInProgress.lastEffect = null;

		    {
		      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
		      // This prevents time from endlessly accumulating in new commits.
		      // This has the downside of resetting values for different priority renders,
		      // But works for yielding (the common case) and should support resuming.
		      workInProgress.actualDuration = 0;
		      workInProgress.actualStartTime = -1;
		    }
		  }

		  workInProgress.childLanes = current.childLanes;
		  workInProgress.lanes = current.lanes;
		  workInProgress.child = current.child;
		  workInProgress.memoizedProps = current.memoizedProps;
		  workInProgress.memoizedState = current.memoizedState;
		  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
		  // it cannot be shared with the current fiber.

		  var currentDependencies = current.dependencies;
		  workInProgress.dependencies = currentDependencies === null ? null : {
		    lanes: currentDependencies.lanes,
		    firstContext: currentDependencies.firstContext
		  }; // These will be overridden during the parent's reconciliation

		  workInProgress.sibling = current.sibling;
		  workInProgress.index = current.index;
		  workInProgress.ref = current.ref;

		  {
		    workInProgress.selfBaseDuration = current.selfBaseDuration;
		    workInProgress.treeBaseDuration = current.treeBaseDuration;
		  }

		  {
		    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

		    switch (workInProgress.tag) {
		      case IndeterminateComponent:
		      case FunctionComponent:
		      case SimpleMemoComponent:
		        workInProgress.type = resolveFunctionForHotReloading(current.type);
		        break;

		      case ClassComponent:
		        workInProgress.type = resolveClassForHotReloading(current.type);
		        break;

		      case ForwardRef:
		        workInProgress.type = resolveForwardRefForHotReloading(current.type);
		        break;
		    }
		  }

		  return workInProgress;
		} // Used to reuse a Fiber for a second pass.

		function resetWorkInProgress(workInProgress, renderLanes) {
		  // This resets the Fiber to what createFiber or createWorkInProgress would
		  // have set the values to before during the first pass. Ideally this wouldn't
		  // be necessary but unfortunately many code paths reads from the workInProgress
		  // when they should be reading from current and writing to workInProgress.
		  // We assume pendingProps, index, key, ref, return are still untouched to
		  // avoid doing another reconciliation.
		  // Reset the effect tag but keep any Placement tags, since that's something
		  // that child fiber is setting, not the reconciliation.
		  workInProgress.flags &= Placement; // The effect list is no longer valid.

		  workInProgress.nextEffect = null;
		  workInProgress.firstEffect = null;
		  workInProgress.lastEffect = null;
		  var current = workInProgress.alternate;

		  if (current === null) {
		    // Reset to createFiber's initial values.
		    workInProgress.childLanes = NoLanes;
		    workInProgress.lanes = renderLanes;
		    workInProgress.child = null;
		    workInProgress.memoizedProps = null;
		    workInProgress.memoizedState = null;
		    workInProgress.updateQueue = null;
		    workInProgress.dependencies = null;
		    workInProgress.stateNode = null;

		    {
		      // Note: We don't reset the actualTime counts. It's useful to accumulate
		      // actual time across multiple render passes.
		      workInProgress.selfBaseDuration = 0;
		      workInProgress.treeBaseDuration = 0;
		    }
		  } else {
		    // Reset to the cloned values that createWorkInProgress would've.
		    workInProgress.childLanes = current.childLanes;
		    workInProgress.lanes = current.lanes;
		    workInProgress.child = current.child;
		    workInProgress.memoizedProps = current.memoizedProps;
		    workInProgress.memoizedState = current.memoizedState;
		    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

		    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
		    // it cannot be shared with the current fiber.

		    var currentDependencies = current.dependencies;
		    workInProgress.dependencies = currentDependencies === null ? null : {
		      lanes: currentDependencies.lanes,
		      firstContext: currentDependencies.firstContext
		    };

		    {
		      // Note: We don't reset the actualTime counts. It's useful to accumulate
		      // actual time across multiple render passes.
		      workInProgress.selfBaseDuration = current.selfBaseDuration;
		      workInProgress.treeBaseDuration = current.treeBaseDuration;
		    }
		  }

		  return workInProgress;
		}
		function createHostRootFiber(tag) {
		  var mode;

		  if (tag === ConcurrentRoot) {
		    mode = ConcurrentMode | BlockingMode | StrictMode;
		  } else if (tag === BlockingRoot) {
		    mode = BlockingMode | StrictMode;
		  } else {
		    mode = NoMode;
		  }

		  if ( isDevToolsPresent) {
		    // Always collect profile timings when DevTools are present.
		    // This enables DevTools to start capturing timing at any point–
		    // Without some nodes in the tree having empty base times.
		    mode |= ProfileMode;
		  }

		  return createFiber(HostRoot, null, null, mode);
		}
		function createFiberFromTypeAndProps(type, // React$ElementType
		key, pendingProps, owner, mode, lanes) {
		  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

		  var resolvedType = type;

		  if (typeof type === 'function') {
		    if (shouldConstruct$1(type)) {
		      fiberTag = ClassComponent;

		      {
		        resolvedType = resolveClassForHotReloading(resolvedType);
		      }
		    } else {
		      {
		        resolvedType = resolveFunctionForHotReloading(resolvedType);
		      }
		    }
		  } else if (typeof type === 'string') {
		    fiberTag = HostComponent;
		  } else {
		    getTag: switch (type) {
		      case REACT_FRAGMENT_TYPE:
		        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

		      case REACT_DEBUG_TRACING_MODE_TYPE:
		        fiberTag = Mode;
		        mode |= DebugTracingMode;
		        break;

		      case REACT_STRICT_MODE_TYPE:
		        fiberTag = Mode;
		        mode |= StrictMode;
		        break;

		      case REACT_PROFILER_TYPE:
		        return createFiberFromProfiler(pendingProps, mode, lanes, key);

		      case REACT_SUSPENSE_TYPE:
		        return createFiberFromSuspense(pendingProps, mode, lanes, key);

		      case REACT_SUSPENSE_LIST_TYPE:
		        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

		      case REACT_OFFSCREEN_TYPE:
		        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

		      case REACT_LEGACY_HIDDEN_TYPE:
		        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

		      case REACT_SCOPE_TYPE:

		      // eslint-disable-next-line no-fallthrough

		      default:
		        {
		          if (typeof type === 'object' && type !== null) {
		            switch (type.$$typeof) {
		              case REACT_PROVIDER_TYPE:
		                fiberTag = ContextProvider;
		                break getTag;

		              case REACT_CONTEXT_TYPE:
		                // This is a consumer
		                fiberTag = ContextConsumer;
		                break getTag;

		              case REACT_FORWARD_REF_TYPE:
		                fiberTag = ForwardRef;

		                {
		                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
		                }

		                break getTag;

		              case REACT_MEMO_TYPE:
		                fiberTag = MemoComponent;
		                break getTag;

		              case REACT_LAZY_TYPE:
		                fiberTag = LazyComponent;
		                resolvedType = null;
		                break getTag;

		              case REACT_BLOCK_TYPE:
		                fiberTag = Block;
		                break getTag;
		            }
		          }

		          var info = '';

		          {
		            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
		            }

		            var ownerName = owner ? getComponentName(owner.type) : null;

		            if (ownerName) {
		              info += '\n\nCheck the render method of `' + ownerName + '`.';
		            }
		          }

		          {
		            {
		              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
		            }
		          }
		        }
		    }
		  }

		  var fiber = createFiber(fiberTag, pendingProps, key, mode);
		  fiber.elementType = type;
		  fiber.type = resolvedType;
		  fiber.lanes = lanes;

		  {
		    fiber._debugOwner = owner;
		  }

		  return fiber;
		}
		function createFiberFromElement(element, mode, lanes) {
		  var owner = null;

		  {
		    owner = element._owner;
		  }

		  var type = element.type;
		  var key = element.key;
		  var pendingProps = element.props;
		  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

		  {
		    fiber._debugSource = element._source;
		    fiber._debugOwner = element._owner;
		  }

		  return fiber;
		}
		function createFiberFromFragment(elements, mode, lanes, key) {
		  var fiber = createFiber(Fragment, elements, key, mode);
		  fiber.lanes = lanes;
		  return fiber;
		}

		function createFiberFromProfiler(pendingProps, mode, lanes, key) {
		  {
		    if (typeof pendingProps.id !== 'string') {
		      error('Profiler must specify an "id" as a prop');
		    }
		  }

		  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

		  fiber.elementType = REACT_PROFILER_TYPE;
		  fiber.type = REACT_PROFILER_TYPE;
		  fiber.lanes = lanes;

		  {
		    fiber.stateNode = {
		      effectDuration: 0,
		      passiveEffectDuration: 0
		    };
		  }

		  return fiber;
		}

		function createFiberFromSuspense(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
		  // This needs to be fixed in getComponentName so that it relies on the tag
		  // instead.

		  fiber.type = REACT_SUSPENSE_TYPE;
		  fiber.elementType = REACT_SUSPENSE_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

		  {
		    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
		    // This needs to be fixed in getComponentName so that it relies on the tag
		    // instead.
		    fiber.type = REACT_SUSPENSE_LIST_TYPE;
		  }

		  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
		  // This needs to be fixed in getComponentName so that it relies on the tag
		  // instead.

		  {
		    fiber.type = REACT_OFFSCREEN_TYPE;
		  }

		  fiber.elementType = REACT_OFFSCREEN_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
		  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
		  // This needs to be fixed in getComponentName so that it relies on the tag
		  // instead.

		  {
		    fiber.type = REACT_LEGACY_HIDDEN_TYPE;
		  }

		  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromText(content, mode, lanes) {
		  var fiber = createFiber(HostText, content, null, mode);
		  fiber.lanes = lanes;
		  return fiber;
		}
		function createFiberFromHostInstanceForDeletion() {
		  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

		  fiber.elementType = 'DELETED';
		  fiber.type = 'DELETED';
		  return fiber;
		}
		function createFiberFromPortal(portal, mode, lanes) {
		  var pendingProps = portal.children !== null ? portal.children : [];
		  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
		  fiber.lanes = lanes;
		  fiber.stateNode = {
		    containerInfo: portal.containerInfo,
		    pendingChildren: null,
		    // Used by persistent updates
		    implementation: portal.implementation
		  };
		  return fiber;
		} // Used for stashing WIP properties to replay failed work in DEV.

		function assignFiberPropertiesInDEV(target, source) {
		  if (target === null) {
		    // This Fiber's initial properties will always be overwritten.
		    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
		    target = createFiber(IndeterminateComponent, null, null, NoMode);
		  } // This is intentionally written as a list of all properties.
		  // We tried to use Object.assign() instead but this is called in
		  // the hottest path, and Object.assign() was too slow:
		  // https://github.com/facebook/react/issues/12502
		  // This code is DEV-only so size is not a concern.


		  target.tag = source.tag;
		  target.key = source.key;
		  target.elementType = source.elementType;
		  target.type = source.type;
		  target.stateNode = source.stateNode;
		  target.return = source.return;
		  target.child = source.child;
		  target.sibling = source.sibling;
		  target.index = source.index;
		  target.ref = source.ref;
		  target.pendingProps = source.pendingProps;
		  target.memoizedProps = source.memoizedProps;
		  target.updateQueue = source.updateQueue;
		  target.memoizedState = source.memoizedState;
		  target.dependencies = source.dependencies;
		  target.mode = source.mode;
		  target.flags = source.flags;
		  target.nextEffect = source.nextEffect;
		  target.firstEffect = source.firstEffect;
		  target.lastEffect = source.lastEffect;
		  target.lanes = source.lanes;
		  target.childLanes = source.childLanes;
		  target.alternate = source.alternate;

		  {
		    target.actualDuration = source.actualDuration;
		    target.actualStartTime = source.actualStartTime;
		    target.selfBaseDuration = source.selfBaseDuration;
		    target.treeBaseDuration = source.treeBaseDuration;
		  }

		  target._debugID = source._debugID;
		  target._debugSource = source._debugSource;
		  target._debugOwner = source._debugOwner;
		  target._debugNeedsRemount = source._debugNeedsRemount;
		  target._debugHookTypes = source._debugHookTypes;
		  return target;
		}

		function FiberRootNode(containerInfo, tag, hydrate) {
		  this.tag = tag;
		  this.containerInfo = containerInfo;
		  this.pendingChildren = null;
		  this.current = null;
		  this.pingCache = null;
		  this.finishedWork = null;
		  this.timeoutHandle = noTimeout;
		  this.context = null;
		  this.pendingContext = null;
		  this.hydrate = hydrate;
		  this.callbackNode = null;
		  this.callbackPriority = NoLanePriority;
		  this.eventTimes = createLaneMap(NoLanes);
		  this.expirationTimes = createLaneMap(NoTimestamp);
		  this.pendingLanes = NoLanes;
		  this.suspendedLanes = NoLanes;
		  this.pingedLanes = NoLanes;
		  this.expiredLanes = NoLanes;
		  this.mutableReadLanes = NoLanes;
		  this.finishedLanes = NoLanes;
		  this.entangledLanes = NoLanes;
		  this.entanglements = createLaneMap(NoLanes);

		  if (supportsHydration) {
		    this.mutableSourceEagerHydrationData = null;
		  }

		  {
		    this.interactionThreadID = tracing.unstable_getThreadID();
		    this.memoizedInteractions = new Set();
		    this.pendingInteractionMap = new Map();
		  }

		  {
		    switch (tag) {
		      case BlockingRoot:
		        this._debugRootType = 'createBlockingRoot()';
		        break;

		      case ConcurrentRoot:
		        this._debugRootType = 'createRoot()';
		        break;

		      case LegacyRoot:
		        this._debugRootType = 'createLegacyRoot()';
		        break;
		    }
		  }
		}

		function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
		  var root = new FiberRootNode(containerInfo, tag, hydrate);
		  // stateNode is any.


		  var uninitializedFiber = createHostRootFiber(tag);
		  root.current = uninitializedFiber;
		  uninitializedFiber.stateNode = root;
		  initializeUpdateQueue(uninitializedFiber);
		  return root;
		}

		// This ensures that the version used for server rendering matches the one
		// that is eventually read during hydration.
		// If they don't match there's a potential tear and a full deopt render is required.

		function registerMutableSourceForHydration(root, mutableSource) {
		  var getVersion = mutableSource._getVersion;
		  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
		  // Retaining it forever may interfere with GC.

		  if (root.mutableSourceEagerHydrationData == null) {
		    root.mutableSourceEagerHydrationData = [mutableSource, version];
		  } else {
		    root.mutableSourceEagerHydrationData.push(mutableSource, version);
		  }
		}

		function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
		implementation) {
		  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
		  return {
		    // This tag allow us to uniquely identify this as a React Portal
		    $$typeof: REACT_PORTAL_TYPE,
		    key: key == null ? null : '' + key,
		    children: children,
		    containerInfo: containerInfo,
		    implementation: implementation
		  };
		}

		var didWarnAboutNestedUpdates;
		var didWarnAboutFindNodeInStrictMode;

		{
		  didWarnAboutNestedUpdates = false;
		  didWarnAboutFindNodeInStrictMode = {};
		}

		function getContextForSubtree(parentComponent) {
		  if (!parentComponent) {
		    return emptyContextObject;
		  }

		  var fiber = get(parentComponent);
		  var parentContext = findCurrentUnmaskedContext(fiber);

		  if (fiber.tag === ClassComponent) {
		    var Component = fiber.type;

		    if (isContextProvider(Component)) {
		      return processChildContext(fiber, Component, parentContext);
		    }
		  }

		  return parentContext;
		}

		function findHostInstance(component) {
		  var fiber = get(component);

		  if (fiber === undefined) {
		    if (typeof component.render === 'function') {
		      {
		        {
		          throw Error( "Unable to find node on an unmounted component." );
		        }
		      }
		    } else {
		      {
		        {
		          throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
		        }
		      }
		    }
		  }

		  var hostFiber = findCurrentHostFiber(fiber);

		  if (hostFiber === null) {
		    return null;
		  }

		  return hostFiber.stateNode;
		}

		function findHostInstanceWithWarning(component, methodName) {
		  {
		    var fiber = get(component);

		    if (fiber === undefined) {
		      if (typeof component.render === 'function') {
		        {
		          {
		            throw Error( "Unable to find node on an unmounted component." );
		          }
		        }
		      } else {
		        {
		          {
		            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
		          }
		        }
		      }
		    }

		    var hostFiber = findCurrentHostFiber(fiber);

		    if (hostFiber === null) {
		      return null;
		    }

		    if (hostFiber.mode & StrictMode) {
		      var componentName = getComponentName(fiber.type) || 'Component';

		      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
		        didWarnAboutFindNodeInStrictMode[componentName] = true;
		        var previousFiber = current;

		        try {
		          setCurrentFiber(hostFiber);

		          if (fiber.mode & StrictMode) {
		            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
		          } else {
		            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
		          }
		        } finally {
		          // Ideally this should reset to previous but this shouldn't be called in
		          // render and there's another warning for that anyway.
		          if (previousFiber) {
		            setCurrentFiber(previousFiber);
		          } else {
		            resetCurrentFiber();
		          }
		        }
		      }
		    }

		    return hostFiber.stateNode;
		  }
		}

		function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
		  return createFiberRoot(containerInfo, tag, hydrate);
		}
		function updateContainer(element, container, parentComponent, callback) {
		  {
		    onScheduleRoot(container, element);
		  }

		  var current$1 = container.current;
		  var eventTime = requestEventTime();

		  {
		    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
		    if ('undefined' !== typeof jest) {
		      warnIfUnmockedScheduler(current$1);
		      warnIfNotScopedWithMatchingAct(current$1);
		    }
		  }

		  var lane = requestUpdateLane(current$1);

		  var context = getContextForSubtree(parentComponent);

		  if (container.context === null) {
		    container.context = context;
		  } else {
		    container.pendingContext = context;
		  }

		  {
		    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
		      didWarnAboutNestedUpdates = true;

		      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
		    }
		  }

		  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
		  // being called "element".

		  update.payload = {
		    element: element
		  };
		  callback = callback === undefined ? null : callback;

		  if (callback !== null) {
		    {
		      if (typeof callback !== 'function') {
		        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
		      }
		    }

		    update.callback = callback;
		  }

		  enqueueUpdate(current$1, update);
		  scheduleUpdateOnFiber(current$1, lane, eventTime);
		  return lane;
		}
		function getPublicRootInstance(container) {
		  var containerFiber = container.current;

		  if (!containerFiber.child) {
		    return null;
		  }

		  switch (containerFiber.child.tag) {
		    case HostComponent:
		      return getPublicInstance(containerFiber.child.stateNode);

		    default:
		      return containerFiber.child.stateNode;
		  }
		}
		function attemptSynchronousHydration(fiber) {
		  switch (fiber.tag) {
		    case HostRoot:
		      var root = fiber.stateNode;

		      if (root.hydrate) {
		        // Flush the first scheduled "update".
		        var lanes = getHighestPriorityPendingLanes(root);
		        flushRoot(root, lanes);
		      }

		      break;

		    case SuspenseComponent:
		      var eventTime = requestEventTime();
		      flushSync(function () {
		        return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
		      }); // If we're still blocked after this, we need to increase
		      // the priority of any promises resolving within this
		      // boundary so that they next attempt also has higher pri.

		      var retryLane = InputDiscreteHydrationLane;
		      markRetryLaneIfNotHydrated(fiber, retryLane);
		      break;
		  }
		}

		function markRetryLaneImpl(fiber, retryLane) {
		  var suspenseState = fiber.memoizedState;

		  if (suspenseState !== null && suspenseState.dehydrated !== null) {
		    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
		  }
		} // Increases the priority of thennables when they resolve within this boundary.


		function markRetryLaneIfNotHydrated(fiber, retryLane) {
		  markRetryLaneImpl(fiber, retryLane);
		  var alternate = fiber.alternate;

		  if (alternate) {
		    markRetryLaneImpl(alternate, retryLane);
		  }
		}

		function attemptUserBlockingHydration(fiber) {
		  if (fiber.tag !== SuspenseComponent) {
		    // We ignore HostRoots here because we can't increase
		    // their priority and they should not suspend on I/O,
		    // since you have to wrap anything that might suspend in
		    // Suspense.
		    return;
		  }

		  var eventTime = requestEventTime();
		  var lane = InputDiscreteHydrationLane;
		  scheduleUpdateOnFiber(fiber, lane, eventTime);
		  markRetryLaneIfNotHydrated(fiber, lane);
		}
		function attemptContinuousHydration(fiber) {
		  if (fiber.tag !== SuspenseComponent) {
		    // We ignore HostRoots here because we can't increase
		    // their priority and they should not suspend on I/O,
		    // since you have to wrap anything that might suspend in
		    // Suspense.
		    return;
		  }

		  var eventTime = requestEventTime();
		  var lane = SelectiveHydrationLane;
		  scheduleUpdateOnFiber(fiber, lane, eventTime);
		  markRetryLaneIfNotHydrated(fiber, lane);
		}
		function attemptHydrationAtCurrentPriority(fiber) {
		  if (fiber.tag !== SuspenseComponent) {
		    // We ignore HostRoots here because we can't increase
		    // their priority other than synchronously flush it.
		    return;
		  }

		  var eventTime = requestEventTime();
		  var lane = requestUpdateLane(fiber);
		  scheduleUpdateOnFiber(fiber, lane, eventTime);
		  markRetryLaneIfNotHydrated(fiber, lane);
		}
		function runWithPriority$1(priority, fn) {
		  var previousPriority = getCurrentUpdateLanePriority();

		  try {
		    setCurrentUpdateLanePriority(priority);
		    return fn();
		  } finally {
		    setCurrentUpdateLanePriority(previousPriority);
		  }
		}
		function findHostInstanceWithNoPortals(fiber) {
		  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

		  if (hostFiber === null) {
		    return null;
		  }

		  if (hostFiber.tag === FundamentalComponent) {
		    return hostFiber.stateNode.instance;
		  }

		  return hostFiber.stateNode;
		}

		var shouldSuspendImpl = function (fiber) {
		  return false;
		};

		function shouldSuspend(fiber) {
		  return shouldSuspendImpl(fiber);
		}
		var overrideHookState = null;
		var overrideHookStateDeletePath = null;
		var overrideHookStateRenamePath = null;
		var overrideProps = null;
		var overridePropsDeletePath = null;
		var overridePropsRenamePath = null;
		var scheduleUpdate = null;
		var setSuspenseHandler = null;

		{
		  var copyWithDeleteImpl = function (obj, path, index) {
		    var key = path[index];
		    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

		    if (index + 1 === path.length) {
		      if (Array.isArray(updated)) {
		        updated.splice(key, 1);
		      } else {
		        delete updated[key];
		      }

		      return updated;
		    } // $FlowFixMe number or string is fine here


		    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
		    return updated;
		  };

		  var copyWithDelete = function (obj, path) {
		    return copyWithDeleteImpl(obj, path, 0);
		  };

		  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
		    var oldKey = oldPath[index];
		    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

		    if (index + 1 === oldPath.length) {
		      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

		      updated[newKey] = updated[oldKey];

		      if (Array.isArray(updated)) {
		        updated.splice(oldKey, 1);
		      } else {
		        delete updated[oldKey];
		      }
		    } else {
		      // $FlowFixMe number or string is fine here
		      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
		      obj[oldKey], oldPath, newPath, index + 1);
		    }

		    return updated;
		  };

		  var copyWithRename = function (obj, oldPath, newPath) {
		    if (oldPath.length !== newPath.length) {
		      warn('copyWithRename() expects paths of the same length');

		      return;
		    } else {
		      for (var i = 0; i < newPath.length - 1; i++) {
		        if (oldPath[i] !== newPath[i]) {
		          warn('copyWithRename() expects paths to be the same except for the deepest key');

		          return;
		        }
		      }
		    }

		    return copyWithRenameImpl(obj, oldPath, newPath, 0);
		  };

		  var copyWithSetImpl = function (obj, path, index, value) {
		    if (index >= path.length) {
		      return value;
		    }

		    var key = path[index];
		    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

		    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
		    return updated;
		  };

		  var copyWithSet = function (obj, path, value) {
		    return copyWithSetImpl(obj, path, 0, value);
		  };

		  var findHook = function (fiber, id) {
		    // For now, the "id" of stateful hooks is just the stateful hook index.
		    // This may change in the future with e.g. nested hooks.
		    var currentHook = fiber.memoizedState;

		    while (currentHook !== null && id > 0) {
		      currentHook = currentHook.next;
		      id--;
		    }

		    return currentHook;
		  }; // Support DevTools editable values for useState and useReducer.


		  overrideHookState = function (fiber, id, path, value) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithSet(hook.memoizedState, path, value);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
		      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		    }
		  };

		  overrideHookStateDeletePath = function (fiber, id, path) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithDelete(hook.memoizedState, path);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
		      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		    }
		  };

		  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
		    var hook = findHook(fiber, id);

		    if (hook !== null) {
		      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
		      hook.memoizedState = newState;
		      hook.baseState = newState; // We aren't actually adding an update to the queue,
		      // because there is no update we can add for useReducer hooks that won't trigger an error.
		      // (There's no appropriate action type for DevTools overrides.)
		      // As a result though, React will see the scheduled update as a noop and bailout.
		      // Shallow cloning props works as a workaround for now to bypass the bailout check.

		      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
		      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		    }
		  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


		  overrideProps = function (fiber, path, value) {
		    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		  };

		  overridePropsDeletePath = function (fiber, path) {
		    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		  };

		  overridePropsRenamePath = function (fiber, oldPath, newPath) {
		    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

		    if (fiber.alternate) {
		      fiber.alternate.pendingProps = fiber.pendingProps;
		    }

		    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		  };

		  scheduleUpdate = function (fiber) {
		    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
		  };

		  setSuspenseHandler = function (newShouldSuspendImpl) {
		    shouldSuspendImpl = newShouldSuspendImpl;
		  };
		}

		function findHostInstanceByFiber(fiber) {
		  var hostFiber = findCurrentHostFiber(fiber);

		  if (hostFiber === null) {
		    return null;
		  }

		  return hostFiber.stateNode;
		}

		function emptyFindFiberByHostInstance(instance) {
		  return null;
		}

		function getCurrentFiberForDevTools() {
		  return current;
		}

		function injectIntoDevTools(devToolsConfig) {
		  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
		  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		  return injectInternals({
		    bundleType: devToolsConfig.bundleType,
		    version: devToolsConfig.version,
		    rendererPackageName: devToolsConfig.rendererPackageName,
		    rendererConfig: devToolsConfig.rendererConfig,
		    overrideHookState: overrideHookState,
		    overrideHookStateDeletePath: overrideHookStateDeletePath,
		    overrideHookStateRenamePath: overrideHookStateRenamePath,
		    overrideProps: overrideProps,
		    overridePropsDeletePath: overridePropsDeletePath,
		    overridePropsRenamePath: overridePropsRenamePath,
		    setSuspenseHandler: setSuspenseHandler,
		    scheduleUpdate: scheduleUpdate,
		    currentDispatcherRef: ReactCurrentDispatcher,
		    findHostInstanceByFiber: findHostInstanceByFiber,
		    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
		    // React Refresh
		    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
		    scheduleRefresh:  scheduleRefresh ,
		    scheduleRoot:  scheduleRoot ,
		    setRefreshHandler:  setRefreshHandler ,
		    // Enables DevTools to append owner stacks to error messages in DEV mode.
		    getCurrentFiber:  getCurrentFiberForDevTools 
		  });
		}

		exports.IsThisRendererActing = IsThisRendererActing;
		exports.act = act;
		exports.attemptContinuousHydration = attemptContinuousHydration;
		exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;
		exports.attemptSynchronousHydration = attemptSynchronousHydration;
		exports.attemptUserBlockingHydration = attemptUserBlockingHydration;
		exports.batchedEventUpdates = batchedEventUpdates;
		exports.batchedUpdates = batchedUpdates;
		exports.createComponentSelector = createComponentSelector;
		exports.createContainer = createContainer;
		exports.createHasPsuedoClassSelector = createHasPsuedoClassSelector;
		exports.createPortal = createPortal;
		exports.createRoleSelector = createRoleSelector;
		exports.createTestNameSelector = createTestNameSelector;
		exports.createTextSelector = createTextSelector;
		exports.deferredUpdates = deferredUpdates;
		exports.discreteUpdates = discreteUpdates;
		exports.findAllNodes = findAllNodes;
		exports.findBoundingRects = findBoundingRects;
		exports.findHostInstance = findHostInstance;
		exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;
		exports.findHostInstanceWithWarning = findHostInstanceWithWarning;
		exports.flushControlled = flushControlled;
		exports.flushDiscreteUpdates = flushDiscreteUpdates;
		exports.flushPassiveEffects = flushPassiveEffects;
		exports.flushSync = flushSync;
		exports.focusWithin = focusWithin;
		exports.getCurrentUpdateLanePriority = getCurrentUpdateLanePriority;
		exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;
		exports.getPublicRootInstance = getPublicRootInstance;
		exports.injectIntoDevTools = injectIntoDevTools;
		exports.observeVisibleRects = observeVisibleRects;
		exports.registerMutableSourceForHydration = registerMutableSourceForHydration;
		exports.runWithPriority = runWithPriority$1;
		exports.shouldSuspend = shouldSuspend;
		exports.unbatchedUpdates = unbatchedUpdates;
		exports.updateContainer = updateContainer;
		    return exports;
		  };
		}
} (reactReconciler_development));
	return reactReconciler_development.exports;
}

(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = requireReactReconciler_production_min();
	} else {
	  module.exports = requireReactReconciler_development();
	}
} (reactReconciler));

var dom$1 = {};

var measureText = {};

var widestLine$1 = {exports: {}};

var stringWidth$4 = {exports: {}};

var ansiRegex$1 = ({onlyFirst = false} = {}) => {
	const pattern = [
		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
};

const ansiRegex = ansiRegex$1;

var stripAnsi$2 = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;

var isFullwidthCodePoint$3 = {exports: {}};

/* eslint-disable yoda */

const isFullwidthCodePoint$2 = codePoint => {
	if (Number.isNaN(codePoint)) {
		return false;
	}

	// Code points are derived from:
	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
	if (
		codePoint >= 0x1100 && (
			codePoint <= 0x115F || // Hangul Jamo
			codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
			codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
			(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||
			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
			(0x3250 <= codePoint && codePoint <= 0x4DBF) ||
			// CJK Unified Ideographs .. Yi Radicals
			(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||
			// Hangul Jamo Extended-A
			(0xA960 <= codePoint && codePoint <= 0xA97C) ||
			// Hangul Syllables
			(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
			// CJK Compatibility Ideographs
			(0xF900 <= codePoint && codePoint <= 0xFAFF) ||
			// Vertical Forms
			(0xFE10 <= codePoint && codePoint <= 0xFE19) ||
			// CJK Compatibility Forms .. Small Form Variants
			(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||
			// Halfwidth and Fullwidth Forms
			(0xFF01 <= codePoint && codePoint <= 0xFF60) ||
			(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||
			// Kana Supplement
			(0x1B000 <= codePoint && codePoint <= 0x1B001) ||
			// Enclosed Ideographic Supplement
			(0x1F200 <= codePoint && codePoint <= 0x1F251) ||
			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
			(0x20000 <= codePoint && codePoint <= 0x3FFFD)
		)
	) {
		return true;
	}

	return false;
};

isFullwidthCodePoint$3.exports = isFullwidthCodePoint$2;
isFullwidthCodePoint$3.exports.default = isFullwidthCodePoint$2;

var emojiRegex$1 = function () {
  // https://mths.be/emoji
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};

const stripAnsi$1 = stripAnsi$2;
const isFullwidthCodePoint$1 = isFullwidthCodePoint$3.exports;
const emojiRegex = emojiRegex$1;

const stringWidth$3 = string => {
	if (typeof string !== 'string' || string.length === 0) {
		return 0;
	}

	string = stripAnsi$1(string);

	if (string.length === 0) {
		return 0;
	}

	string = string.replace(emojiRegex(), '  ');

	let width = 0;

	for (let i = 0; i < string.length; i++) {
		const code = string.codePointAt(i);

		// Ignore control characters
		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
			continue;
		}

		// Ignore combining characters
		if (code >= 0x300 && code <= 0x36F) {
			continue;
		}

		// Surrogates
		if (code > 0xFFFF) {
			i++;
		}

		width += isFullwidthCodePoint$1(code) ? 2 : 1;
	}

	return width;
};

stringWidth$4.exports = stringWidth$3;
// TODO: remove this in the next major version
stringWidth$4.exports.default = stringWidth$3;

const stringWidth$2 = stringWidth$4.exports;

const widestLine = input => {
	let max = 0;

	for (const line of input.split('\n')) {
		max = Math.max(max, stringWidth$2(line));
	}

	return max;
};

widestLine$1.exports = widestLine;
// TODO: remove this in the next major version
widestLine$1.exports.default = widestLine;

var __importDefault$o = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(measureText, "__esModule", { value: true });
const widest_line_1$1 = __importDefault$o(widestLine$1.exports);
const cache$2 = {};
measureText.default = (text) => {
    if (text.length === 0) {
        return {
            width: 0,
            height: 0
        };
    }
    if (cache$2[text]) {
        return cache$2[text];
    }
    const width = widest_line_1$1.default(text);
    const height = text.split('\n').length;
    cache$2[text] = { width, height };
    return { width, height };
};

var styles = {};

var __importDefault$n = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(styles, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
const yoga_layout_prebuilt_1$4 = __importDefault$n(require$$0$4);
const applyPositionStyles = (node, style) => {
    if ('position' in style) {
        node.setPositionType(style.position === 'absolute'
            ? yoga_layout_prebuilt_1$4.default.POSITION_TYPE_ABSOLUTE
            : yoga_layout_prebuilt_1$4.default.POSITION_TYPE_RELATIVE);
    }
};
const applyMarginStyles = (node, style) => {
    if ('marginLeft' in style) {
        node.setMargin(yoga_layout_prebuilt_1$4.default.EDGE_START, style.marginLeft || 0);
    }
    if ('marginRight' in style) {
        node.setMargin(yoga_layout_prebuilt_1$4.default.EDGE_END, style.marginRight || 0);
    }
    if ('marginTop' in style) {
        node.setMargin(yoga_layout_prebuilt_1$4.default.EDGE_TOP, style.marginTop || 0);
    }
    if ('marginBottom' in style) {
        node.setMargin(yoga_layout_prebuilt_1$4.default.EDGE_BOTTOM, style.marginBottom || 0);
    }
};
const applyPaddingStyles = (node, style) => {
    if ('paddingLeft' in style) {
        node.setPadding(yoga_layout_prebuilt_1$4.default.EDGE_LEFT, style.paddingLeft || 0);
    }
    if ('paddingRight' in style) {
        node.setPadding(yoga_layout_prebuilt_1$4.default.EDGE_RIGHT, style.paddingRight || 0);
    }
    if ('paddingTop' in style) {
        node.setPadding(yoga_layout_prebuilt_1$4.default.EDGE_TOP, style.paddingTop || 0);
    }
    if ('paddingBottom' in style) {
        node.setPadding(yoga_layout_prebuilt_1$4.default.EDGE_BOTTOM, style.paddingBottom || 0);
    }
};
const applyFlexStyles = (node, style) => {
    var _a;
    if ('flexGrow' in style) {
        node.setFlexGrow((_a = style.flexGrow) !== null && _a !== void 0 ? _a : 0);
    }
    if ('flexShrink' in style) {
        node.setFlexShrink(typeof style.flexShrink === 'number' ? style.flexShrink : 1);
    }
    if ('flexDirection' in style) {
        if (style.flexDirection === 'row') {
            node.setFlexDirection(yoga_layout_prebuilt_1$4.default.FLEX_DIRECTION_ROW);
        }
        if (style.flexDirection === 'row-reverse') {
            node.setFlexDirection(yoga_layout_prebuilt_1$4.default.FLEX_DIRECTION_ROW_REVERSE);
        }
        if (style.flexDirection === 'column') {
            node.setFlexDirection(yoga_layout_prebuilt_1$4.default.FLEX_DIRECTION_COLUMN);
        }
        if (style.flexDirection === 'column-reverse') {
            node.setFlexDirection(yoga_layout_prebuilt_1$4.default.FLEX_DIRECTION_COLUMN_REVERSE);
        }
    }
    if ('flexBasis' in style) {
        if (typeof style.flexBasis === 'number') {
            node.setFlexBasis(style.flexBasis);
        }
        else if (typeof style.flexBasis === 'string') {
            node.setFlexBasisPercent(Number.parseInt(style.flexBasis, 10));
        }
        else {
            // This should be replaced with node.setFlexBasisAuto() when new Yoga release is out
            node.setFlexBasis(NaN);
        }
    }
    if ('alignItems' in style) {
        if (style.alignItems === 'stretch' || !style.alignItems) {
            node.setAlignItems(yoga_layout_prebuilt_1$4.default.ALIGN_STRETCH);
        }
        if (style.alignItems === 'flex-start') {
            node.setAlignItems(yoga_layout_prebuilt_1$4.default.ALIGN_FLEX_START);
        }
        if (style.alignItems === 'center') {
            node.setAlignItems(yoga_layout_prebuilt_1$4.default.ALIGN_CENTER);
        }
        if (style.alignItems === 'flex-end') {
            node.setAlignItems(yoga_layout_prebuilt_1$4.default.ALIGN_FLEX_END);
        }
    }
    if ('alignSelf' in style) {
        if (style.alignSelf === 'auto' || !style.alignSelf) {
            node.setAlignSelf(yoga_layout_prebuilt_1$4.default.ALIGN_AUTO);
        }
        if (style.alignSelf === 'flex-start') {
            node.setAlignSelf(yoga_layout_prebuilt_1$4.default.ALIGN_FLEX_START);
        }
        if (style.alignSelf === 'center') {
            node.setAlignSelf(yoga_layout_prebuilt_1$4.default.ALIGN_CENTER);
        }
        if (style.alignSelf === 'flex-end') {
            node.setAlignSelf(yoga_layout_prebuilt_1$4.default.ALIGN_FLEX_END);
        }
    }
    if ('justifyContent' in style) {
        if (style.justifyContent === 'flex-start' || !style.justifyContent) {
            node.setJustifyContent(yoga_layout_prebuilt_1$4.default.JUSTIFY_FLEX_START);
        }
        if (style.justifyContent === 'center') {
            node.setJustifyContent(yoga_layout_prebuilt_1$4.default.JUSTIFY_CENTER);
        }
        if (style.justifyContent === 'flex-end') {
            node.setJustifyContent(yoga_layout_prebuilt_1$4.default.JUSTIFY_FLEX_END);
        }
        if (style.justifyContent === 'space-between') {
            node.setJustifyContent(yoga_layout_prebuilt_1$4.default.JUSTIFY_SPACE_BETWEEN);
        }
        if (style.justifyContent === 'space-around') {
            node.setJustifyContent(yoga_layout_prebuilt_1$4.default.JUSTIFY_SPACE_AROUND);
        }
    }
};
const applyDimensionStyles = (node, style) => {
    var _a, _b;
    if ('width' in style) {
        if (typeof style.width === 'number') {
            node.setWidth(style.width);
        }
        else if (typeof style.width === 'string') {
            node.setWidthPercent(Number.parseInt(style.width, 10));
        }
        else {
            node.setWidthAuto();
        }
    }
    if ('height' in style) {
        if (typeof style.height === 'number') {
            node.setHeight(style.height);
        }
        else if (typeof style.height === 'string') {
            node.setHeightPercent(Number.parseInt(style.height, 10));
        }
        else {
            node.setHeightAuto();
        }
    }
    if ('minWidth' in style) {
        if (typeof style.minWidth === 'string') {
            node.setMinWidthPercent(Number.parseInt(style.minWidth, 10));
        }
        else {
            node.setMinWidth((_a = style.minWidth) !== null && _a !== void 0 ? _a : 0);
        }
    }
    if ('minHeight' in style) {
        if (typeof style.minHeight === 'string') {
            node.setMinHeightPercent(Number.parseInt(style.minHeight, 10));
        }
        else {
            node.setMinHeight((_b = style.minHeight) !== null && _b !== void 0 ? _b : 0);
        }
    }
};
const applyDisplayStyles = (node, style) => {
    if ('display' in style) {
        node.setDisplay(style.display === 'flex' ? yoga_layout_prebuilt_1$4.default.DISPLAY_FLEX : yoga_layout_prebuilt_1$4.default.DISPLAY_NONE);
    }
};
const applyBorderStyles = (node, style) => {
    if ('borderStyle' in style) {
        const borderWidth = typeof style.borderStyle === 'string' ? 1 : 0;
        node.setBorder(yoga_layout_prebuilt_1$4.default.EDGE_TOP, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1$4.default.EDGE_BOTTOM, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1$4.default.EDGE_LEFT, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1$4.default.EDGE_RIGHT, borderWidth);
    }
};
styles.default = (node, style = {}) => {
    applyPositionStyles(node, style);
    applyMarginStyles(node, style);
    applyPaddingStyles(node, style);
    applyFlexStyles(node, style);
    applyDimensionStyles(node, style);
    applyDisplayStyles(node, style);
    applyBorderStyles(node, style);
};

var wrapText = {};

var ansiStyles$2 = {exports: {}};

var colorName;
var hasRequiredColorName;

function requireColorName () {
	if (hasRequiredColorName) return colorName;
	hasRequiredColorName = 1;

	colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	return colorName;
}

/* MIT license */

var conversions;
var hasRequiredConversions;

function requireConversions () {
	if (hasRequiredConversions) return conversions;
	hasRequiredConversions = 1;
	/* eslint-disable no-mixed-operators */
	const cssKeywords = requireColorName();

	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	const reverseKeywords = {};
	for (const key of Object.keys(cssKeywords)) {
		reverseKeywords[cssKeywords[key]] = key;
	}

	const convert = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	conversions = convert;

	// Hide .channels and .labels properties
	for (const model of Object.keys(convert)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		const {channels, labels} = convert[model];
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}

	convert.rgb.hsl = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const min = Math.min(r, g, b);
		const max = Math.max(r, g, b);
		const delta = max - min;
		let h;
		let s;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		const l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert.rgb.hsv = function (rgb) {
		let rdif;
		let gdif;
		let bdif;
		let h;
		let s;

		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const v = Math.max(r, g, b);
		const diff = v - Math.min(r, g, b);
		const diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = 0;
			s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}

			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert.rgb.hwb = function (rgb) {
		const r = rgb[0];
		const g = rgb[1];
		let b = rgb[2];
		const h = convert.rgb.hsl(rgb)[0];
		const w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert.rgb.cmyk = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;

		const k = Math.min(1 - r, 1 - g, 1 - b);
		const c = (1 - r - k) / (1 - k) || 0;
		const m = (1 - g - k) / (1 - k) || 0;
		const y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	function comparativeDistance(x, y) {
		/*
			See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
		*/
		return (
			((x[0] - y[0]) ** 2) +
			((x[1] - y[1]) ** 2) +
			((x[2] - y[2]) ** 2)
		);
	}

	convert.rgb.keyword = function (rgb) {
		const reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		let currentClosestDistance = Infinity;
		let currentClosestKeyword;

		for (const keyword of Object.keys(cssKeywords)) {
			const value = cssKeywords[keyword];

			// Compute comparative distance
			const distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}

		return currentClosestKeyword;
	};

	convert.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert.rgb.xyz = function (rgb) {
		let r = rgb[0] / 255;
		let g = rgb[1] / 255;
		let b = rgb[2] / 255;

		// Assume sRGB
		r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
		g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
		b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

		const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert.rgb.lab = function (rgb) {
		const xyz = convert.rgb.xyz(rgb);
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert.hsl.rgb = function (hsl) {
		const h = hsl[0] / 360;
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;
		let t2;
		let t3;
		let val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		const t1 = 2 * l - t2;

		const rgb = [0, 0, 0];
		for (let i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}

			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert.hsl.hsv = function (hsl) {
		const h = hsl[0];
		let s = hsl[1] / 100;
		let l = hsl[2] / 100;
		let smin = s;
		const lmin = Math.max(l, 0.01);

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		const v = (l + s) / 2;
		const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert.hsv.rgb = function (hsv) {
		const h = hsv[0] / 60;
		const s = hsv[1] / 100;
		let v = hsv[2] / 100;
		const hi = Math.floor(h) % 6;

		const f = h - Math.floor(h);
		const p = 255 * v * (1 - s);
		const q = 255 * v * (1 - (s * f));
		const t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert.hsv.hsl = function (hsv) {
		const h = hsv[0];
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;
		const vmin = Math.max(v, 0.01);
		let sl;
		let l;

		l = (2 - s) * v;
		const lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert.hwb.rgb = function (hwb) {
		const h = hwb[0] / 360;
		let wh = hwb[1] / 100;
		let bl = hwb[2] / 100;
		const ratio = wh + bl;
		let f;

		// Wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		const i = Math.floor(6 * h);
		const v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		const n = wh + f * (v - wh); // Linear interpolation

		let r;
		let g;
		let b;
		/* eslint-disable max-statements-per-line,no-multi-spaces */
		switch (i) {
			default:
			case 6:
			case 0: r = v;  g = n;  b = wh; break;
			case 1: r = n;  g = v;  b = wh; break;
			case 2: r = wh; g = v;  b = n; break;
			case 3: r = wh; g = n;  b = v; break;
			case 4: r = n;  g = wh; b = v; break;
			case 5: r = v;  g = wh; b = n; break;
		}
		/* eslint-enable max-statements-per-line,no-multi-spaces */

		return [r * 255, g * 255, b * 255];
	};

	convert.cmyk.rgb = function (cmyk) {
		const c = cmyk[0] / 100;
		const m = cmyk[1] / 100;
		const y = cmyk[2] / 100;
		const k = cmyk[3] / 100;

		const r = 1 - Math.min(1, c * (1 - k) + k);
		const g = 1 - Math.min(1, m * (1 - k) + k);
		const b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.rgb = function (xyz) {
		const x = xyz[0] / 100;
		const y = xyz[1] / 100;
		const z = xyz[2] / 100;
		let r;
		let g;
		let b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// Assume sRGB
		r = r > 0.0031308
			? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.lab = function (xyz) {
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert.lab.xyz = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let x;
		let y;
		let z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		const y2 = y ** 3;
		const x2 = x ** 3;
		const z2 = z ** 3;
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert.lab.lch = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let h;

		const hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		const c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert.lch.lab = function (lch) {
		const l = lch[0];
		const c = lch[1];
		const h = lch[2];

		const hr = h / 360 * 2 * Math.PI;
		const a = c * Math.cos(hr);
		const b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert.rgb.ansi16 = function (args, saturation = null) {
		const [r, g, b] = args;
		let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		let ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert.hsv.ansi16 = function (args) {
		// Optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};

	convert.rgb.ansi256 = function (args) {
		const r = args[0];
		const g = args[1];
		const b = args[2];

		// We use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		const ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert.ansi16.rgb = function (args) {
		let color = args % 10;

		// Handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		const mult = (~~(args > 50) + 1) * 0.5;
		const r = ((color & 1) * mult) * 255;
		const g = (((color >> 1) & 1) * mult) * 255;
		const b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert.ansi256.rgb = function (args) {
		// Handle greyscale
		if (args >= 232) {
			const c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		let rem;
		const r = Math.floor(args / 36) / 5 * 255;
		const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		const b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert.rgb.hex = function (args) {
		const integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.hex.rgb = function (args) {
		const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		let colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(char => {
				return char + char;
			}).join('');
		}

		const integer = parseInt(colorString, 16);
		const r = (integer >> 16) & 0xFF;
		const g = (integer >> 8) & 0xFF;
		const b = integer & 0xFF;

		return [r, g, b];
	};

	convert.rgb.hcg = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const max = Math.max(Math.max(r, g), b);
		const min = Math.min(Math.min(r, g), b);
		const chroma = (max - min);
		let grayscale;
		let hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert.hsl.hcg = function (hsl) {
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;

		const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

		let f = 0;
		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert.hsv.hcg = function (hsv) {
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;

		const c = s * v;
		let f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert.hcg.rgb = function (hcg) {
		const h = hcg[0] / 360;
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		const pure = [0, 0, 0];
		const hi = (h % 1) * 6;
		const v = hi % 1;
		const w = 1 - v;
		let mg = 0;

		/* eslint-disable max-statements-per-line */
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}
		/* eslint-enable max-statements-per-line */

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert.hcg.hsv = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const v = c + g * (1.0 - c);
		let f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert.hcg.hsl = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const l = g * (1.0 - c) + 0.5 * c;
		let s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert.hcg.hwb = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert.hwb.hcg = function (hwb) {
		const w = hwb[1] / 100;
		const b = hwb[2] / 100;
		const v = 1 - b;
		const c = v - w;
		let g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert.gray.hsl = function (args) {
		return [0, 0, args[0]];
	};

	convert.gray.hsv = convert.gray.hsl;

	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert.gray.hex = function (gray) {
		const val = Math.round(gray[0] / 100 * 255) & 0xFF;
		const integer = (val << 16) + (val << 8) + val;

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.rgb.gray = function (rgb) {
		const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
	return conversions;
}

var route;
var hasRequiredRoute;

function requireRoute () {
	if (hasRequiredRoute) return route;
	hasRequiredRoute = 1;
	const conversions = requireConversions();

	/*
		This function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		const graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		const models = Object.keys(conversions);

		for (let len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		const graph = buildGraph();
		const queue = [fromModel]; // Unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			const current = queue.pop();
			const adjacents = Object.keys(conversions[current]);

			for (let len = adjacents.length, i = 0; i < len; i++) {
				const adjacent = adjacents[i];
				const node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		const path = [graph[toModel].parent, toModel];
		let fn = conversions[graph[toModel].parent][toModel];

		let cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	route = function (fromModel) {
		const graph = deriveBFS(fromModel);
		const conversion = {};

		const models = Object.keys(graph);
		for (let len = models.length, i = 0; i < len; i++) {
			const toModel = models[i];
			const node = graph[toModel];

			if (node.parent === null) {
				// No possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};
	return route;
}

var colorConvert;
var hasRequiredColorConvert;

function requireColorConvert () {
	if (hasRequiredColorConvert) return colorConvert;
	hasRequiredColorConvert = 1;
	const conversions = requireConversions();
	const route = requireRoute();

	const convert = {};

	const models = Object.keys(conversions);

	function wrapRaw(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];
			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			return fn(args);
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];

			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			const result = fn(args);

			// We're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (let len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(fromModel => {
		convert[fromModel] = {};

		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

		const routes = route(fromModel);
		const routeModels = Object.keys(routes);

		routeModels.forEach(toModel => {
			const fn = routes[toModel];

			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	colorConvert = convert;
	return colorConvert;
}

(function (module) {

	const wrapAnsi16 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${code + offset}m`;
	};

	const wrapAnsi256 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${38 + offset};5;${code}m`;
	};

	const wrapAnsi16m = (fn, offset) => (...args) => {
		const rgb = fn(...args);
		return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
	};

	const ansi2ansi = n => n;
	const rgb2rgb = (r, g, b) => [r, g, b];

	const setLazyProperty = (object, property, get) => {
		Object.defineProperty(object, property, {
			get: () => {
				const value = get();

				Object.defineProperty(object, property, {
					value,
					enumerable: true,
					configurable: true
				});

				return value;
			},
			enumerable: true,
			configurable: true
		});
	};

	/** @type {typeof import('color-convert')} */
	let colorConvert;
	const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
		if (colorConvert === undefined) {
			colorConvert = requireColorConvert();
		}

		const offset = isBackground ? 10 : 0;
		const styles = {};

		for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
			const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
			if (sourceSpace === targetSpace) {
				styles[name] = wrap(identity, offset);
			} else if (typeof suite === 'object') {
				styles[name] = wrap(suite[targetSpace], offset);
			}
		}

		return styles;
	};

	function assembleStyles() {
		const codes = new Map();
		const styles = {
			modifier: {
				reset: [0, 0],
				// 21 isn't widely supported and 22 does the same thing
				bold: [1, 22],
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			color: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],

				// Bright color
				blackBright: [90, 39],
				redBright: [91, 39],
				greenBright: [92, 39],
				yellowBright: [93, 39],
				blueBright: [94, 39],
				magentaBright: [95, 39],
				cyanBright: [96, 39],
				whiteBright: [97, 39]
			},
			bgColor: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49],

				// Bright color
				bgBlackBright: [100, 49],
				bgRedBright: [101, 49],
				bgGreenBright: [102, 49],
				bgYellowBright: [103, 49],
				bgBlueBright: [104, 49],
				bgMagentaBright: [105, 49],
				bgCyanBright: [106, 49],
				bgWhiteBright: [107, 49]
			}
		};

		// Alias bright black as gray (and grey)
		styles.color.gray = styles.color.blackBright;
		styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
		styles.color.grey = styles.color.blackBright;
		styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

		for (const [groupName, group] of Object.entries(styles)) {
			for (const [styleName, style] of Object.entries(group)) {
				styles[styleName] = {
					open: `\u001B[${style[0]}m`,
					close: `\u001B[${style[1]}m`
				};

				group[styleName] = styles[styleName];

				codes.set(style[0], style[1]);
			}

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});
		}

		Object.defineProperty(styles, 'codes', {
			value: codes,
			enumerable: false
		});

		styles.color.close = '\u001B[39m';
		styles.bgColor.close = '\u001B[49m';

		setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
		setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
		setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
		setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
		setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
		setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

		return styles;
	}

	// Make the export immutable
	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});
} (ansiStyles$2));

const stringWidth$1 = stringWidth$4.exports;
const stripAnsi = stripAnsi$2;
const ansiStyles$1 = ansiStyles$2.exports;

const ESCAPES$1 = new Set([
	'\u001B',
	'\u009B'
]);

const END_CODE = 39;

const wrapAnsi$1 = code => `${ESCAPES$1.values().next().value}[${code}m`;

// Calculate the length of words split on ' ', ignoring
// the extra characters added by ansi escape codes
const wordLengths = string => string.split(' ').map(character => stringWidth$1(character));

// Wrap a long word across multiple rows
// Ansi escape codes do not count towards length
const wrapWord = (rows, word, columns) => {
	const characters = [...word];

	let isInsideEscape = false;
	let visible = stringWidth$1(stripAnsi(rows[rows.length - 1]));

	for (const [index, character] of characters.entries()) {
		const characterLength = stringWidth$1(character);

		if (visible + characterLength <= columns) {
			rows[rows.length - 1] += character;
		} else {
			rows.push(character);
			visible = 0;
		}

		if (ESCAPES$1.has(character)) {
			isInsideEscape = true;
		} else if (isInsideEscape && character === 'm') {
			isInsideEscape = false;
			continue;
		}

		if (isInsideEscape) {
			continue;
		}

		visible += characterLength;

		if (visible === columns && index < characters.length - 1) {
			rows.push('');
			visible = 0;
		}
	}

	// It's possible that the last row we copy over is only
	// ansi escape characters, handle this edge-case
	if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
		rows[rows.length - 2] += rows.pop();
	}
};

// Trims spaces from a string ignoring invisible sequences
const stringVisibleTrimSpacesRight = str => {
	const words = str.split(' ');
	let last = words.length;

	while (last > 0) {
		if (stringWidth$1(words[last - 1]) > 0) {
			break;
		}

		last--;
	}

	if (last === words.length) {
		return str;
	}

	return words.slice(0, last).join(' ') + words.slice(last).join('');
};

// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode
//
// 'hard' will never allow a string to take up more than columns characters
//
// 'soft' allows long words to expand past the column length
const exec = (string, columns, options = {}) => {
	if (options.trim !== false && string.trim() === '') {
		return '';
	}

	let pre = '';
	let ret = '';
	let escapeCode;

	const lengths = wordLengths(string);
	let rows = [''];

	for (const [index, word] of string.split(' ').entries()) {
		if (options.trim !== false) {
			rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
		}

		let rowLength = stringWidth$1(rows[rows.length - 1]);

		if (index !== 0) {
			if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
				// If we start with a new word but the current row length equals the length of the columns, add a new row
				rows.push('');
				rowLength = 0;
			}

			if (rowLength > 0 || options.trim === false) {
				rows[rows.length - 1] += ' ';
				rowLength++;
			}
		}

		// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'
		if (options.hard && lengths[index] > columns) {
			const remainingColumns = (columns - rowLength);
			const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
			const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
			if (breaksStartingNextLine < breaksStartingThisLine) {
				rows.push('');
			}

			wrapWord(rows, word, columns);
			continue;
		}

		if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
			if (options.wordWrap === false && rowLength < columns) {
				wrapWord(rows, word, columns);
				continue;
			}

			rows.push('');
		}

		if (rowLength + lengths[index] > columns && options.wordWrap === false) {
			wrapWord(rows, word, columns);
			continue;
		}

		rows[rows.length - 1] += word;
	}

	if (options.trim !== false) {
		rows = rows.map(stringVisibleTrimSpacesRight);
	}

	pre = rows.join('\n');

	for (const [index, character] of [...pre].entries()) {
		ret += character;

		if (ESCAPES$1.has(character)) {
			const code = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
			escapeCode = code === END_CODE ? null : code;
		}

		const code = ansiStyles$1.codes.get(Number(escapeCode));

		if (escapeCode && code) {
			if (pre[index + 1] === '\n') {
				ret += wrapAnsi$1(code);
			} else if (character === '\n') {
				ret += wrapAnsi$1(escapeCode);
			}
		}
	}

	return ret;
};

// For each newline, invoke the method separately
var wrapAnsi_1 = (string, columns, options) => {
	return String(string)
		.normalize()
		.replace(/\r\n/g, '\n')
		.split('\n')
		.map(line => exec(line, columns, options))
		.join('\n');
};

const regex = '[\uD800-\uDBFF][\uDC00-\uDFFF]';

const astralRegex$1 = options => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, 'g');

var astralRegex_1 = astralRegex$1;

const isFullwidthCodePoint = isFullwidthCodePoint$3.exports;
const astralRegex = astralRegex_1;
const ansiStyles = ansiStyles$2.exports;

const ESCAPES = [
	'\u001B',
	'\u009B'
];

const wrapAnsi = code => `${ESCAPES[0]}[${code}m`;

const checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
	let output = [];
	ansiCodes = [...ansiCodes];

	for (let ansiCode of ansiCodes) {
		const ansiCodeOrigin = ansiCode;
		if (ansiCode.match(';')) {
			ansiCode = ansiCode.split(';')[0][0] + '0';
		}

		const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
		if (item) {
			const indexEscape = ansiCodes.indexOf(item.toString());
			if (indexEscape >= 0) {
				ansiCodes.splice(indexEscape, 1);
			} else {
				output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
			}
		} else if (isEscapes) {
			output.push(wrapAnsi(0));
			break;
		} else {
			output.push(wrapAnsi(ansiCodeOrigin));
		}
	}

	if (isEscapes) {
		output = output.filter((element, index) => output.indexOf(element) === index);
		if (endAnsiCode !== undefined) {
			const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
			output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
		}
	}

	return output.join('');
};

var sliceAnsi$1 = (string, begin, end) => {
	const characters = [...string.normalize()];
	const ansiCodes = [];

	end = typeof end === 'number' ? end : characters.length;

	let isInsideEscape = false;
	let ansiCode;
	let visible = 0;
	let output = '';

	for (const [index, character] of characters.entries()) {
		let leftEscape = false;

		if (ESCAPES.includes(character)) {
			const code = /\d[^m]*/.exec(string.slice(index, index + 18));
			ansiCode = code && code.length > 0 ? code[0] : undefined;
			if (visible < end) {
				isInsideEscape = true;
				if (ansiCode !== undefined) {
					ansiCodes.push(ansiCode);
				}
			}
		} else if (isInsideEscape && character === 'm') {
			isInsideEscape = false;
			leftEscape = true;
		}

		if (!isInsideEscape && !leftEscape) {
			++visible;
		}

		if (!astralRegex({exact: true}).test(character) && isFullwidthCodePoint(character.codePointAt())) {
			++visible;
		}

		if (visible > begin && visible <= end) {
			output += character;
		} else if (visible === begin && !isInsideEscape && ansiCode !== undefined) {
			output = checkAnsi(ansiCodes);
		} else if (visible >= end) {
			output += checkAnsi(ansiCodes, true, ansiCode);
			break;
		}
	}

	return output;
};

const sliceAnsi = sliceAnsi$1;
const stringWidth = stringWidth$4.exports;

function getIndexOfNearestSpace(string, index, shouldSearchRight) {
	if (string.charAt(index) === ' ') {
		return index;
	}

	for (let i = 1; i <= 3; i++) {
		if (shouldSearchRight) {
			if (string.charAt(index + i) === ' ') {
				return index + i;
			}
		} else if (string.charAt(index - i) === ' ') {
			return index - i;
		}
	}

	return index;
}

var cliTruncate = (text, columns, options) => {
	options = {
		position: 'end',
		preferTruncationOnSpace: false,
		...options
	};

	const {position, space, preferTruncationOnSpace} = options;
	let ellipsis = '…';
	let ellipsisWidth = 1;

	if (typeof text !== 'string') {
		throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
	}

	if (typeof columns !== 'number') {
		throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
	}

	if (columns < 1) {
		return '';
	}

	if (columns === 1) {
		return ellipsis;
	}

	const length = stringWidth(text);

	if (length <= columns) {
		return text;
	}

	if (position === 'start') {
		if (preferTruncationOnSpace) {
			const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
			return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
		}

		if (space === true) {
			ellipsis += ' ';
			ellipsisWidth = 2;
		}

		return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
	}

	if (position === 'middle') {
		if (space === true) {
			ellipsis = ' ' + ellipsis + ' ';
			ellipsisWidth = 3;
		}

		const half = Math.floor(columns / 2);

		if (preferTruncationOnSpace) {
			const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
			const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
			return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
		}

		return (
			sliceAnsi(text, 0, half) +
			ellipsis +
			sliceAnsi(text, length - (columns - half) + ellipsisWidth, length)
		);
	}

	if (position === 'end') {
		if (preferTruncationOnSpace) {
			const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
			return sliceAnsi(text, 0, nearestSpace) + ellipsis;
		}

		if (space === true) {
			ellipsis = ' ' + ellipsis;
			ellipsisWidth = 2;
		}

		return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
	}

	throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
};

var __importDefault$m = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(wrapText, "__esModule", { value: true });
const wrap_ansi_1 = __importDefault$m(wrapAnsi_1);
const cli_truncate_1 = __importDefault$m(cliTruncate);
const cache$1 = {};
wrapText.default = (text, maxWidth, wrapType) => {
    const cacheKey = text + String(maxWidth) + String(wrapType);
    if (cache$1[cacheKey]) {
        return cache$1[cacheKey];
    }
    let wrappedText = text;
    if (wrapType === 'wrap') {
        wrappedText = wrap_ansi_1.default(text, maxWidth, {
            trim: false,
            hard: true
        });
    }
    if (wrapType.startsWith('truncate')) {
        let position = 'end';
        if (wrapType === 'truncate-middle') {
            position = 'middle';
        }
        if (wrapType === 'truncate-start') {
            position = 'start';
        }
        wrappedText = cli_truncate_1.default(text, maxWidth, { position });
    }
    cache$1[cacheKey] = wrappedText;
    return wrappedText;
};

var squashTextNodes$1 = {};

Object.defineProperty(squashTextNodes$1, "__esModule", { value: true });
// Squashing text nodes allows to combine multiple text nodes into one and write
// to `Output` instance only once. For example, <Text>hello{' '}world</Text>
// is actually 3 text nodes, which would result 3 writes to `Output`.
//
// Also, this is necessary for libraries like ink-link (https://github.com/sindresorhus/ink-link),
// which need to wrap all children at once, instead of wrapping 3 text nodes separately.
const squashTextNodes = (node) => {
    let text = '';
    if (node.childNodes.length > 0) {
        for (const childNode of node.childNodes) {
            let nodeText = '';
            if (childNode.nodeName === '#text') {
                nodeText = childNode.nodeValue;
            }
            else {
                if (childNode.nodeName === 'ink-text' ||
                    childNode.nodeName === 'ink-virtual-text') {
                    nodeText = squashTextNodes(childNode);
                }
                // Since these text nodes are being concatenated, `Output` instance won't be able to
                // apply children transform, so we have to do it manually here for each text node
                if (nodeText.length > 0 &&
                    typeof childNode.internal_transform === 'function') {
                    nodeText = childNode.internal_transform(nodeText);
                }
            }
            text += nodeText;
        }
    }
    return text;
};
squashTextNodes$1.default = squashTextNodes;

(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setTextNodeValue = exports.createTextNode = exports.setStyle = exports.setAttribute = exports.removeChildNode = exports.insertBeforeNode = exports.appendChildNode = exports.createNode = exports.TEXT_NAME = void 0;
	const yoga_layout_prebuilt_1 = __importDefault(require$$0$4);
	const measure_text_1 = __importDefault(measureText);
	const styles_1 = __importDefault(styles);
	const wrap_text_1 = __importDefault(wrapText);
	const squash_text_nodes_1 = __importDefault(squashTextNodes$1);
	exports.TEXT_NAME = '#text';
	exports.createNode = (nodeName) => {
	    var _a;
	    const node = {
	        nodeName,
	        style: {},
	        attributes: {},
	        childNodes: [],
	        parentNode: null,
	        yogaNode: nodeName === 'ink-virtual-text' ? undefined : yoga_layout_prebuilt_1.default.Node.create()
	    };
	    if (nodeName === 'ink-text') {
	        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setMeasureFunc(measureTextNode.bind(null, node));
	    }
	    return node;
	};
	exports.appendChildNode = (node, childNode) => {
	    var _a;
	    if (childNode.parentNode) {
	        exports.removeChildNode(childNode.parentNode, childNode);
	    }
	    childNode.parentNode = node;
	    node.childNodes.push(childNode);
	    if (childNode.yogaNode) {
	        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.insertChild(childNode.yogaNode, node.yogaNode.getChildCount());
	    }
	    if (node.nodeName === 'ink-text' || node.nodeName === 'ink-virtual-text') {
	        markNodeAsDirty(node);
	    }
	};
	exports.insertBeforeNode = (node, newChildNode, beforeChildNode) => {
	    var _a, _b;
	    if (newChildNode.parentNode) {
	        exports.removeChildNode(newChildNode.parentNode, newChildNode);
	    }
	    newChildNode.parentNode = node;
	    const index = node.childNodes.indexOf(beforeChildNode);
	    if (index >= 0) {
	        node.childNodes.splice(index, 0, newChildNode);
	        if (newChildNode.yogaNode) {
	            (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.insertChild(newChildNode.yogaNode, index);
	        }
	        return;
	    }
	    node.childNodes.push(newChildNode);
	    if (newChildNode.yogaNode) {
	        (_b = node.yogaNode) === null || _b === void 0 ? void 0 : _b.insertChild(newChildNode.yogaNode, node.yogaNode.getChildCount());
	    }
	    if (node.nodeName === 'ink-text' || node.nodeName === 'ink-virtual-text') {
	        markNodeAsDirty(node);
	    }
	};
	exports.removeChildNode = (node, removeNode) => {
	    var _a, _b;
	    if (removeNode.yogaNode) {
	        (_b = (_a = removeNode.parentNode) === null || _a === void 0 ? void 0 : _a.yogaNode) === null || _b === void 0 ? void 0 : _b.removeChild(removeNode.yogaNode);
	    }
	    removeNode.parentNode = null;
	    const index = node.childNodes.indexOf(removeNode);
	    if (index >= 0) {
	        node.childNodes.splice(index, 1);
	    }
	    if (node.nodeName === 'ink-text' || node.nodeName === 'ink-virtual-text') {
	        markNodeAsDirty(node);
	    }
	};
	exports.setAttribute = (node, key, value) => {
	    node.attributes[key] = value;
	};
	exports.setStyle = (node, style) => {
	    node.style = style;
	    if (node.yogaNode) {
	        styles_1.default(node.yogaNode, style);
	    }
	};
	exports.createTextNode = (text) => {
	    const node = {
	        nodeName: '#text',
	        nodeValue: text,
	        yogaNode: undefined,
	        parentNode: null,
	        style: {}
	    };
	    exports.setTextNodeValue(node, text);
	    return node;
	};
	const measureTextNode = function (node, width) {
	    var _a, _b;
	    const text = node.nodeName === '#text' ? node.nodeValue : squash_text_nodes_1.default(node);
	    const dimensions = measure_text_1.default(text);
	    // Text fits into container, no need to wrap
	    if (dimensions.width <= width) {
	        return dimensions;
	    }
	    // This is happening when <Box> is shrinking child nodes and Yoga asks
	    // if we can fit this text node in a <1px space, so we just tell Yoga "no"
	    if (dimensions.width >= 1 && width > 0 && width < 1) {
	        return dimensions;
	    }
	    const textWrap = (_b = (_a = node.style) === null || _a === void 0 ? void 0 : _a.textWrap) !== null && _b !== void 0 ? _b : 'wrap';
	    const wrappedText = wrap_text_1.default(text, width, textWrap);
	    return measure_text_1.default(wrappedText);
	};
	const findClosestYogaNode = (node) => {
	    var _a;
	    if (!node || !node.parentNode) {
	        return undefined;
	    }
	    return (_a = node.yogaNode) !== null && _a !== void 0 ? _a : findClosestYogaNode(node.parentNode);
	};
	const markNodeAsDirty = (node) => {
	    // Mark closest Yoga node as dirty to measure text dimensions again
	    const yogaNode = findClosestYogaNode(node);
	    yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.markDirty();
	};
	exports.setTextNodeValue = (node, text) => {
	    if (typeof text !== 'string') {
	        text = String(text);
	    }
	    node.nodeValue = text;
	    markNodeAsDirty(node);
	};
	
} (dom$1));

var devtools = {};

var devtoolsWindowPolyfill = {};

var bufferUtil = {exports: {}};

var constants;
var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;

	constants = {
	  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
	  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
	  kStatusCode: Symbol('status-code'),
	  kWebSocket: Symbol('websocket'),
	  EMPTY_BUFFER: Buffer.alloc(0),
	  NOOP: () => {}
	};
	return constants;
}

var hasRequiredBufferUtil;

function requireBufferUtil () {
	if (hasRequiredBufferUtil) return bufferUtil.exports;
	hasRequiredBufferUtil = 1;

	const { EMPTY_BUFFER } = requireConstants();

	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	function concat(list, totalLength) {
	  if (list.length === 0) return EMPTY_BUFFER;
	  if (list.length === 1) return list[0];

	  const target = Buffer.allocUnsafe(totalLength);
	  let offset = 0;

	  for (let i = 0; i < list.length; i++) {
	    const buf = list[i];
	    target.set(buf, offset);
	    offset += buf.length;
	  }

	  if (offset < totalLength) return target.slice(0, offset);

	  return target;
	}

	/**
	 * Masks a buffer using the given mask.
	 *
	 * @param {Buffer} source The buffer to mask
	 * @param {Buffer} mask The mask to use
	 * @param {Buffer} output The buffer where to store the result
	 * @param {Number} offset The offset at which to start writing
	 * @param {Number} length The number of bytes to mask.
	 * @public
	 */
	function _mask(source, mask, output, offset, length) {
	  for (let i = 0; i < length; i++) {
	    output[offset + i] = source[i] ^ mask[i & 3];
	  }
	}

	/**
	 * Unmasks a buffer using the given mask.
	 *
	 * @param {Buffer} buffer The buffer to unmask
	 * @param {Buffer} mask The mask to use
	 * @public
	 */
	function _unmask(buffer, mask) {
	  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
	  const length = buffer.length;
	  for (let i = 0; i < length; i++) {
	    buffer[i] ^= mask[i & 3];
	  }
	}

	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} buf The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 * @public
	 */
	function toArrayBuffer(buf) {
	  if (buf.byteLength === buf.buffer.byteLength) {
	    return buf.buffer;
	  }

	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
	}

	/**
	 * Converts `data` to a `Buffer`.
	 *
	 * @param {*} data The data to convert
	 * @return {Buffer} The buffer
	 * @throws {TypeError}
	 * @public
	 */
	function toBuffer(data) {
	  toBuffer.readOnly = true;

	  if (Buffer.isBuffer(data)) return data;

	  let buf;

	  if (data instanceof ArrayBuffer) {
	    buf = Buffer.from(data);
	  } else if (ArrayBuffer.isView(data)) {
	    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
	  } else {
	    buf = Buffer.from(data);
	    toBuffer.readOnly = false;
	  }

	  return buf;
	}

	try {
	  const bufferUtil$1 = require('bufferutil');
	  const bu = bufferUtil$1.BufferUtil || bufferUtil$1;

	  bufferUtil.exports = {
	    concat,
	    mask(source, mask, output, offset, length) {
	      if (length < 48) _mask(source, mask, output, offset, length);
	      else bu.mask(source, mask, output, offset, length);
	    },
	    toArrayBuffer,
	    toBuffer,
	    unmask(buffer, mask) {
	      if (buffer.length < 32) _unmask(buffer, mask);
	      else bu.unmask(buffer, mask);
	    }
	  };
	} catch (e) /* istanbul ignore next */ {
	  bufferUtil.exports = {
	    concat,
	    mask: _mask,
	    toArrayBuffer,
	    toBuffer,
	    unmask: _unmask
	  };
	}
	return bufferUtil.exports;
}

var limiter;
var hasRequiredLimiter;

function requireLimiter () {
	if (hasRequiredLimiter) return limiter;
	hasRequiredLimiter = 1;

	const kDone = Symbol('kDone');
	const kRun = Symbol('kRun');

	/**
	 * A very simple job queue with adjustable concurrency. Adapted from
	 * https://github.com/STRML/async-limiter
	 */
	class Limiter {
	  /**
	   * Creates a new `Limiter`.
	   *
	   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
	   *     to run concurrently
	   */
	  constructor(concurrency) {
	    this[kDone] = () => {
	      this.pending--;
	      this[kRun]();
	    };
	    this.concurrency = concurrency || Infinity;
	    this.jobs = [];
	    this.pending = 0;
	  }

	  /**
	   * Adds a job to the queue.
	   *
	   * @param {Function} job The job to run
	   * @public
	   */
	  add(job) {
	    this.jobs.push(job);
	    this[kRun]();
	  }

	  /**
	   * Removes a job from the queue and runs it if possible.
	   *
	   * @private
	   */
	  [kRun]() {
	    if (this.pending === this.concurrency) return;

	    if (this.jobs.length) {
	      const job = this.jobs.shift();

	      this.pending++;
	      job(this[kDone]);
	    }
	  }
	}

	limiter = Limiter;
	return limiter;
}

var permessageDeflate;
var hasRequiredPermessageDeflate;

function requirePermessageDeflate () {
	if (hasRequiredPermessageDeflate) return permessageDeflate;
	hasRequiredPermessageDeflate = 1;

	const zlib = require$$0$5;

	const bufferUtil = requireBufferUtil();
	const Limiter = requireLimiter();
	const { kStatusCode, NOOP } = requireConstants();

	const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const kPerMessageDeflate = Symbol('permessage-deflate');
	const kTotalLength = Symbol('total-length');
	const kCallback = Symbol('callback');
	const kBuffers = Symbol('buffers');
	const kError = Symbol('error');

	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	let zlibLimiter;

	/**
	 * permessage-deflate implementation.
	 */
	class PerMessageDeflate {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} [options] Configuration options
	   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
	   *     disabling of server context takeover
	   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
	   *     acknowledge disabling of client context takeover
	   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
	   *     use of a custom server window size
	   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
	   *     for, or request, a custom client window size
	   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
	   *     deflate
	   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
	   *     inflate
	   * @param {Number} [options.threshold=1024] Size (in bytes) below which
	   *     messages should not be compressed
	   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
	   *     calls to zlib
	   * @param {Boolean} [isServer=false] Create the instance in either server or
	   *     client mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(options, isServer, maxPayload) {
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold =
	      this._options.threshold !== undefined ? this._options.threshold : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;

	    this.params = null;

	    if (!zlibLimiter) {
	      const concurrency =
	        this._options.concurrencyLimit !== undefined
	          ? this._options.concurrencyLimit
	          : 10;
	      zlibLimiter = new Limiter(concurrency);
	    }
	  }

	  /**
	   * @type {String}
	   */
	  static get extensionName() {
	    return 'permessage-deflate';
	  }

	  /**
	   * Create an extension negotiation offer.
	   *
	   * @return {Object} Extension parameters
	   * @public
	   */
	  offer() {
	    const params = {};

	    if (this._options.serverNoContextTakeover) {
	      params.server_no_context_takeover = true;
	    }
	    if (this._options.clientNoContextTakeover) {
	      params.client_no_context_takeover = true;
	    }
	    if (this._options.serverMaxWindowBits) {
	      params.server_max_window_bits = this._options.serverMaxWindowBits;
	    }
	    if (this._options.clientMaxWindowBits) {
	      params.client_max_window_bits = this._options.clientMaxWindowBits;
	    } else if (this._options.clientMaxWindowBits == null) {
	      params.client_max_window_bits = true;
	    }

	    return params;
	  }

	  /**
	   * Accept an extension negotiation offer/response.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Object} Accepted configuration
	   * @public
	   */
	  accept(configurations) {
	    configurations = this.normalizeParams(configurations);

	    this.params = this._isServer
	      ? this.acceptAsServer(configurations)
	      : this.acceptAsClient(configurations);

	    return this.params;
	  }

	  /**
	   * Releases all resources used by the extension.
	   *
	   * @public
	   */
	  cleanup() {
	    if (this._inflate) {
	      this._inflate.close();
	      this._inflate = null;
	    }

	    if (this._deflate) {
	      const callback = this._deflate[kCallback];

	      this._deflate.close();
	      this._deflate = null;

	      if (callback) {
	        callback(
	          new Error(
	            'The deflate stream was closed while data was being processed'
	          )
	        );
	      }
	    }
	  }

	  /**
	   *  Accept an extension negotiation offer.
	   *
	   * @param {Array} offers The extension negotiation offers
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsServer(offers) {
	    const opts = this._options;
	    const accepted = offers.find((params) => {
	      if (
	        (opts.serverNoContextTakeover === false &&
	          params.server_no_context_takeover) ||
	        (params.server_max_window_bits &&
	          (opts.serverMaxWindowBits === false ||
	            (typeof opts.serverMaxWindowBits === 'number' &&
	              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
	        (typeof opts.clientMaxWindowBits === 'number' &&
	          !params.client_max_window_bits)
	      ) {
	        return false;
	      }

	      return true;
	    });

	    if (!accepted) {
	      throw new Error('None of the extension offers can be accepted');
	    }

	    if (opts.serverNoContextTakeover) {
	      accepted.server_no_context_takeover = true;
	    }
	    if (opts.clientNoContextTakeover) {
	      accepted.client_no_context_takeover = true;
	    }
	    if (typeof opts.serverMaxWindowBits === 'number') {
	      accepted.server_max_window_bits = opts.serverMaxWindowBits;
	    }
	    if (typeof opts.clientMaxWindowBits === 'number') {
	      accepted.client_max_window_bits = opts.clientMaxWindowBits;
	    } else if (
	      accepted.client_max_window_bits === true ||
	      opts.clientMaxWindowBits === false
	    ) {
	      delete accepted.client_max_window_bits;
	    }

	    return accepted;
	  }

	  /**
	   * Accept the extension negotiation response.
	   *
	   * @param {Array} response The extension negotiation response
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsClient(response) {
	    const params = response[0];

	    if (
	      this._options.clientNoContextTakeover === false &&
	      params.client_no_context_takeover
	    ) {
	      throw new Error('Unexpected parameter "client_no_context_takeover"');
	    }

	    if (!params.client_max_window_bits) {
	      if (typeof this._options.clientMaxWindowBits === 'number') {
	        params.client_max_window_bits = this._options.clientMaxWindowBits;
	      }
	    } else if (
	      this._options.clientMaxWindowBits === false ||
	      (typeof this._options.clientMaxWindowBits === 'number' &&
	        params.client_max_window_bits > this._options.clientMaxWindowBits)
	    ) {
	      throw new Error(
	        'Unexpected or invalid parameter "client_max_window_bits"'
	      );
	    }

	    return params;
	  }

	  /**
	   * Normalize parameters.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Array} The offers/response with normalized parameters
	   * @private
	   */
	  normalizeParams(configurations) {
	    configurations.forEach((params) => {
	      Object.keys(params).forEach((key) => {
	        let value = params[key];

	        if (value.length > 1) {
	          throw new Error(`Parameter "${key}" must have only a single value`);
	        }

	        value = value[0];

	        if (key === 'client_max_window_bits') {
	          if (value !== true) {
	            const num = +value;
	            if (!Number.isInteger(num) || num < 8 || num > 15) {
	              throw new TypeError(
	                `Invalid value for parameter "${key}": ${value}`
	              );
	            }
	            value = num;
	          } else if (!this._isServer) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else if (key === 'server_max_window_bits') {
	          const num = +value;
	          if (!Number.isInteger(num) || num < 8 || num > 15) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	          value = num;
	        } else if (
	          key === 'client_no_context_takeover' ||
	          key === 'server_no_context_takeover'
	        ) {
	          if (value !== true) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else {
	          throw new Error(`Unknown parameter "${key}"`);
	        }

	        params[key] = value;
	      });
	    });

	    return configurations;
	  }

	  /**
	   * Decompress data. Concurrency limited.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  decompress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._decompress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Compress data. Concurrency limited.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  compress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._compress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Decompress data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _decompress(data, fin, callback) {
	    const endpoint = this._isServer ? 'client' : 'server';

	    if (!this._inflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._inflate = zlib.createInflateRaw({
	        ...this._options.zlibInflateOptions,
	        windowBits
	      });
	      this._inflate[kPerMessageDeflate] = this;
	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];
	      this._inflate.on('error', inflateOnError);
	      this._inflate.on('data', inflateOnData);
	    }

	    this._inflate[kCallback] = callback;

	    this._inflate.write(data);
	    if (fin) this._inflate.write(TRAILER);

	    this._inflate.flush(() => {
	      const err = this._inflate[kError];

	      if (err) {
	        this._inflate.close();
	        this._inflate = null;
	        callback(err);
	        return;
	      }

	      const data = bufferUtil.concat(
	        this._inflate[kBuffers],
	        this._inflate[kTotalLength]
	      );

	      if (this._inflate._readableState.endEmitted) {
	        this._inflate.close();
	        this._inflate = null;
	      } else {
	        this._inflate[kTotalLength] = 0;
	        this._inflate[kBuffers] = [];

	        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	          this._inflate.reset();
	        }
	      }

	      callback(null, data);
	    });
	  }

	  /**
	   * Compress data.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _compress(data, fin, callback) {
	    const endpoint = this._isServer ? 'server' : 'client';

	    if (!this._deflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._deflate = zlib.createDeflateRaw({
	        ...this._options.zlibDeflateOptions,
	        windowBits
	      });

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      //
	      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
	      // `zlib.DeflateRaw` instance is closed while data is being processed.
	      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
	      // time due to an abnormal WebSocket closure.
	      //
	      this._deflate.on('error', NOOP);
	      this._deflate.on('data', deflateOnData);
	    }

	    this._deflate[kCallback] = callback;

	    this._deflate.write(data);
	    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
	      if (!this._deflate) {
	        //
	        // The deflate stream was closed while data was being processed.
	        //
	        return;
	      }

	      let data = bufferUtil.concat(
	        this._deflate[kBuffers],
	        this._deflate[kTotalLength]
	      );

	      if (fin) data = data.slice(0, data.length - 4);

	      //
	      // Ensure that the callback will not be called again in
	      // `PerMessageDeflate#cleanup()`.
	      //
	      this._deflate[kCallback] = null;

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	        this._deflate.reset();
	      }

	      callback(null, data);
	    });
	  }
	}

	permessageDeflate = PerMessageDeflate;

	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData(chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData(chunk) {
	  this[kTotalLength] += chunk.length;

	  if (
	    this[kPerMessageDeflate]._maxPayload < 1 ||
	    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
	  ) {
	    this[kBuffers].push(chunk);
	    return;
	  }

	  this[kError] = new RangeError('Max payload size exceeded');
	  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
	  this[kError][kStatusCode] = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError(err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kPerMessageDeflate]._inflate = null;
	  err[kStatusCode] = 1007;
	  this[kCallback](err);
	}
	return permessageDeflate;
}

var validation = {exports: {}};

var hasRequiredValidation;

function requireValidation () {
	if (hasRequiredValidation) return validation.exports;
	hasRequiredValidation = 1;

	/**
	 * Checks if a status code is allowed in a close frame.
	 *
	 * @param {Number} code The status code
	 * @return {Boolean} `true` if the status code is valid, else `false`
	 * @public
	 */
	function isValidStatusCode(code) {
	  return (
	    (code >= 1000 &&
	      code <= 1014 &&
	      code !== 1004 &&
	      code !== 1005 &&
	      code !== 1006) ||
	    (code >= 3000 && code <= 4999)
	  );
	}

	/**
	 * Checks if a given buffer contains only correct UTF-8.
	 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
	 * Markus Kuhn.
	 *
	 * @param {Buffer} buf The buffer to check
	 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
	 * @public
	 */
	function _isValidUTF8(buf) {
	  const len = buf.length;
	  let i = 0;

	  while (i < len) {
	    if ((buf[i] & 0x80) === 0) {
	      // 0xxxxxxx
	      i++;
	    } else if ((buf[i] & 0xe0) === 0xc0) {
	      // 110xxxxx 10xxxxxx
	      if (
	        i + 1 === len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i] & 0xfe) === 0xc0 // Overlong
	      ) {
	        return false;
	      }

	      i += 2;
	    } else if ((buf[i] & 0xf0) === 0xe0) {
	      // 1110xxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 2 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
	        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
	      ) {
	        return false;
	      }

	      i += 3;
	    } else if ((buf[i] & 0xf8) === 0xf0) {
	      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 3 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i + 3] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
	        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
	        buf[i] > 0xf4 // > U+10FFFF
	      ) {
	        return false;
	      }

	      i += 4;
	    } else {
	      return false;
	    }
	  }

	  return true;
	}

	try {
	  let isValidUTF8 = require('utf-8-validate');

	  /* istanbul ignore if */
	  if (typeof isValidUTF8 === 'object') {
	    isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0
	  }

	  validation.exports = {
	    isValidStatusCode,
	    isValidUTF8(buf) {
	      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
	    }
	  };
	} catch (e) /* istanbul ignore next */ {
	  validation.exports = {
	    isValidStatusCode,
	    isValidUTF8: _isValidUTF8
	  };
	}
	return validation.exports;
}

var receiver;
var hasRequiredReceiver;

function requireReceiver () {
	if (hasRequiredReceiver) return receiver;
	hasRequiredReceiver = 1;

	const { Writable } = require$$0$6;

	const PerMessageDeflate = requirePermessageDeflate();
	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  kStatusCode,
	  kWebSocket
	} = requireConstants();
	const { concat, toArrayBuffer, unmask } = requireBufferUtil();
	const { isValidStatusCode, isValidUTF8 } = requireValidation();

	const GET_INFO = 0;
	const GET_PAYLOAD_LENGTH_16 = 1;
	const GET_PAYLOAD_LENGTH_64 = 2;
	const GET_MASK = 3;
	const GET_DATA = 4;
	const INFLATING = 5;

	/**
	 * HyBi Receiver implementation.
	 *
	 * @extends Writable
	 */
	class Receiver extends Writable {
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {String} [binaryType=nodebuffer] The type for binary data
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   * @param {Boolean} [isServer=false] Specifies whether to operate in client or
	   *     server mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(binaryType, extensions, isServer, maxPayload) {
	    super();

	    this._binaryType = binaryType || BINARY_TYPES[0];
	    this[kWebSocket] = undefined;
	    this._extensions = extensions || {};
	    this._isServer = !!isServer;
	    this._maxPayload = maxPayload | 0;

	    this._bufferedBytes = 0;
	    this._buffers = [];

	    this._compressed = false;
	    this._payloadLength = 0;
	    this._mask = undefined;
	    this._fragmented = 0;
	    this._masked = false;
	    this._fin = false;
	    this._opcode = 0;

	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragments = [];

	    this._state = GET_INFO;
	    this._loop = false;
	  }

	  /**
	   * Implements `Writable.prototype._write()`.
	   *
	   * @param {Buffer} chunk The chunk of data to write
	   * @param {String} encoding The character encoding of `chunk`
	   * @param {Function} cb Callback
	   * @private
	   */
	  _write(chunk, encoding, cb) {
	    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

	    this._bufferedBytes += chunk.length;
	    this._buffers.push(chunk);
	    this.startLoop(cb);
	  }

	  /**
	   * Consumes `n` bytes from the buffered data.
	   *
	   * @param {Number} n The number of bytes to consume
	   * @return {Buffer} The consumed bytes
	   * @private
	   */
	  consume(n) {
	    this._bufferedBytes -= n;

	    if (n === this._buffers[0].length) return this._buffers.shift();

	    if (n < this._buffers[0].length) {
	      const buf = this._buffers[0];
	      this._buffers[0] = buf.slice(n);
	      return buf.slice(0, n);
	    }

	    const dst = Buffer.allocUnsafe(n);

	    do {
	      const buf = this._buffers[0];
	      const offset = dst.length - n;

	      if (n >= buf.length) {
	        dst.set(this._buffers.shift(), offset);
	      } else {
	        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
	        this._buffers[0] = buf.slice(n);
	      }

	      n -= buf.length;
	    } while (n > 0);

	    return dst;
	  }

	  /**
	   * Starts the parsing loop.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  startLoop(cb) {
	    let err;
	    this._loop = true;

	    do {
	      switch (this._state) {
	        case GET_INFO:
	          err = this.getInfo();
	          break;
	        case GET_PAYLOAD_LENGTH_16:
	          err = this.getPayloadLength16();
	          break;
	        case GET_PAYLOAD_LENGTH_64:
	          err = this.getPayloadLength64();
	          break;
	        case GET_MASK:
	          this.getMask();
	          break;
	        case GET_DATA:
	          err = this.getData(cb);
	          break;
	        default:
	          // `INFLATING`
	          this._loop = false;
	          return;
	      }
	    } while (this._loop);

	    cb(err);
	  }

	  /**
	   * Reads the first two bytes of a frame.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getInfo() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(2);

	    if ((buf[0] & 0x30) !== 0x00) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'RSV2 and RSV3 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_2_3'
	      );
	    }

	    const compressed = (buf[0] & 0x40) === 0x40;

	    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'RSV1 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_1'
	      );
	    }

	    this._fin = (buf[0] & 0x80) === 0x80;
	    this._opcode = buf[0] & 0x0f;
	    this._payloadLength = buf[1] & 0x7f;

	    if (this._opcode === 0x00) {
	      if (compressed) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );
	      }

	      if (!this._fragmented) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'invalid opcode 0',
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );
	      }

	      this._opcode = this._fragmented;
	    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	      if (this._fragmented) {
	        this._loop = false;
	        return error(
	          RangeError,
	          `invalid opcode ${this._opcode}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );
	      }

	      this._compressed = compressed;
	    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	      if (!this._fin) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'FIN must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_FIN'
	        );
	      }

	      if (compressed) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );
	      }

	      if (this._payloadLength > 0x7d) {
	        this._loop = false;
	        return error(
	          RangeError,
	          `invalid payload length ${this._payloadLength}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
	        );
	      }
	    } else {
	      this._loop = false;
	      return error(
	        RangeError,
	        `invalid opcode ${this._opcode}`,
	        true,
	        1002,
	        'WS_ERR_INVALID_OPCODE'
	      );
	    }

	    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	    this._masked = (buf[1] & 0x80) === 0x80;

	    if (this._isServer) {
	      if (!this._masked) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'MASK must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_MASK'
	        );
	      }
	    } else if (this._masked) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'MASK must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_MASK'
	      );
	    }

	    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
	    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
	    else return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+16).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength16() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    this._payloadLength = this.consume(2).readUInt16BE(0);
	    return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+64).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength64() {
	    if (this._bufferedBytes < 8) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(8);
	    const num = buf.readUInt32BE(0);

	    //
	    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	    // if payload length is greater than this number.
	    //
	    if (num > Math.pow(2, 53 - 32) - 1) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'Unsupported WebSocket frame: payload length > 2^53 - 1',
	        false,
	        1009,
	        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
	      );
	    }

	    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
	    return this.haveLength();
	  }

	  /**
	   * Payload length has been read.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  haveLength() {
	    if (this._payloadLength && this._opcode < 0x08) {
	      this._totalPayloadLength += this._payloadLength;
	      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'Max payload size exceeded',
	          false,
	          1009,
	          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	        );
	      }
	    }

	    if (this._masked) this._state = GET_MASK;
	    else this._state = GET_DATA;
	  }

	  /**
	   * Reads mask bytes.
	   *
	   * @private
	   */
	  getMask() {
	    if (this._bufferedBytes < 4) {
	      this._loop = false;
	      return;
	    }

	    this._mask = this.consume(4);
	    this._state = GET_DATA;
	  }

	  /**
	   * Reads data bytes.
	   *
	   * @param {Function} cb Callback
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  getData(cb) {
	    let data = EMPTY_BUFFER;

	    if (this._payloadLength) {
	      if (this._bufferedBytes < this._payloadLength) {
	        this._loop = false;
	        return;
	      }

	      data = this.consume(this._payloadLength);
	      if (this._masked) unmask(data, this._mask);
	    }

	    if (this._opcode > 0x07) return this.controlMessage(data);

	    if (this._compressed) {
	      this._state = INFLATING;
	      this.decompress(data, cb);
	      return;
	    }

	    if (data.length) {
	      //
	      // This message is not compressed so its lenght is the sum of the payload
	      // length of all fragments.
	      //
	      this._messageLength = this._totalPayloadLength;
	      this._fragments.push(data);
	    }

	    return this.dataMessage();
	  }

	  /**
	   * Decompresses data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Function} cb Callback
	   * @private
	   */
	  decompress(data, cb) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
	      if (err) return cb(err);

	      if (buf.length) {
	        this._messageLength += buf.length;
	        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
	          return cb(
	            error(
	              RangeError,
	              'Max payload size exceeded',
	              false,
	              1009,
	              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	            )
	          );
	        }

	        this._fragments.push(buf);
	      }

	      const er = this.dataMessage();
	      if (er) return cb(er);

	      this.startLoop(cb);
	    });
	  }

	  /**
	   * Handles a data message.
	   *
	   * @return {(Error|undefined)} A possible error
	   * @private
	   */
	  dataMessage() {
	    if (this._fin) {
	      const messageLength = this._messageLength;
	      const fragments = this._fragments;

	      this._totalPayloadLength = 0;
	      this._messageLength = 0;
	      this._fragmented = 0;
	      this._fragments = [];

	      if (this._opcode === 2) {
	        let data;

	        if (this._binaryType === 'nodebuffer') {
	          data = concat(fragments, messageLength);
	        } else if (this._binaryType === 'arraybuffer') {
	          data = toArrayBuffer(concat(fragments, messageLength));
	        } else {
	          data = fragments;
	        }

	        this.emit('message', data);
	      } else {
	        const buf = concat(fragments, messageLength);

	        if (!isValidUTF8(buf)) {
	          this._loop = false;
	          return error(
	            Error,
	            'invalid UTF-8 sequence',
	            true,
	            1007,
	            'WS_ERR_INVALID_UTF8'
	          );
	        }

	        this.emit('message', buf.toString());
	      }
	    }

	    this._state = GET_INFO;
	  }

	  /**
	   * Handles a control message.
	   *
	   * @param {Buffer} data Data to handle
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  controlMessage(data) {
	    if (this._opcode === 0x08) {
	      this._loop = false;

	      if (data.length === 0) {
	        this.emit('conclude', 1005, '');
	        this.end();
	      } else if (data.length === 1) {
	        return error(
	          RangeError,
	          'invalid payload length 1',
	          true,
	          1002,
	          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
	        );
	      } else {
	        const code = data.readUInt16BE(0);

	        if (!isValidStatusCode(code)) {
	          return error(
	            RangeError,
	            `invalid status code ${code}`,
	            true,
	            1002,
	            'WS_ERR_INVALID_CLOSE_CODE'
	          );
	        }

	        const buf = data.slice(2);

	        if (!isValidUTF8(buf)) {
	          return error(
	            Error,
	            'invalid UTF-8 sequence',
	            true,
	            1007,
	            'WS_ERR_INVALID_UTF8'
	          );
	        }

	        this.emit('conclude', code, buf.toString());
	        this.end();
	      }
	    } else if (this._opcode === 0x09) {
	      this.emit('ping', data);
	    } else {
	      this.emit('pong', data);
	    }

	    this._state = GET_INFO;
	  }
	}

	receiver = Receiver;

	/**
	 * Builds an error object.
	 *
	 * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
	 * @param {String} message The error message
	 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
	 *     `message`
	 * @param {Number} statusCode The status code
	 * @param {String} errorCode The exposed error code
	 * @return {(Error|RangeError)} The error
	 * @private
	 */
	function error(ErrorCtor, message, prefix, statusCode, errorCode) {
	  const err = new ErrorCtor(
	    prefix ? `Invalid WebSocket frame: ${message}` : message
	  );

	  Error.captureStackTrace(err, error);
	  err.code = errorCode;
	  err[kStatusCode] = statusCode;
	  return err;
	}
	return receiver;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls$" }] */

var sender;
var hasRequiredSender;

function requireSender () {
	if (hasRequiredSender) return sender;
	hasRequiredSender = 1;
	const { randomFillSync } = require$$5;

	const PerMessageDeflate = requirePermessageDeflate();
	const { EMPTY_BUFFER } = requireConstants();
	const { isValidStatusCode } = requireValidation();
	const { mask: applyMask, toBuffer } = requireBufferUtil();

	const mask = Buffer.alloc(4);

	/**
	 * HyBi Sender implementation.
	 */
	class Sender {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {(net.Socket|tls.Socket)} socket The connection socket
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   */
	  constructor(socket, extensions) {
	    this._extensions = extensions || {};
	    this._socket = socket;

	    this._firstFragment = true;
	    this._compress = false;

	    this._bufferedBytes = 0;
	    this._deflating = false;
	    this._queue = [];
	  }

	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {Buffer} data The data to frame
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @return {Buffer[]} The framed data as a list of `Buffer` instances
	   * @public
	   */
	  static frame(data, options) {
	    const merge = options.mask && options.readOnly;
	    let offset = options.mask ? 6 : 2;
	    let payloadLength = data.length;

	    if (data.length >= 65536) {
	      offset += 8;
	      payloadLength = 127;
	    } else if (data.length > 125) {
	      offset += 2;
	      payloadLength = 126;
	    }

	    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

	    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	    if (options.rsv1) target[0] |= 0x40;

	    target[1] = payloadLength;

	    if (payloadLength === 126) {
	      target.writeUInt16BE(data.length, 2);
	    } else if (payloadLength === 127) {
	      target.writeUInt32BE(0, 2);
	      target.writeUInt32BE(data.length, 6);
	    }

	    if (!options.mask) return [target, data];

	    randomFillSync(mask, 0, 4);

	    target[1] |= 0x80;
	    target[offset - 4] = mask[0];
	    target[offset - 3] = mask[1];
	    target[offset - 2] = mask[2];
	    target[offset - 1] = mask[3];

	    if (merge) {
	      applyMask(data, mask, target, offset, data.length);
	      return [target];
	    }

	    applyMask(data, mask, data, 0, data.length);
	    return [target, data];
	  }

	  /**
	   * Sends a close message to the other peer.
	   *
	   * @param {Number} [code] The status code component of the body
	   * @param {String} [data] The message component of the body
	   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(code, data, mask, cb) {
	    let buf;

	    if (code === undefined) {
	      buf = EMPTY_BUFFER;
	    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
	      throw new TypeError('First argument must be a valid error code number');
	    } else if (data === undefined || data === '') {
	      buf = Buffer.allocUnsafe(2);
	      buf.writeUInt16BE(code, 0);
	    } else {
	      const length = Buffer.byteLength(data);

	      if (length > 123) {
	        throw new RangeError('The message must not be greater than 123 bytes');
	      }

	      buf = Buffer.allocUnsafe(2 + length);
	      buf.writeUInt16BE(code, 0);
	      buf.write(data, 2);
	    }

	    if (this._deflating) {
	      this.enqueue([this.doClose, buf, mask, cb]);
	    } else {
	      this.doClose(buf, mask, cb);
	    }
	  }

	  /**
	   * Frames and sends a close message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doClose(data, mask, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x08,
	        mask,
	        readOnly: false
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a ping message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  ping(data, mask, cb) {
	    const buf = toBuffer(data);

	    if (buf.length > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    if (this._deflating) {
	      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);
	    } else {
	      this.doPing(buf, mask, toBuffer.readOnly, cb);
	    }
	  }

	  /**
	   * Frames and sends a ping message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doPing(data, mask, readOnly, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x09,
	        mask,
	        readOnly
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a pong message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  pong(data, mask, cb) {
	    const buf = toBuffer(data);

	    if (buf.length > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    if (this._deflating) {
	      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);
	    } else {
	      this.doPong(buf, mask, toBuffer.readOnly, cb);
	    }
	  }

	  /**
	   * Frames and sends a pong message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  doPong(data, mask, readOnly, cb) {
	    this.sendFrame(
	      Sender.frame(data, {
	        fin: true,
	        rsv1: false,
	        opcode: 0x0a,
	        mask,
	        readOnly
	      }),
	      cb
	    );
	  }

	  /**
	   * Sends a data message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} [options.compress=false] Specifies whether or not to
	   *     compress `data`
	   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
	   *     or text
	   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  send(data, options, cb) {
	    const buf = toBuffer(data);
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	    let opcode = options.binary ? 2 : 1;
	    let rsv1 = options.compress;

	    if (this._firstFragment) {
	      this._firstFragment = false;
	      if (rsv1 && perMessageDeflate) {
	        rsv1 = buf.length >= perMessageDeflate._threshold;
	      }
	      this._compress = rsv1;
	    } else {
	      rsv1 = false;
	      opcode = 0;
	    }

	    if (options.fin) this._firstFragment = true;

	    if (perMessageDeflate) {
	      const opts = {
	        fin: options.fin,
	        rsv1,
	        opcode,
	        mask: options.mask,
	        readOnly: toBuffer.readOnly
	      };

	      if (this._deflating) {
	        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
	      } else {
	        this.dispatch(buf, this._compress, opts, cb);
	      }
	    } else {
	      this.sendFrame(
	        Sender.frame(buf, {
	          fin: options.fin,
	          rsv1: false,
	          opcode,
	          mask: options.mask,
	          readOnly: toBuffer.readOnly
	        }),
	        cb
	      );
	    }
	  }

	  /**
	   * Dispatches a data message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} [compress=false] Specifies whether or not to compress
	   *     `data`
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  dispatch(data, compress, options, cb) {
	    if (!compress) {
	      this.sendFrame(Sender.frame(data, options), cb);
	      return;
	    }

	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    this._bufferedBytes += data.length;
	    this._deflating = true;
	    perMessageDeflate.compress(data, options.fin, (_, buf) => {
	      if (this._socket.destroyed) {
	        const err = new Error(
	          'The socket was closed while data was being compressed'
	        );

	        if (typeof cb === 'function') cb(err);

	        for (let i = 0; i < this._queue.length; i++) {
	          const callback = this._queue[i][4];

	          if (typeof callback === 'function') callback(err);
	        }

	        return;
	      }

	      this._bufferedBytes -= data.length;
	      this._deflating = false;
	      options.readOnly = false;
	      this.sendFrame(Sender.frame(buf, options), cb);
	      this.dequeue();
	    });
	  }

	  /**
	   * Executes queued send operations.
	   *
	   * @private
	   */
	  dequeue() {
	    while (!this._deflating && this._queue.length) {
	      const params = this._queue.shift();

	      this._bufferedBytes -= params[1].length;
	      Reflect.apply(params[0], this, params.slice(1));
	    }
	  }

	  /**
	   * Enqueues a send operation.
	   *
	   * @param {Array} params Send operation parameters.
	   * @private
	   */
	  enqueue(params) {
	    this._bufferedBytes += params[1].length;
	    this._queue.push(params);
	  }

	  /**
	   * Sends a frame.
	   *
	   * @param {Buffer[]} list The frame to send
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  sendFrame(list, cb) {
	    if (list.length === 2) {
	      this._socket.cork();
	      this._socket.write(list[0]);
	      this._socket.write(list[1], cb);
	      this._socket.uncork();
	    } else {
	      this._socket.write(list[0], cb);
	    }
	  }
	}

	sender = Sender;
	return sender;
}

var eventTarget;
var hasRequiredEventTarget;

function requireEventTarget () {
	if (hasRequiredEventTarget) return eventTarget;
	hasRequiredEventTarget = 1;

	/**
	 * Class representing an event.
	 *
	 * @private
	 */
	class Event {
	  /**
	   * Create a new `Event`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(type, target) {
	    this.target = target;
	    this.type = type;
	  }
	}

	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 * @private
	 */
	class MessageEvent extends Event {
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(data, target) {
	    super('message', target);

	    this.data = data;
	  }
	}

	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 * @private
	 */
	class CloseEvent extends Event {
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {Number} code The status code explaining why the connection is being
	   *     closed
	   * @param {String} reason A human-readable string explaining why the
	   *     connection is closing
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(code, reason, target) {
	    super('close', target);

	    this.wasClean = target._closeFrameReceived && target._closeFrameSent;
	    this.reason = reason;
	    this.code = code;
	  }
	}

	/**
	 * Class representing an open event.
	 *
	 * @extends Event
	 * @private
	 */
	class OpenEvent extends Event {
	  /**
	   * Create a new `OpenEvent`.
	   *
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(target) {
	    super('open', target);
	  }
	}

	/**
	 * Class representing an error event.
	 *
	 * @extends Event
	 * @private
	 */
	class ErrorEvent extends Event {
	  /**
	   * Create a new `ErrorEvent`.
	   *
	   * @param {Object} error The error that generated this event
	   * @param {WebSocket} target A reference to the target to which the event was
	   *     dispatched
	   */
	  constructor(error, target) {
	    super('error', target);

	    this.message = error.message;
	    this.error = error;
	  }
	}

	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	const EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} type A string representing the event type to listen for
	   * @param {Function} listener The listener to add
	   * @param {Object} [options] An options object specifies characteristics about
	   *     the event listener
	   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the
	   *     listener should be invoked at most once after being added. If `true`,
	   *     the listener would be automatically removed when invoked.
	   * @public
	   */
	  addEventListener(type, listener, options) {
	    if (typeof listener !== 'function') return;

	    function onMessage(data) {
	      listener.call(this, new MessageEvent(data, this));
	    }

	    function onClose(code, message) {
	      listener.call(this, new CloseEvent(code, message, this));
	    }

	    function onError(error) {
	      listener.call(this, new ErrorEvent(error, this));
	    }

	    function onOpen() {
	      listener.call(this, new OpenEvent(this));
	    }

	    const method = options && options.once ? 'once' : 'on';

	    if (type === 'message') {
	      onMessage._listener = listener;
	      this[method](type, onMessage);
	    } else if (type === 'close') {
	      onClose._listener = listener;
	      this[method](type, onClose);
	    } else if (type === 'error') {
	      onError._listener = listener;
	      this[method](type, onError);
	    } else if (type === 'open') {
	      onOpen._listener = listener;
	      this[method](type, onOpen);
	    } else {
	      this[method](type, listener);
	    }
	  },

	  /**
	   * Remove an event listener.
	   *
	   * @param {String} type A string representing the event type to remove
	   * @param {Function} listener The listener to remove
	   * @public
	   */
	  removeEventListener(type, listener) {
	    const listeners = this.listeners(type);

	    for (let i = 0; i < listeners.length; i++) {
	      if (listeners[i] === listener || listeners[i]._listener === listener) {
	        this.removeListener(type, listeners[i]);
	      }
	    }
	  }
	};

	eventTarget = EventTarget;
	return eventTarget;
}

var extension;
var hasRequiredExtension;

function requireExtension () {
	if (hasRequiredExtension) return extension;
	hasRequiredExtension = 1;

	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	// prettier-ignore
	const tokenChars = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];

	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push(dest, name, elem) {
	  if (dest[name] === undefined) dest[name] = [elem];
	  else dest[name].push(elem);
	}

	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse(header) {
	  const offers = Object.create(null);

	  if (header === undefined || header === '') return offers;

	  let params = Object.create(null);
	  let mustUnescape = false;
	  let isEscaping = false;
	  let inQuotes = false;
	  let extensionName;
	  let paramName;
	  let start = -1;
	  let end = -1;
	  let i = 0;

	  for (; i < header.length; i++) {
	    const code = header.charCodeAt(i);

	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        const name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = Object.create(null);
	        } else {
	          extensionName = name;
	        }

	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        start = end = -1;
	      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	        if (start === -1) start = i;
	        else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22 /* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c /* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        let value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    }
	  }

	  if (start === -1 || inQuotes) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  if (end === -1) end = i;
	  const token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, params);
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }

	  return offers;
	}

	/**
	 * Builds the `Sec-WebSocket-Extensions` header field value.
	 *
	 * @param {Object} extensions The map of extensions and parameters to format
	 * @return {String} A string representing the given object
	 * @public
	 */
	function format(extensions) {
	  return Object.keys(extensions)
	    .map((extension) => {
	      let configurations = extensions[extension];
	      if (!Array.isArray(configurations)) configurations = [configurations];
	      return configurations
	        .map((params) => {
	          return [extension]
	            .concat(
	              Object.keys(params).map((k) => {
	                let values = params[k];
	                if (!Array.isArray(values)) values = [values];
	                return values
	                  .map((v) => (v === true ? k : `${k}=${v}`))
	                  .join('; ');
	              })
	            )
	            .join('; ');
	        })
	        .join(', ');
	    })
	    .join(', ');
	}

	extension = { format, parse };
	return extension;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Readable$" }] */

var websocket;
var hasRequiredWebsocket;

function requireWebsocket () {
	if (hasRequiredWebsocket) return websocket;
	hasRequiredWebsocket = 1;

	const EventEmitter = require$$0$2;
	const https = require$$1;
	const http = require$$2;
	const net = require$$3;
	const tls = require$$4;
	const { randomBytes, createHash } = require$$5;
	const { URL } = require$$7;

	const PerMessageDeflate = requirePermessageDeflate();
	const Receiver = requireReceiver();
	const Sender = requireSender();
	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  GUID,
	  kStatusCode,
	  kWebSocket,
	  NOOP
	} = requireConstants();
	const { addEventListener, removeEventListener } = requireEventTarget();
	const { format, parse } = requireExtension();
	const { toBuffer } = requireBufferUtil();

	const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
	const protocolVersions = [8, 13];
	const closeTimeout = 30 * 1000;

	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	class WebSocket extends EventEmitter {
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {(String|URL)} address The URL to which to connect
	   * @param {(String|String[])} [protocols] The subprotocols
	   * @param {Object} [options] Connection options
	   */
	  constructor(address, protocols, options) {
	    super();

	    this._binaryType = BINARY_TYPES[0];
	    this._closeCode = 1006;
	    this._closeFrameReceived = false;
	    this._closeFrameSent = false;
	    this._closeMessage = '';
	    this._closeTimer = null;
	    this._extensions = {};
	    this._protocol = '';
	    this._readyState = WebSocket.CONNECTING;
	    this._receiver = null;
	    this._sender = null;
	    this._socket = null;

	    if (address !== null) {
	      this._bufferedAmount = 0;
	      this._isServer = false;
	      this._redirects = 0;

	      if (Array.isArray(protocols)) {
	        protocols = protocols.join(', ');
	      } else if (typeof protocols === 'object' && protocols !== null) {
	        options = protocols;
	        protocols = undefined;
	      }

	      initAsClient(this, address, protocols, options);
	    } else {
	      this._isServer = true;
	    }
	  }

	  /**
	   * This deviates from the WHATWG interface since ws doesn't support the
	   * required default "blob" type (instead we define a custom "nodebuffer"
	   * type).
	   *
	   * @type {String}
	   */
	  get binaryType() {
	    return this._binaryType;
	  }

	  set binaryType(type) {
	    if (!BINARY_TYPES.includes(type)) return;

	    this._binaryType = type;

	    //
	    // Allow to change `binaryType` on the fly.
	    //
	    if (this._receiver) this._receiver._binaryType = type;
	  }

	  /**
	   * @type {Number}
	   */
	  get bufferedAmount() {
	    if (!this._socket) return this._bufferedAmount;

	    return this._socket._writableState.length + this._sender._bufferedBytes;
	  }

	  /**
	   * @type {String}
	   */
	  get extensions() {
	    return Object.keys(this._extensions).join();
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onclose() {
	    return undefined;
	  }

	  /* istanbul ignore next */
	  set onclose(listener) {}

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onerror() {
	    return undefined;
	  }

	  /* istanbul ignore next */
	  set onerror(listener) {}

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onopen() {
	    return undefined;
	  }

	  /* istanbul ignore next */
	  set onopen(listener) {}

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onmessage() {
	    return undefined;
	  }

	  /* istanbul ignore next */
	  set onmessage(listener) {}

	  /**
	   * @type {String}
	   */
	  get protocol() {
	    return this._protocol;
	  }

	  /**
	   * @type {Number}
	   */
	  get readyState() {
	    return this._readyState;
	  }

	  /**
	   * @type {String}
	   */
	  get url() {
	    return this._url;
	  }

	  /**
	   * Set up the socket and the internal resources.
	   *
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Number} [maxPayload=0] The maximum allowed message size
	   * @private
	   */
	  setSocket(socket, head, maxPayload) {
	    const receiver = new Receiver(
	      this.binaryType,
	      this._extensions,
	      this._isServer,
	      maxPayload
	    );

	    this._sender = new Sender(socket, this._extensions);
	    this._receiver = receiver;
	    this._socket = socket;

	    receiver[kWebSocket] = this;
	    socket[kWebSocket] = this;

	    receiver.on('conclude', receiverOnConclude);
	    receiver.on('drain', receiverOnDrain);
	    receiver.on('error', receiverOnError);
	    receiver.on('message', receiverOnMessage);
	    receiver.on('ping', receiverOnPing);
	    receiver.on('pong', receiverOnPong);

	    socket.setTimeout(0);
	    socket.setNoDelay();

	    if (head.length > 0) socket.unshift(head);

	    socket.on('close', socketOnClose);
	    socket.on('data', socketOnData);
	    socket.on('end', socketOnEnd);
	    socket.on('error', socketOnError);

	    this._readyState = WebSocket.OPEN;
	    this.emit('open');
	  }

	  /**
	   * Emit the `'close'` event.
	   *
	   * @private
	   */
	  emitClose() {
	    if (!this._socket) {
	      this._readyState = WebSocket.CLOSED;
	      this.emit('close', this._closeCode, this._closeMessage);
	      return;
	    }

	    if (this._extensions[PerMessageDeflate.extensionName]) {
	      this._extensions[PerMessageDeflate.extensionName].cleanup();
	    }

	    this._receiver.removeAllListeners();
	    this._readyState = WebSocket.CLOSED;
	    this.emit('close', this._closeCode, this._closeMessage);
	  }

	  /**
	   * Start a closing handshake.
	   *
	   *          +----------+   +-----------+   +----------+
	   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
	   *    |     +----------+   +-----------+   +----------+     |
	   *          +----------+   +-----------+         |
	   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
	   *          +----------+   +-----------+   |
	   *    |           |                        |   +---+        |
	   *                +------------------------+-->|fin| - - - -
	   *    |         +---+                      |   +---+
	   *     - - - - -|fin|<---------------------+
	   *              +---+
	   *
	   * @param {Number} [code] Status code explaining why the connection is closing
	   * @param {String} [data] A string explaining why the connection is closing
	   * @public
	   */
	  close(code, data) {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake(this, this._req, msg);
	    }

	    if (this.readyState === WebSocket.CLOSING) {
	      if (
	        this._closeFrameSent &&
	        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
	      ) {
	        this._socket.end();
	      }

	      return;
	    }

	    this._readyState = WebSocket.CLOSING;
	    this._sender.close(code, data, !this._isServer, (err) => {
	      //
	      // This error is handled by the `'error'` listener on the socket. We only
	      // want to know if the close frame has been sent here.
	      //
	      if (err) return;

	      this._closeFrameSent = true;

	      if (
	        this._closeFrameReceived ||
	        this._receiver._writableState.errorEmitted
	      ) {
	        this._socket.end();
	      }
	    });

	    //
	    // Specify a timeout for the closing handshake to complete.
	    //
	    this._closeTimer = setTimeout(
	      this._socket.destroy.bind(this._socket),
	      closeTimeout
	    );
	  }

	  /**
	   * Send a ping.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the ping is sent
	   * @public
	   */
	  ping(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a pong.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the pong is sent
	   * @public
	   */
	  pong(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a data message.
	   *
	   * @param {*} data The message to send
	   * @param {Object} [options] Options object
	   * @param {Boolean} [options.compress] Specifies whether or not to compress
	   *     `data`
	   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
	   *     text
	   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when data is written out
	   * @public
	   */
	  send(data, options, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof options === 'function') {
	      cb = options;
	      options = {};
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    const opts = {
	      binary: typeof data !== 'string',
	      mask: !this._isServer,
	      compress: true,
	      fin: true,
	      ...options
	    };

	    if (!this._extensions[PerMessageDeflate.extensionName]) {
	      opts.compress = false;
	    }

	    this._sender.send(data || EMPTY_BUFFER, opts, cb);
	  }

	  /**
	   * Forcibly close the connection.
	   *
	   * @public
	   */
	  terminate() {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake(this, this._req, msg);
	    }

	    if (this._socket) {
	      this._readyState = WebSocket.CLOSING;
	      this._socket.destroy();
	    }
	  }
	}

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	[
	  'binaryType',
	  'bufferedAmount',
	  'extensions',
	  'protocol',
	  'readyState',
	  'url'
	].forEach((property) => {
	  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
	});

	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach((method) => {
	  Object.defineProperty(WebSocket.prototype, `on${method}`, {
	    enumerable: true,
	    get() {
	      const listeners = this.listeners(method);
	      for (let i = 0; i < listeners.length; i++) {
	        if (listeners[i]._listener) return listeners[i]._listener;
	      }

	      return undefined;
	    },
	    set(listener) {
	      const listeners = this.listeners(method);
	      for (let i = 0; i < listeners.length; i++) {
	        //
	        // Remove only the listeners added via `addEventListener`.
	        //
	        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
	      }
	      this.addEventListener(method, listener);
	    }
	  });
	});

	WebSocket.prototype.addEventListener = addEventListener;
	WebSocket.prototype.removeEventListener = removeEventListener;

	websocket = WebSocket;

	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {WebSocket} websocket The client to initialize
	 * @param {(String|URL)} address The URL to which to connect
	 * @param {String} [protocols] The subprotocols
	 * @param {Object} [options] Connection options
	 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
	 *     permessage-deflate
	 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
	 *     handshake request
	 * @param {Number} [options.protocolVersion=13] Value of the
	 *     `Sec-WebSocket-Version` header
	 * @param {String} [options.origin] Value of the `Origin` or
	 *     `Sec-WebSocket-Origin` header
	 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	 *     size
	 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
	 *     redirects
	 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
	 *     allowed
	 * @private
	 */
	function initAsClient(websocket, address, protocols, options) {
	  const opts = {
	    protocolVersion: protocolVersions[1],
	    maxPayload: 100 * 1024 * 1024,
	    perMessageDeflate: true,
	    followRedirects: false,
	    maxRedirects: 10,
	    ...options,
	    createConnection: undefined,
	    socketPath: undefined,
	    hostname: undefined,
	    protocol: undefined,
	    timeout: undefined,
	    method: undefined,
	    host: undefined,
	    path: undefined,
	    port: undefined
	  };

	  if (!protocolVersions.includes(opts.protocolVersion)) {
	    throw new RangeError(
	      `Unsupported protocol version: ${opts.protocolVersion} ` +
	        `(supported versions: ${protocolVersions.join(', ')})`
	    );
	  }

	  let parsedUrl;

	  if (address instanceof URL) {
	    parsedUrl = address;
	    websocket._url = address.href;
	  } else {
	    parsedUrl = new URL(address);
	    websocket._url = address;
	  }

	  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

	  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
	    throw new Error(`Invalid URL: ${websocket.url}`);
	  }

	  const isSecure =
	    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
	  const defaultPort = isSecure ? 443 : 80;
	  const key = randomBytes(16).toString('base64');
	  const get = isSecure ? https.get : http.get;
	  let perMessageDeflate;

	  opts.createConnection = isSecure ? tlsConnect : netConnect;
	  opts.defaultPort = opts.defaultPort || defaultPort;
	  opts.port = parsedUrl.port || defaultPort;
	  opts.host = parsedUrl.hostname.startsWith('[')
	    ? parsedUrl.hostname.slice(1, -1)
	    : parsedUrl.hostname;
	  opts.headers = {
	    'Sec-WebSocket-Version': opts.protocolVersion,
	    'Sec-WebSocket-Key': key,
	    Connection: 'Upgrade',
	    Upgrade: 'websocket',
	    ...opts.headers
	  };
	  opts.path = parsedUrl.pathname + parsedUrl.search;
	  opts.timeout = opts.handshakeTimeout;

	  if (opts.perMessageDeflate) {
	    perMessageDeflate = new PerMessageDeflate(
	      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
	      false,
	      opts.maxPayload
	    );
	    opts.headers['Sec-WebSocket-Extensions'] = format({
	      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
	    });
	  }
	  if (protocols) {
	    opts.headers['Sec-WebSocket-Protocol'] = protocols;
	  }
	  if (opts.origin) {
	    if (opts.protocolVersion < 13) {
	      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
	    } else {
	      opts.headers.Origin = opts.origin;
	    }
	  }
	  if (parsedUrl.username || parsedUrl.password) {
	    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
	  }

	  if (isUnixSocket) {
	    const parts = opts.path.split(':');

	    opts.socketPath = parts[0];
	    opts.path = parts[1];
	  }

	  let req = (websocket._req = get(opts));

	  if (opts.timeout) {
	    req.on('timeout', () => {
	      abortHandshake(websocket, req, 'Opening handshake has timed out');
	    });
	  }

	  req.on('error', (err) => {
	    if (req === null || req.aborted) return;

	    req = websocket._req = null;
	    websocket._readyState = WebSocket.CLOSING;
	    websocket.emit('error', err);
	    websocket.emitClose();
	  });

	  req.on('response', (res) => {
	    const location = res.headers.location;
	    const statusCode = res.statusCode;

	    if (
	      location &&
	      opts.followRedirects &&
	      statusCode >= 300 &&
	      statusCode < 400
	    ) {
	      if (++websocket._redirects > opts.maxRedirects) {
	        abortHandshake(websocket, req, 'Maximum redirects exceeded');
	        return;
	      }

	      req.abort();

	      const addr = new URL(location, address);

	      initAsClient(websocket, addr, protocols, options);
	    } else if (!websocket.emit('unexpected-response', req, res)) {
	      abortHandshake(
	        websocket,
	        req,
	        `Unexpected server response: ${res.statusCode}`
	      );
	    }
	  });

	  req.on('upgrade', (res, socket, head) => {
	    websocket.emit('upgrade', res);

	    //
	    // The user may have closed the connection from a listener of the `upgrade`
	    // event.
	    //
	    if (websocket.readyState !== WebSocket.CONNECTING) return;

	    req = websocket._req = null;

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    if (res.headers['sec-websocket-accept'] !== digest) {
	      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
	      return;
	    }

	    const serverProt = res.headers['sec-websocket-protocol'];
	    const protList = (protocols || '').split(/, */);
	    let protError;

	    if (!protocols && serverProt) {
	      protError = 'Server sent a subprotocol but none was requested';
	    } else if (protocols && !serverProt) {
	      protError = 'Server sent no subprotocol';
	    } else if (serverProt && !protList.includes(serverProt)) {
	      protError = 'Server sent an invalid subprotocol';
	    }

	    if (protError) {
	      abortHandshake(websocket, socket, protError);
	      return;
	    }

	    if (serverProt) websocket._protocol = serverProt;

	    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

	    if (secWebSocketExtensions !== undefined) {
	      if (!perMessageDeflate) {
	        const message =
	          'Server sent a Sec-WebSocket-Extensions header but no extension ' +
	          'was requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      let extensions;

	      try {
	        extensions = parse(secWebSocketExtensions);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      const extensionNames = Object.keys(extensions);

	      if (extensionNames.length) {
	        if (
	          extensionNames.length !== 1 ||
	          extensionNames[0] !== PerMessageDeflate.extensionName
	        ) {
	          const message =
	            'Server indicated an extension that was not requested';
	          abortHandshake(websocket, socket, message);
	          return;
	        }

	        try {
	          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
	        } catch (err) {
	          const message = 'Invalid Sec-WebSocket-Extensions header';
	          abortHandshake(websocket, socket, message);
	          return;
	        }

	        websocket._extensions[PerMessageDeflate.extensionName] =
	          perMessageDeflate;
	      }
	    }

	    websocket.setSocket(socket, head, opts.maxPayload);
	  });
	}

	/**
	 * Create a `net.Socket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {net.Socket} The newly created socket used to start the connection
	 * @private
	 */
	function netConnect(options) {
	  options.path = options.socketPath;
	  return net.connect(options);
	}

	/**
	 * Create a `tls.TLSSocket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {tls.TLSSocket} The newly created socket used to start the connection
	 * @private
	 */
	function tlsConnect(options) {
	  options.path = undefined;

	  if (!options.servername && options.servername !== '') {
	    options.servername = net.isIP(options.host) ? '' : options.host;
	  }

	  return tls.connect(options);
	}

	/**
	 * Abort the handshake and emit an error.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
	 *     abort or the socket to destroy
	 * @param {String} message The error message
	 * @private
	 */
	function abortHandshake(websocket, stream, message) {
	  websocket._readyState = WebSocket.CLOSING;

	  const err = new Error(message);
	  Error.captureStackTrace(err, abortHandshake);

	  if (stream.setHeader) {
	    stream.abort();

	    if (stream.socket && !stream.socket.destroyed) {
	      //
	      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
	      // called after the request completed. See
	      // https://github.com/websockets/ws/issues/1869.
	      //
	      stream.socket.destroy();
	    }

	    stream.once('abort', websocket.emitClose.bind(websocket));
	    websocket.emit('error', err);
	  } else {
	    stream.destroy(err);
	    stream.once('error', websocket.emit.bind(websocket, 'error'));
	    stream.once('close', websocket.emitClose.bind(websocket));
	  }
	}

	/**
	 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
	 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {*} [data] The data to send
	 * @param {Function} [cb] Callback
	 * @private
	 */
	function sendAfterClose(websocket, data, cb) {
	  if (data) {
	    const length = toBuffer(data).length;

	    //
	    // The `_bufferedAmount` property is used only when the peer is a client and
	    // the opening handshake fails. Under these circumstances, in fact, the
	    // `setSocket()` method is not called, so the `_socket` and `_sender`
	    // properties are set to `null`.
	    //
	    if (websocket._socket) websocket._sender._bufferedBytes += length;
	    else websocket._bufferedAmount += length;
	  }

	  if (cb) {
	    const err = new Error(
	      `WebSocket is not open: readyState ${websocket.readyState} ` +
	        `(${readyStates[websocket.readyState]})`
	    );
	    cb(err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'conclude'` event.
	 *
	 * @param {Number} code The status code
	 * @param {String} reason The reason for closing
	 * @private
	 */
	function receiverOnConclude(code, reason) {
	  const websocket = this[kWebSocket];

	  websocket._closeFrameReceived = true;
	  websocket._closeMessage = reason;
	  websocket._closeCode = code;

	  if (websocket._socket[kWebSocket] === undefined) return;

	  websocket._socket.removeListener('data', socketOnData);
	  process.nextTick(resume, websocket._socket);

	  if (code === 1005) websocket.close();
	  else websocket.close(code, reason);
	}

	/**
	 * The listener of the `Receiver` `'drain'` event.
	 *
	 * @private
	 */
	function receiverOnDrain() {
	  this[kWebSocket]._socket.resume();
	}

	/**
	 * The listener of the `Receiver` `'error'` event.
	 *
	 * @param {(RangeError|Error)} err The emitted error
	 * @private
	 */
	function receiverOnError(err) {
	  const websocket = this[kWebSocket];

	  if (websocket._socket[kWebSocket] !== undefined) {
	    websocket._socket.removeListener('data', socketOnData);

	    //
	    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See
	    // https://github.com/websockets/ws/issues/1940.
	    //
	    process.nextTick(resume, websocket._socket);

	    websocket.close(err[kStatusCode]);
	  }

	  websocket.emit('error', err);
	}

	/**
	 * The listener of the `Receiver` `'finish'` event.
	 *
	 * @private
	 */
	function receiverOnFinish() {
	  this[kWebSocket].emitClose();
	}

	/**
	 * The listener of the `Receiver` `'message'` event.
	 *
	 * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
	 * @private
	 */
	function receiverOnMessage(data) {
	  this[kWebSocket].emit('message', data);
	}

	/**
	 * The listener of the `Receiver` `'ping'` event.
	 *
	 * @param {Buffer} data The data included in the ping frame
	 * @private
	 */
	function receiverOnPing(data) {
	  const websocket = this[kWebSocket];

	  websocket.pong(data, !websocket._isServer, NOOP);
	  websocket.emit('ping', data);
	}

	/**
	 * The listener of the `Receiver` `'pong'` event.
	 *
	 * @param {Buffer} data The data included in the pong frame
	 * @private
	 */
	function receiverOnPong(data) {
	  this[kWebSocket].emit('pong', data);
	}

	/**
	 * Resume a readable stream
	 *
	 * @param {Readable} stream The readable stream
	 * @private
	 */
	function resume(stream) {
	  stream.resume();
	}

	/**
	 * The listener of the `net.Socket` `'close'` event.
	 *
	 * @private
	 */
	function socketOnClose() {
	  const websocket = this[kWebSocket];

	  this.removeListener('close', socketOnClose);
	  this.removeListener('data', socketOnData);
	  this.removeListener('end', socketOnEnd);

	  websocket._readyState = WebSocket.CLOSING;

	  let chunk;

	  //
	  // The close frame might not have been received or the `'end'` event emitted,
	  // for example, if the socket was destroyed due to an error. Ensure that the
	  // `receiver` stream is closed after writing any remaining buffered data to
	  // it. If the readable side of the socket is in flowing mode then there is no
	  // buffered data as everything has been already written and `readable.read()`
	  // will return `null`. If instead, the socket is paused, any possible buffered
	  // data will be read as a single chunk.
	  //
	  if (
	    !this._readableState.endEmitted &&
	    !websocket._closeFrameReceived &&
	    !websocket._receiver._writableState.errorEmitted &&
	    (chunk = websocket._socket.read()) !== null
	  ) {
	    websocket._receiver.write(chunk);
	  }

	  websocket._receiver.end();

	  this[kWebSocket] = undefined;

	  clearTimeout(websocket._closeTimer);

	  if (
	    websocket._receiver._writableState.finished ||
	    websocket._receiver._writableState.errorEmitted
	  ) {
	    websocket.emitClose();
	  } else {
	    websocket._receiver.on('error', receiverOnFinish);
	    websocket._receiver.on('finish', receiverOnFinish);
	  }
	}

	/**
	 * The listener of the `net.Socket` `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function socketOnData(chunk) {
	  if (!this[kWebSocket]._receiver.write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * The listener of the `net.Socket` `'end'` event.
	 *
	 * @private
	 */
	function socketOnEnd() {
	  const websocket = this[kWebSocket];

	  websocket._readyState = WebSocket.CLOSING;
	  websocket._receiver.end();
	  this.end();
	}

	/**
	 * The listener of the `net.Socket` `'error'` event.
	 *
	 * @private
	 */
	function socketOnError() {
	  const websocket = this[kWebSocket];

	  this.removeListener('error', socketOnError);
	  this.on('error', NOOP);

	  if (websocket) {
	    websocket._readyState = WebSocket.CLOSING;
	    this.destroy();
	  }
	}
	return websocket;
}

var stream;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream;
	hasRequiredStream = 1;

	const { Duplex } = require$$0$6;

	/**
	 * Emits the `'close'` event on a stream.
	 *
	 * @param {Duplex} stream The stream.
	 * @private
	 */
	function emitClose(stream) {
	  stream.emit('close');
	}

	/**
	 * The listener of the `'end'` event.
	 *
	 * @private
	 */
	function duplexOnEnd() {
	  if (!this.destroyed && this._writableState.finished) {
	    this.destroy();
	  }
	}

	/**
	 * The listener of the `'error'` event.
	 *
	 * @param {Error} err The error
	 * @private
	 */
	function duplexOnError(err) {
	  this.removeListener('error', duplexOnError);
	  this.destroy();
	  if (this.listenerCount('error') === 0) {
	    // Do not suppress the throwing behavior.
	    this.emit('error', err);
	  }
	}

	/**
	 * Wraps a `WebSocket` in a duplex stream.
	 *
	 * @param {WebSocket} ws The `WebSocket` to wrap
	 * @param {Object} [options] The options for the `Duplex` constructor
	 * @return {Duplex} The duplex stream
	 * @public
	 */
	function createWebSocketStream(ws, options) {
	  let resumeOnReceiverDrain = true;
	  let terminateOnDestroy = true;

	  function receiverOnDrain() {
	    if (resumeOnReceiverDrain) ws._socket.resume();
	  }

	  if (ws.readyState === ws.CONNECTING) {
	    ws.once('open', function open() {
	      ws._receiver.removeAllListeners('drain');
	      ws._receiver.on('drain', receiverOnDrain);
	    });
	  } else {
	    ws._receiver.removeAllListeners('drain');
	    ws._receiver.on('drain', receiverOnDrain);
	  }

	  const duplex = new Duplex({
	    ...options,
	    autoDestroy: false,
	    emitClose: false,
	    objectMode: false,
	    writableObjectMode: false
	  });

	  ws.on('message', function message(msg) {
	    if (!duplex.push(msg)) {
	      resumeOnReceiverDrain = false;
	      ws._socket.pause();
	    }
	  });

	  ws.once('error', function error(err) {
	    if (duplex.destroyed) return;

	    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
	    //
	    // - If the `'error'` event is emitted before the `'open'` event, then
	    //   `ws.terminate()` is a noop as no socket is assigned.
	    // - Otherwise, the error is re-emitted by the listener of the `'error'`
	    //   event of the `Receiver` object. The listener already closes the
	    //   connection by calling `ws.close()`. This allows a close frame to be
	    //   sent to the other peer. If `ws.terminate()` is called right after this,
	    //   then the close frame might not be sent.
	    terminateOnDestroy = false;
	    duplex.destroy(err);
	  });

	  ws.once('close', function close() {
	    if (duplex.destroyed) return;

	    duplex.push(null);
	  });

	  duplex._destroy = function (err, callback) {
	    if (ws.readyState === ws.CLOSED) {
	      callback(err);
	      process.nextTick(emitClose, duplex);
	      return;
	    }

	    let called = false;

	    ws.once('error', function error(err) {
	      called = true;
	      callback(err);
	    });

	    ws.once('close', function close() {
	      if (!called) callback(err);
	      process.nextTick(emitClose, duplex);
	    });

	    if (terminateOnDestroy) ws.terminate();
	  };

	  duplex._final = function (callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._final(callback);
	      });
	      return;
	    }

	    // If the value of the `_socket` property is `null` it means that `ws` is a
	    // client websocket and the handshake failed. In fact, when this happens, a
	    // socket is never assigned to the websocket. Wait for the `'error'` event
	    // that will be emitted by the websocket.
	    if (ws._socket === null) return;

	    if (ws._socket._writableState.finished) {
	      callback();
	      if (duplex._readableState.endEmitted) duplex.destroy();
	    } else {
	      ws._socket.once('finish', function finish() {
	        // `duplex` is not destroyed here because the `'end'` event will be
	        // emitted on `duplex` after this `'finish'` event. The EOF signaling
	        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
	        callback();
	      });
	      ws.close();
	    }
	  };

	  duplex._read = function () {
	    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
	      resumeOnReceiverDrain = true;
	      if (!ws._receiver._writableState.needDrain) ws._socket.resume();
	    }
	  };

	  duplex._write = function (chunk, encoding, callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._write(chunk, encoding, callback);
	      });
	      return;
	    }

	    ws.send(chunk, callback);
	  };

	  duplex.on('end', duplexOnEnd);
	  duplex.on('error', duplexOnError);
	  return duplex;
	}

	stream = createWebSocketStream;
	return stream;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls|https$" }] */

var websocketServer;
var hasRequiredWebsocketServer;

function requireWebsocketServer () {
	if (hasRequiredWebsocketServer) return websocketServer;
	hasRequiredWebsocketServer = 1;

	const EventEmitter = require$$0$2;
	const http = require$$2;
	const { createHash } = require$$5;

	const PerMessageDeflate = requirePermessageDeflate();
	const WebSocket = requireWebsocket();
	const { format, parse } = requireExtension();
	const { GUID, kWebSocket } = requireConstants();

	const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

	const RUNNING = 0;
	const CLOSING = 1;
	const CLOSED = 2;

	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	class WebSocketServer extends EventEmitter {
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Number} [options.backlog=511] The maximum length of the queue of
	   *     pending connections
	   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
	   *     track clients
	   * @param {Function} [options.handleProtocols] A hook to handle protocols
	   * @param {String} [options.host] The hostname where to bind the server
	   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	   *     size
	   * @param {Boolean} [options.noServer=false] Enable no server mode
	   * @param {String} [options.path] Accept only connections matching this path
	   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
	   *     permessage-deflate
	   * @param {Number} [options.port] The port where to bind the server
	   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
	   *     server to use
	   * @param {Function} [options.verifyClient] A hook to reject connections
	   * @param {Function} [callback] A listener for the `listening` event
	   */
	  constructor(options, callback) {
	    super();

	    options = {
	      maxPayload: 100 * 1024 * 1024,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null, // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null,
	      ...options
	    };

	    if (
	      (options.port == null && !options.server && !options.noServer) ||
	      (options.port != null && (options.server || options.noServer)) ||
	      (options.server && options.noServer)
	    ) {
	      throw new TypeError(
	        'One and only one of the "port", "server", or "noServer" options ' +
	          'must be specified'
	      );
	    }

	    if (options.port != null) {
	      this._server = http.createServer((req, res) => {
	        const body = http.STATUS_CODES[426];

	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      this._server.listen(
	        options.port,
	        options.host,
	        options.backlog,
	        callback
	      );
	    } else if (options.server) {
	      this._server = options.server;
	    }

	    if (this._server) {
	      const emitConnection = this.emit.bind(this, 'connection');

	      this._removeListeners = addListeners(this._server, {
	        listening: this.emit.bind(this, 'listening'),
	        error: this.emit.bind(this, 'error'),
	        upgrade: (req, socket, head) => {
	          this.handleUpgrade(req, socket, head, emitConnection);
	        }
	      });
	    }

	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) this.clients = new Set();
	    this.options = options;
	    this._state = RUNNING;
	  }

	  /**
	   * Returns the bound address, the address family name, and port of the server
	   * as reported by the operating system if listening on an IP socket.
	   * If the server is listening on a pipe or UNIX domain socket, the name is
	   * returned as a string.
	   *
	   * @return {(Object|String|null)} The address of the server
	   * @public
	   */
	  address() {
	    if (this.options.noServer) {
	      throw new Error('The server is operating in "noServer" mode');
	    }

	    if (!this._server) return null;
	    return this._server.address();
	  }

	  /**
	   * Close the server.
	   *
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(cb) {
	    if (cb) this.once('close', cb);

	    if (this._state === CLOSED) {
	      process.nextTick(emitClose, this);
	      return;
	    }

	    if (this._state === CLOSING) return;
	    this._state = CLOSING;

	    //
	    // Terminate all associated clients.
	    //
	    if (this.clients) {
	      for (const client of this.clients) client.terminate();
	    }

	    const server = this._server;

	    if (server) {
	      this._removeListeners();
	      this._removeListeners = this._server = null;

	      //
	      // Close the http server if it was internally created.
	      //
	      if (this.options.port != null) {
	        server.close(emitClose.bind(undefined, this));
	        return;
	      }
	    }

	    process.nextTick(emitClose, this);
	  }

	  /**
	   * See if a given request should be handled by this server instance.
	   *
	   * @param {http.IncomingMessage} req Request object to inspect
	   * @return {Boolean} `true` if the request is valid, else `false`
	   * @public
	   */
	  shouldHandle(req) {
	    if (this.options.path) {
	      const index = req.url.indexOf('?');
	      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

	      if (pathname !== this.options.path) return false;
	    }

	    return true;
	  }

	  /**
	   * Handle a HTTP Upgrade request.
	   *
	   * @param {http.IncomingMessage} req The request object
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @public
	   */
	  handleUpgrade(req, socket, head, cb) {
	    socket.on('error', socketOnError);

	    const key =
	      req.headers['sec-websocket-key'] !== undefined
	        ? req.headers['sec-websocket-key'].trim()
	        : false;
	    const version = +req.headers['sec-websocket-version'];
	    const extensions = {};

	    if (
	      req.method !== 'GET' ||
	      req.headers.upgrade.toLowerCase() !== 'websocket' ||
	      !key ||
	      !keyRegex.test(key) ||
	      (version !== 8 && version !== 13) ||
	      !this.shouldHandle(req)
	    ) {
	      return abortHandshake(socket, 400);
	    }

	    if (this.options.perMessageDeflate) {
	      const perMessageDeflate = new PerMessageDeflate(
	        this.options.perMessageDeflate,
	        true,
	        this.options.maxPayload
	      );

	      try {
	        const offers = parse(req.headers['sec-websocket-extensions']);

	        if (offers[PerMessageDeflate.extensionName]) {
	          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
	          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        return abortHandshake(socket, 400);
	      }
	    }

	    //
	    // Optionally call external client verification handler.
	    //
	    if (this.options.verifyClient) {
	      const info = {
	        origin:
	          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
	        secure: !!(req.socket.authorized || req.socket.encrypted),
	        req
	      };

	      if (this.options.verifyClient.length === 2) {
	        this.options.verifyClient(info, (verified, code, message, headers) => {
	          if (!verified) {
	            return abortHandshake(socket, code || 401, message, headers);
	          }

	          this.completeUpgrade(key, extensions, req, socket, head, cb);
	        });
	        return;
	      }

	      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
	    }

	    this.completeUpgrade(key, extensions, req, socket, head, cb);
	  }

	  /**
	   * Upgrade the connection to WebSocket.
	   *
	   * @param {String} key The value of the `Sec-WebSocket-Key` header
	   * @param {Object} extensions The accepted extensions
	   * @param {http.IncomingMessage} req The request object
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @throws {Error} If called more than once with the same socket
	   * @private
	   */
	  completeUpgrade(key, extensions, req, socket, head, cb) {
	    //
	    // Destroy the socket if the client has already sent a FIN packet.
	    //
	    if (!socket.readable || !socket.writable) return socket.destroy();

	    if (socket[kWebSocket]) {
	      throw new Error(
	        'server.handleUpgrade() was called more than once with the same ' +
	          'socket, possibly due to a misconfiguration'
	      );
	    }

	    if (this._state > RUNNING) return abortHandshake(socket, 503);

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    const headers = [
	      'HTTP/1.1 101 Switching Protocols',
	      'Upgrade: websocket',
	      'Connection: Upgrade',
	      `Sec-WebSocket-Accept: ${digest}`
	    ];

	    const ws = new WebSocket(null);
	    let protocol = req.headers['sec-websocket-protocol'];

	    if (protocol) {
	      protocol = protocol.split(',').map(trim);

	      //
	      // Optionally call external protocol selection handler.
	      //
	      if (this.options.handleProtocols) {
	        protocol = this.options.handleProtocols(protocol, req);
	      } else {
	        protocol = protocol[0];
	      }

	      if (protocol) {
	        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
	        ws._protocol = protocol;
	      }
	    }

	    if (extensions[PerMessageDeflate.extensionName]) {
	      const params = extensions[PerMessageDeflate.extensionName].params;
	      const value = format({
	        [PerMessageDeflate.extensionName]: [params]
	      });
	      headers.push(`Sec-WebSocket-Extensions: ${value}`);
	      ws._extensions = extensions;
	    }

	    //
	    // Allow external modification/inspection of handshake headers.
	    //
	    this.emit('headers', headers, req);

	    socket.write(headers.concat('\r\n').join('\r\n'));
	    socket.removeListener('error', socketOnError);

	    ws.setSocket(socket, head, this.options.maxPayload);

	    if (this.clients) {
	      this.clients.add(ws);
	      ws.on('close', () => this.clients.delete(ws));
	    }

	    cb(ws, req);
	  }
	}

	websocketServer = WebSocketServer;

	/**
	 * Add event listeners on an `EventEmitter` using a map of <event, listener>
	 * pairs.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @param {Object.<String, Function>} map The listeners to add
	 * @return {Function} A function that will remove the added listeners when
	 *     called
	 * @private
	 */
	function addListeners(server, map) {
	  for (const event of Object.keys(map)) server.on(event, map[event]);

	  return function removeListeners() {
	    for (const event of Object.keys(map)) {
	      server.removeListener(event, map[event]);
	    }
	  };
	}

	/**
	 * Emit a `'close'` event on an `EventEmitter`.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @private
	 */
	function emitClose(server) {
	  server._state = CLOSED;
	  server.emit('close');
	}

	/**
	 * Handle premature socket errors.
	 *
	 * @private
	 */
	function socketOnError() {
	  this.destroy();
	}

	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @param {Object} [headers] Additional HTTP response headers
	 * @private
	 */
	function abortHandshake(socket, code, message, headers) {
	  if (socket.writable) {
	    message = message || http.STATUS_CODES[code];
	    headers = {
	      Connection: 'close',
	      'Content-Type': 'text/html',
	      'Content-Length': Buffer.byteLength(message),
	      ...headers
	    };

	    socket.write(
	      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
	        Object.keys(headers)
	          .map((h) => `${h}: ${headers[h]}`)
	          .join('\r\n') +
	        '\r\n\r\n' +
	        message
	    );
	  }

	  socket.removeListener('error', socketOnError);
	  socket.destroy();
	}

	/**
	 * Remove whitespace characters from both ends of a string.
	 *
	 * @param {String} str The string
	 * @return {String} A new string representing `str` stripped of whitespace
	 *     characters from both its beginning and end
	 * @private
	 */
	function trim(str) {
	  return str.trim();
	}
	return websocketServer;
}

var ws;
var hasRequiredWs;

function requireWs () {
	if (hasRequiredWs) return ws;
	hasRequiredWs = 1;

	const WebSocket = requireWebsocket();

	WebSocket.createWebSocketStream = requireStream();
	WebSocket.Server = requireWebsocketServer();
	WebSocket.Receiver = requireReceiver();
	WebSocket.Sender = requireSender();

	ws = WebSocket;
	return ws;
}

var hasRequiredDevtoolsWindowPolyfill;

function requireDevtoolsWindowPolyfill () {
	if (hasRequiredDevtoolsWindowPolyfill) return devtoolsWindowPolyfill;
	hasRequiredDevtoolsWindowPolyfill = 1;
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(devtoolsWindowPolyfill, "__esModule", { value: true });
	// Ignoring missing types error to avoid adding another dependency for this hack to work
	// @ts-ignore
	const ws_1 = __importDefault(requireWs());
	const customGlobal = commonjsGlobal;
	// These things must exist before importing `react-devtools-core`
	if (!customGlobal.WebSocket) {
	    customGlobal.WebSocket = ws_1.default;
	}
	if (!customGlobal.window) {
	    customGlobal.window = commonjsGlobal;
	}
	// Filter out Ink's internal components from devtools for a cleaner view.
	// Also, ince `react-devtools-shared` package isn't published on npm, we can't
	// use its types, that's why there are hard-coded values in `type` fields below.
	// See https://github.com/facebook/react/blob/edf6eac8a181860fd8a2d076a43806f1237495a1/packages/react-devtools-shared/src/types.js#L24
	customGlobal.window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ = [
	    {
	        // ComponentFilterElementType
	        type: 1,
	        // ElementTypeHostComponent
	        value: 7,
	        isEnabled: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalApp',
	        isEnabled: true,
	        isValid: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalAppContext',
	        isEnabled: true,
	        isValid: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalStdoutContext',
	        isEnabled: true,
	        isValid: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalStderrContext',
	        isEnabled: true,
	        isValid: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalStdinContext',
	        isEnabled: true,
	        isValid: true
	    },
	    {
	        // ComponentFilterDisplayName
	        type: 2,
	        value: 'InternalFocusContext',
	        isEnabled: true,
	        isValid: true
	    }
	];
	
	return devtoolsWindowPolyfill;
}

var backend = {exports: {}};

var hasRequiredBackend;

function requireBackend () {
	if (hasRequiredBackend) return backend.exports;
	hasRequiredBackend = 1;
	(function (module, exports) {
		(function webpackUniversalModuleDefinition(root, factory) {
			module.exports = factory();
		})(window, function() {
		return /******/ (function(modules) { // webpackBootstrap
		/******/ 	// The module cache
		/******/ 	var installedModules = {};
		/******/
		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {
		/******/
		/******/ 		// Check if module is in cache
		/******/ 		if(installedModules[moduleId]) {
		/******/ 			return installedModules[moduleId].exports;
		/******/ 		}
		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = installedModules[moduleId] = {
		/******/ 			i: moduleId,
		/******/ 			l: false,
		/******/ 			exports: {}
		/******/ 		};
		/******/
		/******/ 		// Execute the module function
		/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ 		// Flag the module as loaded
		/******/ 		module.l = true;
		/******/
		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}
		/******/
		/******/
		/******/ 	// expose the modules object (__webpack_modules__)
		/******/ 	__webpack_require__.m = modules;
		/******/
		/******/ 	// expose the module cache
		/******/ 	__webpack_require__.c = installedModules;
		/******/
		/******/ 	// define getter function for harmony exports
		/******/ 	__webpack_require__.d = function(exports, name, getter) {
		/******/ 		if(!__webpack_require__.o(exports, name)) {
		/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
		/******/ 		}
		/******/ 	};
		/******/
		/******/ 	// define __esModule on exports
		/******/ 	__webpack_require__.r = function(exports) {
		/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
		/******/ 		}
		/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
		/******/ 	};
		/******/
		/******/ 	// create a fake namespace object
		/******/ 	// mode & 1: value is a module id, require it
		/******/ 	// mode & 2: merge all properties of value into the ns
		/******/ 	// mode & 4: return value when already ns object
		/******/ 	// mode & 8|1: behave like require
		/******/ 	__webpack_require__.t = function(value, mode) {
		/******/ 		if(mode & 1) value = __webpack_require__(value);
		/******/ 		if(mode & 8) return value;
		/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
		/******/ 		var ns = Object.create(null);
		/******/ 		__webpack_require__.r(ns);
		/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
		/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
		/******/ 		return ns;
		/******/ 	};
		/******/
		/******/ 	// getDefaultExport function for compatibility with non-harmony modules
		/******/ 	__webpack_require__.n = function(module) {
		/******/ 		var getter = module && module.__esModule ?
		/******/ 			function getDefault() { return module['default']; } :
		/******/ 			function getModuleExports() { return module; };
		/******/ 		__webpack_require__.d(getter, 'a', getter);
		/******/ 		return getter;
		/******/ 	};
		/******/
		/******/ 	// Object.prototype.hasOwnProperty.call
		/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
		/******/
		/******/ 	// __webpack_public_path__
		/******/ 	__webpack_require__.p = "";
		/******/
		/******/
		/******/ 	// Load entry module and return exports
		/******/ 	return __webpack_require__(__webpack_require__.s = 32);
		/******/ })
		/************************************************************************/
		/******/ ([
		/* 0 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* unused harmony export CHROME_WEBSTORE_EXTENSION_ID */
		/* unused harmony export INTERNAL_EXTENSION_ID */
		/* unused harmony export LOCAL_EXTENSION_ID */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __DEBUG__; });
		/* unused harmony export __PERFORMANCE_PROFILE__ */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return TREE_OPERATION_ADD; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return TREE_OPERATION_REMOVE; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return TREE_OPERATION_REORDER_CHILDREN; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return TREE_OPERATION_UPDATE_TREE_BASE_DURATION; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return TREE_OPERATION_REMOVE_ROOT; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return TREE_OPERATION_SET_SUBTREE_MODE; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return PROFILING_FLAG_BASIC_SUPPORT; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return PROFILING_FLAG_TIMELINE_SUPPORT; });
		/* unused harmony export LOCAL_STORAGE_DEFAULT_TAB_KEY */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LOCAL_STORAGE_FILTER_PREFERENCES_KEY; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return SESSION_STORAGE_LAST_SELECTION_KEY; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return LOCAL_STORAGE_OPEN_IN_EDITOR_URL; });
		/* unused harmony export LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return SESSION_STORAGE_RELOAD_AND_PROFILE_KEY; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY; });
		/* unused harmony export LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE; });

		var __DEBUG__ = false; // Flip this flag to true to enable performance.mark() and performance.measure() timings.
		var TREE_OPERATION_ADD = 1;
		var TREE_OPERATION_REMOVE = 2;
		var TREE_OPERATION_REORDER_CHILDREN = 3;
		var TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
		var TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
		var TREE_OPERATION_REMOVE_ROOT = 6;
		var TREE_OPERATION_SET_SUBTREE_MODE = 7;
		var PROFILING_FLAG_BASIC_SUPPORT = 1;
		var PROFILING_FLAG_TIMELINE_SUPPORT = 2;
		var LOCAL_STORAGE_FILTER_PREFERENCES_KEY = 'React::DevTools::componentFilters';
		var SESSION_STORAGE_LAST_SELECTION_KEY = 'React::DevTools::lastSelection';
		var LOCAL_STORAGE_OPEN_IN_EDITOR_URL = 'React::DevTools::openInEditorUrl';
		var SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = 'React::DevTools::recordChangeDescriptions';
		var SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = 'React::DevTools::reloadAndProfile';
		var LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = 'React::DevTools::breakOnConsoleErrors';
		var LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = 'React::DevTools::appendComponentStack';
		var LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = 'React::DevTools::showInlineWarningsAndErrors';
		var LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE = 'React::DevTools::hideConsoleLogsInStrictMode';


		/***/ }),
		/* 1 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ElementTypeClass; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return ElementTypeContext; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return ElementTypeFunction; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return ElementTypeForwardRef; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return ElementTypeHostComponent; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return ElementTypeMemo; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return ElementTypeOtherOrUnknown; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return ElementTypeProfiler; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return ElementTypeRoot; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return ElementTypeSuspense; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return ElementTypeSuspenseList; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return ElementTypeTracingMarker; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ComponentFilterElementType; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ComponentFilterDisplayName; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ComponentFilterLocation; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ComponentFilterHOC; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return StrictMode; });
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// WARNING
		// The values below are referenced by ComponentFilters (which are saved via localStorage).
		// Do not change them or it will break previously saved user customizations.
		// If new element types are added, use new numbers rather than re-ordering existing ones.
		//
		// Changing these types is also a backwards breaking change for the standalone shell,
		// since the frontend and backend must share the same values-
		// and the backend is embedded in certain environments (like React Native).
		var ElementTypeClass = 1;
		var ElementTypeContext = 2;
		var ElementTypeFunction = 5;
		var ElementTypeForwardRef = 6;
		var ElementTypeHostComponent = 7;
		var ElementTypeMemo = 8;
		var ElementTypeOtherOrUnknown = 9;
		var ElementTypeProfiler = 10;
		var ElementTypeRoot = 11;
		var ElementTypeSuspense = 12;
		var ElementTypeSuspenseList = 13;
		var ElementTypeTracingMarker = 14; // Different types of elements displayed in the Elements tree.
		// These types may be used to visually distinguish types,
		// or to enable/disable certain functionality.

		// WARNING
		// The values below are referenced by ComponentFilters (which are saved via localStorage).
		// Do not change them or it will break previously saved user customizations.
		// If new filter types are added, use new numbers rather than re-ordering existing ones.
		var ComponentFilterElementType = 1;
		var ComponentFilterDisplayName = 2;
		var ComponentFilterLocation = 3;
		var ComponentFilterHOC = 4;
		var StrictMode = 1;

		/***/ }),
		/* 2 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export alphaSortKeys */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getAllEnumerableKeys; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getDisplayName; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getUID; });
		/* unused harmony export utfDecodeString */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return utfEncodeString; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return printOperationsArray; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getDefaultComponentFilters; });
		/* unused harmony export getSavedComponentFilters */
		/* unused harmony export saveComponentFilters */
		/* unused harmony export getAppendComponentStack */
		/* unused harmony export setAppendComponentStack */
		/* unused harmony export getBreakOnConsoleErrors */
		/* unused harmony export setBreakOnConsoleErrors */
		/* unused harmony export getHideConsoleLogsInStrictMode */
		/* unused harmony export sethideConsoleLogsInStrictMode */
		/* unused harmony export getShowInlineWarningsAndErrors */
		/* unused harmony export setShowInlineWarningsAndErrors */
		/* unused harmony export getDefaultOpenInEditorURL */
		/* unused harmony export getOpenInEditorURL */
		/* unused harmony export separateDisplayNameAndHOCs */
		/* unused harmony export shallowDiffers */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getInObject; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deletePathInObject; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return renamePathInObject; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setInObject; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getDataType; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getDisplayNameForReactElement; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return formatDataForPreview; });
		/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);
		/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);
		/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
		/* harmony import */ var shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
		/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
		/* harmony import */ var react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);
		/* harmony import */ __webpack_require__(5);
		/* harmony import */ var _hydration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);
		/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */











		var cachedDisplayNames = new WeakMap(); // On large trees, encoding takes significant time.
		// Try to reuse the already encoded strings.

		var encodedStringCache = new lru_cache__WEBPACK_IMPORTED_MODULE_0___default.a({
		  max: 1000
		});
		function alphaSortKeys(a, b) {
		  if (a.toString() > b.toString()) {
		    return 1;
		  } else if (b.toString() > a.toString()) {
		    return -1;
		  } else {
		    return 0;
		  }
		}
		function getAllEnumerableKeys(obj) {
		  var keys = new Set();
		  var current = obj;

		  var _loop = function _loop() {
		    var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));
		    var descriptors = Object.getOwnPropertyDescriptors(current);
		    currentKeys.forEach(function (key) {
		      // $FlowFixMe: key can be a Symbol https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor
		      if (descriptors[key].enumerable) {
		        keys.add(key);
		      }
		    });
		    current = Object.getPrototypeOf(current);
		  };

		  while (current != null) {
		    _loop();
		  }

		  return keys;
		}
		function getDisplayName(type) {
		  var fallbackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Anonymous';
		  var nameFromCache = cachedDisplayNames.get(type);

		  if (nameFromCache != null) {
		    return nameFromCache;
		  }

		  var displayName = fallbackName; // The displayName property is not guaranteed to be a string.
		  // It's only safe to use for our purposes if it's a string.
		  // github.com/facebook/react-devtools/issues/803

		  if (typeof type.displayName === 'string') {
		    displayName = type.displayName;
		  } else if (typeof type.name === 'string' && type.name !== '') {
		    displayName = type.name;
		  }

		  cachedDisplayNames.set(type, displayName);
		  return displayName;
		}
		var uidCounter = 0;
		function getUID() {
		  return ++uidCounter;
		}
		function utfDecodeString(array) {
		  // Avoid spreading the array (e.g. String.fromCodePoint(...array))
		  // Functions arguments are first placed on the stack before the function is called
		  // which throws a RangeError for large arrays.
		  // See github.com/facebook/react/issues/22293
		  var string = '';

		  for (var i = 0; i < array.length; i++) {
		    var char = array[i];
		    string += String.fromCodePoint(char);
		  }

		  return string;
		}

		function surrogatePairToCodePoint(charCode1, charCode2) {
		  return ((charCode1 & 0x3ff) << 10) + (charCode2 & 0x3ff) + 0x10000;
		} // Credit for this encoding approach goes to Tim Down:
		// https://stackoverflow.com/questions/4877326/how-can-i-tell-if-a-string-contains-multibyte-characters-in-javascript


		function utfEncodeString(string) {
		  var cached = encodedStringCache.get(string);

		  if (cached !== undefined) {
		    return cached;
		  }

		  var encoded = [];
		  var i = 0;
		  var charCode;

		  while (i < string.length) {
		    charCode = string.charCodeAt(i); // Handle multibyte unicode characters (like emoji).

		    if ((charCode & 0xf800) === 0xd800) {
		      encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i)));
		    } else {
		      encoded.push(charCode);
		    }

		    ++i;
		  }

		  encodedStringCache.set(string, encoded);
		  return encoded;
		}
		function printOperationsArray(operations) {
		  // The first two values are always rendererID and rootID
		  var rendererID = operations[0];
		  var rootID = operations[1];
		  var logs = ["operations for renderer:".concat(rendererID, " and root:").concat(rootID)];
		  var i = 2; // Reassemble the string table.

		  var stringTable = [null // ID = 0 corresponds to the null string.
		  ];
		  var stringTableSize = operations[i++];
		  var stringTableEnd = i + stringTableSize;

		  while (i < stringTableEnd) {
		    var nextLength = operations[i++];
		    var nextString = utfDecodeString(operations.slice(i, i + nextLength));
		    stringTable.push(nextString);
		    i += nextLength;
		  }

		  while (i < operations.length) {
		    var operation = operations[i];

		    switch (operation) {
		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_ADD */ "l"]:
		        {
		          var _id = operations[i + 1];
		          var type = operations[i + 2];
		          i += 3;

		          if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[/* ElementTypeRoot */ "m"]) {
		            logs.push("Add new root node ".concat(_id));
		            i++; // isStrictModeCompliant

		            i++; // supportsProfiling

		            i++; // supportsStrictMode

		            i++; // hasOwnerMetadata
		          } else {
		            var parentID = operations[i];
		            i++;
		            i++; // ownerID

		            var displayNameStringID = operations[i];
		            var displayName = stringTable[displayNameStringID];
		            i++;
		            i++; // key

		            logs.push("Add node ".concat(_id, " (").concat(displayName || 'null', ") as child of ").concat(parentID));
		          }

		          break;
		        }

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_REMOVE */ "m"]:
		        {
		          var removeLength = operations[i + 1];
		          i += 2;

		          for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {
		            var _id2 = operations[i];
		            i += 1;
		            logs.push("Remove node ".concat(_id2));
		          }

		          break;
		        }

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_REMOVE_ROOT */ "n"]:
		        {
		          i += 1;
		          logs.push("Remove root ".concat(rootID));
		          break;
		        }

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_SET_SUBTREE_MODE */ "p"]:
		        {
		          var _id3 = operations[i + 1];
		          var mode = operations[i + 1];
		          i += 3;
		          logs.push("Mode ".concat(mode, " set for subtree with root ").concat(_id3));
		          break;
		        }

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_REORDER_CHILDREN */ "o"]:
		        {
		          var _id4 = operations[i + 1];
		          var numChildren = operations[i + 2];
		          i += 3;
		          var children = operations.slice(i, i + numChildren);
		          i += numChildren;
		          logs.push("Re-order node ".concat(_id4, " children ").concat(children.join(',')));
		          break;
		        }

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_UPDATE_TREE_BASE_DURATION */ "r"]:
		        // Base duration updates are only sent while profiling is in progress.
		        // We can ignore them at this point.
		        // The profiler UI uses them lazily in order to generate the tree.
		        i += 3;
		        break;

		      case _constants__WEBPACK_IMPORTED_MODULE_3__[/* TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS */ "q"]:
		        var id = operations[i + 1];
		        var numErrors = operations[i + 2];
		        var numWarnings = operations[i + 3];
		        i += 4;
		        logs.push("Node ".concat(id, " has ").concat(numErrors, " errors and ").concat(numWarnings, " warnings"));
		        break;

		      default:
		        throw Error("Unsupported Bridge operation \"".concat(operation, "\""));
		    }
		  }

		  console.log(logs.join('\n  '));
		}
		function getDefaultComponentFilters() {
		  return [{
		    type: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[/* ComponentFilterElementType */ "b"],
		    value: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[/* ElementTypeHostComponent */ "i"],
		    isEnabled: true
		  }];
		}
		function getInObject(object, path) {
		  return path.reduce(function (reduced, attr) {
		    if (reduced) {
		      if (hasOwnProperty.call(reduced, attr)) {
		        return reduced[attr];
		      }

		      if (typeof reduced[Symbol.iterator] === 'function') {
		        // Convert iterable to array and return array[index]
		        //
		        // TRICKY
		        // Don't use [...spread] syntax for this purpose.
		        // This project uses @babel/plugin-transform-spread in "loose" mode which only works with Array values.
		        // Other types (e.g. typed arrays, Sets) will not spread correctly.
		        return Array.from(reduced)[attr];
		      }
		    }

		    return null;
		  }, object);
		}
		function deletePathInObject(object, path) {
		  var length = path.length;
		  var last = path[length - 1];

		  if (object != null) {
		    var parent = getInObject(object, path.slice(0, length - 1));

		    if (parent) {
		      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(parent)) {
		        parent.splice(last, 1);
		      } else {
		        delete parent[last];
		      }
		    }
		  }
		}
		function renamePathInObject(object, oldPath, newPath) {
		  var length = oldPath.length;

		  if (object != null) {
		    var parent = getInObject(object, oldPath.slice(0, length - 1));

		    if (parent) {
		      var lastOld = oldPath[length - 1];
		      var lastNew = newPath[length - 1];
		      parent[lastNew] = parent[lastOld];

		      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(parent)) {
		        parent.splice(lastOld, 1);
		      } else {
		        delete parent[lastOld];
		      }
		    }
		  }
		}
		function setInObject(object, path, value) {
		  var length = path.length;
		  var last = path[length - 1];

		  if (object != null) {
		    var parent = getInObject(object, path.slice(0, length - 1));

		    if (parent) {
		      parent[last] = value;
		    }
		  }
		}

		/**
		 * Get a enhanced/artificial type string based on the object instance
		 */
		function getDataType(data) {
		  if (data === null) {
		    return 'null';
		  } else if (data === undefined) {
		    return 'undefined';
		  }

		  if (Object(react_is__WEBPACK_IMPORTED_MODULE_1__["isElement"])(data)) {
		    return 'react_element';
		  }

		  if (typeof HTMLElement !== 'undefined' && data instanceof HTMLElement) {
		    return 'html_element';
		  }

		  var type = _typeof(data);

		  switch (type) {
		    case 'bigint':
		      return 'bigint';

		    case 'boolean':
		      return 'boolean';

		    case 'function':
		      return 'function';

		    case 'number':
		      if (Number.isNaN(data)) {
		        return 'nan';
		      } else if (!Number.isFinite(data)) {
		        return 'infinity';
		      } else {
		        return 'number';
		      }

		    case 'object':
		      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(data)) {
		        return 'array';
		      } else if (ArrayBuffer.isView(data)) {
		        return hasOwnProperty.call(data.constructor, 'BYTES_PER_ELEMENT') ? 'typed_array' : 'data_view';
		      } else if (data.constructor && data.constructor.name === 'ArrayBuffer') {
		        // HACK This ArrayBuffer check is gross; is there a better way?
		        // We could try to create a new DataView with the value.
		        // If it doesn't error, we know it's an ArrayBuffer,
		        // but this seems kind of awkward and expensive.
		        return 'array_buffer';
		      } else if (typeof data[Symbol.iterator] === 'function') {
		        var iterator = data[Symbol.iterator]();

		        if (!iterator) ; else {
		          return iterator === data ? 'opaque_iterator' : 'iterator';
		        }
		      } else if (data.constructor && data.constructor.name === 'RegExp') {
		        return 'regexp';
		      } else {
		        var toStringValue = Object.prototype.toString.call(data);

		        if (toStringValue === '[object Date]') {
		          return 'date';
		        } else if (toStringValue === '[object HTMLAllCollection]') {
		          return 'html_all_collection';
		        }
		      }

		      return 'object';

		    case 'string':
		      return 'string';

		    case 'symbol':
		      return 'symbol';

		    case 'undefined':
		      if (Object.prototype.toString.call(data) === '[object HTMLAllCollection]') {
		        return 'html_all_collection';
		      }

		      return 'undefined';

		    default:
		      return 'unknown';
		  }
		}
		function getDisplayNameForReactElement(element) {
		  var elementType = Object(react_is__WEBPACK_IMPORTED_MODULE_1__["typeOf"])(element);

		  switch (elementType) {
		    case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextConsumer"]:
		      return 'ContextConsumer';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["ContextProvider"]:
		      return 'ContextProvider';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["ForwardRef"]:
		      return 'ForwardRef';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Fragment"]:
		      return 'Fragment';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Lazy"]:
		      return 'Lazy';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Memo"]:
		      return 'Memo';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Portal"]:
		      return 'Portal';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Profiler"]:
		      return 'Profiler';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["StrictMode"]:
		      return 'StrictMode';

		    case react_is__WEBPACK_IMPORTED_MODULE_1__["Suspense"]:
		      return 'Suspense';

		    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__[/* REACT_SUSPENSE_LIST_TYPE */ "a"]:
		      return 'SuspenseList';

		    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__[/* REACT_TRACING_MARKER_TYPE */ "b"]:
		      return 'TracingMarker';

		    default:
		      var type = element.type;

		      if (typeof type === 'string') {
		        return type;
		      } else if (typeof type === 'function') {
		        return getDisplayName(type, 'Anonymous');
		      } else if (type != null) {
		        return 'NotImplementedInDevtools';
		      } else {
		        return 'Element';
		      }

		  }
		}
		var MAX_PREVIEW_STRING_LENGTH = 50;

		function truncateForDisplay(string) {
		  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;

		  if (string.length > length) {
		    return string.substr(0, length) + '…';
		  } else {
		    return string;
		  }
		} // Attempts to mimic Chrome's inline preview for values.
		// For example, the following value...
		//   {
		//      foo: 123,
		//      bar: "abc",
		//      baz: [true, false],
		//      qux: { ab: 1, cd: 2 }
		//   };
		//
		// Would show a preview of...
		//   {foo: 123, bar: "abc", baz: Array(2), qux: {…}}
		//
		// And the following value...
		//   [
		//     123,
		//     "abc",
		//     [true, false],
		//     { foo: 123, bar: "abc" }
		//   ];
		//
		// Would show a preview of...
		//   [123, "abc", Array(2), {…}]


		function formatDataForPreview(data, showFormattedValue) {
		  if (data != null && hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__[/* meta */ "b"].type)) {
		    return showFormattedValue ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__[/* meta */ "b"].preview_long] : data[_hydration__WEBPACK_IMPORTED_MODULE_6__[/* meta */ "b"].preview_short];
		  }

		  var type = getDataType(data);

		  switch (type) {
		    case 'html_element':
		      return "<".concat(truncateForDisplay(data.tagName.toLowerCase()), " />");

		    case 'function':
		      return truncateForDisplay("\u0192 ".concat(typeof data.name === 'function' ? '' : data.name, "() {}"));

		    case 'string':
		      return "\"".concat(data, "\"");

		    case 'bigint':
		      return truncateForDisplay(data.toString() + 'n');

		    case 'regexp':
		      return truncateForDisplay(data.toString());

		    case 'symbol':
		      return truncateForDisplay(data.toString());

		    case 'react_element':
		      return "<".concat(truncateForDisplay(getDisplayNameForReactElement(data) || 'Unknown'), " />");

		    case 'array_buffer':
		      return "ArrayBuffer(".concat(data.byteLength, ")");

		    case 'data_view':
		      return "DataView(".concat(data.buffer.byteLength, ")");

		    case 'array':
		      if (showFormattedValue) {
		        var formatted = '';

		        for (var i = 0; i < data.length; i++) {
		          if (i > 0) {
		            formatted += ', ';
		          }

		          formatted += formatDataForPreview(data[i], false);

		          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
		            // Prevent doing a lot of unnecessary iteration...
		            break;
		          }
		        }

		        return "[".concat(truncateForDisplay(formatted), "]");
		      } else {
		        var length = hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__[/* meta */ "b"].size) ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__[/* meta */ "b"].size] : data.length;
		        return "Array(".concat(length, ")");
		      }

		    case 'typed_array':
		      var shortName = "".concat(data.constructor.name, "(").concat(data.length, ")");

		      if (showFormattedValue) {
		        var _formatted = '';

		        for (var _i = 0; _i < data.length; _i++) {
		          if (_i > 0) {
		            _formatted += ', ';
		          }

		          _formatted += data[_i];

		          if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {
		            // Prevent doing a lot of unnecessary iteration...
		            break;
		          }
		        }

		        return "".concat(shortName, " [").concat(truncateForDisplay(_formatted), "]");
		      } else {
		        return shortName;
		      }

		    case 'iterator':
		      var name = data.constructor.name;

		      if (showFormattedValue) {
		        // TRICKY
		        // Don't use [...spread] syntax for this purpose.
		        // This project uses @babel/plugin-transform-spread in "loose" mode which only works with Array values.
		        // Other types (e.g. typed arrays, Sets) will not spread correctly.
		        var array = Array.from(data);
		        var _formatted2 = '';

		        for (var _i2 = 0; _i2 < array.length; _i2++) {
		          var entryOrEntries = array[_i2];

		          if (_i2 > 0) {
		            _formatted2 += ', ';
		          } // TRICKY
		          // Browsers display Maps and Sets differently.
		          // To mimic their behavior, detect if we've been given an entries tuple.
		          //   Map(2) {"abc" => 123, "def" => 123}
		          //   Set(2) {"abc", 123}


		          if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(entryOrEntries)) {
		            var key = formatDataForPreview(entryOrEntries[0], true);
		            var value = formatDataForPreview(entryOrEntries[1], false);
		            _formatted2 += "".concat(key, " => ").concat(value);
		          } else {
		            _formatted2 += formatDataForPreview(entryOrEntries, false);
		          }

		          if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {
		            // Prevent doing a lot of unnecessary iteration...
		            break;
		          }
		        }

		        return "".concat(name, "(").concat(data.size, ") {").concat(truncateForDisplay(_formatted2), "}");
		      } else {
		        return "".concat(name, "(").concat(data.size, ")");
		      }

		    case 'opaque_iterator':
		      {
		        return data[Symbol.toStringTag];
		      }

		    case 'date':
		      return data.toString();

		    case 'object':
		      if (showFormattedValue) {
		        var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);
		        var _formatted3 = '';

		        for (var _i3 = 0; _i3 < keys.length; _i3++) {
		          var _key = keys[_i3];

		          if (_i3 > 0) {
		            _formatted3 += ', ';
		          }

		          _formatted3 += "".concat(_key.toString(), ": ").concat(formatDataForPreview(data[_key], false));

		          if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {
		            // Prevent doing a lot of unnecessary iteration...
		            break;
		          }
		        }

		        return "{".concat(truncateForDisplay(_formatted3), "}");
		      } else {
		        return '{…}';
		      }

		    case 'boolean':
		    case 'number':
		    case 'infinity':
		    case 'nan':
		    case 'null':
		    case 'undefined':
		      return data;

		    default:
		      try {
		        return truncateForDisplay(String(data));
		      } catch (error) {
		        return 'unserializable';
		      }

		  }
		}
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16)));

		/***/ }),
		/* 3 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CONCURRENT_MODE_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CONCURRENT_MODE_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CONTEXT_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return CONTEXT_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return SERVER_CONTEXT_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DEPRECATED_ASYNC_MODE_SYMBOL_STRING; });
		/* unused harmony export ELEMENT_NUMBER */
		/* unused harmony export ELEMENT_SYMBOL_STRING */
		/* unused harmony export DEBUG_TRACING_MODE_NUMBER */
		/* unused harmony export DEBUG_TRACING_MODE_SYMBOL_STRING */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return FORWARD_REF_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return FORWARD_REF_SYMBOL_STRING; });
		/* unused harmony export FRAGMENT_NUMBER */
		/* unused harmony export FRAGMENT_SYMBOL_STRING */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return LAZY_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return LAZY_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return MEMO_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return MEMO_SYMBOL_STRING; });
		/* unused harmony export PORTAL_NUMBER */
		/* unused harmony export PORTAL_SYMBOL_STRING */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return PROFILER_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return PROFILER_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return PROVIDER_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return PROVIDER_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return SCOPE_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return SCOPE_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return STRICT_MODE_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return STRICT_MODE_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return SUSPENSE_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return SUSPENSE_SYMBOL_STRING; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return SUSPENSE_LIST_NUMBER; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return SUSPENSE_LIST_SYMBOL_STRING; });
		/* unused harmony export SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING */
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// This list should be kept updated to reflect additions to 'shared/ReactSymbols'.
		// DevTools can't import symbols from 'shared/ReactSymbols' directly for two reasons:
		// 1. DevTools requires symbols which may have been deleted in more recent versions (e.g. concurrent mode)
		// 2. DevTools must support both Symbol and numeric forms of each symbol;
		//    Since e.g. standalone DevTools runs in a separate process, it can't rely on its own ES capabilities.
		var CONCURRENT_MODE_NUMBER = 0xeacf;
		var CONCURRENT_MODE_SYMBOL_STRING = 'Symbol(react.concurrent_mode)';
		var CONTEXT_NUMBER = 0xeace;
		var CONTEXT_SYMBOL_STRING = 'Symbol(react.context)';
		var SERVER_CONTEXT_SYMBOL_STRING = 'Symbol(react.server_context)';
		var DEPRECATED_ASYNC_MODE_SYMBOL_STRING = 'Symbol(react.async_mode)';
		var FORWARD_REF_NUMBER = 0xead0;
		var FORWARD_REF_SYMBOL_STRING = 'Symbol(react.forward_ref)';
		var LAZY_NUMBER = 0xead4;
		var LAZY_SYMBOL_STRING = 'Symbol(react.lazy)';
		var MEMO_NUMBER = 0xead3;
		var MEMO_SYMBOL_STRING = 'Symbol(react.memo)';
		var PROFILER_NUMBER = 0xead2;
		var PROFILER_SYMBOL_STRING = 'Symbol(react.profiler)';
		var PROVIDER_NUMBER = 0xeacd;
		var PROVIDER_SYMBOL_STRING = 'Symbol(react.provider)';
		var SCOPE_NUMBER = 0xead7;
		var SCOPE_SYMBOL_STRING = 'Symbol(react.scope)';
		var STRICT_MODE_NUMBER = 0xeacc;
		var STRICT_MODE_SYMBOL_STRING = 'Symbol(react.strict_mode)';
		var SUSPENSE_NUMBER = 0xead1;
		var SUSPENSE_SYMBOL_STRING = 'Symbol(react.suspense)';
		var SUSPENSE_LIST_NUMBER = 0xead8;
		var SUSPENSE_LIST_SYMBOL_STRING = 'Symbol(react.suspense_list)';

		/***/ }),
		/* 4 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cleanForBridge; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return copyToClipboard; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return copyWithDelete; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return copyWithRename; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return copyWithSet; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getEffectDurations; });
		/* unused harmony export serializeToString */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return formatWithStyles; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return format; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isSynchronousXHRSupported; });
		/* harmony import */ var clipboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
		/* harmony import */ var _hydration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
		/* harmony import */ var shared_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */



		function cleanForBridge(data, isPathAllowed) {
		  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

		  if (data !== null) {
		    var cleanedPaths = [];
		    var unserializablePaths = [];
		    var cleanedData = Object(_hydration__WEBPACK_IMPORTED_MODULE_1__[/* dehydrate */ "a"])(data, cleanedPaths, unserializablePaths, path, isPathAllowed);
		    return {
		      data: cleanedData,
		      cleaned: cleanedPaths,
		      unserializable: unserializablePaths
		    };
		  } else {
		    return null;
		  }
		}
		function copyToClipboard(value) {
		  var safeToCopy = serializeToString(value);
		  var text = safeToCopy === undefined ? 'undefined' : safeToCopy;
		  var clipboardCopyText = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText; // On Firefox navigator.clipboard.writeText has to be called from
		  // the content script js code (because it requires the clipboardWrite
		  // permission to be allowed out of a "user handling" callback),
		  // clipboardCopyText is an helper injected into the page from.
		  // injectGlobalHook.

		  if (typeof clipboardCopyText === 'function') {
		    clipboardCopyText(text).catch(function (err) {});
		  } else {
		    Object(clipboard_js__WEBPACK_IMPORTED_MODULE_0__["copy"])(text);
		  }
		}
		function copyWithDelete(obj, path) {
		  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
		  var key = path[index];
		  var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(obj) ? obj.slice() : _objectSpread({}, obj);

		  if (index + 1 === path.length) {
		    if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(updated)) {
		      updated.splice(key, 1);
		    } else {
		      delete updated[key];
		    }
		  } else {
		    // $FlowFixMe number or string is fine here
		    updated[key] = copyWithDelete(obj[key], path, index + 1);
		  }

		  return updated;
		} // This function expects paths to be the same except for the final value.
		// e.g. ['path', 'to', 'foo'] and ['path', 'to', 'bar']

		function copyWithRename(obj, oldPath, newPath) {
		  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
		  var oldKey = oldPath[index];
		  var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(obj) ? obj.slice() : _objectSpread({}, obj);

		  if (index + 1 === oldPath.length) {
		    var newKey = newPath[index]; // $FlowFixMe number or string is fine here

		    updated[newKey] = updated[oldKey];

		    if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(updated)) {
		      updated.splice(oldKey, 1);
		    } else {
		      delete updated[oldKey];
		    }
		  } else {
		    // $FlowFixMe number or string is fine here
		    updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);
		  }

		  return updated;
		}
		function copyWithSet(obj, path, value) {
		  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

		  if (index >= path.length) {
		    return value;
		  }

		  var key = path[index];
		  var updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(obj) ? obj.slice() : _objectSpread({}, obj); // $FlowFixMe number or string is fine here

		  updated[key] = copyWithSet(obj[key], path, value, index + 1);
		  return updated;
		}
		function getEffectDurations(root) {
		  // Profiling durations are only available for certain builds.
		  // If available, they'll be stored on the HostRoot.
		  var effectDuration = null;
		  var passiveEffectDuration = null;
		  var hostRoot = root.current;

		  if (hostRoot != null) {
		    var stateNode = hostRoot.stateNode;

		    if (stateNode != null) {
		      effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;
		      passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;
		    }
		  }

		  return {
		    effectDuration: effectDuration,
		    passiveEffectDuration: passiveEffectDuration
		  };
		}
		function serializeToString(data) {
		  var cache = new Set(); // Use a custom replacer function to protect against circular references.

		  return JSON.stringify(data, function (key, value) {
		    if (_typeof(value) === 'object' && value !== null) {
		      if (cache.has(value)) {
		        return;
		      }

		      cache.add(value);
		    } // $FlowFixMe


		    if (typeof value === 'bigint') {
		      return value.toString() + 'n';
		    }

		    return value;
		  });
		} // Formats an array of args with a style for console methods, using
		// the following algorithm:
		//     1. The first param is a string that contains %c
		//          - Bail out and return the args without modifying the styles.
		//            We don't want to affect styles that the developer deliberately set.
		//     2. The first param is a string that doesn't contain %c but contains
		//        string formatting
		//          - [`%c${args[0]}`, style, ...args.slice(1)]
		//          - Note: we assume that the string formatting that the developer uses
		//            is correct.
		//     3. The first param is a string that doesn't contain string formatting
		//        OR is not a string
		//          - Create a formatting string where:
		//                 boolean, string, symbol -> %s
		//                 number -> %f OR %i depending on if it's an int or float
		//                 default -> %o

		function formatWithStyles(inputArgs, style) {
		  if (inputArgs === undefined || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] !== 'string' || // Matches any of %c but not %%c
		  inputArgs[0].match(/([^%]|^)(%c)/g) || style === undefined) {
		    return inputArgs;
		  } // Matches any of %(o|O|d|i|s|f), but not %%(o|O|d|i|s|f)


		  var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;

		  if (inputArgs[0].match(REGEXP)) {
		    return ["%c".concat(inputArgs[0]), style].concat(_toConsumableArray(inputArgs.slice(1)));
		  } else {
		    var firstArg = inputArgs.reduce(function (formatStr, elem, i) {
		      if (i > 0) {
		        formatStr += ' ';
		      }

		      switch (_typeof(elem)) {
		        case 'string':
		        case 'boolean':
		        case 'symbol':
		          return formatStr += '%s';

		        case 'number':
		          var formatting = Number.isInteger(elem) ? '%i' : '%f';
		          return formatStr += formatting;

		        default:
		          return formatStr += '%o';
		      }
		    }, '%c');
		    return [firstArg, style].concat(_toConsumableArray(inputArgs));
		  }
		} // based on https://github.com/tmpfs/format-util/blob/0e62d430efb0a1c51448709abd3e2406c14d8401/format.js#L1
		// based on https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions
		// Implements s, d, i and f placeholders
		// NOTE: KEEP IN SYNC with src/hook.js

		function format(maybeMessage) {
		  for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    inputArgs[_key - 1] = arguments[_key];
		  }

		  var args = inputArgs.slice();
		  var formatted = String(maybeMessage); // If the first argument is a string, check for substitutions.

		  if (typeof maybeMessage === 'string') {
		    if (args.length) {
		      var REGEXP = /(%?)(%([jds]))/g;
		      formatted = formatted.replace(REGEXP, function (match, escaped, ptn, flag) {
		        var arg = args.shift();

		        switch (flag) {
		          case 's':
		            arg += '';
		            break;

		          case 'd':
		          case 'i':
		            arg = parseInt(arg, 10).toString();
		            break;

		          case 'f':
		            arg = parseFloat(arg).toString();
		            break;
		        }

		        if (!escaped) {
		          return arg;
		        }

		        args.unshift(arg);
		        return match;
		      });
		    }
		  } // Arguments that remain after formatting.


		  if (args.length) {
		    for (var i = 0; i < args.length; i++) {
		      formatted += ' ' + String(args[i]);
		    }
		  } // Update escaped %% values.


		  formatted = formatted.replace(/%{2,2}/g, '%');
		  return String(formatted);
		}
		function isSynchronousXHRSupported() {
		  return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature('sync-xhr'));
		}

		/***/ }),
		/* 5 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return localStorageGetItem; });
		/* unused harmony export localStorageRemoveItem */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return localStorageSetItem; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return sessionStorageGetItem; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return sessionStorageRemoveItem; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return sessionStorageSetItem; });
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		function localStorageGetItem(key) {
		  try {
		    return localStorage.getItem(key);
		  } catch (error) {
		    return null;
		  }
		}
		function localStorageSetItem(key, value) {
		  try {
		    return localStorage.setItem(key, value);
		  } catch (error) {}
		}
		function sessionStorageGetItem(key) {
		  try {
		    return sessionStorage.getItem(key);
		  } catch (error) {
		    return null;
		  }
		}
		function sessionStorageRemoveItem(key) {
		  try {
		    sessionStorage.removeItem(key);
		  } catch (error) {}
		}
		function sessionStorageSetItem(key, value) {
		  try {
		    return sessionStorage.setItem(key, value);
		  } catch (error) {}
		}

		/***/ }),
		/* 6 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		var isArray = Array.isArray;
		/* harmony default export */ __webpack_exports__["a"] = (isArray);

		/***/ }),
		/* 7 */
		/***/ (function(module, exports, __webpack_require__) {


		{
		  module.exports = __webpack_require__(26);
		}

		/***/ }),
		/* 8 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export isStringComponentStack */
		/* unused harmony export dangerous_setTargetConsoleForTesting */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return registerRenderer; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return patch; });
		/* unused harmony export unpatch */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return patchForStrictMode; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return unpatchForStrictMode; });
		/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
		/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
		/* harmony import */ var _DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21);
		/* harmony import */ var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */




		var OVERRIDE_CONSOLE_METHODS = ['error', 'trace', 'warn'];
		var DIMMED_NODE_CONSOLE_COLOR = '\x1b[2m%s\x1b[0m'; // React's custom built component stack strings match "\s{4}in"
		// Chrome's prefix matches "\s{4}at"

		var PREFIX_REGEX = /\s{4}(in|at)\s{1}/; // Firefox and Safari have no prefix ("")
		// but we can fallback to looking for location info (e.g. "foo.js:12:345")

		var ROW_COLUMN_NUMBER_REGEX = /:\d+:\d+(\n|$)/;
		function isStringComponentStack(text) {
		  return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);
		}
		var STYLE_DIRECTIVE_REGEX = /^%c/; // This function tells whether or not the arguments for a console
		// method has been overridden by the patchForStrictMode function.
		// If it has we'll need to do some special formatting of the arguments
		// so the console color stays consistent

		function isStrictModeOverride(args, method) {
		  return args.length >= 2 && STYLE_DIRECTIVE_REGEX.test(args[0]) && args[1] === "color: ".concat(getConsoleColor(method) || '');
		}

		function getConsoleColor(method) {
		  switch (method) {
		    case 'warn':
		      return consoleSettingsRef.browserTheme === 'light' ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";

		    case 'error':
		      return consoleSettingsRef.browserTheme === 'light' ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";

		    case 'log':
		    default:
		      return consoleSettingsRef.browserTheme === 'light' ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
		  }
		}

		var injectedRenderers = new Map();
		var targetConsole = console;

		var unpatchFn = null;
		var isNode = false;

		try {
		  isNode = undefined === global;
		} catch (error) {} // Enables e.g. Jest tests to inject a mock console object.
		// These internals will be used if the console is patched.
		// Injecting them separately allows the console to easily be patched or un-patched later (at runtime).

		function registerRenderer(renderer, onErrorOrWarning) {
		  var currentDispatcherRef = renderer.currentDispatcherRef,
		      getCurrentFiber = renderer.getCurrentFiber,
		      findFiberByHostInstance = renderer.findFiberByHostInstance,
		      version = renderer.version; // Ignore React v15 and older because they don't expose a component stack anyway.

		  if (typeof findFiberByHostInstance !== 'function') {
		    return;
		  } // currentDispatcherRef gets injected for v16.8+ to support hooks inspection.
		  // getCurrentFiber gets injected for v16.9+.


		  if (currentDispatcherRef != null && typeof getCurrentFiber === 'function') {
		    var _getInternalReactCons = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__[/* getInternalReactConstants */ "b"])(version),
		        ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork;

		    injectedRenderers.set(renderer, {
		      currentDispatcherRef: currentDispatcherRef,
		      getCurrentFiber: getCurrentFiber,
		      workTagMap: ReactTypeOfWork,
		      onErrorOrWarning: onErrorOrWarning
		    });
		  }
		}
		var consoleSettingsRef = {
		  appendComponentStack: false,
		  breakOnConsoleErrors: false,
		  showInlineWarningsAndErrors: false,
		  hideConsoleLogsInStrictMode: false,
		  browserTheme: 'dark'
		}; // Patches console methods to append component stack for the current fiber.
		// Call unpatch() to remove the injected behavior.

		function patch(_ref) {
		  var appendComponentStack = _ref.appendComponentStack,
		      breakOnConsoleErrors = _ref.breakOnConsoleErrors,
		      showInlineWarningsAndErrors = _ref.showInlineWarningsAndErrors,
		      hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode,
		      browserTheme = _ref.browserTheme;
		  // Settings may change after we've patched the console.
		  // Using a shared ref allows the patch function to read the latest values.
		  consoleSettingsRef.appendComponentStack = appendComponentStack;
		  consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;
		  consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;
		  consoleSettingsRef.hideConsoleLogsInStrictMode = hideConsoleLogsInStrictMode;
		  consoleSettingsRef.browserTheme = browserTheme;

		  if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
		    if (unpatchFn !== null) {
		      // Don't patch twice.
		      return;
		    }

		    var originalConsoleMethods = {};

		    unpatchFn = function unpatchFn() {
		      for (var _method2 in originalConsoleMethods) {
		        try {
		          // $FlowFixMe property error|warn is not writable.
		          targetConsole[_method2] = originalConsoleMethods[_method2];
		        } catch (error) {}
		      }
		    };

		    OVERRIDE_CONSOLE_METHODS.forEach(function (method) {
		      try {
		        var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ : targetConsole[method];

		        var overrideMethod = function overrideMethod() {
		          var shouldAppendWarningStack = false;

		          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		            args[_key] = arguments[_key];
		          }

		          if (method !== 'log') {
		            if (consoleSettingsRef.appendComponentStack) {
		              var lastArg = args.length > 0 ? args[args.length - 1] : null;
		              var alreadyHasComponentStack = typeof lastArg === 'string' && isStringComponentStack(lastArg); // If we are ever called with a string that already has a component stack,
		              // e.g. a React error/warning, don't append a second stack.

		              shouldAppendWarningStack = !alreadyHasComponentStack;
		            }
		          }

		          var shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method === 'error' || method === 'warn'); // Search for the first renderer that has a current Fiber.
		          // We don't handle the edge case of stacks for more than one (e.g. interleaved renderers?)
		          // eslint-disable-next-line no-for-of-loops/no-for-of-loops

		          var _iterator = _createForOfIteratorHelper(injectedRenderers.values()),
		              _step;

		          try {
		            for (_iterator.s(); !(_step = _iterator.n()).done;) {
		              var _step$value = _step.value,
		                  currentDispatcherRef = _step$value.currentDispatcherRef,
		                  getCurrentFiber = _step$value.getCurrentFiber,
		                  onErrorOrWarning = _step$value.onErrorOrWarning,
		                  workTagMap = _step$value.workTagMap;
		              var current = getCurrentFiber();

		              if (current != null) {
		                try {
		                  if (shouldShowInlineWarningsAndErrors) {
		                    // patch() is called by two places: (1) the hook and (2) the renderer backend.
		                    // The backend is what implements a message queue, so it's the only one that injects onErrorOrWarning.
		                    if (typeof onErrorOrWarning === 'function') {
		                      onErrorOrWarning(current, method, // Copy args before we mutate them (e.g. adding the component stack)
		                      args.slice());
		                    }
		                  }

		                  if (shouldAppendWarningStack) {
		                    var componentStack = Object(_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__[/* getStackByFiberInDevAndProd */ "a"])(workTagMap, current, currentDispatcherRef);

		                    if (componentStack !== '') {
		                      if (isStrictModeOverride(args, method)) {
		                        args[0] = "".concat(args[0], " %s");
		                        args.push(componentStack);
		                      } else {
		                        args.push(componentStack);
		                      }
		                    }
		                  }
		                } catch (error) {
		                  // Don't let a DevTools or React internal error interfere with logging.
		                  setTimeout(function () {
		                    throw error;
		                  }, 0);
		                } finally {
		                  break;
		                }
		              }
		            }
		          } catch (err) {
		            _iterator.e(err);
		          } finally {
		            _iterator.f();
		          }

		          if (consoleSettingsRef.breakOnConsoleErrors) {
		            // --- Welcome to debugging with React DevTools ---
		            // This debugger statement means that you've enabled the "break on warnings" feature.
		            // Use the browser's Call Stack panel to step out of this override function-
		            // to where the original warning or error was logged.
		            // eslint-disable-next-line no-debugger
		            debugger;
		          }

		          originalMethod.apply(void 0, args);
		        };

		        overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;
		        originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod; // $FlowFixMe property error|warn is not writable.

		        targetConsole[method] = overrideMethod;
		      } catch (error) {}
		    });
		  } else {
		    unpatch();
		  }
		} // Removed component stack patch from console methods.

		function unpatch() {
		  if (unpatchFn !== null) {
		    unpatchFn();
		    unpatchFn = null;
		  }
		}
		var unpatchForStrictModeFn = null; // NOTE: KEEP IN SYNC with src/hook.js:patchConsoleForInitialRenderInStrictMode

		function patchForStrictMode() {
		  if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__[/* consoleManagedByDevToolsDuringStrictMode */ "a"]) {
		    var overrideConsoleMethods = ['error', 'trace', 'warn', 'log'];

		    if (unpatchForStrictModeFn !== null) {
		      // Don't patch twice.
		      return;
		    }

		    var originalConsoleMethods = {};

		    unpatchForStrictModeFn = function unpatchForStrictModeFn() {
		      for (var _method3 in originalConsoleMethods) {
		        try {
		          // $FlowFixMe property error|warn is not writable.
		          targetConsole[_method3] = originalConsoleMethods[_method3];
		        } catch (error) {}
		      }
		    };

		    overrideConsoleMethods.forEach(function (method) {
		      try {
		        var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method];

		        var overrideMethod = function overrideMethod() {
		          if (!consoleSettingsRef.hideConsoleLogsInStrictMode) {
		            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		              args[_key2] = arguments[_key2];
		            }

		            // Dim the text color of the double logs if we're not
		            // hiding them.
		            if (isNode) {
		              originalMethod(DIMMED_NODE_CONSOLE_COLOR, _utils__WEBPACK_IMPORTED_MODULE_0__[/* format */ "f"].apply(void 0, args));
		            } else {
		              var color = getConsoleColor(method);

		              if (color) {
		                originalMethod.apply(void 0, _toConsumableArray(Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatWithStyles */ "g"])(args, "color: ".concat(color))));
		              } else {
		                throw Error('Console color is not defined');
		              }
		            }
		          }
		        };

		        overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
		        originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod; // $FlowFixMe property error|warn is not writable.

		        targetConsole[method] = overrideMethod;
		      } catch (error) {}
		    });
		  }
		} // NOTE: KEEP IN SYNC with src/hook.js:unpatchConsoleForInitialRenderInStrictMode

		function unpatchForStrictMode() {
		  if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__[/* consoleManagedByDevToolsDuringStrictMode */ "a"]) {
		    if (unpatchForStrictModeFn !== null) {
		      unpatchForStrictModeFn();
		      unpatchForStrictModeFn = null;
		    }
		  }
		}
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13)));

		/***/ }),
		/* 9 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		/* harmony default export */ __webpack_exports__["a"] = (isArray);

		/***/ }),
		/* 10 */
		/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		exports = module.exports = SemVer;
		var debug;
		/* istanbul ignore next */

		if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
		  debug = function debug() {
		    var args = Array.prototype.slice.call(arguments, 0);
		    args.unshift('SEMVER');
		    console.log.apply(console, args);
		  };
		} else {
		  debug = function debug() {};
		} // Note: this is the semver.org version of the spec that it implements
		// Not necessarily the package version of this code.


		exports.SEMVER_SPEC_VERSION = '2.0.0';
		var MAX_LENGTH = 256;
		var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
		/* istanbul ignore next */
		9007199254740991; // Max safe segment length for coercion.

		var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re

		var re = exports.re = [];
		var src = exports.src = [];
		var t = exports.tokens = {};
		var R = 0;

		function tok(n) {
		  t[n] = R++;
		} // The following Regular Expressions can be used for tokenizing,
		// validating, and parsing SemVer version strings.
		// ## Numeric Identifier
		// A single `0`, or a non-zero digit followed by zero or more digits.


		tok('NUMERICIDENTIFIER');
		src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
		tok('NUMERICIDENTIFIERLOOSE');
		src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier
		// Zero or more digits, followed by a letter or hyphen, and then zero or
		// more letters, digits, or hyphens.

		tok('NONNUMERICIDENTIFIER');
		src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version
		// Three dot-separated numeric identifiers.

		tok('MAINVERSION');
		src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';
		tok('MAINVERSIONLOOSE');
		src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier
		// A numeric identifier, or a non-numeric identifier.

		tok('PRERELEASEIDENTIFIER');
		src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
		tok('PRERELEASEIDENTIFIERLOOSE');
		src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version
		// Hyphen, followed by one or more dot-separated pre-release version
		// identifiers.

		tok('PRERELEASE');
		src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';
		tok('PRERELEASELOOSE');
		src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier
		// Any combination of digits, letters, or hyphens.

		tok('BUILDIDENTIFIER');
		src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata
		// Plus sign, followed by one or more period-separated build metadata
		// identifiers.

		tok('BUILD');
		src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))'; // ## Full Version String
		// A main version, followed optionally by a pre-release version and
		// build metadata.
		// Note that the only major, minor, patch, and pre-release sections of
		// the version string are capturing groups.  The build metadata is not a
		// capturing group, because it should not ever be used in version
		// comparison.

		tok('FULL');
		tok('FULLPLAIN');
		src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';
		src[t.FULL] = '^' + src[t.FULLPLAIN] + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
		// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
		// common in the npm registry.

		tok('LOOSEPLAIN');
		src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';
		tok('LOOSE');
		src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';
		tok('GTLT');
		src[t.GTLT] = '((?:<|>)?=?)'; // Something like "2.*" or "1.2.x".
		// Note that "x.x" is a valid xRange identifer, meaning "any version"
		// Only the first item is strictly required.

		tok('XRANGEIDENTIFIERLOOSE');
		src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
		tok('XRANGEIDENTIFIER');
		src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';
		tok('XRANGEPLAIN');
		src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';
		tok('XRANGEPLAINLOOSE');
		src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';
		tok('XRANGE');
		src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
		tok('XRANGELOOSE');
		src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$'; // Coercion.
		// Extract anything that could conceivably be a part of a valid semver

		tok('COERCE');
		src[t.COERCE] = '(^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])';
		tok('COERCERTL');
		re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g'); // Tilde ranges.
		// Meaning is "reasonably at or greater than"

		tok('LONETILDE');
		src[t.LONETILDE] = '(?:~>?)';
		tok('TILDETRIM');
		src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
		re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
		var tildeTrimReplace = '$1~';
		tok('TILDE');
		src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
		tok('TILDELOOSE');
		src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'; // Caret ranges.
		// Meaning is "at least and backwards compatible with"

		tok('LONECARET');
		src[t.LONECARET] = '(?:\\^)';
		tok('CARETTRIM');
		src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
		re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
		var caretTrimReplace = '$1^';
		tok('CARET');
		src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
		tok('CARETLOOSE');
		src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just "" to indicate "any version"

		tok('COMPARATORLOOSE');
		src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
		tok('COMPARATOR');
		src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing
		// it modifies, so that `> 1.2.3` ==> `>1.2.3`

		tok('COMPARATORTRIM');
		src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'; // this one has to use the /g flag

		re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
		var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
		// Note that these all use the loose form, because they'll be
		// checked against either the strict or loose comparator form
		// later.

		tok('HYPHENRANGE');
		src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\s*$';
		tok('HYPHENRANGELOOSE');
		src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s*$'; // Star ranges basically just allow anything at all.

		tok('STAR');
		src[t.STAR] = '(<|>)?=?\\s*\\*'; // Compile to actual regexp objects.
		// All are flag-free, unless they were created above with a flag.

		for (var i = 0; i < R; i++) {
		  debug(i, src[i]);

		  if (!re[i]) {
		    re[i] = new RegExp(src[i]);
		  }
		}

		exports.parse = parse;

		function parse(version, options) {
		  if (!options || _typeof(options) !== 'object') {
		    options = {
		      loose: !!options,
		      includePrerelease: false
		    };
		  }

		  if (version instanceof SemVer) {
		    return version;
		  }

		  if (typeof version !== 'string') {
		    return null;
		  }

		  if (version.length > MAX_LENGTH) {
		    return null;
		  }

		  var r = options.loose ? re[t.LOOSE] : re[t.FULL];

		  if (!r.test(version)) {
		    return null;
		  }

		  try {
		    return new SemVer(version, options);
		  } catch (er) {
		    return null;
		  }
		}

		exports.valid = valid;

		function valid(version, options) {
		  var v = parse(version, options);
		  return v ? v.version : null;
		}

		exports.clean = clean;

		function clean(version, options) {
		  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
		  return s ? s.version : null;
		}

		exports.SemVer = SemVer;

		function SemVer(version, options) {
		  if (!options || _typeof(options) !== 'object') {
		    options = {
		      loose: !!options,
		      includePrerelease: false
		    };
		  }

		  if (version instanceof SemVer) {
		    if (version.loose === options.loose) {
		      return version;
		    } else {
		      version = version.version;
		    }
		  } else if (typeof version !== 'string') {
		    throw new TypeError('Invalid Version: ' + version);
		  }

		  if (version.length > MAX_LENGTH) {
		    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
		  }

		  if (!(this instanceof SemVer)) {
		    return new SemVer(version, options);
		  }

		  debug('SemVer', version, options);
		  this.options = options;
		  this.loose = !!options.loose;
		  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

		  if (!m) {
		    throw new TypeError('Invalid Version: ' + version);
		  }

		  this.raw = version; // these are actually numbers

		  this.major = +m[1];
		  this.minor = +m[2];
		  this.patch = +m[3];

		  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
		    throw new TypeError('Invalid major version');
		  }

		  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
		    throw new TypeError('Invalid minor version');
		  }

		  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
		    throw new TypeError('Invalid patch version');
		  } // numberify any prerelease numeric ids


		  if (!m[4]) {
		    this.prerelease = [];
		  } else {
		    this.prerelease = m[4].split('.').map(function (id) {
		      if (/^[0-9]+$/.test(id)) {
		        var num = +id;

		        if (num >= 0 && num < MAX_SAFE_INTEGER) {
		          return num;
		        }
		      }

		      return id;
		    });
		  }

		  this.build = m[5] ? m[5].split('.') : [];
		  this.format();
		}

		SemVer.prototype.format = function () {
		  this.version = this.major + '.' + this.minor + '.' + this.patch;

		  if (this.prerelease.length) {
		    this.version += '-' + this.prerelease.join('.');
		  }

		  return this.version;
		};

		SemVer.prototype.toString = function () {
		  return this.version;
		};

		SemVer.prototype.compare = function (other) {
		  debug('SemVer.compare', this.version, this.options, other);

		  if (!(other instanceof SemVer)) {
		    other = new SemVer(other, this.options);
		  }

		  return this.compareMain(other) || this.comparePre(other);
		};

		SemVer.prototype.compareMain = function (other) {
		  if (!(other instanceof SemVer)) {
		    other = new SemVer(other, this.options);
		  }

		  return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
		};

		SemVer.prototype.comparePre = function (other) {
		  if (!(other instanceof SemVer)) {
		    other = new SemVer(other, this.options);
		  } // NOT having a prerelease is > having one


		  if (this.prerelease.length && !other.prerelease.length) {
		    return -1;
		  } else if (!this.prerelease.length && other.prerelease.length) {
		    return 1;
		  } else if (!this.prerelease.length && !other.prerelease.length) {
		    return 0;
		  }

		  var i = 0;

		  do {
		    var a = this.prerelease[i];
		    var b = other.prerelease[i];
		    debug('prerelease compare', i, a, b);

		    if (a === undefined && b === undefined) {
		      return 0;
		    } else if (b === undefined) {
		      return 1;
		    } else if (a === undefined) {
		      return -1;
		    } else if (a === b) {
		      continue;
		    } else {
		      return compareIdentifiers(a, b);
		    }
		  } while (++i);
		};

		SemVer.prototype.compareBuild = function (other) {
		  if (!(other instanceof SemVer)) {
		    other = new SemVer(other, this.options);
		  }

		  var i = 0;

		  do {
		    var a = this.build[i];
		    var b = other.build[i];
		    debug('prerelease compare', i, a, b);

		    if (a === undefined && b === undefined) {
		      return 0;
		    } else if (b === undefined) {
		      return 1;
		    } else if (a === undefined) {
		      return -1;
		    } else if (a === b) {
		      continue;
		    } else {
		      return compareIdentifiers(a, b);
		    }
		  } while (++i);
		}; // preminor will bump the version up to the next minor release, and immediately
		// down to pre-release. premajor and prepatch work the same way.


		SemVer.prototype.inc = function (release, identifier) {
		  switch (release) {
		    case 'premajor':
		      this.prerelease.length = 0;
		      this.patch = 0;
		      this.minor = 0;
		      this.major++;
		      this.inc('pre', identifier);
		      break;

		    case 'preminor':
		      this.prerelease.length = 0;
		      this.patch = 0;
		      this.minor++;
		      this.inc('pre', identifier);
		      break;

		    case 'prepatch':
		      // If this is already a prerelease, it will bump to the next version
		      // drop any prereleases that might already exist, since they are not
		      // relevant at this point.
		      this.prerelease.length = 0;
		      this.inc('patch', identifier);
		      this.inc('pre', identifier);
		      break;
		    // If the input is a non-prerelease version, this acts the same as
		    // prepatch.

		    case 'prerelease':
		      if (this.prerelease.length === 0) {
		        this.inc('patch', identifier);
		      }

		      this.inc('pre', identifier);
		      break;

		    case 'major':
		      // If this is a pre-major version, bump up to the same major version.
		      // Otherwise increment major.
		      // 1.0.0-5 bumps to 1.0.0
		      // 1.1.0 bumps to 2.0.0
		      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
		        this.major++;
		      }

		      this.minor = 0;
		      this.patch = 0;
		      this.prerelease = [];
		      break;

		    case 'minor':
		      // If this is a pre-minor version, bump up to the same minor version.
		      // Otherwise increment minor.
		      // 1.2.0-5 bumps to 1.2.0
		      // 1.2.1 bumps to 1.3.0
		      if (this.patch !== 0 || this.prerelease.length === 0) {
		        this.minor++;
		      }

		      this.patch = 0;
		      this.prerelease = [];
		      break;

		    case 'patch':
		      // If this is not a pre-release version, it will increment the patch.
		      // If it is a pre-release it will bump up to the same patch version.
		      // 1.2.0-5 patches to 1.2.0
		      // 1.2.0 patches to 1.2.1
		      if (this.prerelease.length === 0) {
		        this.patch++;
		      }

		      this.prerelease = [];
		      break;
		    // This probably shouldn't be used publicly.
		    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

		    case 'pre':
		      if (this.prerelease.length === 0) {
		        this.prerelease = [0];
		      } else {
		        var i = this.prerelease.length;

		        while (--i >= 0) {
		          if (typeof this.prerelease[i] === 'number') {
		            this.prerelease[i]++;
		            i = -2;
		          }
		        }

		        if (i === -1) {
		          // didn't increment anything
		          this.prerelease.push(0);
		        }
		      }

		      if (identifier) {
		        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
		        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
		        if (this.prerelease[0] === identifier) {
		          if (isNaN(this.prerelease[1])) {
		            this.prerelease = [identifier, 0];
		          }
		        } else {
		          this.prerelease = [identifier, 0];
		        }
		      }

		      break;

		    default:
		      throw new Error('invalid increment argument: ' + release);
		  }

		  this.format();
		  this.raw = this.version;
		  return this;
		};

		exports.inc = inc;

		function inc(version, release, loose, identifier) {
		  if (typeof loose === 'string') {
		    identifier = loose;
		    loose = undefined;
		  }

		  try {
		    return new SemVer(version, loose).inc(release, identifier).version;
		  } catch (er) {
		    return null;
		  }
		}

		exports.diff = diff;

		function diff(version1, version2) {
		  if (eq(version1, version2)) {
		    return null;
		  } else {
		    var v1 = parse(version1);
		    var v2 = parse(version2);
		    var prefix = '';

		    if (v1.prerelease.length || v2.prerelease.length) {
		      prefix = 'pre';
		      var defaultResult = 'prerelease';
		    }

		    for (var key in v1) {
		      if (key === 'major' || key === 'minor' || key === 'patch') {
		        if (v1[key] !== v2[key]) {
		          return prefix + key;
		        }
		      }
		    }

		    return defaultResult; // may be undefined
		  }
		}

		exports.compareIdentifiers = compareIdentifiers;
		var numeric = /^[0-9]+$/;

		function compareIdentifiers(a, b) {
		  var anum = numeric.test(a);
		  var bnum = numeric.test(b);

		  if (anum && bnum) {
		    a = +a;
		    b = +b;
		  }

		  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
		}

		exports.rcompareIdentifiers = rcompareIdentifiers;

		function rcompareIdentifiers(a, b) {
		  return compareIdentifiers(b, a);
		}

		exports.major = major;

		function major(a, loose) {
		  return new SemVer(a, loose).major;
		}

		exports.minor = minor;

		function minor(a, loose) {
		  return new SemVer(a, loose).minor;
		}

		exports.patch = patch;

		function patch(a, loose) {
		  return new SemVer(a, loose).patch;
		}

		exports.compare = compare;

		function compare(a, b, loose) {
		  return new SemVer(a, loose).compare(new SemVer(b, loose));
		}

		exports.compareLoose = compareLoose;

		function compareLoose(a, b) {
		  return compare(a, b, true);
		}

		exports.compareBuild = compareBuild;

		function compareBuild(a, b, loose) {
		  var versionA = new SemVer(a, loose);
		  var versionB = new SemVer(b, loose);
		  return versionA.compare(versionB) || versionA.compareBuild(versionB);
		}

		exports.rcompare = rcompare;

		function rcompare(a, b, loose) {
		  return compare(b, a, loose);
		}

		exports.sort = sort;

		function sort(list, loose) {
		  return list.sort(function (a, b) {
		    return exports.compareBuild(a, b, loose);
		  });
		}

		exports.rsort = rsort;

		function rsort(list, loose) {
		  return list.sort(function (a, b) {
		    return exports.compareBuild(b, a, loose);
		  });
		}

		exports.gt = gt;

		function gt(a, b, loose) {
		  return compare(a, b, loose) > 0;
		}

		exports.lt = lt;

		function lt(a, b, loose) {
		  return compare(a, b, loose) < 0;
		}

		exports.eq = eq;

		function eq(a, b, loose) {
		  return compare(a, b, loose) === 0;
		}

		exports.neq = neq;

		function neq(a, b, loose) {
		  return compare(a, b, loose) !== 0;
		}

		exports.gte = gte;

		function gte(a, b, loose) {
		  return compare(a, b, loose) >= 0;
		}

		exports.lte = lte;

		function lte(a, b, loose) {
		  return compare(a, b, loose) <= 0;
		}

		exports.cmp = cmp;

		function cmp(a, op, b, loose) {
		  switch (op) {
		    case '===':
		      if (_typeof(a) === 'object') a = a.version;
		      if (_typeof(b) === 'object') b = b.version;
		      return a === b;

		    case '!==':
		      if (_typeof(a) === 'object') a = a.version;
		      if (_typeof(b) === 'object') b = b.version;
		      return a !== b;

		    case '':
		    case '=':
		    case '==':
		      return eq(a, b, loose);

		    case '!=':
		      return neq(a, b, loose);

		    case '>':
		      return gt(a, b, loose);

		    case '>=':
		      return gte(a, b, loose);

		    case '<':
		      return lt(a, b, loose);

		    case '<=':
		      return lte(a, b, loose);

		    default:
		      throw new TypeError('Invalid operator: ' + op);
		  }
		}

		exports.Comparator = Comparator;

		function Comparator(comp, options) {
		  if (!options || _typeof(options) !== 'object') {
		    options = {
		      loose: !!options,
		      includePrerelease: false
		    };
		  }

		  if (comp instanceof Comparator) {
		    if (comp.loose === !!options.loose) {
		      return comp;
		    } else {
		      comp = comp.value;
		    }
		  }

		  if (!(this instanceof Comparator)) {
		    return new Comparator(comp, options);
		  }

		  debug('comparator', comp, options);
		  this.options = options;
		  this.loose = !!options.loose;
		  this.parse(comp);

		  if (this.semver === ANY) {
		    this.value = '';
		  } else {
		    this.value = this.operator + this.semver.version;
		  }

		  debug('comp', this);
		}

		var ANY = {};

		Comparator.prototype.parse = function (comp) {
		  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
		  var m = comp.match(r);

		  if (!m) {
		    throw new TypeError('Invalid comparator: ' + comp);
		  }

		  this.operator = m[1] !== undefined ? m[1] : '';

		  if (this.operator === '=') {
		    this.operator = '';
		  } // if it literally is just '>' or '' then allow anything.


		  if (!m[2]) {
		    this.semver = ANY;
		  } else {
		    this.semver = new SemVer(m[2], this.options.loose);
		  }
		};

		Comparator.prototype.toString = function () {
		  return this.value;
		};

		Comparator.prototype.test = function (version) {
		  debug('Comparator.test', version, this.options.loose);

		  if (this.semver === ANY || version === ANY) {
		    return true;
		  }

		  if (typeof version === 'string') {
		    try {
		      version = new SemVer(version, this.options);
		    } catch (er) {
		      return false;
		    }
		  }

		  return cmp(version, this.operator, this.semver, this.options);
		};

		Comparator.prototype.intersects = function (comp, options) {
		  if (!(comp instanceof Comparator)) {
		    throw new TypeError('a Comparator is required');
		  }

		  if (!options || _typeof(options) !== 'object') {
		    options = {
		      loose: !!options,
		      includePrerelease: false
		    };
		  }

		  var rangeTmp;

		  if (this.operator === '') {
		    if (this.value === '') {
		      return true;
		    }

		    rangeTmp = new Range(comp.value, options);
		    return satisfies(this.value, rangeTmp, options);
		  } else if (comp.operator === '') {
		    if (comp.value === '') {
		      return true;
		    }

		    rangeTmp = new Range(this.value, options);
		    return satisfies(comp.semver, rangeTmp, options);
		  }

		  var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
		  var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
		  var sameSemVer = this.semver.version === comp.semver.version;
		  var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
		  var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
		  var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
		  return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
		};

		exports.Range = Range;

		function Range(range, options) {
		  if (!options || _typeof(options) !== 'object') {
		    options = {
		      loose: !!options,
		      includePrerelease: false
		    };
		  }

		  if (range instanceof Range) {
		    if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
		      return range;
		    } else {
		      return new Range(range.raw, options);
		    }
		  }

		  if (range instanceof Comparator) {
		    return new Range(range.value, options);
		  }

		  if (!(this instanceof Range)) {
		    return new Range(range, options);
		  }

		  this.options = options;
		  this.loose = !!options.loose;
		  this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

		  this.raw = range;
		  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
		    return this.parseRange(range.trim());
		  }, this).filter(function (c) {
		    // throw out any that are not relevant for whatever reason
		    return c.length;
		  });

		  if (!this.set.length) {
		    throw new TypeError('Invalid SemVer Range: ' + range);
		  }

		  this.format();
		}

		Range.prototype.format = function () {
		  this.range = this.set.map(function (comps) {
		    return comps.join(' ').trim();
		  }).join('||').trim();
		  return this.range;
		};

		Range.prototype.toString = function () {
		  return this.range;
		};

		Range.prototype.parseRange = function (range) {
		  var loose = this.options.loose;
		  range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

		  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
		  range = range.replace(hr, hyphenReplace);
		  debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

		  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
		  debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

		  range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

		  range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces

		  range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
		  // ready to be split into comparators.

		  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
		  var set = range.split(' ').map(function (comp) {
		    return parseComparator(comp, this.options);
		  }, this).join(' ').split(/\s+/);

		  if (this.options.loose) {
		    // in loose mode, throw out any that are not valid comparators
		    set = set.filter(function (comp) {
		      return !!comp.match(compRe);
		    });
		  }

		  set = set.map(function (comp) {
		    return new Comparator(comp, this.options);
		  }, this);
		  return set;
		};

		Range.prototype.intersects = function (range, options) {
		  if (!(range instanceof Range)) {
		    throw new TypeError('a Range is required');
		  }

		  return this.set.some(function (thisComparators) {
		    return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
		      return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
		        return rangeComparators.every(function (rangeComparator) {
		          return thisComparator.intersects(rangeComparator, options);
		        });
		      });
		    });
		  });
		}; // take a set of comparators and determine whether there
		// exists a version which can satisfy it


		function isSatisfiable(comparators, options) {
		  var result = true;
		  var remainingComparators = comparators.slice();
		  var testComparator = remainingComparators.pop();

		  while (result && remainingComparators.length) {
		    result = remainingComparators.every(function (otherComparator) {
		      return testComparator.intersects(otherComparator, options);
		    });
		    testComparator = remainingComparators.pop();
		  }

		  return result;
		} // Mostly just for testing and legacy API reasons


		exports.toComparators = toComparators;

		function toComparators(range, options) {
		  return new Range(range, options).set.map(function (comp) {
		    return comp.map(function (c) {
		      return c.value;
		    }).join(' ').trim().split(' ');
		  });
		} // comprised of xranges, tildes, stars, and gtlt's at this point.
		// already replaced the hyphen ranges
		// turn into a set of JUST comparators.


		function parseComparator(comp, options) {
		  debug('comp', comp, options);
		  comp = replaceCarets(comp, options);
		  debug('caret', comp);
		  comp = replaceTildes(comp, options);
		  debug('tildes', comp);
		  comp = replaceXRanges(comp, options);
		  debug('xrange', comp);
		  comp = replaceStars(comp, options);
		  debug('stars', comp);
		  return comp;
		}

		function isX(id) {
		  return !id || id.toLowerCase() === 'x' || id === '*';
		} // ~, ~> --> * (any, kinda silly)
		// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
		// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
		// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
		// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
		// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0


		function replaceTildes(comp, options) {
		  return comp.trim().split(/\s+/).map(function (comp) {
		    return replaceTilde(comp, options);
		  }).join(' ');
		}

		function replaceTilde(comp, options) {
		  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
		  return comp.replace(r, function (_, M, m, p, pr) {
		    debug('tilde', comp, _, M, m, p, pr);
		    var ret;

		    if (isX(M)) {
		      ret = '';
		    } else if (isX(m)) {
		      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
		    } else if (isX(p)) {
		      // ~1.2 == >=1.2.0 <1.3.0
		      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
		    } else if (pr) {
		      debug('replaceTilde pr', pr);
		      ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
		    } else {
		      // ~1.2.3 == >=1.2.3 <1.3.0
		      ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
		    }

		    debug('tilde return', ret);
		    return ret;
		  });
		} // ^ --> * (any, kinda silly)
		// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
		// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
		// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
		// ^1.2.3 --> >=1.2.3 <2.0.0
		// ^1.2.0 --> >=1.2.0 <2.0.0


		function replaceCarets(comp, options) {
		  return comp.trim().split(/\s+/).map(function (comp) {
		    return replaceCaret(comp, options);
		  }).join(' ');
		}

		function replaceCaret(comp, options) {
		  debug('caret', comp, options);
		  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
		  return comp.replace(r, function (_, M, m, p, pr) {
		    debug('caret', comp, _, M, m, p, pr);
		    var ret;

		    if (isX(M)) {
		      ret = '';
		    } else if (isX(m)) {
		      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
		    } else if (isX(p)) {
		      if (M === '0') {
		        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
		      } else {
		        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
		      }
		    } else if (pr) {
		      debug('replaceCaret pr', pr);

		      if (M === '0') {
		        if (m === '0') {
		          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
		        } else {
		          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
		        }
		      } else {
		        ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
		      }
		    } else {
		      debug('no pr');

		      if (M === '0') {
		        if (m === '0') {
		          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
		        } else {
		          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
		        }
		      } else {
		        ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
		      }
		    }

		    debug('caret return', ret);
		    return ret;
		  });
		}

		function replaceXRanges(comp, options) {
		  debug('replaceXRanges', comp, options);
		  return comp.split(/\s+/).map(function (comp) {
		    return replaceXRange(comp, options);
		  }).join(' ');
		}

		function replaceXRange(comp, options) {
		  comp = comp.trim();
		  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
		  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
		    debug('xRange', comp, ret, gtlt, M, m, p, pr);
		    var xM = isX(M);
		    var xm = xM || isX(m);
		    var xp = xm || isX(p);
		    var anyX = xp;

		    if (gtlt === '=' && anyX) {
		      gtlt = '';
		    } // if we're including prereleases in the match, then we need
		    // to fix this to -0, the lowest possible prerelease value


		    pr = options.includePrerelease ? '-0' : '';

		    if (xM) {
		      if (gtlt === '>' || gtlt === '<') {
		        // nothing is allowed
		        ret = '<0.0.0-0';
		      } else {
		        // nothing is forbidden
		        ret = '*';
		      }
		    } else if (gtlt && anyX) {
		      // we know patch is an x, because we have any x at all.
		      // replace X with 0
		      if (xm) {
		        m = 0;
		      }

		      p = 0;

		      if (gtlt === '>') {
		        // >1 => >=2.0.0
		        // >1.2 => >=1.3.0
		        // >1.2.3 => >= 1.2.4
		        gtlt = '>=';

		        if (xm) {
		          M = +M + 1;
		          m = 0;
		          p = 0;
		        } else {
		          m = +m + 1;
		          p = 0;
		        }
		      } else if (gtlt === '<=') {
		        // <=0.7.x is actually <0.8.0, since any 0.7.x should
		        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
		        gtlt = '<';

		        if (xm) {
		          M = +M + 1;
		        } else {
		          m = +m + 1;
		        }
		      }

		      ret = gtlt + M + '.' + m + '.' + p + pr;
		    } else if (xm) {
		      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
		    } else if (xp) {
		      ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;
		    }

		    debug('xRange return', ret);
		    return ret;
		  });
		} // Because * is AND-ed with everything else in the comparator,
		// and '' means "any version", just remove the *s entirely.


		function replaceStars(comp, options) {
		  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

		  return comp.trim().replace(re[t.STAR], '');
		} // This function is passed to string.replace(re[t.HYPHENRANGE])
		// M, m, patch, prerelease, build
		// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
		// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
		// 1.2 - 3.4 => >=1.2.0 <3.5.0


		function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
		  if (isX(fM)) {
		    from = '';
		  } else if (isX(fm)) {
		    from = '>=' + fM + '.0.0';
		  } else if (isX(fp)) {
		    from = '>=' + fM + '.' + fm + '.0';
		  } else {
		    from = '>=' + from;
		  }

		  if (isX(tM)) {
		    to = '';
		  } else if (isX(tm)) {
		    to = '<' + (+tM + 1) + '.0.0';
		  } else if (isX(tp)) {
		    to = '<' + tM + '.' + (+tm + 1) + '.0';
		  } else if (tpr) {
		    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
		  } else {
		    to = '<=' + to;
		  }

		  return (from + ' ' + to).trim();
		} // if ANY of the sets match ALL of its comparators, then pass


		Range.prototype.test = function (version) {
		  if (!version) {
		    return false;
		  }

		  if (typeof version === 'string') {
		    try {
		      version = new SemVer(version, this.options);
		    } catch (er) {
		      return false;
		    }
		  }

		  for (var i = 0; i < this.set.length; i++) {
		    if (testSet(this.set[i], version, this.options)) {
		      return true;
		    }
		  }

		  return false;
		};

		function testSet(set, version, options) {
		  for (var i = 0; i < set.length; i++) {
		    if (!set[i].test(version)) {
		      return false;
		    }
		  }

		  if (version.prerelease.length && !options.includePrerelease) {
		    // Find the set of versions that are allowed to have prereleases
		    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
		    // That should allow `1.2.3-pr.2` to pass.
		    // However, `1.2.4-alpha.notready` should NOT be allowed,
		    // even though it's within the range set by the comparators.
		    for (i = 0; i < set.length; i++) {
		      debug(set[i].semver);

		      if (set[i].semver === ANY) {
		        continue;
		      }

		      if (set[i].semver.prerelease.length > 0) {
		        var allowed = set[i].semver;

		        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
		          return true;
		        }
		      }
		    } // Version has a -pre, but it's not one of the ones we like.


		    return false;
		  }

		  return true;
		}

		exports.satisfies = satisfies;

		function satisfies(version, range, options) {
		  try {
		    range = new Range(range, options);
		  } catch (er) {
		    return false;
		  }

		  return range.test(version);
		}

		exports.maxSatisfying = maxSatisfying;

		function maxSatisfying(versions, range, options) {
		  var max = null;
		  var maxSV = null;

		  try {
		    var rangeObj = new Range(range, options);
		  } catch (er) {
		    return null;
		  }

		  versions.forEach(function (v) {
		    if (rangeObj.test(v)) {
		      // satisfies(v, range, options)
		      if (!max || maxSV.compare(v) === -1) {
		        // compare(max, v, true)
		        max = v;
		        maxSV = new SemVer(max, options);
		      }
		    }
		  });
		  return max;
		}

		exports.minSatisfying = minSatisfying;

		function minSatisfying(versions, range, options) {
		  var min = null;
		  var minSV = null;

		  try {
		    var rangeObj = new Range(range, options);
		  } catch (er) {
		    return null;
		  }

		  versions.forEach(function (v) {
		    if (rangeObj.test(v)) {
		      // satisfies(v, range, options)
		      if (!min || minSV.compare(v) === 1) {
		        // compare(min, v, true)
		        min = v;
		        minSV = new SemVer(min, options);
		      }
		    }
		  });
		  return min;
		}

		exports.minVersion = minVersion;

		function minVersion(range, loose) {
		  range = new Range(range, loose);
		  var minver = new SemVer('0.0.0');

		  if (range.test(minver)) {
		    return minver;
		  }

		  minver = new SemVer('0.0.0-0');

		  if (range.test(minver)) {
		    return minver;
		  }

		  minver = null;

		  for (var i = 0; i < range.set.length; ++i) {
		    var comparators = range.set[i];
		    comparators.forEach(function (comparator) {
		      // Clone to avoid manipulating the comparator's semver object.
		      var compver = new SemVer(comparator.semver.version);

		      switch (comparator.operator) {
		        case '>':
		          if (compver.prerelease.length === 0) {
		            compver.patch++;
		          } else {
		            compver.prerelease.push(0);
		          }

		          compver.raw = compver.format();

		        /* fallthrough */

		        case '':
		        case '>=':
		          if (!minver || gt(minver, compver)) {
		            minver = compver;
		          }

		          break;

		        case '<':
		        case '<=':
		          /* Ignore maximum versions */
		          break;

		        /* istanbul ignore next */

		        default:
		          throw new Error('Unexpected operation: ' + comparator.operator);
		      }
		    });
		  }

		  if (minver && range.test(minver)) {
		    return minver;
		  }

		  return null;
		}

		exports.validRange = validRange;

		function validRange(range, options) {
		  try {
		    // Return '*' instead of '' so that truthiness works.
		    // This will throw if it's invalid anyway
		    return new Range(range, options).range || '*';
		  } catch (er) {
		    return null;
		  }
		} // Determine if version is less than all the versions possible in the range


		exports.ltr = ltr;

		function ltr(version, range, options) {
		  return outside(version, range, '<', options);
		} // Determine if version is greater than all the versions possible in the range.


		exports.gtr = gtr;

		function gtr(version, range, options) {
		  return outside(version, range, '>', options);
		}

		exports.outside = outside;

		function outside(version, range, hilo, options) {
		  version = new SemVer(version, options);
		  range = new Range(range, options);
		  var gtfn, ltefn, ltfn, comp, ecomp;

		  switch (hilo) {
		    case '>':
		      gtfn = gt;
		      ltefn = lte;
		      ltfn = lt;
		      comp = '>';
		      ecomp = '>=';
		      break;

		    case '<':
		      gtfn = lt;
		      ltefn = gte;
		      ltfn = gt;
		      comp = '<';
		      ecomp = '<=';
		      break;

		    default:
		      throw new TypeError('Must provide a hilo val of "<" or ">"');
		  } // If it satisifes the range it is not outside


		  if (satisfies(version, range, options)) {
		    return false;
		  } // From now on, variable terms are as if we're in "gtr" mode.
		  // but note that everything is flipped for the "ltr" function.


		  for (var i = 0; i < range.set.length; ++i) {
		    var comparators = range.set[i];
		    var high = null;
		    var low = null;
		    comparators.forEach(function (comparator) {
		      if (comparator.semver === ANY) {
		        comparator = new Comparator('>=0.0.0');
		      }

		      high = high || comparator;
		      low = low || comparator;

		      if (gtfn(comparator.semver, high.semver, options)) {
		        high = comparator;
		      } else if (ltfn(comparator.semver, low.semver, options)) {
		        low = comparator;
		      }
		    }); // If the edge version comparator has a operator then our version
		    // isn't outside it

		    if (high.operator === comp || high.operator === ecomp) {
		      return false;
		    } // If the lowest version comparator has an operator and our version
		    // is less than it then it isn't higher than the range


		    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
		      return false;
		    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
		      return false;
		    }
		  }

		  return true;
		}

		exports.prerelease = prerelease;

		function prerelease(version, options) {
		  var parsed = parse(version, options);
		  return parsed && parsed.prerelease.length ? parsed.prerelease : null;
		}

		exports.intersects = intersects;

		function intersects(r1, r2, options) {
		  r1 = new Range(r1, options);
		  r2 = new Range(r2, options);
		  return r1.intersects(r2);
		}

		exports.coerce = coerce;

		function coerce(version, options) {
		  if (version instanceof SemVer) {
		    return version;
		  }

		  if (typeof version === 'number') {
		    version = String(version);
		  }

		  if (typeof version !== 'string') {
		    return null;
		  }

		  options = options || {};
		  var match = null;

		  if (!options.rtl) {
		    match = version.match(re[t.COERCE]);
		  } else {
		    // Find the right-most coercible string that does not share
		    // a terminus with a more left-ward coercible string.
		    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
		    //
		    // Walk through the string checking with a /g regexp
		    // Manually set the index so as to pick up overlapping matches.
		    // Stop when we get a match that ends at the string end, since no
		    // coercible string can be more right-ward without the same terminus.
		    var next;

		    while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
		      if (!match || next.index + next[0].length !== match.index + match[0].length) {
		        match = next;
		      }

		      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
		    } // leave it in a clean state


		    re[t.COERCERTL].lastIndex = -1;
		  }

		  if (match === null) {
		    return null;
		  }

		  return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);
		}
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16)));

		/***/ }),
		/* 11 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return meta; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return dehydrate; });
		/* unused harmony export fillInPath */
		/* unused harmony export hydrate */
		/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var meta = {
		  inspectable: Symbol('inspectable'),
		  inspected: Symbol('inspected'),
		  name: Symbol('name'),
		  preview_long: Symbol('preview_long'),
		  preview_short: Symbol('preview_short'),
		  readonly: Symbol('readonly'),
		  size: Symbol('size'),
		  type: Symbol('type'),
		  unserializable: Symbol('unserializable')
		};
		// This threshold determines the depth at which the bridge "dehydrates" nested data.
		// Dehydration means that we don't serialize the data for e.g. postMessage or stringify,
		// unless the frontend explicitly requests it (e.g. a user clicks to expand a props object).
		//
		// Reducing this threshold will improve the speed of initial component inspection,
		// but may decrease the responsiveness of expanding objects/arrays to inspect further.
		var LEVEL_THRESHOLD = 2;
		/**
		 * Generate the dehydrated metadata for complex object instances
		 */

		function createDehydrated(type, inspectable, data, cleaned, path) {
		  cleaned.push(path);
		  var dehydrated = {
		    inspectable: inspectable,
		    type: type,
		    preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		    preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		    name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
		  };

		  if (type === 'array' || type === 'typed_array') {
		    dehydrated.size = data.length;
		  } else if (type === 'object') {
		    dehydrated.size = Object.keys(data).length;
		  }

		  if (type === 'iterator' || type === 'typed_array') {
		    dehydrated.readonly = true;
		  }

		  return dehydrated;
		}
		/**
		 * Strip out complex data (instances, functions, and data nested > LEVEL_THRESHOLD levels deep).
		 * The paths of the stripped out objects are appended to the `cleaned` list.
		 * On the other side of the barrier, the cleaned list is used to "re-hydrate" the cleaned representation into
		 * an object with symbols as attributes, so that a sanitized object can be distinguished from a normal object.
		 *
		 * Input: {"some": {"attr": fn()}, "other": AnInstance}
		 * Output: {
		 *   "some": {
		 *     "attr": {"name": the fn.name, type: "function"}
		 *   },
		 *   "other": {
		 *     "name": "AnInstance",
		 *     "type": "object",
		 *   },
		 * }
		 * and cleaned = [["some", "attr"], ["other"]]
		 */


		function dehydrate(data, cleaned, unserializable, path, isPathAllowed) {
		  var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
		  var type = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* getDataType */ "d"])(data);
		  var isPathAllowedCheck;

		  switch (type) {
		    case 'html_element':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data.tagName,
		        type: type
		      };

		    case 'function':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: typeof data.name === 'function' || !data.name ? 'function' : data.name,
		        type: type
		      };

		    case 'string':
		      isPathAllowedCheck = isPathAllowed(path);

		      if (isPathAllowedCheck) {
		        return data;
		      } else {
		        return data.length <= 500 ? data : data.slice(0, 500) + '...';
		      }

		    case 'bigint':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data.toString(),
		        type: type
		      };

		    case 'symbol':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data.toString(),
		        type: type
		      };
		    // React Elements aren't very inspector-friendly,
		    // and often contain private fields or circular references.

		    case 'react_element':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* getDisplayNameForReactElement */ "g"])(data) || 'Unknown',
		        type: type
		      };
		    // ArrayBuffers error if you try to inspect them.

		    case 'array_buffer':
		    case 'data_view':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: type === 'data_view' ? 'DataView' : 'ArrayBuffer',
		        size: data.byteLength,
		        type: type
		      };

		    case 'array':
		      isPathAllowedCheck = isPathAllowed(path);

		      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
		        return createDehydrated(type, true, data, cleaned, path);
		      }

		      return data.map(function (item, i) {
		        return dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
		      });

		    case 'html_all_collection':
		    case 'typed_array':
		    case 'iterator':
		      isPathAllowedCheck = isPathAllowed(path);

		      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
		        return createDehydrated(type, true, data, cleaned, path);
		      } else {
		        var unserializableValue = {
		          unserializable: true,
		          type: type,
		          readonly: true,
		          size: type === 'typed_array' ? data.length : undefined,
		          preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		          preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		          name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
		        }; // TRICKY
		        // Don't use [...spread] syntax for this purpose.
		        // This project uses @babel/plugin-transform-spread in "loose" mode which only works with Array values.
		        // Other types (e.g. typed arrays, Sets) will not spread correctly.

		        Array.from(data).forEach(function (item, i) {
		          return unserializableValue[i] = dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
		        });
		        unserializable.push(path);
		        return unserializableValue;
		      }

		    case 'opaque_iterator':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data[Symbol.toStringTag],
		        type: type
		      };

		    case 'date':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data.toString(),
		        type: type
		      };

		    case 'regexp':
		      cleaned.push(path);
		      return {
		        inspectable: false,
		        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, false),
		        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* formatDataForPreview */ "b"])(data, true),
		        name: data.toString(),
		        type: type
		      };

		    case 'object':
		      isPathAllowedCheck = isPathAllowed(path);

		      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
		        return createDehydrated(type, true, data, cleaned, path);
		      } else {
		        var object = {};
		        Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* getAllEnumerableKeys */ "c"])(data).forEach(function (key) {
		          var name = key.toString();
		          object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
		        });
		        return object;
		      }

		    case 'infinity':
		    case 'nan':
		    case 'undefined':
		      // Some values are lossy when sent through a WebSocket.
		      // We dehydrate+rehydrate them to preserve their type.
		      cleaned.push(path);
		      return {
		        type: type
		      };

		    default:
		      return data;
		  }
		}

		/***/ }),
		/* 12 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return consoleManagedByDevToolsDuringStrictMode; });
		/* unused harmony export enableLogger */
		/* unused harmony export enableNamedHooksFeature */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return enableProfilerChangedHookIndices; });
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return enableStyleXFeatures; });
		/* unused harmony export isInternalFacebookBuild */
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		/************************************************************************
		 * This file is forked between different DevTools implementations.
		 * It should never be imported directly!
		 * It should always be imported from "react-devtools-feature-flags".
		 ************************************************************************/
		var consoleManagedByDevToolsDuringStrictMode = false;
		var enableProfilerChangedHookIndices = true;
		var enableStyleXFeatures = false;

		/***/ }),
		/* 13 */
		/***/ (function(module, exports) {

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		var g; // This works in non-strict mode

		g = function () {
		  return this;
		}();

		try {
		  // This works if eval is allowed (see CSP)
		  g = g || new Function("return this")();
		} catch (e) {
		  // This works if the window reference is available
		  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
		} // g can still be undefined, but nothing to do about it...
		// We return undefined, instead of nothing here, so it's
		// easier to handle this case. if(!global) { ...}


		module.exports = g;

		/***/ }),
		/* 14 */
		/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/**
		 * lodash (Custom Build) <https://lodash.com/>
		 * Build: `lodash modularize exports="npm" -o ./`
		 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
		 * Released under MIT license <https://lodash.com/license>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 */

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';
		/** Used as references for various `Number` constants. */

		var NAN = 0 / 0;
		/** `Object#toString` result references. */

		var symbolTag = '[object Symbol]';
		/** Used to match leading and trailing whitespace. */

		var reTrim = /^\s+|\s+$/g;
		/** Used to detect bad signed hexadecimal string values. */

		var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
		/** Used to detect binary string values. */

		var reIsBinary = /^0b[01]+$/i;
		/** Used to detect octal string values. */

		var reIsOctal = /^0o[0-7]+$/i;
		/** Built-in method references without a dependency on `root`. */

		var freeParseInt = parseInt;
		/** Detect free variable `global` from Node.js. */

		var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
		/** Detect free variable `self`. */

		var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
		/** Used as a reference to the global object. */

		var root = freeGlobal || freeSelf || Function('return this')();
		/** Used for built-in method references. */

		var objectProto = Object.prototype;
		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */

		var objectToString = objectProto.toString;
		/* Built-in method references for those with the same name as other `lodash` methods. */

		var nativeMax = Math.max,
		    nativeMin = Math.min;
		/**
		 * Gets the timestamp of the number of milliseconds that have elapsed since
		 * the Unix epoch (1 January 1970 00:00:00 UTC).
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Date
		 * @returns {number} Returns the timestamp.
		 * @example
		 *
		 * _.defer(function(stamp) {
		 *   console.log(_.now() - stamp);
		 * }, _.now());
		 * // => Logs the number of milliseconds it took for the deferred invocation.
		 */

		var now = function now() {
		  return root.Date.now();
		};
		/**
		 * Creates a debounced function that delays invoking `func` until after `wait`
		 * milliseconds have elapsed since the last time the debounced function was
		 * invoked. The debounced function comes with a `cancel` method to cancel
		 * delayed `func` invocations and a `flush` method to immediately invoke them.
		 * Provide `options` to indicate whether `func` should be invoked on the
		 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		 * with the last arguments provided to the debounced function. Subsequent
		 * calls to the debounced function return the result of the last `func`
		 * invocation.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is
		 * invoked on the trailing edge of the timeout only if the debounced function
		 * is invoked more than once during the `wait` timeout.
		 *
		 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		 *
		 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		 * for details over the differences between `_.debounce` and `_.throttle`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to debounce.
		 * @param {number} [wait=0] The number of milliseconds to delay.
		 * @param {Object} [options={}] The options object.
		 * @param {boolean} [options.leading=false]
		 *  Specify invoking on the leading edge of the timeout.
		 * @param {number} [options.maxWait]
		 *  The maximum time `func` is allowed to be delayed before it's invoked.
		 * @param {boolean} [options.trailing=true]
		 *  Specify invoking on the trailing edge of the timeout.
		 * @returns {Function} Returns the new debounced function.
		 * @example
		 *
		 * // Avoid costly calculations while the window size is in flux.
		 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		 *
		 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		 * jQuery(element).on('click', _.debounce(sendMail, 300, {
		 *   'leading': true,
		 *   'trailing': false
		 * }));
		 *
		 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		 * var source = new EventSource('/stream');
		 * jQuery(source).on('message', debounced);
		 *
		 * // Cancel the trailing debounced invocation.
		 * jQuery(window).on('popstate', debounced.cancel);
		 */


		function debounce(func, wait, options) {
		  var lastArgs,
		      lastThis,
		      maxWait,
		      result,
		      timerId,
		      lastCallTime,
		      lastInvokeTime = 0,
		      leading = false,
		      maxing = false,
		      trailing = true;

		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }

		  wait = toNumber(wait) || 0;

		  if (isObject(options)) {
		    leading = !!options.leading;
		    maxing = 'maxWait' in options;
		    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		    trailing = 'trailing' in options ? !!options.trailing : trailing;
		  }

		  function invokeFunc(time) {
		    var args = lastArgs,
		        thisArg = lastThis;
		    lastArgs = lastThis = undefined;
		    lastInvokeTime = time;
		    result = func.apply(thisArg, args);
		    return result;
		  }

		  function leadingEdge(time) {
		    // Reset any `maxWait` timer.
		    lastInvokeTime = time; // Start the timer for the trailing edge.

		    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

		    return leading ? invokeFunc(time) : result;
		  }

		  function remainingWait(time) {
		    var timeSinceLastCall = time - lastCallTime,
		        timeSinceLastInvoke = time - lastInvokeTime,
		        result = wait - timeSinceLastCall;
		    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
		  }

		  function shouldInvoke(time) {
		    var timeSinceLastCall = time - lastCallTime,
		        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
		    // trailing edge, the system time has gone backwards and we're treating
		    // it as the trailing edge, or we've hit the `maxWait` limit.

		    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
		  }

		  function timerExpired() {
		    var time = now();

		    if (shouldInvoke(time)) {
		      return trailingEdge(time);
		    } // Restart the timer.


		    timerId = setTimeout(timerExpired, remainingWait(time));
		  }

		  function trailingEdge(time) {
		    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
		    // debounced at least once.

		    if (trailing && lastArgs) {
		      return invokeFunc(time);
		    }

		    lastArgs = lastThis = undefined;
		    return result;
		  }

		  function cancel() {
		    if (timerId !== undefined) {
		      clearTimeout(timerId);
		    }

		    lastInvokeTime = 0;
		    lastArgs = lastCallTime = lastThis = timerId = undefined;
		  }

		  function flush() {
		    return timerId === undefined ? result : trailingEdge(now());
		  }

		  function debounced() {
		    var time = now(),
		        isInvoking = shouldInvoke(time);
		    lastArgs = arguments;
		    lastThis = this;
		    lastCallTime = time;

		    if (isInvoking) {
		      if (timerId === undefined) {
		        return leadingEdge(lastCallTime);
		      }

		      if (maxing) {
		        // Handle invocations in a tight loop.
		        timerId = setTimeout(timerExpired, wait);
		        return invokeFunc(lastCallTime);
		      }
		    }

		    if (timerId === undefined) {
		      timerId = setTimeout(timerExpired, wait);
		    }

		    return result;
		  }

		  debounced.cancel = cancel;
		  debounced.flush = flush;
		  return debounced;
		}
		/**
		 * Creates a throttled function that only invokes `func` at most once per
		 * every `wait` milliseconds. The throttled function comes with a `cancel`
		 * method to cancel delayed `func` invocations and a `flush` method to
		 * immediately invoke them. Provide `options` to indicate whether `func`
		 * should be invoked on the leading and/or trailing edge of the `wait`
		 * timeout. The `func` is invoked with the last arguments provided to the
		 * throttled function. Subsequent calls to the throttled function return the
		 * result of the last `func` invocation.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is
		 * invoked on the trailing edge of the timeout only if the throttled function
		 * is invoked more than once during the `wait` timeout.
		 *
		 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		 *
		 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		 * for details over the differences between `_.throttle` and `_.debounce`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to throttle.
		 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		 * @param {Object} [options={}] The options object.
		 * @param {boolean} [options.leading=true]
		 *  Specify invoking on the leading edge of the timeout.
		 * @param {boolean} [options.trailing=true]
		 *  Specify invoking on the trailing edge of the timeout.
		 * @returns {Function} Returns the new throttled function.
		 * @example
		 *
		 * // Avoid excessively updating the position while scrolling.
		 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		 *
		 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		 * jQuery(element).on('click', throttled);
		 *
		 * // Cancel the trailing throttled invocation.
		 * jQuery(window).on('popstate', throttled.cancel);
		 */


		function throttle(func, wait, options) {
		  var leading = true,
		      trailing = true;

		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }

		  if (isObject(options)) {
		    leading = 'leading' in options ? !!options.leading : leading;
		    trailing = 'trailing' in options ? !!options.trailing : trailing;
		  }

		  return debounce(func, wait, {
		    'leading': leading,
		    'maxWait': wait,
		    'trailing': trailing
		  });
		}
		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */


		function isObject(value) {
		  var type = _typeof(value);

		  return !!value && (type == 'object' || type == 'function');
		}
		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */


		function isObjectLike(value) {
		  return !!value && _typeof(value) == 'object';
		}
		/**
		 * Checks if `value` is classified as a `Symbol` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		 * @example
		 *
		 * _.isSymbol(Symbol.iterator);
		 * // => true
		 *
		 * _.isSymbol('abc');
		 * // => false
		 */


		function isSymbol(value) {
		  return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
		}
		/**
		 * Converts `value` to a number.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to process.
		 * @returns {number} Returns the number.
		 * @example
		 *
		 * _.toNumber(3.2);
		 * // => 3.2
		 *
		 * _.toNumber(Number.MIN_VALUE);
		 * // => 5e-324
		 *
		 * _.toNumber(Infinity);
		 * // => Infinity
		 *
		 * _.toNumber('3.2');
		 * // => 3.2
		 */


		function toNumber(value) {
		  if (typeof value == 'number') {
		    return value;
		  }

		  if (isSymbol(value)) {
		    return NAN;
		  }

		  if (isObject(value)) {
		    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		    value = isObject(other) ? other + '' : other;
		  }

		  if (typeof value != 'string') {
		    return value === 0 ? value : +value;
		  }

		  value = value.replace(reTrim, '');
		  var isBinary = reIsBinary.test(value);
		  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
		}

		module.exports = throttle;
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13)));

		/***/ }),
		/* 15 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {

		// EXPORTS
		__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ getInternalReactConstants; });
		__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ attach; });

		// EXTERNAL MODULE: ../react-devtools-shared/node_modules/semver/semver.js
		var semver = __webpack_require__(10);

		// EXTERNAL MODULE: ../react-devtools-shared/src/types.js
		var types = __webpack_require__(1);

		// EXTERNAL MODULE: ../react-devtools-shared/src/utils.js
		var utils = __webpack_require__(2);

		// EXTERNAL MODULE: ../react-devtools-shared/src/storage.js
		var storage = __webpack_require__(5);

		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/utils.js
		var backend_utils = __webpack_require__(4);

		// EXTERNAL MODULE: ../react-devtools-shared/src/constants.js
		var constants = __webpack_require__(0);

		// EXTERNAL MODULE: /Users/mengdi/workspace/git/react/build/oss-experimental/react-debug-tools/index.js
		var react_debug_tools = __webpack_require__(20);

		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/console.js
		var backend_console = __webpack_require__(8);

		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/ReactSymbols.js
		var ReactSymbols = __webpack_require__(3);

		// EXTERNAL MODULE: ../react-devtools-shared/src/config/DevToolsFeatureFlags.core-oss.js
		var DevToolsFeatureFlags_core_oss = __webpack_require__(12);

		// CONCATENATED MODULE: ../shared/objectIs.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		/**
		 * inlined Object.is polyfill to avoid requiring consumers ship their own
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		 */
		function is(x, y) {
		  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
		  ;
		}

		var objectIs = typeof Object.is === 'function' ? Object.is : is;
		/* harmony default export */ var shared_objectIs = (objectIs);
		// CONCATENATED MODULE: ../shared/hasOwnProperty.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		var hasOwnProperty_hasOwnProperty = Object.prototype.hasOwnProperty;
		/* harmony default export */ var shared_hasOwnProperty = (hasOwnProperty_hasOwnProperty);
		// EXTERNAL MODULE: ../react-devtools-shared/src/isArray.js
		var isArray = __webpack_require__(6);

		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/StyleX/utils.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var cachedStyleNameToValueMap = new Map();
		function getStyleXData(data) {
		  var sources = new Set();
		  var resolvedStyles = {};
		  crawlData(data, sources, resolvedStyles);
		  return {
		    sources: Array.from(sources).sort(),
		    resolvedStyles: resolvedStyles
		  };
		}
		function crawlData(data, sources, resolvedStyles) {
		  if (data == null) {
		    return;
		  }

		  if (Object(isArray["a" /* default */])(data)) {
		    data.forEach(function (entry) {
		      if (entry == null) {
		        return;
		      }

		      if (Object(isArray["a" /* default */])(entry)) {
		        crawlData(entry, sources, resolvedStyles);
		      } else {
		        crawlObjectProperties(entry, sources, resolvedStyles);
		      }
		    });
		  } else {
		    crawlObjectProperties(data, sources, resolvedStyles);
		  }

		  resolvedStyles = Object.fromEntries(Object.entries(resolvedStyles).sort());
		}

		function crawlObjectProperties(entry, sources, resolvedStyles) {
		  var keys = Object.keys(entry);
		  keys.forEach(function (key) {
		    var value = entry[key];

		    if (typeof value === 'string') {
		      if (key === value) {
		        // Special case; this key is the name of the style's source/file/module.
		        sources.add(key);
		      } else {
		        resolvedStyles[key] = getPropertyValueForStyleName(value);
		      }
		    } else {
		      var nestedStyle = {};
		      resolvedStyles[key] = nestedStyle;
		      crawlData([value], sources, nestedStyle);
		    }
		  });
		}

		function getPropertyValueForStyleName(styleName) {
		  if (cachedStyleNameToValueMap.has(styleName)) {
		    return cachedStyleNameToValueMap.get(styleName);
		  }

		  for (var styleSheetIndex = 0; styleSheetIndex < document.styleSheets.length; styleSheetIndex++) {
		    var styleSheet = document.styleSheets[styleSheetIndex]; // $FlowFixMe Flow doesn't konw about these properties

		    var rules = styleSheet.rules || styleSheet.cssRules;

		    for (var ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
		      var rule = rules[ruleIndex]; // $FlowFixMe Flow doesn't konw about these properties

		      var cssText = rule.cssText,
		          selectorText = rule.selectorText,
		          style = rule.style;

		      if (selectorText != null) {
		        if (selectorText.startsWith(".".concat(styleName))) {
		          var match = cssText.match(/{ *([a-z\-]+):/);

		          if (match !== null) {
		            var property = match[1];
		            var value = style.getPropertyValue(property);
		            cachedStyleNameToValueMap.set(styleName, value);
		            return value;
		          } else {
		            return null;
		          }
		        }
		      }
		    }
		  }

		  return null;
		}
		// EXTERNAL MODULE: ../shared/isArray.js
		var shared_isArray = __webpack_require__(9);

		// CONCATENATED MODULE: ../react-devtools-timeline/src/constants.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var REACT_TOTAL_NUM_LANES = 31; // Increment this number any time a backwards breaking change is made to the profiler metadata.

		var SCHEDULING_PROFILER_VERSION = 1;
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/profilingHooks.js
		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		 // Add padding to the start/stop time of the profile.
		// This makes the UI nicer to use.

		var TIME_OFFSET = 10;
		var performanceTarget = null; // If performance exists and supports the subset of the User Timing API that we require.

		var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function';
		var supportsUserTimingV3 = false;

		if (supportsUserTiming) {
		  var CHECK_V3_MARK = '__v3';
		  var markOptions = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

		  Object.defineProperty(markOptions, 'startTime', {
		    get: function get() {
		      supportsUserTimingV3 = true;
		      return 0;
		    },
		    set: function set() {}
		  });

		  try {
		    // $FlowFixMe: Flow expects the User Timing level 2 API.
		    performance.mark(CHECK_V3_MARK, markOptions);
		  } catch (error) {// Ignore
		  } finally {
		    performance.clearMarks(CHECK_V3_MARK);
		  }
		}

		if (supportsUserTimingV3) {
		  performanceTarget = performance;
		} // Some environments (e.g. React Native / Hermes) don't support the performance API yet.


		var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
		  return performance.now();
		} : function () {
		  return Date.now();
		}; // Mocking the Performance Object (and User Timing APIs) for testing is fragile.
		function createProfilingHooks(_ref) {
		  var getDisplayNameForFiber = _ref.getDisplayNameForFiber;
		      _ref.getIsProfiling;
		      var getLaneLabelMap = _ref.getLaneLabelMap,
		      reactVersion = _ref.reactVersion;
		  var currentBatchUID = 0;
		  var currentReactComponentMeasure = null;
		  var currentReactMeasuresStack = [];
		  var currentTimelineData = null;
		  var isProfiling = false;
		  var nextRenderShouldStartNewBatch = false;

		  function getRelativeTime() {
		    var currentTime = getCurrentTime();

		    if (currentTimelineData) {
		      if (currentTimelineData.startTime === 0) {
		        currentTimelineData.startTime = currentTime - TIME_OFFSET;
		      }

		      return currentTime - currentTimelineData.startTime;
		    }

		    return 0;
		  }

		  function getInternalModuleRanges() {
		    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === 'function') {
		      // Ask the DevTools hook for module ranges that may have been reported by the current renderer(s).
		      // Don't do this eagerly like the laneToLabelMap,
		      // because some modules might not yet have registered their boundaries when the renderer is injected.
		      var ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges(); // This check would not be required,
		      // except that it's possible for things to override __REACT_DEVTOOLS_GLOBAL_HOOK__.


		      if (Object(shared_isArray["a" /* default */])(ranges)) {
		        return ranges;
		      }
		    }

		    return null;
		  }

		  function getTimelineData() {
		    return currentTimelineData;
		  }

		  function laneToLanesArray(lanes) {
		    var lanesArray = [];
		    var lane = 1;

		    for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
		      if (lane & lanes) {
		        lanesArray.push(lane);
		      }

		      lane *= 2;
		    }

		    return lanesArray;
		  }

		  var laneToLabelMap = typeof getLaneLabelMap === 'function' ? getLaneLabelMap() : null;

		  function markMetadata() {
		    markAndClear("--react-version-".concat(reactVersion));
		    markAndClear("--profiler-version-".concat(SCHEDULING_PROFILER_VERSION));
		    var ranges = getInternalModuleRanges();

		    if (ranges) {
		      for (var i = 0; i < ranges.length; i++) {
		        var range = ranges[i];

		        if (Object(shared_isArray["a" /* default */])(range) && range.length === 2) {
		          var _ranges$i = _slicedToArray(ranges[i], 2),
		              startStackFrame = _ranges$i[0],
		              stopStackFrame = _ranges$i[1];

		          markAndClear("--react-internal-module-start-".concat(startStackFrame));
		          markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
		        }
		      }
		    }

		    if (laneToLabelMap != null) {
		      var labels = Array.from(laneToLabelMap.values()).join(',');
		      markAndClear("--react-lane-labels-".concat(labels));
		    }
		  }

		  function markAndClear(markName) {
		    // This method won't be called unless these functions are defined, so we can skip the extra typeof check.
		    performanceTarget.mark(markName);
		    performanceTarget.clearMarks(markName);
		  }

		  function recordReactMeasureStarted(type, lanes) {
		    // Decide what depth thi work should be rendered at, based on what's on the top of the stack.
		    // It's okay to render over top of "idle" work but everything else should be on its own row.
		    var depth = 0;

		    if (currentReactMeasuresStack.length > 0) {
		      var top = currentReactMeasuresStack[currentReactMeasuresStack.length - 1];
		      depth = top.type === 'render-idle' ? top.depth : top.depth + 1;
		    }

		    var lanesArray = laneToLanesArray(lanes);
		    var reactMeasure = {
		      type: type,
		      batchUID: currentBatchUID,
		      depth: depth,
		      lanes: lanesArray,
		      timestamp: getRelativeTime(),
		      duration: 0
		    };
		    currentReactMeasuresStack.push(reactMeasure);

		    if (currentTimelineData) {
		      var _currentTimelineData = currentTimelineData,
		          batchUIDToMeasuresMap = _currentTimelineData.batchUIDToMeasuresMap,
		          laneToReactMeasureMap = _currentTimelineData.laneToReactMeasureMap;
		      var reactMeasures = batchUIDToMeasuresMap.get(currentBatchUID);

		      if (reactMeasures != null) {
		        reactMeasures.push(reactMeasure);
		      } else {
		        batchUIDToMeasuresMap.set(currentBatchUID, [reactMeasure]);
		      }

		      lanesArray.forEach(function (lane) {
		        reactMeasures = laneToReactMeasureMap.get(lane);

		        if (reactMeasures) {
		          reactMeasures.push(reactMeasure);
		        }
		      });
		    }
		  }

		  function recordReactMeasureCompleted(type) {
		    var currentTime = getRelativeTime();

		    if (currentReactMeasuresStack.length === 0) {
		      console.error('Unexpected type "%s" completed at %sms while currentReactMeasuresStack is empty.', type, currentTime); // Ignore work "completion" user timing mark that doesn't complete anything

		      return;
		    }

		    var top = currentReactMeasuresStack.pop();

		    if (top.type !== type) {
		      console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type, currentTime, top.type);
		    } // $FlowFixMe This property should not be writable outside of this function.


		    top.duration = currentTime - top.timestamp;

		    if (currentTimelineData) {
		      currentTimelineData.duration = getRelativeTime() + TIME_OFFSET;
		    }
		  }

		  function markCommitStarted(lanes) {
		    if (isProfiling) {
		      recordReactMeasureStarted('commit', lanes); // TODO (timeline) Re-think this approach to "batching"; I don't think it works for Suspense or pre-rendering.
		      // This issue applies to the User Timing data also.

		      nextRenderShouldStartNewBatch = true;
		    }

		    if (supportsUserTimingV3) {
		      markAndClear("--commit-start-".concat(lanes)); // Some metadata only needs to be logged once per session,
		      // but if profiling information is being recorded via the Performance tab,
		      // DevTools has no way of knowing when the recording starts.
		      // Because of that, we log thie type of data periodically (once per commit).

		      markMetadata();
		    }
		  }

		  function markCommitStopped() {
		    if (isProfiling) {
		      recordReactMeasureCompleted('commit');
		      recordReactMeasureCompleted('render-idle');
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--commit-stop');
		    }
		  }

		  function markComponentRenderStarted(fiber) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (isProfiling) {
		          currentReactComponentMeasure = {
		            componentName: componentName,
		            duration: 0,
		            timestamp: getRelativeTime(),
		            type: 'render',
		            warning: null
		          };
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--component-render-start-".concat(componentName));
		      }
		    }
		  }

		  function markComponentRenderStopped() {
		    if (isProfiling) {
		      if (currentReactComponentMeasure) {
		        if (currentTimelineData) {
		          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
		        }

		        currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
		        currentReactComponentMeasure = null;
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--component-render-stop');
		    }
		  }

		  function markComponentLayoutEffectMountStarted(fiber) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (isProfiling) {
		          currentReactComponentMeasure = {
		            componentName: componentName,
		            duration: 0,
		            timestamp: getRelativeTime(),
		            type: 'layout-effect-mount',
		            warning: null
		          };
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--component-layout-effect-mount-start-".concat(componentName));
		      }
		    }
		  }

		  function markComponentLayoutEffectMountStopped() {
		    if (isProfiling) {
		      if (currentReactComponentMeasure) {
		        if (currentTimelineData) {
		          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
		        }

		        currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
		        currentReactComponentMeasure = null;
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--component-layout-effect-mount-stop');
		    }
		  }

		  function markComponentLayoutEffectUnmountStarted(fiber) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (isProfiling) {
		          currentReactComponentMeasure = {
		            componentName: componentName,
		            duration: 0,
		            timestamp: getRelativeTime(),
		            type: 'layout-effect-unmount',
		            warning: null
		          };
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--component-layout-effect-unmount-start-".concat(componentName));
		      }
		    }
		  }

		  function markComponentLayoutEffectUnmountStopped() {
		    if (isProfiling) {
		      if (currentReactComponentMeasure) {
		        if (currentTimelineData) {
		          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
		        }

		        currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
		        currentReactComponentMeasure = null;
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--component-layout-effect-unmount-stop');
		    }
		  }

		  function markComponentPassiveEffectMountStarted(fiber) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (isProfiling) {
		          currentReactComponentMeasure = {
		            componentName: componentName,
		            duration: 0,
		            timestamp: getRelativeTime(),
		            type: 'passive-effect-mount',
		            warning: null
		          };
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--component-passive-effect-mount-start-".concat(componentName));
		      }
		    }
		  }

		  function markComponentPassiveEffectMountStopped() {
		    if (isProfiling) {
		      if (currentReactComponentMeasure) {
		        if (currentTimelineData) {
		          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
		        }

		        currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
		        currentReactComponentMeasure = null;
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--component-passive-effect-mount-stop');
		    }
		  }

		  function markComponentPassiveEffectUnmountStarted(fiber) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (isProfiling) {
		          currentReactComponentMeasure = {
		            componentName: componentName,
		            duration: 0,
		            timestamp: getRelativeTime(),
		            type: 'passive-effect-unmount',
		            warning: null
		          };
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--component-passive-effect-unmount-start-".concat(componentName));
		      }
		    }
		  }

		  function markComponentPassiveEffectUnmountStopped() {
		    if (isProfiling) {
		      if (currentReactComponentMeasure) {
		        if (currentTimelineData) {
		          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);
		        }

		        currentReactComponentMeasure.duration = getRelativeTime() - currentReactComponentMeasure.timestamp;
		        currentReactComponentMeasure = null;
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--component-passive-effect-unmount-stop');
		    }
		  }

		  function markComponentErrored(fiber, thrownValue, lanes) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';
		      var phase = fiber.alternate === null ? 'mount' : 'update';
		      var message = '';

		      if (thrownValue !== null && _typeof(thrownValue) === 'object' && typeof thrownValue.message === 'string') {
		        message = thrownValue.message;
		      } else if (typeof thrownValue === 'string') {
		        message = thrownValue;
		      }

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (currentTimelineData) {
		          currentTimelineData.thrownErrors.push({
		            componentName: componentName,
		            message: message,
		            phase: phase,
		            timestamp: getRelativeTime(),
		            type: 'thrown-error'
		          });
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--error-".concat(componentName, "-").concat(phase, "-").concat(message));
		      }
		    }
		  }

		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // $FlowFixMe: Flow cannot handle polymorphic WeakMaps

		  var wakeableIDs = new PossiblyWeakMap();
		  var wakeableID = 0;

		  function getWakeableID(wakeable) {
		    if (!wakeableIDs.has(wakeable)) {
		      wakeableIDs.set(wakeable, wakeableID++);
		    }

		    return wakeableIDs.get(wakeable);
		  }

		  function markComponentSuspended(fiber, wakeable, lanes) {
		    if (isProfiling || supportsUserTimingV3) {
		      var eventType = wakeableIDs.has(wakeable) ? 'resuspend' : 'suspend';
		      var id = getWakeableID(wakeable);
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';
		      var phase = fiber.alternate === null ? 'mount' : 'update'; // Following the non-standard fn.displayName convention,
		      // frameworks like Relay may also annotate Promises with a displayName,
		      // describing what operation/data the thrown Promise is related to.
		      // When this is available we should pass it along to the Timeline.

		      var displayName = wakeable.displayName || '';
		      var suspenseEvent = null;

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        suspenseEvent = {
		          componentName: componentName,
		          depth: 0,
		          duration: 0,
		          id: "".concat(id),
		          phase: phase,
		          promiseName: displayName,
		          resolution: 'unresolved',
		          timestamp: getRelativeTime(),
		          type: 'suspense',
		          warning: null
		        };

		        if (currentTimelineData) {
		          currentTimelineData.suspenseEvents.push(suspenseEvent);
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--suspense-".concat(eventType, "-").concat(id, "-").concat(componentName, "-").concat(phase, "-").concat(lanes, "-").concat(displayName));
		      }

		      wakeable.then(function () {
		        if (suspenseEvent) {
		          suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
		          suspenseEvent.resolution = 'resolved';
		        }

		        if (supportsUserTimingV3) {
		          markAndClear("--suspense-resolved-".concat(id, "-").concat(componentName));
		        }
		      }, function () {
		        if (suspenseEvent) {
		          suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;
		          suspenseEvent.resolution = 'rejected';
		        }

		        if (supportsUserTimingV3) {
		          markAndClear("--suspense-rejected-".concat(id, "-").concat(componentName));
		        }
		      });
		    }
		  }

		  function markLayoutEffectsStarted(lanes) {
		    if (isProfiling) {
		      recordReactMeasureStarted('layout-effects', lanes);
		    }

		    if (supportsUserTimingV3) {
		      markAndClear("--layout-effects-start-".concat(lanes));
		    }
		  }

		  function markLayoutEffectsStopped() {
		    if (isProfiling) {
		      recordReactMeasureCompleted('layout-effects');
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--layout-effects-stop');
		    }
		  }

		  function markPassiveEffectsStarted(lanes) {
		    if (isProfiling) {
		      recordReactMeasureStarted('passive-effects', lanes);
		    }

		    if (supportsUserTimingV3) {
		      markAndClear("--passive-effects-start-".concat(lanes));
		    }
		  }

		  function markPassiveEffectsStopped() {
		    if (isProfiling) {
		      recordReactMeasureCompleted('passive-effects');
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--passive-effects-stop');
		    }
		  }

		  function markRenderStarted(lanes) {
		    if (isProfiling) {
		      if (nextRenderShouldStartNewBatch) {
		        nextRenderShouldStartNewBatch = false;
		        currentBatchUID++;
		      } // If this is a new batch of work, wrap an "idle" measure around it.
		      // Log it before the "render" measure to preserve the stack ordering.


		      if (currentReactMeasuresStack.length === 0 || currentReactMeasuresStack[currentReactMeasuresStack.length - 1].type !== 'render-idle') {
		        recordReactMeasureStarted('render-idle', lanes);
		      }

		      recordReactMeasureStarted('render', lanes);
		    }

		    if (supportsUserTimingV3) {
		      markAndClear("--render-start-".concat(lanes));
		    }
		  }

		  function markRenderYielded() {
		    if (isProfiling) {
		      recordReactMeasureCompleted('render');
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--render-yield');
		    }
		  }

		  function markRenderStopped() {
		    if (isProfiling) {
		      recordReactMeasureCompleted('render');
		    }

		    if (supportsUserTimingV3) {
		      markAndClear('--render-stop');
		    }
		  }

		  function markRenderScheduled(lane) {
		    if (isProfiling) {
		      if (currentTimelineData) {
		        currentTimelineData.schedulingEvents.push({
		          lanes: laneToLanesArray(lane),
		          timestamp: getRelativeTime(),
		          type: 'schedule-render',
		          warning: null
		        });
		      }
		    }

		    if (supportsUserTimingV3) {
		      markAndClear("--schedule-render-".concat(lane));
		    }
		  }

		  function markForceUpdateScheduled(fiber, lane) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (currentTimelineData) {
		          currentTimelineData.schedulingEvents.push({
		            componentName: componentName,
		            lanes: laneToLanesArray(lane),
		            timestamp: getRelativeTime(),
		            type: 'schedule-force-update',
		            warning: null
		          });
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--schedule-forced-update-".concat(lane, "-").concat(componentName));
		      }
		    }
		  }

		  function markStateUpdateScheduled(fiber, lane) {
		    if (isProfiling || supportsUserTimingV3) {
		      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';

		      if (isProfiling) {
		        // TODO (timeline) Record and cache component stack
		        if (currentTimelineData) {
		          currentTimelineData.schedulingEvents.push({
		            componentName: componentName,
		            lanes: laneToLanesArray(lane),
		            timestamp: getRelativeTime(),
		            type: 'schedule-state-update',
		            warning: null
		          });
		        }
		      }

		      if (supportsUserTimingV3) {
		        markAndClear("--schedule-state-update-".concat(lane, "-").concat(componentName));
		      }
		    }
		  }

		  function toggleProfilingStatus(value) {
		    if (isProfiling !== value) {
		      isProfiling = value;

		      if (isProfiling) {
		        var internalModuleSourceToRanges = new Map();

		        if (supportsUserTimingV3) {
		          var ranges = getInternalModuleRanges();

		          if (ranges) {
		            for (var i = 0; i < ranges.length; i++) {
		              var range = ranges[i];

		              if (Object(shared_isArray["a" /* default */])(range) && range.length === 2) {
		                var _ranges$i2 = _slicedToArray(ranges[i], 2),
		                    startStackFrame = _ranges$i2[0],
		                    stopStackFrame = _ranges$i2[1];

		                markAndClear("--react-internal-module-start-".concat(startStackFrame));
		                markAndClear("--react-internal-module-stop-".concat(stopStackFrame));
		              }
		            }
		          }
		        }

		        var laneToReactMeasureMap = new Map();
		        var lane = 1;

		        for (var index = 0; index < REACT_TOTAL_NUM_LANES; index++) {
		          laneToReactMeasureMap.set(lane, []);
		          lane *= 2;
		        }

		        currentBatchUID = 0;
		        currentReactComponentMeasure = null;
		        currentReactMeasuresStack = [];
		        currentTimelineData = {
		          // Session wide metadata; only collected once.
		          internalModuleSourceToRanges: internalModuleSourceToRanges,
		          laneToLabelMap: laneToLabelMap || new Map(),
		          reactVersion: reactVersion,
		          // Data logged by React during profiling session.
		          componentMeasures: [],
		          schedulingEvents: [],
		          suspenseEvents: [],
		          thrownErrors: [],
		          // Data inferred based on what React logs.
		          batchUIDToMeasuresMap: new Map(),
		          duration: 0,
		          laneToReactMeasureMap: laneToReactMeasureMap,
		          startTime: 0,
		          // Data only available in Chrome profiles.
		          flamechart: [],
		          nativeEvents: [],
		          networkMeasures: [],
		          otherUserTimingMarks: [],
		          snapshots: [],
		          snapshotHeight: 0
		        };
		        nextRenderShouldStartNewBatch = true;
		      }
		    }
		  }

		  return {
		    getTimelineData: getTimelineData,
		    profilingHooks: {
		      markCommitStarted: markCommitStarted,
		      markCommitStopped: markCommitStopped,
		      markComponentRenderStarted: markComponentRenderStarted,
		      markComponentRenderStopped: markComponentRenderStopped,
		      markComponentPassiveEffectMountStarted: markComponentPassiveEffectMountStarted,
		      markComponentPassiveEffectMountStopped: markComponentPassiveEffectMountStopped,
		      markComponentPassiveEffectUnmountStarted: markComponentPassiveEffectUnmountStarted,
		      markComponentPassiveEffectUnmountStopped: markComponentPassiveEffectUnmountStopped,
		      markComponentLayoutEffectMountStarted: markComponentLayoutEffectMountStarted,
		      markComponentLayoutEffectMountStopped: markComponentLayoutEffectMountStopped,
		      markComponentLayoutEffectUnmountStarted: markComponentLayoutEffectUnmountStarted,
		      markComponentLayoutEffectUnmountStopped: markComponentLayoutEffectUnmountStopped,
		      markComponentErrored: markComponentErrored,
		      markComponentSuspended: markComponentSuspended,
		      markLayoutEffectsStarted: markLayoutEffectsStarted,
		      markLayoutEffectsStopped: markLayoutEffectsStopped,
		      markPassiveEffectsStarted: markPassiveEffectsStarted,
		      markPassiveEffectsStopped: markPassiveEffectsStopped,
		      markRenderStarted: markRenderStarted,
		      markRenderYielded: markRenderYielded,
		      markRenderStopped: markRenderStopped,
		      markRenderScheduled: markRenderScheduled,
		      markForceUpdateScheduled: markForceUpdateScheduled,
		      markStateUpdateScheduled: markStateUpdateScheduled
		    },
		    toggleProfilingStatus: toggleProfilingStatus
		  };
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/renderer.js
		function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function renderer_slicedToArray(arr, i) { return renderer_arrayWithHoles(arr) || renderer_iterableToArrayLimit(arr, i) || renderer_unsupportedIterableToArray(arr, i) || renderer_nonIterableRest(); }

		function renderer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function renderer_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function renderer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || renderer_unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return renderer_arrayLikeToArray(arr); }

		function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = renderer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function renderer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return renderer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return renderer_arrayLikeToArray(o, minLen); }

		function renderer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function renderer_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { renderer_typeof = function _typeof(obj) { return typeof obj; }; } else { renderer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return renderer_typeof(obj); }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
















		function getFiberFlags(fiber) {
		  // The name of this field changed from "effectTag" to "flags"
		  return fiber.flags !== undefined ? fiber.flags : fiber.effectTag;
		} // Some environments (e.g. React Native / Hermes) don't support the performance API yet.


		var renderer_getCurrentTime = (typeof performance === "undefined" ? "undefined" : renderer_typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
		  return performance.now();
		} : function () {
		  return Date.now();
		};
		function getInternalReactConstants(version) {
		  var ReactTypeOfSideEffect = {
		    DidCapture: 128,
		    NoFlags: 0,
		    PerformedWork: 1,
		    Placement: 2,
		    Incomplete: 8192,
		    Hydrating: 4096
		  }; // **********************************************************
		  // The section below is copied from files in React repo.
		  // Keep it in sync, and add version guards if it changes.
		  //
		  // Technically these priority levels are invalid for versions before 16.9,
		  // but 16.9 is the first version to report priority level to DevTools,
		  // so we can avoid checking for earlier versions and support pre-16.9 canary releases in the process.

		  var ReactPriorityLevels = {
		    ImmediatePriority: 99,
		    UserBlockingPriority: 98,
		    NormalPriority: 97,
		    LowPriority: 96,
		    IdlePriority: 95,
		    NoPriority: 90
		  };

		  if (Object(semver["gt"])(version, '17.0.2')) {
		    ReactPriorityLevels = {
		      ImmediatePriority: 1,
		      UserBlockingPriority: 2,
		      NormalPriority: 3,
		      LowPriority: 4,
		      IdlePriority: 5,
		      NoPriority: 0
		    };
		  }

		  var StrictModeBits = 0;

		  if (Object(semver["gte"])(version, '18.0.0-alpha')) {
		    // 18+
		    StrictModeBits = 24;
		  } else if (Object(semver["gte"])(version, '16.9.0')) {
		    // 16.9 - 17
		    StrictModeBits = 1;
		  } else if (Object(semver["gte"])(version, '16.3.0')) {
		    // 16.3 - 16.8
		    StrictModeBits = 2;
		  }

		  var ReactTypeOfWork = null; // **********************************************************
		  // The section below is copied from files in React repo.
		  // Keep it in sync, and add version guards if it changes.
		  //
		  // TODO Update the gt() check below to be gte() whichever the next version number is.
		  // Currently the version in Git is 17.0.2 (but that version has not been/may not end up being released).

		  if (Object(semver["gt"])(version, '17.0.1')) {
		    ReactTypeOfWork = {
		      CacheComponent: 24,
		      // Experimental
		      ClassComponent: 1,
		      ContextConsumer: 9,
		      ContextProvider: 10,
		      CoroutineComponent: -1,
		      // Removed
		      CoroutineHandlerPhase: -1,
		      // Removed
		      DehydratedSuspenseComponent: 18,
		      // Behind a flag
		      ForwardRef: 11,
		      Fragment: 7,
		      FunctionComponent: 0,
		      HostComponent: 5,
		      HostPortal: 4,
		      HostRoot: 3,
		      HostText: 6,
		      IncompleteClassComponent: 17,
		      IndeterminateComponent: 2,
		      LazyComponent: 16,
		      LegacyHiddenComponent: 23,
		      MemoComponent: 14,
		      Mode: 8,
		      OffscreenComponent: 22,
		      // Experimental
		      Profiler: 12,
		      ScopeComponent: 21,
		      // Experimental
		      SimpleMemoComponent: 15,
		      SuspenseComponent: 13,
		      SuspenseListComponent: 19,
		      // Experimental
		      TracingMarkerComponent: 25,
		      // Experimental - This is technically in 18 but we don't
		      // want to fork again so we're adding it here instead
		      YieldComponent: -1 // Removed

		    };
		  } else if (Object(semver["gte"])(version, '17.0.0-alpha')) {
		    ReactTypeOfWork = {
		      CacheComponent: -1,
		      // Doesn't exist yet
		      ClassComponent: 1,
		      ContextConsumer: 9,
		      ContextProvider: 10,
		      CoroutineComponent: -1,
		      // Removed
		      CoroutineHandlerPhase: -1,
		      // Removed
		      DehydratedSuspenseComponent: 18,
		      // Behind a flag
		      ForwardRef: 11,
		      Fragment: 7,
		      FunctionComponent: 0,
		      HostComponent: 5,
		      HostPortal: 4,
		      HostRoot: 3,
		      HostText: 6,
		      IncompleteClassComponent: 17,
		      IndeterminateComponent: 2,
		      LazyComponent: 16,
		      LegacyHiddenComponent: 24,
		      MemoComponent: 14,
		      Mode: 8,
		      OffscreenComponent: 23,
		      // Experimental
		      Profiler: 12,
		      ScopeComponent: 21,
		      // Experimental
		      SimpleMemoComponent: 15,
		      SuspenseComponent: 13,
		      SuspenseListComponent: 19,
		      // Experimental
		      TracingMarkerComponent: -1,
		      // Doesn't exist yet
		      YieldComponent: -1 // Removed

		    };
		  } else if (Object(semver["gte"])(version, '16.6.0-beta.0')) {
		    ReactTypeOfWork = {
		      CacheComponent: -1,
		      // Doesn't exist yet
		      ClassComponent: 1,
		      ContextConsumer: 9,
		      ContextProvider: 10,
		      CoroutineComponent: -1,
		      // Removed
		      CoroutineHandlerPhase: -1,
		      // Removed
		      DehydratedSuspenseComponent: 18,
		      // Behind a flag
		      ForwardRef: 11,
		      Fragment: 7,
		      FunctionComponent: 0,
		      HostComponent: 5,
		      HostPortal: 4,
		      HostRoot: 3,
		      HostText: 6,
		      IncompleteClassComponent: 17,
		      IndeterminateComponent: 2,
		      LazyComponent: 16,
		      LegacyHiddenComponent: -1,
		      MemoComponent: 14,
		      Mode: 8,
		      OffscreenComponent: -1,
		      // Experimental
		      Profiler: 12,
		      ScopeComponent: -1,
		      // Experimental
		      SimpleMemoComponent: 15,
		      SuspenseComponent: 13,
		      SuspenseListComponent: 19,
		      // Experimental
		      TracingMarkerComponent: -1,
		      // Doesn't exist yet
		      YieldComponent: -1 // Removed

		    };
		  } else if (Object(semver["gte"])(version, '16.4.3-alpha')) {
		    ReactTypeOfWork = {
		      CacheComponent: -1,
		      // Doesn't exist yet
		      ClassComponent: 2,
		      ContextConsumer: 11,
		      ContextProvider: 12,
		      CoroutineComponent: -1,
		      // Removed
		      CoroutineHandlerPhase: -1,
		      // Removed
		      DehydratedSuspenseComponent: -1,
		      // Doesn't exist yet
		      ForwardRef: 13,
		      Fragment: 9,
		      FunctionComponent: 0,
		      HostComponent: 7,
		      HostPortal: 6,
		      HostRoot: 5,
		      HostText: 8,
		      IncompleteClassComponent: -1,
		      // Doesn't exist yet
		      IndeterminateComponent: 4,
		      LazyComponent: -1,
		      // Doesn't exist yet
		      LegacyHiddenComponent: -1,
		      MemoComponent: -1,
		      // Doesn't exist yet
		      Mode: 10,
		      OffscreenComponent: -1,
		      // Experimental
		      Profiler: 15,
		      ScopeComponent: -1,
		      // Experimental
		      SimpleMemoComponent: -1,
		      // Doesn't exist yet
		      SuspenseComponent: 16,
		      SuspenseListComponent: -1,
		      // Doesn't exist yet
		      TracingMarkerComponent: -1,
		      // Doesn't exist yet
		      YieldComponent: -1 // Removed

		    };
		  } else {
		    ReactTypeOfWork = {
		      CacheComponent: -1,
		      // Doesn't exist yet
		      ClassComponent: 2,
		      ContextConsumer: 12,
		      ContextProvider: 13,
		      CoroutineComponent: 7,
		      CoroutineHandlerPhase: 8,
		      DehydratedSuspenseComponent: -1,
		      // Doesn't exist yet
		      ForwardRef: 14,
		      Fragment: 10,
		      FunctionComponent: 1,
		      HostComponent: 5,
		      HostPortal: 4,
		      HostRoot: 3,
		      HostText: 6,
		      IncompleteClassComponent: -1,
		      // Doesn't exist yet
		      IndeterminateComponent: 0,
		      LazyComponent: -1,
		      // Doesn't exist yet
		      LegacyHiddenComponent: -1,
		      MemoComponent: -1,
		      // Doesn't exist yet
		      Mode: 11,
		      OffscreenComponent: -1,
		      // Experimental
		      Profiler: 15,
		      ScopeComponent: -1,
		      // Experimental
		      SimpleMemoComponent: -1,
		      // Doesn't exist yet
		      SuspenseComponent: 16,
		      SuspenseListComponent: -1,
		      // Doesn't exist yet
		      TracingMarkerComponent: -1,
		      // Doesn't exist yet
		      YieldComponent: 9
		    };
		  } // **********************************************************
		  // End of copied code.
		  // **********************************************************


		  function getTypeSymbol(type) {
		    var symbolOrNumber = renderer_typeof(type) === 'object' && type !== null ? type.$$typeof : type; // $FlowFixMe Flow doesn't know about typeof "symbol"

		    return renderer_typeof(symbolOrNumber) === 'symbol' ? symbolOrNumber.toString() : symbolOrNumber;
		  }

		  var _ReactTypeOfWork = ReactTypeOfWork,
		      CacheComponent = _ReactTypeOfWork.CacheComponent,
		      ClassComponent = _ReactTypeOfWork.ClassComponent,
		      IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent,
		      FunctionComponent = _ReactTypeOfWork.FunctionComponent,
		      IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent,
		      ForwardRef = _ReactTypeOfWork.ForwardRef,
		      HostRoot = _ReactTypeOfWork.HostRoot,
		      HostComponent = _ReactTypeOfWork.HostComponent,
		      HostPortal = _ReactTypeOfWork.HostPortal,
		      HostText = _ReactTypeOfWork.HostText,
		      Fragment = _ReactTypeOfWork.Fragment,
		      LazyComponent = _ReactTypeOfWork.LazyComponent,
		      LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent,
		      MemoComponent = _ReactTypeOfWork.MemoComponent,
		      OffscreenComponent = _ReactTypeOfWork.OffscreenComponent,
		      Profiler = _ReactTypeOfWork.Profiler,
		      ScopeComponent = _ReactTypeOfWork.ScopeComponent,
		      SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent,
		      SuspenseComponent = _ReactTypeOfWork.SuspenseComponent,
		      SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent,
		      TracingMarkerComponent = _ReactTypeOfWork.TracingMarkerComponent;

		  function resolveFiberType(type) {
		    var typeSymbol = getTypeSymbol(type);

		    switch (typeSymbol) {
		      case ReactSymbols["j" /* MEMO_NUMBER */]:
		      case ReactSymbols["k" /* MEMO_SYMBOL_STRING */]:
		        // recursively resolving memo type in case of memo(forwardRef(Component))
		        return resolveFiberType(type.type);

		      case ReactSymbols["f" /* FORWARD_REF_NUMBER */]:
		      case ReactSymbols["g" /* FORWARD_REF_SYMBOL_STRING */]:
		        return type.render;

		      default:
		        return type;
		    }
		  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods


		  function getDisplayNameForFiber(fiber) {
		    var elementType = fiber.elementType,
		        type = fiber.type,
		        tag = fiber.tag;
		    var resolvedType = type;

		    if (renderer_typeof(type) === 'object' && type !== null) {
		      resolvedType = resolveFiberType(type);
		    }

		    var resolvedContext = null;

		    switch (tag) {
		      case CacheComponent:
		        return 'Cache';

		      case ClassComponent:
		      case IncompleteClassComponent:
		        return Object(utils["f" /* getDisplayName */])(resolvedType);

		      case FunctionComponent:
		      case IndeterminateComponent:
		        return Object(utils["f" /* getDisplayName */])(resolvedType);

		      case ForwardRef:
		        // Mirror https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/shared/getComponentName.js#L27-L37
		        return type && type.displayName || Object(utils["f" /* getDisplayName */])(resolvedType, 'Anonymous');

		      case HostRoot:
		        var fiberRoot = fiber.stateNode;

		        if (fiberRoot != null && fiberRoot._debugRootType !== null) {
		          return fiberRoot._debugRootType;
		        }

		        return null;

		      case HostComponent:
		        return type;

		      case HostPortal:
		      case HostText:
		      case Fragment:
		        return null;

		      case LazyComponent:
		        // This display name will not be user visible.
		        // Once a Lazy component loads its inner component, React replaces the tag and type.
		        // This display name will only show up in console logs when DevTools DEBUG mode is on.
		        return 'Lazy';

		      case MemoComponent:
		      case SimpleMemoComponent:
		        return elementType && elementType.displayName || type && type.displayName || Object(utils["f" /* getDisplayName */])(resolvedType, 'Anonymous');

		      case SuspenseComponent:
		        return 'Suspense';

		      case LegacyHiddenComponent:
		        return 'LegacyHidden';

		      case OffscreenComponent:
		        return 'Offscreen';

		      case ScopeComponent:
		        return 'Scope';

		      case SuspenseListComponent:
		        return 'SuspenseList';

		      case Profiler:
		        return 'Profiler';

		      case TracingMarkerComponent:
		        return 'TracingMarker';

		      default:
		        var typeSymbol = getTypeSymbol(type);

		        switch (typeSymbol) {
		          case ReactSymbols["a" /* CONCURRENT_MODE_NUMBER */]:
		          case ReactSymbols["b" /* CONCURRENT_MODE_SYMBOL_STRING */]:
		          case ReactSymbols["e" /* DEPRECATED_ASYNC_MODE_SYMBOL_STRING */]:
		            return null;

		          case ReactSymbols["n" /* PROVIDER_NUMBER */]:
		          case ReactSymbols["o" /* PROVIDER_SYMBOL_STRING */]:
		            // 16.3.0 exposed the context object as "context"
		            // PR #12501 changed it to "_context" for 16.3.1+
		            // NOTE Keep in sync with inspectElementRaw()
		            resolvedContext = fiber.type._context || fiber.type.context;
		            return "".concat(resolvedContext.displayName || 'Context', ".Provider");

		          case ReactSymbols["c" /* CONTEXT_NUMBER */]:
		          case ReactSymbols["d" /* CONTEXT_SYMBOL_STRING */]:
		          case ReactSymbols["r" /* SERVER_CONTEXT_SYMBOL_STRING */]:
		            // 16.3-16.5 read from "type" because the Consumer is the actual context object.
		            // 16.6+ should read from "type._context" because Consumer can be different (in DEV).
		            // NOTE Keep in sync with inspectElementRaw()
		            resolvedContext = fiber.type._context || fiber.type; // NOTE: TraceUpdatesBackendManager depends on the name ending in '.Consumer'
		            // If you change the name, figure out a more resilient way to detect it.

		            return "".concat(resolvedContext.displayName || 'Context', ".Consumer");

		          case ReactSymbols["s" /* STRICT_MODE_NUMBER */]:
		          case ReactSymbols["t" /* STRICT_MODE_SYMBOL_STRING */]:
		            return null;

		          case ReactSymbols["l" /* PROFILER_NUMBER */]:
		          case ReactSymbols["m" /* PROFILER_SYMBOL_STRING */]:
		            return "Profiler(".concat(fiber.memoizedProps.id, ")");

		          case ReactSymbols["p" /* SCOPE_NUMBER */]:
		          case ReactSymbols["q" /* SCOPE_SYMBOL_STRING */]:
		            return 'Scope';

		          default:
		            // Unknown element type.
		            // This may mean a new element type that has not yet been added to DevTools.
		            return null;
		        }

		    }
		  }

		  return {
		    getDisplayNameForFiber: getDisplayNameForFiber,
		    getTypeSymbol: getTypeSymbol,
		    ReactPriorityLevels: ReactPriorityLevels,
		    ReactTypeOfWork: ReactTypeOfWork,
		    ReactTypeOfSideEffect: ReactTypeOfSideEffect,
		    StrictModeBits: StrictModeBits
		  };
		} // Map of one or more Fibers in a pair to their unique id number.
		// We track both Fibers to support Fast Refresh,
		// which may forcefully replace one of the pair as part of hot reloading.
		// In that case it's still important to be able to locate the previous ID during subsequent renders.

		var fiberToIDMap = new Map(); // Map of id to one (arbitrary) Fiber in a pair.
		// This Map is used to e.g. get the display name for a Fiber or schedule an update,
		// operations that should be the same whether the current and work-in-progress Fiber is used.

		var idToArbitraryFiberMap = new Map();
		function attach(hook, rendererID, renderer, global) {
		  // Newer versions of the reconciler package also specific reconciler version.
		  // If that version number is present, use it.
		  // Third party renderer versions may not match the reconciler version,
		  // and the latter is what's important in terms of tags and symbols.
		  var version = renderer.reconcilerVersion || renderer.version;

		  var _getInternalReactCons = getInternalReactConstants(version),
		      getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber,
		      getTypeSymbol = _getInternalReactCons.getTypeSymbol,
		      ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels,
		      ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork,
		      ReactTypeOfSideEffect = _getInternalReactCons.ReactTypeOfSideEffect,
		      StrictModeBits = _getInternalReactCons.StrictModeBits;

		  var DidCapture = ReactTypeOfSideEffect.DidCapture,
		      Hydrating = ReactTypeOfSideEffect.Hydrating,
		      NoFlags = ReactTypeOfSideEffect.NoFlags,
		      PerformedWork = ReactTypeOfSideEffect.PerformedWork,
		      Placement = ReactTypeOfSideEffect.Placement;
		  var CacheComponent = ReactTypeOfWork.CacheComponent,
		      ClassComponent = ReactTypeOfWork.ClassComponent,
		      ContextConsumer = ReactTypeOfWork.ContextConsumer,
		      DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent,
		      ForwardRef = ReactTypeOfWork.ForwardRef,
		      Fragment = ReactTypeOfWork.Fragment,
		      FunctionComponent = ReactTypeOfWork.FunctionComponent,
		      HostRoot = ReactTypeOfWork.HostRoot,
		      HostPortal = ReactTypeOfWork.HostPortal,
		      HostComponent = ReactTypeOfWork.HostComponent,
		      HostText = ReactTypeOfWork.HostText,
		      IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent,
		      IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
		      LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent,
		      MemoComponent = ReactTypeOfWork.MemoComponent,
		      OffscreenComponent = ReactTypeOfWork.OffscreenComponent,
		      SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent,
		      SuspenseComponent = ReactTypeOfWork.SuspenseComponent,
		      SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent,
		      TracingMarkerComponent = ReactTypeOfWork.TracingMarkerComponent;
		  var ImmediatePriority = ReactPriorityLevels.ImmediatePriority,
		      UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority,
		      NormalPriority = ReactPriorityLevels.NormalPriority,
		      LowPriority = ReactPriorityLevels.LowPriority,
		      IdlePriority = ReactPriorityLevels.IdlePriority,
		      NoPriority = ReactPriorityLevels.NoPriority;
		  var getLaneLabelMap = renderer.getLaneLabelMap,
		      injectProfilingHooks = renderer.injectProfilingHooks,
		      overrideHookState = renderer.overrideHookState,
		      overrideHookStateDeletePath = renderer.overrideHookStateDeletePath,
		      overrideHookStateRenamePath = renderer.overrideHookStateRenamePath,
		      overrideProps = renderer.overrideProps,
		      overridePropsDeletePath = renderer.overridePropsDeletePath,
		      overridePropsRenamePath = renderer.overridePropsRenamePath,
		      scheduleRefresh = renderer.scheduleRefresh,
		      setErrorHandler = renderer.setErrorHandler,
		      setSuspenseHandler = renderer.setSuspenseHandler,
		      scheduleUpdate = renderer.scheduleUpdate;
		  var supportsTogglingError = typeof setErrorHandler === 'function' && typeof scheduleUpdate === 'function';
		  var supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function';

		  if (typeof scheduleRefresh === 'function') {
		    // When Fast Refresh updates a component, the frontend may need to purge cached information.
		    // For example, ASTs cached for the component (for named hooks) may no longer be valid.
		    // Send a signal to the frontend to purge this cached information.
		    // The "fastRefreshScheduled" dispatched is global (not Fiber or even Renderer specific).
		    // This is less effecient since it means the front-end will need to purge the entire cache,
		    // but this is probably an okay trade off in order to reduce coupling between the DevTools and Fast Refresh.
		    renderer.scheduleRefresh = function () {
		      try {
		        hook.emit('fastRefreshScheduled');
		      } finally {
		        return scheduleRefresh.apply(void 0, arguments);
		      }
		    };
		  }

		  var getTimelineData = null;
		  var toggleProfilingStatus = null;

		  if (typeof injectProfilingHooks === 'function') {
		    var response = createProfilingHooks({
		      getDisplayNameForFiber: getDisplayNameForFiber,
		      getIsProfiling: function getIsProfiling() {
		        return isProfiling;
		      },
		      getLaneLabelMap: getLaneLabelMap,
		      reactVersion: version
		    }); // Pass the Profiling hooks to the reconciler for it to call during render.

		    injectProfilingHooks(response.profilingHooks); // Hang onto this toggle so we can notify the external methods of profiling status changes.

		    getTimelineData = response.getTimelineData;
		    toggleProfilingStatus = response.toggleProfilingStatus;
		  } // Tracks Fibers with recently changed number of error/warning messages.
		  // These collections store the Fiber rather than the ID,
		  // in order to avoid generating an ID for Fibers that never get mounted
		  // (due to e.g. Suspense or error boundaries).
		  // onErrorOrWarning() adds Fibers and recordPendingErrorsAndWarnings() later clears them.


		  var fibersWithChangedErrorOrWarningCounts = new Set();
		  var pendingFiberToErrorsMap = new Map();
		  var pendingFiberToWarningsMap = new Map(); // Mapping of fiber IDs to error/warning messages and counts.

		  var fiberIDToErrorsMap = new Map();
		  var fiberIDToWarningsMap = new Map();

		  function clearErrorsAndWarnings() {
		    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
		    var _iterator = _createForOfIteratorHelper(fiberIDToErrorsMap.keys()),
		        _step;

		    try {
		      for (_iterator.s(); !(_step = _iterator.n()).done;) {
		        var id = _step.value;

		        var _fiber = idToArbitraryFiberMap.get(id);

		        if (_fiber != null) {
		          fibersWithChangedErrorOrWarningCounts.add(_fiber);
		          updateMostRecentlyInspectedElementIfNecessary(id);
		        }
		      } // eslint-disable-next-line no-for-of-loops/no-for-of-loops

		    } catch (err) {
		      _iterator.e(err);
		    } finally {
		      _iterator.f();
		    }

		    var _iterator2 = _createForOfIteratorHelper(fiberIDToWarningsMap.keys()),
		        _step2;

		    try {
		      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
		        var _id = _step2.value;

		        var _fiber2 = idToArbitraryFiberMap.get(_id);

		        if (_fiber2 != null) {
		          fibersWithChangedErrorOrWarningCounts.add(_fiber2);
		          updateMostRecentlyInspectedElementIfNecessary(_id);
		        }
		      }
		    } catch (err) {
		      _iterator2.e(err);
		    } finally {
		      _iterator2.f();
		    }

		    fiberIDToErrorsMap.clear();
		    fiberIDToWarningsMap.clear();
		    flushPendingEvents();
		  }

		  function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
		    var fiber = idToArbitraryFiberMap.get(fiberID);

		    if (fiber != null) {
		      // Throw out any pending changes.
		      pendingFiberToErrorsMap.delete(fiber);

		      if (fiberIDToMessageCountMap.has(fiberID)) {
		        fiberIDToMessageCountMap.delete(fiberID); // If previous flushed counts have changed, schedule an update too.

		        fibersWithChangedErrorOrWarningCounts.add(fiber);
		        flushPendingEvents();
		        updateMostRecentlyInspectedElementIfNecessary(fiberID);
		      } else {
		        fibersWithChangedErrorOrWarningCounts.delete(fiber);
		      }
		    }
		  }

		  function clearErrorsForFiberID(fiberID) {
		    clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
		  }

		  function clearWarningsForFiberID(fiberID) {
		    clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
		  }

		  function updateMostRecentlyInspectedElementIfNecessary(fiberID) {
		    if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {
		      hasElementUpdatedSinceLastInspected = true;
		    }
		  } // Called when an error or warning is logged during render, commit, or passive (including unmount functions).


		  function onErrorOrWarning(fiber, type, args) {
		    if (type === 'error') {
		      var maybeID = getFiberIDUnsafe(fiber); // if this is an error simulated by us to trigger error boundary, ignore

		      if (maybeID != null && forceErrorForFiberIDs.get(maybeID) === true) {
		        return;
		      }
		    }

		    var message = backend_utils["f" /* format */].apply(void 0, _toConsumableArray(args));

		    if (constants["s" /* __DEBUG__ */]) {
		      debug('onErrorOrWarning', fiber, null, "".concat(type, ": \"").concat(message, "\""));
		    } // Mark this Fiber as needed its warning/error count updated during the next flush.


		    fibersWithChangedErrorOrWarningCounts.add(fiber); // Track the warning/error for later.

		    var fiberMap = type === 'error' ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;
		    var messageMap = fiberMap.get(fiber);

		    if (messageMap != null) {
		      var count = messageMap.get(message) || 0;
		      messageMap.set(message, count + 1);
		    } else {
		      fiberMap.set(fiber, new Map([[message, 1]]));
		    } // Passive effects may trigger errors or warnings too;
		    // In this case, we should wait until the rest of the passive effects have run,
		    // but we shouldn't wait until the next commit because that might be a long time.
		    // This would also cause "tearing" between an inspected Component and the tree view.
		    // Then again we don't want to flush too soon because this could be an error during async rendering.
		    // Use a debounce technique to ensure that we'll eventually flush.


		    flushPendingErrorsAndWarningsAfterDelay();
		  } // Patching the console enables DevTools to do a few useful things:
		  // * Append component stacks to warnings and error messages
		  // * Disable logging during re-renders to inspect hooks (see inspectHooksOfFiber)
		  //
		  // Don't patch in test environments because we don't want to interfere with Jest's own console overrides.


		  {
		    Object(backend_console["c" /* registerRenderer */])(renderer, onErrorOrWarning); // The renderer interface can't read these preferences directly,
		    // because it is stored in localStorage within the context of the extension.
		    // It relies on the extension to pass the preference through via the global.

		    var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
		    var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
		    var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
		    var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
		    var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
		    Object(backend_console["a" /* patch */])({
		      appendComponentStack: appendComponentStack,
		      breakOnConsoleErrors: breakOnConsoleErrors,
		      showInlineWarningsAndErrors: showInlineWarningsAndErrors,
		      hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
		      browserTheme: browserTheme
		    });
		  }

		  var debug = function debug(name, fiber, parentFiber) {
		    var extraString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

		    if (constants["s" /* __DEBUG__ */]) {
		      var displayName = fiber.tag + ':' + (getDisplayNameForFiber(fiber) || 'null');
		      var maybeID = getFiberIDUnsafe(fiber) || '<no id>';
		      var parentDisplayName = parentFiber ? parentFiber.tag + ':' + (getDisplayNameForFiber(parentFiber) || 'null') : '';
		      var maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || '<no-id>' : '';
		      console.groupCollapsed("[renderer] %c".concat(name, " %c").concat(displayName, " (").concat(maybeID, ") %c").concat(parentFiber ? "".concat(parentDisplayName, " (").concat(maybeParentID, ")") : '', " %c").concat(extraString), 'color: red; font-weight: bold;', 'color: blue;', 'color: purple;', 'color: black;');
		      console.log(new Error().stack.split('\n').slice(1).join('\n'));
		      console.groupEnd();
		    }
		  }; // Configurable Components tree filters.


		  var hideElementsWithDisplayNames = new Set();
		  var hideElementsWithPaths = new Set();
		  var hideElementsWithTypes = new Set(); // Highlight updates

		  var traceUpdatesEnabled = false;
		  var traceUpdatesForNodes = new Set();

		  function applyComponentFilters(componentFilters) {
		    hideElementsWithTypes.clear();
		    hideElementsWithDisplayNames.clear();
		    hideElementsWithPaths.clear();
		    componentFilters.forEach(function (componentFilter) {
		      if (!componentFilter.isEnabled) {
		        return;
		      }

		      switch (componentFilter.type) {
		        case types["a" /* ComponentFilterDisplayName */]:
		          if (componentFilter.isValid && componentFilter.value !== '') {
		            hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, 'i'));
		          }

		          break;

		        case types["b" /* ComponentFilterElementType */]:
		          hideElementsWithTypes.add(componentFilter.value);
		          break;

		        case types["d" /* ComponentFilterLocation */]:
		          if (componentFilter.isValid && componentFilter.value !== '') {
		            hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));
		          }

		          break;

		        case types["c" /* ComponentFilterHOC */]:
		          hideElementsWithDisplayNames.add(new RegExp('\\('));
		          break;

		        default:
		          console.warn("Invalid component filter type \"".concat(componentFilter.type, "\""));
		          break;
		      }
		    });
		  } // The renderer interface can't read saved component filters directly,
		  // because they are stored in localStorage within the context of the extension.
		  // Instead it relies on the extension to pass filters through.


		  if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {
		    applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);
		  } else {
		    // Unfortunately this feature is not expected to work for React Native for now.
		    // It would be annoying for us to spam YellowBox warnings with unactionable stuff,
		    // so for now just skip this message...
		    //console.warn('⚛️ DevTools: Could not locate saved component filters');
		    // Fallback to assuming the default filters in this case.
		    applyComponentFilters(Object(utils["e" /* getDefaultComponentFilters */])());
		  } // If necessary, we can revisit optimizing this operation.
		  // For example, we could add a new recursive unmount tree operation.
		  // The unmount operations are already significantly smaller than mount operations though.
		  // This is something to keep in mind for later.


		  function updateComponentFilters(componentFilters) {
		    if (isProfiling) {
		      // Re-mounting a tree while profiling is in progress might break a lot of assumptions.
		      // If necessary, we could support this- but it doesn't seem like a necessary use case.
		      throw Error('Cannot modify filter preferences while profiling');
		    } // Recursively unmount all roots.


		    hook.getFiberRoots(rendererID).forEach(function (root) {
		      currentRootID = getOrGenerateFiberID(root.current); // The TREE_OPERATION_REMOVE_ROOT operation serves two purposes:
		      // 1. It avoids sending unnecessary bridge traffic to clear a root.
		      // 2. It preserves Fiber IDs when remounting (below) which in turn ID to error/warning mapping.

		      pushOperation(constants["n" /* TREE_OPERATION_REMOVE_ROOT */]);
		      flushPendingEvents();
		      currentRootID = -1;
		    });
		    applyComponentFilters(componentFilters); // Reset pseudo counters so that new path selections will be persisted.

		    rootDisplayNameCounter.clear(); // Recursively re-mount all roots with new filter criteria applied.

		    hook.getFiberRoots(rendererID).forEach(function (root) {
		      currentRootID = getOrGenerateFiberID(root.current);
		      setRootPseudoKey(currentRootID, root.current);
		      mountFiberRecursively(root.current, null, false, false);
		      flushPendingEvents();
		      currentRootID = -1;
		    }); // Also re-evaluate all error and warning counts given the new filters.

		    reevaluateErrorsAndWarnings();
		    flushPendingEvents();
		  } // NOTICE Keep in sync with get*ForFiber methods


		  function shouldFilterFiber(fiber) {
		    var _debugSource = fiber._debugSource,
		        tag = fiber.tag,
		        type = fiber.type;

		    switch (tag) {
		      case DehydratedSuspenseComponent:
		        // TODO: ideally we would show dehydrated Suspense immediately.
		        // However, it has some special behavior (like disconnecting
		        // an alternate and turning into real Suspense) which breaks DevTools.
		        // For now, ignore it, and only show it once it gets hydrated.
		        // https://github.com/bvaughn/react-devtools-experimental/issues/197
		        return true;

		      case HostPortal:
		      case HostText:
		      case Fragment:
		      case LegacyHiddenComponent:
		      case OffscreenComponent:
		        return true;

		      case HostRoot:
		        // It is never valid to filter the root element.
		        return false;

		      default:
		        var typeSymbol = getTypeSymbol(type);

		        switch (typeSymbol) {
		          case ReactSymbols["a" /* CONCURRENT_MODE_NUMBER */]:
		          case ReactSymbols["b" /* CONCURRENT_MODE_SYMBOL_STRING */]:
		          case ReactSymbols["e" /* DEPRECATED_ASYNC_MODE_SYMBOL_STRING */]:
		          case ReactSymbols["s" /* STRICT_MODE_NUMBER */]:
		          case ReactSymbols["t" /* STRICT_MODE_SYMBOL_STRING */]:
		            return true;
		        }

		    }

		    var elementType = getElementTypeForFiber(fiber);

		    if (hideElementsWithTypes.has(elementType)) {
		      return true;
		    }

		    if (hideElementsWithDisplayNames.size > 0) {
		      var displayName = getDisplayNameForFiber(fiber);

		      if (displayName != null) {
		        // eslint-disable-next-line no-for-of-loops/no-for-of-loops
		        var _iterator3 = _createForOfIteratorHelper(hideElementsWithDisplayNames),
		            _step3;

		        try {
		          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
		            var displayNameRegExp = _step3.value;

		            if (displayNameRegExp.test(displayName)) {
		              return true;
		            }
		          }
		        } catch (err) {
		          _iterator3.e(err);
		        } finally {
		          _iterator3.f();
		        }
		      }
		    }

		    if (_debugSource != null && hideElementsWithPaths.size > 0) {
		      var fileName = _debugSource.fileName; // eslint-disable-next-line no-for-of-loops/no-for-of-loops

		      var _iterator4 = _createForOfIteratorHelper(hideElementsWithPaths),
		          _step4;

		      try {
		        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
		          var pathRegExp = _step4.value;

		          if (pathRegExp.test(fileName)) {
		            return true;
		          }
		        }
		      } catch (err) {
		        _iterator4.e(err);
		      } finally {
		        _iterator4.f();
		      }
		    }

		    return false;
		  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods


		  function getElementTypeForFiber(fiber) {
		    var type = fiber.type,
		        tag = fiber.tag;

		    switch (tag) {
		      case ClassComponent:
		      case IncompleteClassComponent:
		        return types["e" /* ElementTypeClass */];

		      case FunctionComponent:
		      case IndeterminateComponent:
		        return types["h" /* ElementTypeFunction */];

		      case ForwardRef:
		        return types["g" /* ElementTypeForwardRef */];

		      case HostRoot:
		        return types["m" /* ElementTypeRoot */];

		      case HostComponent:
		        return types["i" /* ElementTypeHostComponent */];

		      case HostPortal:
		      case HostText:
		      case Fragment:
		        return types["k" /* ElementTypeOtherOrUnknown */];

		      case MemoComponent:
		      case SimpleMemoComponent:
		        return types["j" /* ElementTypeMemo */];

		      case SuspenseComponent:
		        return types["n" /* ElementTypeSuspense */];

		      case SuspenseListComponent:
		        return types["o" /* ElementTypeSuspenseList */];

		      case TracingMarkerComponent:
		        return types["p" /* ElementTypeTracingMarker */];

		      default:
		        var typeSymbol = getTypeSymbol(type);

		        switch (typeSymbol) {
		          case ReactSymbols["a" /* CONCURRENT_MODE_NUMBER */]:
		          case ReactSymbols["b" /* CONCURRENT_MODE_SYMBOL_STRING */]:
		          case ReactSymbols["e" /* DEPRECATED_ASYNC_MODE_SYMBOL_STRING */]:
		            return types["k" /* ElementTypeOtherOrUnknown */];

		          case ReactSymbols["n" /* PROVIDER_NUMBER */]:
		          case ReactSymbols["o" /* PROVIDER_SYMBOL_STRING */]:
		            return types["f" /* ElementTypeContext */];

		          case ReactSymbols["c" /* CONTEXT_NUMBER */]:
		          case ReactSymbols["d" /* CONTEXT_SYMBOL_STRING */]:
		            return types["f" /* ElementTypeContext */];

		          case ReactSymbols["s" /* STRICT_MODE_NUMBER */]:
		          case ReactSymbols["t" /* STRICT_MODE_SYMBOL_STRING */]:
		            return types["k" /* ElementTypeOtherOrUnknown */];

		          case ReactSymbols["l" /* PROFILER_NUMBER */]:
		          case ReactSymbols["m" /* PROFILER_SYMBOL_STRING */]:
		            return types["l" /* ElementTypeProfiler */];

		          default:
		            return types["k" /* ElementTypeOtherOrUnknown */];
		        }

		    }
		  } // When profiling is supported, we store the latest tree base durations for each Fiber.
		  // This is so that we can quickly capture a snapshot of those values if profiling starts.
		  // If we didn't store these values, we'd have to crawl the tree when profiling started,
		  // and use a slow path to find each of the current Fibers.


		  var idToTreeBaseDurationMap = new Map(); // When profiling is supported, we store the latest tree base durations for each Fiber.
		  // This map enables us to filter these times by root when sending them to the frontend.

		  var idToRootMap = new Map(); // When a mount or update is in progress, this value tracks the root that is being operated on.

		  var currentRootID = -1; // Returns the unique ID for a Fiber or generates and caches a new one if the Fiber hasn't been seen before.
		  // Once this method has been called for a Fiber, untrackFiberID() should always be called later to avoid leaking.

		  function getOrGenerateFiberID(fiber) {
		    var id = null;

		    if (fiberToIDMap.has(fiber)) {
		      id = fiberToIDMap.get(fiber);
		    } else {
		      var _alternate = fiber.alternate;

		      if (_alternate !== null && fiberToIDMap.has(_alternate)) {
		        id = fiberToIDMap.get(_alternate);
		      }
		    }

		    var didGenerateID = false;

		    if (id === null) {
		      didGenerateID = true;
		      id = Object(utils["i" /* getUID */])();
		    } // This refinement is for Flow purposes only.


		    var refinedID = id; // Make sure we're tracking this Fiber
		    // e.g. if it just mounted or an error was logged during initial render.

		    if (!fiberToIDMap.has(fiber)) {
		      fiberToIDMap.set(fiber, refinedID);
		      idToArbitraryFiberMap.set(refinedID, fiber);
		    } // Also make sure we're tracking its alternate,
		    // e.g. in case this is the first update after mount.


		    var alternate = fiber.alternate;

		    if (alternate !== null) {
		      if (!fiberToIDMap.has(alternate)) {
		        fiberToIDMap.set(alternate, refinedID);
		      }
		    }

		    if (constants["s" /* __DEBUG__ */]) {
		      if (didGenerateID) {
		        debug('getOrGenerateFiberID()', fiber, fiber.return, 'Generated a new UID');
		      }
		    }

		    return refinedID;
		  } // Returns an ID if one has already been generated for the Fiber or throws.


		  function getFiberIDThrows(fiber) {
		    var maybeID = getFiberIDUnsafe(fiber);

		    if (maybeID !== null) {
		      return maybeID;
		    }

		    throw Error("Could not find ID for Fiber \"".concat(getDisplayNameForFiber(fiber) || '', "\""));
		  } // Returns an ID if one has already been generated for the Fiber or null if one has not been generated.
		  // Use this method while e.g. logging to avoid over-retaining Fibers.


		  function getFiberIDUnsafe(fiber) {
		    if (fiberToIDMap.has(fiber)) {
		      return fiberToIDMap.get(fiber);
		    } else {
		      var alternate = fiber.alternate;

		      if (alternate !== null && fiberToIDMap.has(alternate)) {
		        return fiberToIDMap.get(alternate);
		      }
		    }

		    return null;
		  } // Removes a Fiber (and its alternate) from the Maps used to track their id.
		  // This method should always be called when a Fiber is unmounting.


		  function untrackFiberID(fiber) {
		    if (constants["s" /* __DEBUG__ */]) {
		      debug('untrackFiberID()', fiber, fiber.return, 'schedule after delay');
		    } // Untrack Fibers after a slight delay in order to support a Fast Refresh edge case:
		    // 1. Component type is updated and Fast Refresh schedules an update+remount.
		    // 2. flushPendingErrorsAndWarningsAfterDelay() runs, sees the old Fiber is no longer mounted
		    //    (it's been disconnected by Fast Refresh), and calls untrackFiberID() to clear it from the Map.
		    // 3. React flushes pending passive effects before it runs the next render,
		    //    which logs an error or warning, which causes a new ID to be generated for this Fiber.
		    // 4. DevTools now tries to unmount the old Component with the new ID.
		    //
		    // The underlying problem here is the premature clearing of the Fiber ID,
		    // but DevTools has no way to detect that a given Fiber has been scheduled for Fast Refresh.
		    // (The "_debugNeedsRemount" flag won't necessarily be set.)
		    //
		    // The best we can do is to delay untracking by a small amount,
		    // and give React time to process the Fast Refresh delay.


		    untrackFibersSet.add(fiber); // React may detach alternate pointers during unmount;
		    // Since our untracking code is async, we should explicily track the pending alternate here as well.

		    var alternate = fiber.alternate;

		    if (alternate !== null) {
		      untrackFibersSet.add(alternate);
		    }

		    if (untrackFibersTimeoutID === null) {
		      untrackFibersTimeoutID = setTimeout(untrackFibers, 1000);
		    }
		  }

		  var untrackFibersSet = new Set();
		  var untrackFibersTimeoutID = null;

		  function untrackFibers() {
		    if (untrackFibersTimeoutID !== null) {
		      clearTimeout(untrackFibersTimeoutID);
		      untrackFibersTimeoutID = null;
		    }

		    untrackFibersSet.forEach(function (fiber) {
		      var fiberID = getFiberIDUnsafe(fiber);

		      if (fiberID !== null) {
		        idToArbitraryFiberMap.delete(fiberID); // Also clear any errors/warnings associated with this fiber.

		        clearErrorsForFiberID(fiberID);
		        clearWarningsForFiberID(fiberID);
		      }

		      fiberToIDMap.delete(fiber);
		      var alternate = fiber.alternate;

		      if (alternate !== null) {
		        fiberToIDMap.delete(alternate);
		      }

		      if (forceErrorForFiberIDs.has(fiberID)) {
		        forceErrorForFiberIDs.delete(fiberID);

		        if (forceErrorForFiberIDs.size === 0 && setErrorHandler != null) {
		          setErrorHandler(shouldErrorFiberAlwaysNull);
		        }
		      }
		    });
		    untrackFibersSet.clear();
		  }

		  function getChangeDescription(prevFiber, nextFiber) {
		    switch (getElementTypeForFiber(nextFiber)) {
		      case types["e" /* ElementTypeClass */]:
		      case types["h" /* ElementTypeFunction */]:
		      case types["j" /* ElementTypeMemo */]:
		      case types["g" /* ElementTypeForwardRef */]:
		        if (prevFiber === null) {
		          return {
		            context: null,
		            didHooksChange: false,
		            isFirstMount: true,
		            props: null,
		            state: null
		          };
		        } else {
		          var data = {
		            context: getContextChangedKeys(nextFiber),
		            didHooksChange: false,
		            isFirstMount: false,
		            props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),
		            state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)
		          }; // Only traverse the hooks list once, depending on what info we're returning.

		          if (DevToolsFeatureFlags_core_oss["b" /* enableProfilerChangedHookIndices */]) {
		            var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);
		            data.hooks = indices;
		            data.didHooksChange = indices !== null && indices.length > 0;
		          } else {
		            data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);
		          }

		          return data;
		        }

		      default:
		        return null;
		    }
		  }

		  function updateContextsForFiber(fiber) {
		    switch (getElementTypeForFiber(fiber)) {
		      case types["e" /* ElementTypeClass */]:
		      case types["g" /* ElementTypeForwardRef */]:
		      case types["h" /* ElementTypeFunction */]:
		      case types["j" /* ElementTypeMemo */]:
		        if (idToContextsMap !== null) {
		          var id = getFiberIDThrows(fiber);
		          var contexts = getContextsForFiber(fiber);

		          if (contexts !== null) {
		            idToContextsMap.set(id, contexts);
		          }
		        }

		        break;
		    }
		  } // Differentiates between a null context value and no context.


		  var NO_CONTEXT = {};

		  function getContextsForFiber(fiber) {
		    var legacyContext = NO_CONTEXT;
		    var modernContext = NO_CONTEXT;

		    switch (getElementTypeForFiber(fiber)) {
		      case types["e" /* ElementTypeClass */]:
		        var instance = fiber.stateNode;

		        if (instance != null) {
		          if (instance.constructor && instance.constructor.contextType != null) {
		            modernContext = instance.context;
		          } else {
		            legacyContext = instance.context;

		            if (legacyContext && Object.keys(legacyContext).length === 0) {
		              legacyContext = NO_CONTEXT;
		            }
		          }
		        }

		        return [legacyContext, modernContext];

		      case types["g" /* ElementTypeForwardRef */]:
		      case types["h" /* ElementTypeFunction */]:
		      case types["j" /* ElementTypeMemo */]:
		        var dependencies = fiber.dependencies;

		        if (dependencies && dependencies.firstContext) {
		          modernContext = dependencies.firstContext;
		        }

		        return [legacyContext, modernContext];

		      default:
		        return null;
		    }
		  } // Record all contexts at the time profiling is started.
		  // Fibers only store the current context value,
		  // so we need to track them separately in order to determine changed keys.


		  function crawlToInitializeContextsMap(fiber) {
		    var id = getFiberIDUnsafe(fiber); // Not all Fibers in the subtree have mounted yet.
		    // For example, Offscreen (hidden) or Suspense (suspended) subtrees won't yet be tracked.
		    // We can safely skip these subtrees.

		    if (id !== null) {
		      updateContextsForFiber(fiber);
		      var current = fiber.child;

		      while (current !== null) {
		        crawlToInitializeContextsMap(current);
		        current = current.sibling;
		      }
		    }
		  }

		  function getContextChangedKeys(fiber) {
		    if (idToContextsMap !== null) {
		      var id = getFiberIDThrows(fiber);
		      var prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;
		      var nextContexts = getContextsForFiber(fiber);

		      if (prevContexts == null || nextContexts == null) {
		        return null;
		      }

		      var _prevContexts = renderer_slicedToArray(prevContexts, 2),
		          prevLegacyContext = _prevContexts[0],
		          prevModernContext = _prevContexts[1];

		      var _nextContexts = renderer_slicedToArray(nextContexts, 2),
		          nextLegacyContext = _nextContexts[0],
		          nextModernContext = _nextContexts[1];

		      switch (getElementTypeForFiber(fiber)) {
		        case types["e" /* ElementTypeClass */]:
		          if (prevContexts && nextContexts) {
		            if (nextLegacyContext !== NO_CONTEXT) {
		              return getChangedKeys(prevLegacyContext, nextLegacyContext);
		            } else if (nextModernContext !== NO_CONTEXT) {
		              return prevModernContext !== nextModernContext;
		            }
		          }

		          break;

		        case types["g" /* ElementTypeForwardRef */]:
		        case types["h" /* ElementTypeFunction */]:
		        case types["j" /* ElementTypeMemo */]:
		          if (nextModernContext !== NO_CONTEXT) {
		            var prevContext = prevModernContext;
		            var nextContext = nextModernContext;

		            while (prevContext && nextContext) {
		              // Note this only works for versions of React that support this key (e.v. 18+)
		              // For older versions, there's no good way to read the current context value after render has completed.
		              // This is because React maintains a stack of context values during render,
		              // but by the time DevTools is called, render has finished and the stack is empty.
		              if (!shared_objectIs(prevContext.memoizedValue, nextContext.memoizedValue)) {
		                return true;
		              }

		              prevContext = prevContext.next;
		              nextContext = nextContext.next;
		            }

		            return false;
		          }

		          break;
		      }
		    }

		    return null;
		  }

		  function isHookThatCanScheduleUpdate(hookObject) {
		    var queue = hookObject.queue;

		    if (!queue) {
		      return false;
		    }

		    var boundHasOwnProperty = shared_hasOwnProperty.bind(queue); // Detect the shape of useState() or useReducer()
		    // using the attributes that are unique to these hooks
		    // but also stable (e.g. not tied to current Lanes implementation)

		    var isStateOrReducer = boundHasOwnProperty('pending') && boundHasOwnProperty('dispatch') && typeof queue.dispatch === 'function'; // Detect useSyncExternalStore()

		    var isSyncExternalStore = boundHasOwnProperty('value') && boundHasOwnProperty('getSnapshot') && typeof queue.getSnapshot === 'function'; // These are the only types of hooks that can schedule an update.

		    return isStateOrReducer || isSyncExternalStore;
		  }

		  function didStatefulHookChange(prev, next) {
		    var prevMemoizedState = prev.memoizedState;
		    var nextMemoizedState = next.memoizedState;

		    if (isHookThatCanScheduleUpdate(prev)) {
		      return prevMemoizedState !== nextMemoizedState;
		    }

		    return false;
		  }

		  function didHooksChange(prev, next) {
		    if (prev == null || next == null) {
		      return false;
		    } // We can't report anything meaningful for hooks changes.


		    if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
		      while (next !== null) {
		        if (didStatefulHookChange(prev, next)) {
		          return true;
		        } else {
		          next = next.next;
		          prev = prev.next;
		        }
		      }
		    }

		    return false;
		  }

		  function getChangedHooksIndices(prev, next) {
		    if (DevToolsFeatureFlags_core_oss["b" /* enableProfilerChangedHookIndices */]) {
		      if (prev == null || next == null) {
		        return null;
		      }

		      var indices = [];
		      var index = 0;

		      if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
		        while (next !== null) {
		          if (didStatefulHookChange(prev, next)) {
		            indices.push(index);
		          }

		          next = next.next;
		          prev = prev.next;
		          index++;
		        }
		      }

		      return indices;
		    }

		    return null;
		  }

		  function getChangedKeys(prev, next) {
		    if (prev == null || next == null) {
		      return null;
		    } // We can't report anything meaningful for hooks changes.


		    if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
		      return null;
		    }

		    var keys = new Set([].concat(_toConsumableArray(Object.keys(prev)), _toConsumableArray(Object.keys(next))));
		    var changedKeys = []; // eslint-disable-next-line no-for-of-loops/no-for-of-loops

		    var _iterator5 = _createForOfIteratorHelper(keys),
		        _step5;

		    try {
		      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
		        var key = _step5.value;

		        if (prev[key] !== next[key]) {
		          changedKeys.push(key);
		        }
		      }
		    } catch (err) {
		      _iterator5.e(err);
		    } finally {
		      _iterator5.f();
		    }

		    return changedKeys;
		  } // eslint-disable-next-line no-unused-vars


		  function didFiberRender(prevFiber, nextFiber) {
		    switch (nextFiber.tag) {
		      case ClassComponent:
		      case FunctionComponent:
		      case ContextConsumer:
		      case MemoComponent:
		      case SimpleMemoComponent:
		      case ForwardRef:
		        // For types that execute user code, we check PerformedWork effect.
		        // We don't reflect bailouts (either referential or sCU) in DevTools.
		        // eslint-disable-next-line no-bitwise
		        return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;
		      // Note: ContextConsumer only gets PerformedWork effect in 16.3.3+
		      // so it won't get highlighted with React 16.3.0 to 16.3.2.

		      default:
		        // For host components and other types, we compare inputs
		        // to determine whether something is an update.
		        return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;
		    }
		  }

		  var pendingOperations = [];
		  var pendingRealUnmountedIDs = [];
		  var pendingSimulatedUnmountedIDs = [];
		  var pendingOperationsQueue = [];
		  var pendingStringTable = new Map();
		  var pendingStringTableLength = 0;
		  var pendingUnmountedRootID = null;

		  function pushOperation(op) {

		    pendingOperations.push(op);
		  }

		  function shouldBailoutWithPendingOperations() {
		    if (isProfiling) {
		      if (currentCommitProfilingMetadata != null && currentCommitProfilingMetadata.durations.length > 0) {
		        return false;
		      }
		    }

		    return pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null;
		  }

		  function flushOrQueueOperations(operations) {
		    if (shouldBailoutWithPendingOperations()) {
		      return;
		    }

		    if (pendingOperationsQueue !== null) {
		      pendingOperationsQueue.push(operations);
		    } else {
		      hook.emit('operations', operations);
		    }
		  }

		  var flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

		  function clearPendingErrorsAndWarningsAfterDelay() {
		    if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {
		      clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);
		      flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
		    }
		  }

		  function flushPendingErrorsAndWarningsAfterDelay() {
		    clearPendingErrorsAndWarningsAfterDelay();
		    flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(function () {
		      flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

		      if (pendingOperations.length > 0) {
		        // On the off chance that something else has pushed pending operations,
		        // we should bail on warnings; it's probably not safe to push midway.
		        return;
		      }

		      recordPendingErrorsAndWarnings();

		      if (shouldBailoutWithPendingOperations()) {
		        // No warnings or errors to flush; we can bail out early here too.
		        return;
		      } // We can create a smaller operations array than flushPendingEvents()
		      // because we only need to flush warning and error counts.
		      // Only a few pieces of fixed information are required up front.


		      var operations = new Array(3 + pendingOperations.length);
		      operations[0] = rendererID;
		      operations[1] = currentRootID;
		      operations[2] = 0; // String table size

		      for (var j = 0; j < pendingOperations.length; j++) {
		        operations[3 + j] = pendingOperations[j];
		      }

		      flushOrQueueOperations(operations);
		      pendingOperations.length = 0;
		    }, 1000);
		  }

		  function reevaluateErrorsAndWarnings() {
		    fibersWithChangedErrorOrWarningCounts.clear();
		    fiberIDToErrorsMap.forEach(function (countMap, fiberID) {
		      var fiber = idToArbitraryFiberMap.get(fiberID);

		      if (fiber != null) {
		        fibersWithChangedErrorOrWarningCounts.add(fiber);
		      }
		    });
		    fiberIDToWarningsMap.forEach(function (countMap, fiberID) {
		      var fiber = idToArbitraryFiberMap.get(fiberID);

		      if (fiber != null) {
		        fibersWithChangedErrorOrWarningCounts.add(fiber);
		      }
		    });
		    recordPendingErrorsAndWarnings();
		  }

		  function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
		    var newCount = 0;
		    var messageCountMap = fiberIDToMessageCountMap.get(fiberID);
		    var pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);

		    if (pendingMessageCountMap != null) {
		      if (messageCountMap == null) {
		        messageCountMap = pendingMessageCountMap;
		        fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);
		      } else {
		        // This Flow refinement should not be necessary and yet...
		        var refinedMessageCountMap = messageCountMap;
		        pendingMessageCountMap.forEach(function (pendingCount, message) {
		          var previousCount = refinedMessageCountMap.get(message) || 0;
		          refinedMessageCountMap.set(message, previousCount + pendingCount);
		        });
		      }
		    }

		    if (!shouldFilterFiber(fiber)) {
		      if (messageCountMap != null) {
		        messageCountMap.forEach(function (count) {
		          newCount += count;
		        });
		      }
		    }

		    pendingFiberToMessageCountMap.delete(fiber);
		    return newCount;
		  }

		  function recordPendingErrorsAndWarnings() {
		    clearPendingErrorsAndWarningsAfterDelay();
		    fibersWithChangedErrorOrWarningCounts.forEach(function (fiber) {
		      var fiberID = getFiberIDUnsafe(fiber);

		      if (fiberID === null) ; else {
		        var errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
		        var warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
		        pushOperation(constants["q" /* TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS */]);
		        pushOperation(fiberID);
		        pushOperation(errorCount);
		        pushOperation(warningCount);
		      } // Always clean up so that we don't leak.


		      pendingFiberToErrorsMap.delete(fiber);
		      pendingFiberToWarningsMap.delete(fiber);
		    });
		    fibersWithChangedErrorOrWarningCounts.clear();
		  }

		  function flushPendingEvents(root) {
		    // Add any pending errors and warnings to the operations array.
		    // We do this just before flushing, so we can ignore errors for no-longer-mounted Fibers.
		    recordPendingErrorsAndWarnings();

		    if (shouldBailoutWithPendingOperations()) {
		      // If we aren't profiling, we can just bail out here.
		      // No use sending an empty update over the bridge.
		      //
		      // The Profiler stores metadata for each commit and reconstructs the app tree per commit using:
		      // (1) an initial tree snapshot and
		      // (2) the operations array for each commit
		      // Because of this, it's important that the operations and metadata arrays align,
		      // So it's important not to omit even empty operations while profiling is active.
		      return;
		    }

		    var numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
		    var operations = new Array( // Identify which renderer this update is coming from.
		    2 + // [rendererID, rootFiberID]
		    // How big is the string table?
		    1 + // [stringTableLength]
		    // Then goes the actual string table.
		    pendingStringTableLength + ( // All unmounts are batched in a single message.
		    // [TREE_OPERATION_REMOVE, removedIDLength, ...ids]
		    numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + // Regular operations
		    pendingOperations.length); // Identify which renderer this update is coming from.
		    // This enables roots to be mapped to renderers,
		    // Which in turn enables fiber props, states, and hooks to be inspected.

		    var i = 0;
		    operations[i++] = rendererID;
		    operations[i++] = currentRootID; // Now fill in the string table.
		    // [stringTableLength, str1Length, ...str1, str2Length, ...str2, ...]

		    operations[i++] = pendingStringTableLength;
		    pendingStringTable.forEach(function (entry, stringKey) {
		      var encodedString = entry.encodedString; // Don't use the string length.
		      // It won't work for multibyte characters (like emoji).

		      var length = encodedString.length;
		      operations[i++] = length;

		      for (var j = 0; j < length; j++) {
		        operations[i + j] = encodedString[j];
		      }

		      i += length;
		    });

		    if (numUnmountIDs > 0) {
		      // All unmounts except roots are batched in a single message.
		      operations[i++] = constants["m" /* TREE_OPERATION_REMOVE */]; // The first number is how many unmounted IDs we're gonna send.

		      operations[i++] = numUnmountIDs; // Fill in the real unmounts in the reverse order.
		      // They were inserted parents-first by React, but we want children-first.
		      // So we traverse our array backwards.

		      for (var j = pendingRealUnmountedIDs.length - 1; j >= 0; j--) {
		        operations[i++] = pendingRealUnmountedIDs[j];
		      } // Fill in the simulated unmounts (hidden Suspense subtrees) in their order.
		      // (We want children to go before parents.)
		      // They go *after* the real unmounts because we know for sure they won't be
		      // children of already pushed "real" IDs. If they were, we wouldn't be able
		      // to discover them during the traversal, as they would have been deleted.


		      for (var _j = 0; _j < pendingSimulatedUnmountedIDs.length; _j++) {
		        operations[i + _j] = pendingSimulatedUnmountedIDs[_j];
		      }

		      i += pendingSimulatedUnmountedIDs.length; // The root ID should always be unmounted last.

		      if (pendingUnmountedRootID !== null) {
		        operations[i] = pendingUnmountedRootID;
		        i++;
		      }
		    } // Fill in the rest of the operations.


		    for (var _j2 = 0; _j2 < pendingOperations.length; _j2++) {
		      operations[i + _j2] = pendingOperations[_j2];
		    }

		    i += pendingOperations.length; // Let the frontend know about tree operations.

		    flushOrQueueOperations(operations); // Reset all of the pending state now that we've told the frontend about it.

		    pendingOperations.length = 0;
		    pendingRealUnmountedIDs.length = 0;
		    pendingSimulatedUnmountedIDs.length = 0;
		    pendingUnmountedRootID = null;
		    pendingStringTable.clear();
		    pendingStringTableLength = 0;
		  }

		  function getStringID(string) {
		    if (string === null) {
		      return 0;
		    }

		    var existingEntry = pendingStringTable.get(string);

		    if (existingEntry !== undefined) {
		      return existingEntry.id;
		    }

		    var id = pendingStringTable.size + 1;
		    var encodedString = Object(utils["m" /* utfEncodeString */])(string);
		    pendingStringTable.set(string, {
		      encodedString: encodedString,
		      id: id
		    }); // The string table total length needs to account both for the string length,
		    // and for the array item that contains the length itself.
		    //
		    // Don't use string length for this table.
		    // It won't work for multibyte characters (like emoji).

		    pendingStringTableLength += encodedString.length + 1;
		    return id;
		  }

		  function recordMount(fiber, parentFiber) {
		    var isRoot = fiber.tag === HostRoot;
		    var id = getOrGenerateFiberID(fiber);

		    if (constants["s" /* __DEBUG__ */]) {
		      debug('recordMount()', fiber, parentFiber);
		    }

		    var hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');
		    var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration'); // Adding a new field here would require a bridge protocol version bump (a backwads breaking change).
		    // Instead let's re-purpose a pre-existing field to carry more information.

		    var profilingFlags = 0;

		    if (isProfilingSupported) {
		      profilingFlags = constants["g" /* PROFILING_FLAG_BASIC_SUPPORT */];

		      if (typeof injectProfilingHooks === 'function') {
		        profilingFlags |= constants["h" /* PROFILING_FLAG_TIMELINE_SUPPORT */];
		      }
		    }

		    if (isRoot) {
		      pushOperation(constants["l" /* TREE_OPERATION_ADD */]);
		      pushOperation(id);
		      pushOperation(types["m" /* ElementTypeRoot */]);
		      pushOperation((fiber.mode & StrictModeBits) !== 0 ? 1 : 0);
		      pushOperation(profilingFlags);
		      pushOperation(StrictModeBits !== 0 ? 1 : 0);
		      pushOperation(hasOwnerMetadata ? 1 : 0);

		      if (isProfiling) {
		        if (displayNamesByRootID !== null) {
		          displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));
		        }
		      }
		    } else {
		      var key = fiber.key;
		      var displayName = getDisplayNameForFiber(fiber);
		      var elementType = getElementTypeForFiber(fiber);
		      var _debugOwner = fiber._debugOwner; // Ideally we should call getFiberIDThrows() for _debugOwner,
		      // since owners are almost always higher in the tree (and so have already been processed),
		      // but in some (rare) instances reported in open source, a descendant mounts before an owner.
		      // Since this is a DEV only field it's probably okay to also just lazily generate and ID here if needed.
		      // See https://github.com/facebook/react/issues/21445

		      var ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;
		      var parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;
		      var displayNameStringID = getStringID(displayName); // This check is a guard to handle a React element that has been modified
		      // in such a way as to bypass the default stringification of the "key" property.

		      var keyString = key === null ? null : String(key);
		      var keyStringID = getStringID(keyString);
		      pushOperation(constants["l" /* TREE_OPERATION_ADD */]);
		      pushOperation(id);
		      pushOperation(elementType);
		      pushOperation(parentID);
		      pushOperation(ownerID);
		      pushOperation(displayNameStringID);
		      pushOperation(keyStringID); // If this subtree has a new mode, let the frontend know.

		      if ((fiber.mode & StrictModeBits) !== 0 && (parentFiber.mode & StrictModeBits) === 0) {
		        pushOperation(constants["p" /* TREE_OPERATION_SET_SUBTREE_MODE */]);
		        pushOperation(id);
		        pushOperation(types["q" /* StrictMode */]);
		      }
		    }

		    if (isProfilingSupported) {
		      idToRootMap.set(id, currentRootID);
		      recordProfilingDurations(fiber);
		    }
		  }

		  function recordUnmount(fiber, isSimulated) {
		    if (constants["s" /* __DEBUG__ */]) {
		      debug('recordUnmount()', fiber, null, isSimulated ? 'unmount is simulated' : '');
		    }

		    if (trackedPathMatchFiber !== null) {
		      // We're in the process of trying to restore previous selection.
		      // If this fiber matched but is being unmounted, there's no use trying.
		      // Reset the state so we don't keep holding onto it.
		      if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {
		        setTrackedPath(null);
		      }
		    }

		    var unsafeID = getFiberIDUnsafe(fiber);

		    if (unsafeID === null) {
		      // If we've never seen this Fiber, it might be inside of a legacy render Suspense fragment (so the store is not even aware of it).
		      // In that case we can just ignore it or it will cause errors later on.
		      // One example of this is a Lazy component that never resolves before being unmounted.
		      //
		      // This also might indicate a Fast Refresh force-remount scenario.
		      //
		      // TODO: This is fragile and can obscure actual bugs.
		      return;
		    } // Flow refinement.


		    var id = unsafeID;
		    var isRoot = fiber.tag === HostRoot;

		    if (isRoot) {
		      // Roots must be removed only after all children (pending and simulated) have been removed.
		      // So we track it separately.
		      pendingUnmountedRootID = id;
		    } else if (!shouldFilterFiber(fiber)) {
		      // To maintain child-first ordering,
		      // we'll push it into one of these queues,
		      // and later arrange them in the correct order.
		      if (isSimulated) {
		        pendingSimulatedUnmountedIDs.push(id);
		      } else {
		        pendingRealUnmountedIDs.push(id);
		      }
		    }

		    if (!fiber._debugNeedsRemount) {
		      untrackFiberID(fiber);
		      var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');

		      if (isProfilingSupported) {
		        idToRootMap.delete(id);
		        idToTreeBaseDurationMap.delete(id);
		      }
		    }
		  }

		  function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {
		    // Iterate over siblings rather than recursing.
		    // This reduces the chance of stack overflow for wide trees (e.g. lists with many items).
		    var fiber = firstChild;

		    while (fiber !== null) {
		      // Generate an ID even for filtered Fibers, in case it's needed later (e.g. for Profiling).
		      getOrGenerateFiberID(fiber);

		      if (constants["s" /* __DEBUG__ */]) {
		        debug('mountFiberRecursively()', fiber, parentFiber);
		      } // If we have the tree selection from previous reload, try to match this Fiber.
		      // Also remember whether to do the same for siblings.


		      var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);
		      var shouldIncludeInTree = !shouldFilterFiber(fiber);

		      if (shouldIncludeInTree) {
		        recordMount(fiber, parentFiber);
		      }

		      if (traceUpdatesEnabled) {
		        if (traceNearestHostComponentUpdate) {
		          var elementType = getElementTypeForFiber(fiber); // If an ancestor updated, we should mark the nearest host nodes for highlighting.

		          if (elementType === types["i" /* ElementTypeHostComponent */]) {
		            traceUpdatesForNodes.add(fiber.stateNode);
		            traceNearestHostComponentUpdate = false;
		          }
		        } // We intentionally do not re-enable the traceNearestHostComponentUpdate flag in this branch,
		        // because we don't want to highlight every host node inside of a newly mounted subtree.

		      }

		      var isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;

		      if (isSuspense) {
		        var isTimedOut = fiber.memoizedState !== null;

		        if (isTimedOut) {
		          // Special case: if Suspense mounts in a timed-out state,
		          // get the fallback child from the inner fragment and mount
		          // it as if it was our own child. Updates handle this too.
		          var primaryChildFragment = fiber.child;
		          var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
		          var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

		          if (fallbackChild !== null) {
		            mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
		          }
		        } else {
		          var primaryChild = null;
		          var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;

		          if (areSuspenseChildrenConditionallyWrapped) {
		            primaryChild = fiber.child;
		          } else if (fiber.child !== null) {
		            primaryChild = fiber.child.child;
		          }

		          if (primaryChild !== null) {
		            mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
		          }
		        }
		      } else {
		        if (fiber.child !== null) {
		          mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
		        }
		      } // We're exiting this Fiber now, and entering its siblings.
		      // If we have selection to restore, we might need to re-activate tracking.


		      updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);
		      fiber = traverseSiblings ? fiber.sibling : null;
		    }
		  } // We use this to simulate unmounting for Suspense trees
		  // when we switch from primary to fallback.


		  function unmountFiberChildrenRecursively(fiber) {
		    if (constants["s" /* __DEBUG__ */]) {
		      debug('unmountFiberChildrenRecursively()', fiber);
		    } // We might meet a nested Suspense on our way.


		    var isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;
		    var child = fiber.child;

		    if (isTimedOutSuspense) {
		      // If it's showing fallback tree, let's traverse it instead.
		      var primaryChildFragment = fiber.child;
		      var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null; // Skip over to the real Fiber child.

		      child = fallbackChildFragment ? fallbackChildFragment.child : null;
		    }

		    while (child !== null) {
		      // Record simulated unmounts children-first.
		      // We skip nodes without return because those are real unmounts.
		      if (child.return !== null) {
		        unmountFiberChildrenRecursively(child);
		        recordUnmount(child, true);
		      }

		      child = child.sibling;
		    }
		  }

		  function recordProfilingDurations(fiber) {
		    var id = getFiberIDThrows(fiber);
		    var actualDuration = fiber.actualDuration,
		        treeBaseDuration = fiber.treeBaseDuration;
		    idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);

		    if (isProfiling) {
		      var alternate = fiber.alternate; // It's important to update treeBaseDuration even if the current Fiber did not render,
		      // because it's possible that one of its descendants did.

		      if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {
		        // Tree base duration updates are included in the operations typed array.
		        // So we have to convert them from milliseconds to microseconds so we can send them as ints.
		        var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);
		        pushOperation(constants["r" /* TREE_OPERATION_UPDATE_TREE_BASE_DURATION */]);
		        pushOperation(id);
		        pushOperation(convertedTreeBaseDuration);
		      }

		      if (alternate == null || didFiberRender(alternate, fiber)) {
		        if (actualDuration != null) {
		          // The actual duration reported by React includes time spent working on children.
		          // This is useful information, but it's also useful to be able to exclude child durations.
		          // The frontend can't compute this, since the immediate children may have been filtered out.
		          // So we need to do this on the backend.
		          // Note that this calculated self duration is not the same thing as the base duration.
		          // The two are calculated differently (tree duration does not accumulate).
		          var selfDuration = actualDuration;
		          var child = fiber.child;

		          while (child !== null) {
		            selfDuration -= child.actualDuration || 0;
		            child = child.sibling;
		          } // If profiling is active, store durations for elements that were rendered during the commit.
		          // Note that we should do this for any fiber we performed work on, regardless of its actualDuration value.
		          // In some cases actualDuration might be 0 for fibers we worked on (particularly if we're using Date.now)
		          // In other cases (e.g. Memo) actualDuration might be greater than 0 even if we "bailed out".


		          var metadata = currentCommitProfilingMetadata;
		          metadata.durations.push(id, actualDuration, selfDuration);
		          metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);

		          if (recordChangeDescriptions) {
		            var changeDescription = getChangeDescription(alternate, fiber);

		            if (changeDescription !== null) {
		              if (metadata.changeDescriptions !== null) {
		                metadata.changeDescriptions.set(id, changeDescription);
		              }
		            }

		            updateContextsForFiber(fiber);
		          }
		        }
		      }
		    }
		  }

		  function recordResetChildren(fiber, childSet) {
		    if (constants["s" /* __DEBUG__ */]) {
		      debug('recordResetChildren()', childSet, fiber);
		    } // The frontend only really cares about the displayName, key, and children.
		    // The first two don't really change, so we are only concerned with the order of children here.
		    // This is trickier than a simple comparison though, since certain types of fibers are filtered.


		    var nextChildren = []; // This is a naive implementation that shallowly recourses children.
		    // We might want to revisit this if it proves to be too inefficient.

		    var child = childSet;

		    while (child !== null) {
		      findReorderedChildrenRecursively(child, nextChildren);
		      child = child.sibling;
		    }

		    var numChildren = nextChildren.length;

		    if (numChildren < 2) {
		      // No need to reorder.
		      return;
		    }

		    pushOperation(constants["o" /* TREE_OPERATION_REORDER_CHILDREN */]);
		    pushOperation(getFiberIDThrows(fiber));
		    pushOperation(numChildren);

		    for (var i = 0; i < nextChildren.length; i++) {
		      pushOperation(nextChildren[i]);
		    }
		  }

		  function findReorderedChildrenRecursively(fiber, nextChildren) {
		    if (!shouldFilterFiber(fiber)) {
		      nextChildren.push(getFiberIDThrows(fiber));
		    } else {
		      var child = fiber.child;
		      var isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;

		      if (isTimedOutSuspense) {
		        // Special case: if Suspense mounts in a timed-out state,
		        // get the fallback child from the inner fragment,
		        // and skip over the primary child.
		        var primaryChildFragment = fiber.child;
		        var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
		        var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

		        if (fallbackChild !== null) {
		          child = fallbackChild;
		        }
		      }

		      while (child !== null) {
		        findReorderedChildrenRecursively(child, nextChildren);
		        child = child.sibling;
		      }
		    }
		  } // Returns whether closest unfiltered fiber parent needs to reset its child list.


		  function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {
		    var id = getOrGenerateFiberID(nextFiber);

		    if (constants["s" /* __DEBUG__ */]) {
		      debug('updateFiberRecursively()', nextFiber, parentFiber);
		    }

		    if (traceUpdatesEnabled) {
		      var elementType = getElementTypeForFiber(nextFiber);

		      if (traceNearestHostComponentUpdate) {
		        // If an ancestor updated, we should mark the nearest host nodes for highlighting.
		        if (elementType === types["i" /* ElementTypeHostComponent */]) {
		          traceUpdatesForNodes.add(nextFiber.stateNode);
		          traceNearestHostComponentUpdate = false;
		        }
		      } else {
		        if (elementType === types["h" /* ElementTypeFunction */] || elementType === types["e" /* ElementTypeClass */] || elementType === types["f" /* ElementTypeContext */] || elementType === types["j" /* ElementTypeMemo */] || elementType === types["g" /* ElementTypeForwardRef */]) {
		          // Otherwise if this is a traced ancestor, flag for the nearest host descendant(s).
		          traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);
		        }
		      }
		    }

		    if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {
		      // If this Fiber has updated, clear cached inspected data.
		      // If it is inspected again, it may need to be re-run to obtain updated hooks values.
		      hasElementUpdatedSinceLastInspected = true;
		    }

		    var shouldIncludeInTree = !shouldFilterFiber(nextFiber);
		    var isSuspense = nextFiber.tag === SuspenseComponent;
		    var shouldResetChildren = false; // The behavior of timed-out Suspense trees is unique.
		    // Rather than unmount the timed out content (and possibly lose important state),
		    // React re-parents this content within a hidden Fragment while the fallback is showing.
		    // This behavior doesn't need to be observable in the DevTools though.
		    // It might even result in a bad user experience for e.g. node selection in the Elements panel.
		    // The easiest fix is to strip out the intermediate Fragment fibers,
		    // so the Elements panel and Profiler don't need to special case them.
		    // Suspense components only have a non-null memoizedState if they're timed-out.

		    var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;
		    var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null; // The logic below is inspired by the code paths in updateSuspenseComponent()
		    // inside ReactFiberBeginWork in the React source code.

		    if (prevDidTimeout && nextDidTimeOut) {
		      // Fallback -> Fallback:
		      // 1. Reconcile fallback set.
		      var nextFiberChild = nextFiber.child;
		      var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null; // Note: We can't use nextFiber.child.sibling.alternate
		      // because the set is special and alternate may not exist.

		      var prevFiberChild = prevFiber.child;
		      var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;

		      if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {
		        shouldResetChildren = true;
		      }
		    } else if (prevDidTimeout && !nextDidTimeOut) {
		      // Fallback -> Primary:
		      // 1. Unmount fallback set
		      // Note: don't emulate fallback unmount because React actually did it.
		      // 2. Mount primary set
		      var nextPrimaryChildSet = nextFiber.child;

		      if (nextPrimaryChildSet !== null) {
		        mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
		      }

		      shouldResetChildren = true;
		    } else if (!prevDidTimeout && nextDidTimeOut) {
		      // Primary -> Fallback:
		      // 1. Hide primary set
		      // This is not a real unmount, so it won't get reported by React.
		      // We need to manually walk the previous tree and record unmounts.
		      unmountFiberChildrenRecursively(prevFiber); // 2. Mount fallback set

		      var _nextFiberChild = nextFiber.child;

		      var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;

		      if (_nextFallbackChildSet != null) {
		        mountFiberRecursively(_nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
		        shouldResetChildren = true;
		      }
		    } else {
		      // Common case: Primary -> Primary.
		      // This is the same code path as for non-Suspense fibers.
		      if (nextFiber.child !== prevFiber.child) {
		        // If the first child is different, we need to traverse them.
		        // Each next child will be either a new child (mount) or an alternate (update).
		        var nextChild = nextFiber.child;
		        var prevChildAtSameIndex = prevFiber.child;

		        while (nextChild) {
		          // We already know children will be referentially different because
		          // they are either new mounts or alternates of previous children.
		          // Schedule updates and mounts depending on whether alternates exist.
		          // We don't track deletions here because they are reported separately.
		          if (nextChild.alternate) {
		            var prevChild = nextChild.alternate;

		            if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {
		              // If a nested tree child order changed but it can't handle its own
		              // child order invalidation (e.g. because it's filtered out like host nodes),
		              // propagate the need to reset child order upwards to this Fiber.
		              shouldResetChildren = true;
		            } // However we also keep track if the order of the children matches
		            // the previous order. They are always different referentially, but
		            // if the instances line up conceptually we'll want to know that.


		            if (prevChild !== prevChildAtSameIndex) {
		              shouldResetChildren = true;
		            }
		          } else {
		            mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);
		            shouldResetChildren = true;
		          } // Try the next child.


		          nextChild = nextChild.sibling; // Advance the pointer in the previous list so that we can
		          // keep comparing if they line up.

		          if (!shouldResetChildren && prevChildAtSameIndex !== null) {
		            prevChildAtSameIndex = prevChildAtSameIndex.sibling;
		          }
		        } // If we have no more children, but used to, they don't line up.


		        if (prevChildAtSameIndex !== null) {
		          shouldResetChildren = true;
		        }
		      } else {
		        if (traceUpdatesEnabled) {
		          // If we're tracing updates and we've bailed out before reaching a host node,
		          // we should fall back to recursively marking the nearest host descendants for highlight.
		          if (traceNearestHostComponentUpdate) {
		            var hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));
		            hostFibers.forEach(function (hostFiber) {
		              traceUpdatesForNodes.add(hostFiber.stateNode);
		            });
		          }
		        }
		      }
		    }

		    if (shouldIncludeInTree) {
		      var isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');

		      if (isProfilingSupported) {
		        recordProfilingDurations(nextFiber);
		      }
		    }

		    if (shouldResetChildren) {
		      // We need to crawl the subtree for closest non-filtered Fibers
		      // so that we can display them in a flat children set.
		      if (shouldIncludeInTree) {
		        // Normally, search for children from the rendered child.
		        var nextChildSet = nextFiber.child;

		        if (nextDidTimeOut) {
		          // Special case: timed-out Suspense renders the fallback set.
		          var _nextFiberChild2 = nextFiber.child;
		          nextChildSet = _nextFiberChild2 ? _nextFiberChild2.sibling : null;
		        }

		        if (nextChildSet != null) {
		          recordResetChildren(nextFiber, nextChildSet);
		        } // We've handled the child order change for this Fiber.
		        // Since it's included, there's no need to invalidate parent child order.


		        return false;
		      } else {
		        // Let the closest unfiltered parent Fiber reset its child order instead.
		        return true;
		      }
		    } else {
		      return false;
		    }
		  }

		  function cleanup() {// We don't patch any methods so there is no cleanup.
		  }

		  function rootSupportsProfiling(root) {
		    if (root.memoizedInteractions != null) {
		      // v16 builds include this field for the scheduler/tracing API.
		      return true;
		    } else if (root.current != null && root.current.hasOwnProperty('treeBaseDuration')) {
		      // The scheduler/tracing API was removed in v17 though
		      // so we need to check a non-root Fiber.
		      return true;
		    } else {
		      return false;
		    }
		  }

		  function flushInitialOperations() {
		    var localPendingOperationsQueue = pendingOperationsQueue;
		    pendingOperationsQueue = null;

		    if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {
		      // We may have already queued up some operations before the frontend connected
		      // If so, let the frontend know about them.
		      localPendingOperationsQueue.forEach(function (operations) {
		        hook.emit('operations', operations);
		      });
		    } else {
		      // Before the traversals, remember to start tracking
		      // our path in case we have selection to restore.
		      if (trackedPath !== null) {
		        mightBeOnTrackedPath = true;
		      } // If we have not been profiling, then we can just walk the tree and build up its current state as-is.


		      hook.getFiberRoots(rendererID).forEach(function (root) {
		        currentRootID = getOrGenerateFiberID(root.current);
		        setRootPseudoKey(currentRootID, root.current); // Handle multi-renderer edge-case where only some v16 renderers support profiling.

		        if (isProfiling && rootSupportsProfiling(root)) {
		          // If profiling is active, store commit time and duration.
		          // The frontend may request this information after profiling has stopped.
		          currentCommitProfilingMetadata = {
		            changeDescriptions: recordChangeDescriptions ? new Map() : null,
		            durations: [],
		            commitTime: renderer_getCurrentTime() - profilingStartTime,
		            maxActualDuration: 0,
		            priorityLevel: null,
		            updaters: getUpdatersList(root),
		            effectDuration: null,
		            passiveEffectDuration: null
		          };
		        }

		        mountFiberRecursively(root.current, null, false, false);
		        flushPendingEvents();
		        currentRootID = -1;
		      });
		    }
		  }

		  function getUpdatersList(root) {
		    return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).filter(function (fiber) {
		      return getFiberIDUnsafe(fiber) !== null;
		    }).map(fiberToSerializedElement) : null;
		  }

		  function handleCommitFiberUnmount(fiber) {
		    // Flush any pending Fibers that we are untracking before processing the new commit.
		    // If we don't do this, we might end up double-deleting Fibers in some cases (like Legacy Suspense).
		    untrackFibers(); // This is not recursive.
		    // We can't traverse fibers after unmounting so instead
		    // we rely on React telling us about each unmount.

		    recordUnmount(fiber, false);
		  }

		  function handlePostCommitFiberRoot(root) {
		    if (isProfiling && rootSupportsProfiling(root)) {
		      if (currentCommitProfilingMetadata !== null) {
		        var _getEffectDurations = Object(backend_utils["h" /* getEffectDurations */])(root),
		            effectDuration = _getEffectDurations.effectDuration,
		            passiveEffectDuration = _getEffectDurations.passiveEffectDuration;

		        currentCommitProfilingMetadata.effectDuration = effectDuration;
		        currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;
		      }
		    }
		  }

		  function handleCommitFiberRoot(root, priorityLevel) {
		    var current = root.current;
		    var alternate = current.alternate; // Flush any pending Fibers that we are untracking before processing the new commit.
		    // If we don't do this, we might end up double-deleting Fibers in some cases (like Legacy Suspense).

		    untrackFibers();
		    currentRootID = getOrGenerateFiberID(current); // Before the traversals, remember to start tracking
		    // our path in case we have selection to restore.

		    if (trackedPath !== null) {
		      mightBeOnTrackedPath = true;
		    }

		    if (traceUpdatesEnabled) {
		      traceUpdatesForNodes.clear();
		    } // Handle multi-renderer edge-case where only some v16 renderers support profiling.


		    var isProfilingSupported = rootSupportsProfiling(root);

		    if (isProfiling && isProfilingSupported) {
		      // If profiling is active, store commit time and duration.
		      // The frontend may request this information after profiling has stopped.
		      currentCommitProfilingMetadata = {
		        changeDescriptions: recordChangeDescriptions ? new Map() : null,
		        durations: [],
		        commitTime: renderer_getCurrentTime() - profilingStartTime,
		        maxActualDuration: 0,
		        priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),
		        updaters: getUpdatersList(root),
		        // Initialize to null; if new enough React version is running,
		        // these values will be read during separate handlePostCommitFiberRoot() call.
		        effectDuration: null,
		        passiveEffectDuration: null
		      };
		    }

		    if (alternate) {
		      // TODO: relying on this seems a bit fishy.
		      var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && // A dehydrated root is not considered mounted
		      alternate.memoizedState.isDehydrated !== true;
		      var isMounted = current.memoizedState != null && current.memoizedState.element != null && // A dehydrated root is not considered mounted
		      current.memoizedState.isDehydrated !== true;

		      if (!wasMounted && isMounted) {
		        // Mount a new root.
		        setRootPseudoKey(currentRootID, current);
		        mountFiberRecursively(current, null, false, false);
		      } else if (wasMounted && isMounted) {
		        // Update an existing root.
		        updateFiberRecursively(current, alternate, null, false);
		      } else if (wasMounted && !isMounted) {
		        // Unmount an existing root.
		        removeRootPseudoKey(currentRootID);
		        recordUnmount(current, false);
		      }
		    } else {
		      // Mount a new root.
		      setRootPseudoKey(currentRootID, current);
		      mountFiberRecursively(current, null, false, false);
		    }

		    if (isProfiling && isProfilingSupported) {
		      if (!shouldBailoutWithPendingOperations()) {
		        var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);

		        if (commitProfilingMetadata != null) {
		          commitProfilingMetadata.push(currentCommitProfilingMetadata);
		        } else {
		          rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);
		        }
		      }
		    } // We're done here.


		    flushPendingEvents();

		    if (traceUpdatesEnabled) {
		      hook.emit('traceUpdates', traceUpdatesForNodes);
		    }

		    currentRootID = -1;
		  }

		  function findAllCurrentHostFibers(id) {
		    var fibers = [];
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (!fiber) {
		      return fibers;
		    } // Next we'll drill down this component to find all HostComponent/Text.


		    var node = fiber;

		    while (true) {
		      if (node.tag === HostComponent || node.tag === HostText) {
		        fibers.push(node);
		      } else if (node.child) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }

		      if (node === fiber) {
		        return fibers;
		      }

		      while (!node.sibling) {
		        if (!node.return || node.return === fiber) {
		          return fibers;
		        }

		        node = node.return;
		      }

		      node.sibling.return = node.return;
		      node = node.sibling;
		    } // Flow needs the return here, but ESLint complains about it.
		    // eslint-disable-next-line no-unreachable


		    return fibers;
		  }

		  function findNativeNodesForFiberID(id) {
		    try {
		      var _fiber3 = findCurrentFiberUsingSlowPathById(id);

		      if (_fiber3 === null) {
		        return null;
		      } // Special case for a timed-out Suspense.


		      var isTimedOutSuspense = _fiber3.tag === SuspenseComponent && _fiber3.memoizedState !== null;

		      if (isTimedOutSuspense) {
		        // A timed-out Suspense's findDOMNode is useless.
		        // Try our best to find the fallback directly.
		        var maybeFallbackFiber = _fiber3.child && _fiber3.child.sibling;

		        if (maybeFallbackFiber != null) {
		          _fiber3 = maybeFallbackFiber;
		        }
		      }

		      var hostFibers = findAllCurrentHostFibers(id);
		      return hostFibers.map(function (hostFiber) {
		        return hostFiber.stateNode;
		      }).filter(Boolean);
		    } catch (err) {
		      // The fiber might have unmounted by now.
		      return null;
		    }
		  }

		  function getDisplayNameForFiberID(id) {
		    var fiber = idToArbitraryFiberMap.get(id);
		    return fiber != null ? getDisplayNameForFiber(fiber) : null;
		  }

		  function getFiberIDForNative(hostInstance) {
		    var findNearestUnfilteredAncestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		    var fiber = renderer.findFiberByHostInstance(hostInstance);

		    if (fiber != null) {
		      if (findNearestUnfilteredAncestor) {
		        while (fiber !== null && shouldFilterFiber(fiber)) {
		          fiber = fiber.return;
		        }
		      }

		      return getFiberIDThrows(fiber);
		    }

		    return null;
		  } // This function is copied from React and should be kept in sync:
		  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js


		  function assertIsMounted(fiber) {
		    if (getNearestMountedFiber(fiber) !== fiber) {
		      throw new Error('Unable to find node on an unmounted component.');
		    }
		  } // This function is copied from React and should be kept in sync:
		  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js


		  function getNearestMountedFiber(fiber) {
		    var node = fiber;
		    var nearestMounted = fiber;

		    if (!fiber.alternate) {
		      // If there is no alternate, this might be a new tree that isn't inserted
		      // yet. If it is, then it will have a pending insertion effect on it.
		      var nextNode = node;

		      do {
		        node = nextNode;

		        if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
		          // This is an insertion or in-progress hydration. The nearest possible
		          // mounted fiber is the parent but we need to continue to figure out
		          // if that one is still mounted.
		          nearestMounted = node.return;
		        }

		        nextNode = node.return;
		      } while (nextNode);
		    } else {
		      while (node.return) {
		        node = node.return;
		      }
		    }

		    if (node.tag === HostRoot) {
		      // TODO: Check if this was a nested HostRoot when used with
		      // renderContainerIntoSubtree.
		      return nearestMounted;
		    } // If we didn't hit the root, that means that we're in an disconnected tree
		    // that has been unmounted.


		    return null;
		  } // This function is copied from React and should be kept in sync:
		  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js
		  // It would be nice if we updated React to inject this function directly (vs just indirectly via findDOMNode).
		  // BEGIN copied code


		  function findCurrentFiberUsingSlowPathById(id) {
		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber == null) {
		      console.warn("Could not find Fiber with id \"".concat(id, "\""));
		      return null;
		    }

		    var alternate = fiber.alternate;

		    if (!alternate) {
		      // If there is no alternate, then we only need to check if it is mounted.
		      var nearestMounted = getNearestMountedFiber(fiber);

		      if (nearestMounted === null) {
		        throw new Error('Unable to find node on an unmounted component.');
		      }

		      if (nearestMounted !== fiber) {
		        return null;
		      }

		      return fiber;
		    } // If we have two possible branches, we'll walk backwards up to the root
		    // to see what path the root points to. On the way we may hit one of the
		    // special cases and we'll deal with them.


		    var a = fiber;
		    var b = alternate;

		    while (true) {
		      var parentA = a.return;

		      if (parentA === null) {
		        // We're at the root.
		        break;
		      }

		      var parentB = parentA.alternate;

		      if (parentB === null) {
		        // There is no alternate. This is an unusual case. Currently, it only
		        // happens when a Suspense component is hidden. An extra fragment fiber
		        // is inserted in between the Suspense fiber and its children. Skip
		        // over this extra fragment fiber and proceed to the next parent.
		        var nextParent = parentA.return;

		        if (nextParent !== null) {
		          a = b = nextParent;
		          continue;
		        } // If there's no parent, we're at the root.


		        break;
		      } // If both copies of the parent fiber point to the same child, we can
		      // assume that the child is current. This happens when we bailout on low
		      // priority: the bailed out fiber's child reuses the current child.


		      if (parentA.child === parentB.child) {
		        var child = parentA.child;

		        while (child) {
		          if (child === a) {
		            // We've determined that A is the current branch.
		            assertIsMounted(parentA);
		            return fiber;
		          }

		          if (child === b) {
		            // We've determined that B is the current branch.
		            assertIsMounted(parentA);
		            return alternate;
		          }

		          child = child.sibling;
		        } // We should never have an alternate for any mounting node. So the only
		        // way this could possibly happen is if this was unmounted, if at all.


		        throw new Error('Unable to find node on an unmounted component.');
		      }

		      if (a.return !== b.return) {
		        // The return pointer of A and the return pointer of B point to different
		        // fibers. We assume that return pointers never criss-cross, so A must
		        // belong to the child set of A.return, and B must belong to the child
		        // set of B.return.
		        a = parentA;
		        b = parentB;
		      } else {
		        // The return pointers point to the same fiber. We'll have to use the
		        // default, slow path: scan the child sets of each parent alternate to see
		        // which child belongs to which set.
		        //
		        // Search parent A's child set
		        var didFindChild = false;
		        var _child = parentA.child;

		        while (_child) {
		          if (_child === a) {
		            didFindChild = true;
		            a = parentA;
		            b = parentB;
		            break;
		          }

		          if (_child === b) {
		            didFindChild = true;
		            b = parentA;
		            a = parentB;
		            break;
		          }

		          _child = _child.sibling;
		        }

		        if (!didFindChild) {
		          // Search parent B's child set
		          _child = parentB.child;

		          while (_child) {
		            if (_child === a) {
		              didFindChild = true;
		              a = parentB;
		              b = parentA;
		              break;
		            }

		            if (_child === b) {
		              didFindChild = true;
		              b = parentB;
		              a = parentA;
		              break;
		            }

		            _child = _child.sibling;
		          }

		          if (!didFindChild) {
		            throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
		          }
		        }
		      }

		      if (a.alternate !== b) {
		        throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
		      }
		    } // If the root is not a host container, we're in a disconnected tree. I.e.
		    // unmounted.


		    if (a.tag !== HostRoot) {
		      throw new Error('Unable to find node on an unmounted component.');
		    }

		    if (a.stateNode.current === a) {
		      // We've determined that A is the current branch.
		      return fiber;
		    } // Otherwise B has to be current branch.


		    return alternate;
		  } // END copied code


		  function prepareViewAttributeSource(id, path) {
		    if (isMostRecentlyInspectedElement(id)) {
		      window.$attribute = Object(utils["h" /* getInObject */])(mostRecentlyInspectedElement, path);
		    }
		  }

		  function prepareViewElementSource(id) {
		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber == null) {
		      console.warn("Could not find Fiber with id \"".concat(id, "\""));
		      return;
		    }

		    var elementType = fiber.elementType,
		        tag = fiber.tag,
		        type = fiber.type;

		    switch (tag) {
		      case ClassComponent:
		      case IncompleteClassComponent:
		      case IndeterminateComponent:
		      case FunctionComponent:
		        global.$type = type;
		        break;

		      case ForwardRef:
		        global.$type = type.render;
		        break;

		      case MemoComponent:
		      case SimpleMemoComponent:
		        global.$type = elementType != null && elementType.type != null ? elementType.type : type;
		        break;

		      default:
		        global.$type = null;
		        break;
		    }
		  }

		  function fiberToSerializedElement(fiber) {
		    return {
		      displayName: getDisplayNameForFiber(fiber) || 'Anonymous',
		      id: getFiberIDThrows(fiber),
		      key: fiber.key,
		      type: getElementTypeForFiber(fiber)
		    };
		  }

		  function getOwnersList(id) {
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber == null) {
		      return null;
		    }

		    var _debugOwner = fiber._debugOwner;
		    var owners = [fiberToSerializedElement(fiber)];

		    if (_debugOwner) {
		      var owner = _debugOwner;

		      while (owner !== null) {
		        owners.unshift(fiberToSerializedElement(owner));
		        owner = owner._debugOwner || null;
		      }
		    }

		    return owners;
		  } // Fast path props lookup for React Native style editor.
		  // Could use inspectElementRaw() but that would require shallow rendering hooks components,
		  // and could also mess with memoization.


		  function getInstanceAndStyle(id) {
		    var instance = null;
		    var style = null;
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber !== null) {
		      instance = fiber.stateNode;

		      if (fiber.memoizedProps !== null) {
		        style = fiber.memoizedProps.style;
		      }
		    }

		    return {
		      instance: instance,
		      style: style
		    };
		  }

		  function isErrorBoundary(fiber) {
		    var tag = fiber.tag,
		        type = fiber.type;

		    switch (tag) {
		      case ClassComponent:
		      case IncompleteClassComponent:
		        var instance = fiber.stateNode;
		        return typeof type.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function';

		      default:
		        return false;
		    }
		  }

		  function getNearestErrorBoundaryID(fiber) {
		    var parent = fiber.return;

		    while (parent !== null) {
		      if (isErrorBoundary(parent)) {
		        return getFiberIDUnsafe(parent);
		      }

		      parent = parent.return;
		    }

		    return null;
		  }

		  function inspectElementRaw(id) {
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber == null) {
		      return null;
		    }

		    var _debugOwner = fiber._debugOwner,
		        _debugSource = fiber._debugSource,
		        stateNode = fiber.stateNode,
		        key = fiber.key,
		        memoizedProps = fiber.memoizedProps,
		        memoizedState = fiber.memoizedState,
		        dependencies = fiber.dependencies,
		        tag = fiber.tag,
		        type = fiber.type;
		    var elementType = getElementTypeForFiber(fiber);
		    var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies); // TODO Show custom UI for Cache like we do for Suspense
		    // For now, just hide state data entirely since it's not meant to be inspected.

		    var showState = !usesHooks && tag !== CacheComponent;
		    var typeSymbol = getTypeSymbol(type);
		    var canViewSource = false;
		    var context = null;

		    if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {
		      canViewSource = true;

		      if (stateNode && stateNode.context != null) {
		        // Don't show an empty context object for class components that don't use the context API.
		        var shouldHideContext = elementType === types["e" /* ElementTypeClass */] && !(type.contextTypes || type.contextType);

		        if (!shouldHideContext) {
		          context = stateNode.context;
		        }
		      }
		    } else if (typeSymbol === ReactSymbols["c" /* CONTEXT_NUMBER */] || typeSymbol === ReactSymbols["d" /* CONTEXT_SYMBOL_STRING */]) {
		      // 16.3-16.5 read from "type" because the Consumer is the actual context object.
		      // 16.6+ should read from "type._context" because Consumer can be different (in DEV).
		      // NOTE Keep in sync with getDisplayNameForFiber()
		      var consumerResolvedContext = type._context || type; // Global context value.

		      context = consumerResolvedContext._currentValue || null; // Look for overridden value.

		      var _current = fiber.return;

		      while (_current !== null) {
		        var currentType = _current.type;
		        var currentTypeSymbol = getTypeSymbol(currentType);

		        if (currentTypeSymbol === ReactSymbols["n" /* PROVIDER_NUMBER */] || currentTypeSymbol === ReactSymbols["o" /* PROVIDER_SYMBOL_STRING */]) {
		          // 16.3.0 exposed the context object as "context"
		          // PR #12501 changed it to "_context" for 16.3.1+
		          // NOTE Keep in sync with getDisplayNameForFiber()
		          var providerResolvedContext = currentType._context || currentType.context;

		          if (providerResolvedContext === consumerResolvedContext) {
		            context = _current.memoizedProps.value;
		            break;
		          }
		        }

		        _current = _current.return;
		      }
		    }

		    var hasLegacyContext = false;

		    if (context !== null) {
		      hasLegacyContext = !!type.contextTypes; // To simplify hydration and display logic for context, wrap in a value object.
		      // Otherwise simple values (e.g. strings, booleans) become harder to handle.

		      context = {
		        value: context
		      };
		    }

		    var owners = null;

		    if (_debugOwner) {
		      owners = [];
		      var owner = _debugOwner;

		      while (owner !== null) {
		        owners.push(fiberToSerializedElement(owner));
		        owner = owner._debugOwner || null;
		      }
		    }

		    var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;
		    var hooks = null;

		    if (usesHooks) {
		      var originalConsoleMethods = {}; // Temporarily disable all console logging before re-running the hook.

		      for (var method in console) {
		        try {
		          originalConsoleMethods[method] = console[method]; // $FlowFixMe property error|warn is not writable.

		          console[method] = function () {};
		        } catch (error) {}
		      }

		      try {
		        hooks = Object(react_debug_tools["inspectHooksOfFiber"])(fiber, renderer.currentDispatcherRef, true // Include source location info for hooks
		        );
		      } finally {
		        // Restore original console functionality.
		        for (var _method in originalConsoleMethods) {
		          try {
		            // $FlowFixMe property error|warn is not writable.
		            console[_method] = originalConsoleMethods[_method];
		          } catch (error) {}
		        }
		      }
		    }

		    var rootType = null;
		    var current = fiber;

		    while (current.return !== null) {
		      current = current.return;
		    }

		    var fiberRoot = current.stateNode;

		    if (fiberRoot != null && fiberRoot._debugRootType !== null) {
		      rootType = fiberRoot._debugRootType;
		    }

		    var errors = fiberIDToErrorsMap.get(id) || new Map();
		    var warnings = fiberIDToWarningsMap.get(id) || new Map();
		    var isErrored = (fiber.flags & DidCapture) !== NoFlags || forceErrorForFiberIDs.get(id) === true;
		    var targetErrorBoundaryID;

		    if (isErrorBoundary(fiber)) {
		      // if the current inspected element is an error boundary,
		      // either that we want to use it to toggle off error state
		      // or that we allow to force error state on it if it's within another
		      // error boundary
		      targetErrorBoundaryID = isErrored ? id : getNearestErrorBoundaryID(fiber);
		    } else {
		      targetErrorBoundaryID = getNearestErrorBoundaryID(fiber);
		    }

		    var plugins = {
		      stylex: null
		    };

		    if (DevToolsFeatureFlags_core_oss["c" /* enableStyleXFeatures */]) {
		      if (memoizedProps.hasOwnProperty('xstyle')) {
		        plugins.stylex = getStyleXData(memoizedProps.xstyle);
		      }
		    }

		    return {
		      id: id,
		      // Does the current renderer support editable hooks and function props?
		      canEditHooks: typeof overrideHookState === 'function',
		      canEditFunctionProps: typeof overrideProps === 'function',
		      // Does the current renderer support advanced editing interface?
		      canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === 'function',
		      canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === 'function',
		      canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === 'function',
		      canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === 'function',
		      canToggleError: supportsTogglingError && targetErrorBoundaryID != null,
		      // Is this error boundary in error state.
		      isErrored: isErrored,
		      targetErrorBoundaryID: targetErrorBoundaryID,
		      canToggleSuspense: supportsTogglingSuspense && ( // If it's showing the real content, we can always flip fallback.
		      !isTimedOutSuspense || // If it's showing fallback because we previously forced it to,
		      // allow toggling it back to remove the fallback override.
		      forceFallbackForSuspenseIDs.has(id)),
		      // Can view component source location.
		      canViewSource: canViewSource,
		      // Does the component have legacy context attached to it.
		      hasLegacyContext: hasLegacyContext,
		      key: key != null ? key : null,
		      displayName: getDisplayNameForFiber(fiber),
		      type: elementType,
		      // Inspectable properties.
		      // TODO Review sanitization approach for the below inspectable values.
		      context: context,
		      hooks: hooks,
		      props: memoizedProps,
		      state: showState ? memoizedState : null,
		      errors: Array.from(errors.entries()),
		      warnings: Array.from(warnings.entries()),
		      // List of owners
		      owners: owners,
		      // Location of component in source code.
		      source: _debugSource || null,
		      rootType: rootType,
		      rendererPackageName: renderer.rendererPackageName,
		      rendererVersion: renderer.version,
		      plugins: plugins
		    };
		  }

		  var mostRecentlyInspectedElement = null;
		  var hasElementUpdatedSinceLastInspected = false;
		  var currentlyInspectedPaths = {};

		  function isMostRecentlyInspectedElement(id) {
		    return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;
		  }

		  function isMostRecentlyInspectedElementCurrent(id) {
		    return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;
		  } // Track the intersection of currently inspected paths,
		  // so that we can send their data along if the element is re-rendered.


		  function mergeInspectedPaths(path) {
		    var current = currentlyInspectedPaths;
		    path.forEach(function (key) {
		      if (!current[key]) {
		        current[key] = {};
		      }

		      current = current[key];
		    });
		  }

		  function createIsPathAllowed(key, secondaryCategory) {
		    // This function helps prevent previously-inspected paths from being dehydrated in updates.
		    // This is important to avoid a bad user experience where expanded toggles collapse on update.
		    return function isPathAllowed(path) {
		      switch (secondaryCategory) {
		        case 'hooks':
		          if (path.length === 1) {
		            // Never dehydrate the "hooks" object at the top levels.
		            return true;
		          }

		          if (path[path.length - 2] === 'hookSource' && path[path.length - 1] === 'fileName') {
		            // It's important to preserve the full file name (URL) for hook sources
		            // in case the user has enabled the named hooks feature.
		            // Otherwise the frontend may end up with a partial URL which it can't load.
		            return true;
		          }

		          if (path[path.length - 1] === 'subHooks' || path[path.length - 2] === 'subHooks') {
		            // Dehydrating the 'subHooks' property makes the HooksTree UI a lot more complicated,
		            // so it's easiest for now if we just don't break on this boundary.
		            // We can always dehydrate a level deeper (in the value object).
		            return true;
		          }

		          break;
		      }

		      var current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];

		      if (!current) {
		        return false;
		      }

		      for (var i = 0; i < path.length; i++) {
		        current = current[path[i]];

		        if (!current) {
		          return false;
		        }
		      }

		      return true;
		    };
		  }

		  function updateSelectedElement(inspectedElement) {
		    var hooks = inspectedElement.hooks,
		        id = inspectedElement.id,
		        props = inspectedElement.props;
		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber == null) {
		      console.warn("Could not find Fiber with id \"".concat(id, "\""));
		      return;
		    }

		    var elementType = fiber.elementType,
		        stateNode = fiber.stateNode,
		        tag = fiber.tag,
		        type = fiber.type;

		    switch (tag) {
		      case ClassComponent:
		      case IncompleteClassComponent:
		      case IndeterminateComponent:
		        global.$r = stateNode;
		        break;

		      case FunctionComponent:
		        global.$r = {
		          hooks: hooks,
		          props: props,
		          type: type
		        };
		        break;

		      case ForwardRef:
		        global.$r = {
		          hooks: hooks,
		          props: props,
		          type: type.render
		        };
		        break;

		      case MemoComponent:
		      case SimpleMemoComponent:
		        global.$r = {
		          hooks: hooks,
		          props: props,
		          type: elementType != null && elementType.type != null ? elementType.type : type
		        };
		        break;

		      default:
		        global.$r = null;
		        break;
		    }
		  }

		  function storeAsGlobal(id, path, count) {
		    if (isMostRecentlyInspectedElement(id)) {
		      var value = Object(utils["h" /* getInObject */])(mostRecentlyInspectedElement, path);
		      var key = "$reactTemp".concat(count);
		      window[key] = value;
		      console.log(key);
		      console.log(value);
		    }
		  }

		  function copyElementPath(id, path) {
		    if (isMostRecentlyInspectedElement(id)) {
		      Object(backend_utils["b" /* copyToClipboard */])(Object(utils["h" /* getInObject */])(mostRecentlyInspectedElement, path));
		    }
		  }

		  function inspectElement(requestID, id, path, forceFullData) {
		    if (path !== null) {
		      mergeInspectedPaths(path);
		    }

		    if (isMostRecentlyInspectedElement(id) && !forceFullData) {
		      if (!hasElementUpdatedSinceLastInspected) {
		        if (path !== null) {
		          var secondaryCategory = null;

		          if (path[0] === 'hooks') {
		            secondaryCategory = 'hooks';
		          } // If this element has not been updated since it was last inspected,
		          // we can just return the subset of data in the newly-inspected path.


		          return {
		            id: id,
		            responseID: requestID,
		            type: 'hydrated-path',
		            path: path,
		            value: Object(backend_utils["a" /* cleanForBridge */])(Object(utils["h" /* getInObject */])(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)
		          };
		        } else {
		          // If this element has not been updated since it was last inspected, we don't need to return it.
		          // Instead we can just return the ID to indicate that it has not changed.
		          return {
		            id: id,
		            responseID: requestID,
		            type: 'no-change'
		          };
		        }
		      }
		    } else {
		      currentlyInspectedPaths = {};
		    }

		    hasElementUpdatedSinceLastInspected = false;

		    try {
		      mostRecentlyInspectedElement = inspectElementRaw(id);
		    } catch (error) {
		      // the error name is synced with ReactDebugHooks
		      if (error.name === 'ReactDebugToolsRenderError') {
		        var message = 'Error rendering inspected element.';
		        var stack; // Log error & cause for user to debug

		        console.error(message + '\n\n', error);

		        if (error.cause != null) {
		          var _fiber4 = findCurrentFiberUsingSlowPathById(id);

		          var componentName = _fiber4 != null ? getDisplayNameForFiber(_fiber4) : null;
		          console.error('React DevTools encountered an error while trying to inspect hooks. ' + 'This is most likely caused by an error in current inspected component' + (componentName != null ? ": \"".concat(componentName, "\".") : '.') + '\nThe error thrown in the component is: \n\n', error.cause);

		          if (error.cause instanceof Error) {
		            message = error.cause.message || message;
		            stack = error.cause.stack;
		          }
		        }

		        return {
		          type: 'error',
		          errorType: 'user',
		          id: id,
		          responseID: requestID,
		          message: message,
		          stack: stack
		        };
		      } // the error name is synced with ReactDebugHooks


		      if (error.name === 'ReactDebugToolsUnsupportedHookError') {
		        return {
		          type: 'error',
		          errorType: 'unknown-hook',
		          id: id,
		          responseID: requestID,
		          message: 'Unsupported hook in the react-debug-tools package: ' + error.message
		        };
		      } // Log Uncaught Error


		      console.error('Error inspecting element.\n\n', error);
		      return {
		        type: 'error',
		        errorType: 'uncaught',
		        id: id,
		        responseID: requestID,
		        message: error.message,
		        stack: error.stack
		      };
		    }

		    if (mostRecentlyInspectedElement === null) {
		      return {
		        id: id,
		        responseID: requestID,
		        type: 'not-found'
		      };
		    } // Any time an inspected element has an update,
		    // we should update the selected $r value as wel.
		    // Do this before dehydration (cleanForBridge).


		    updateSelectedElement(mostRecentlyInspectedElement); // Clone before cleaning so that we preserve the full data.
		    // This will enable us to send patches without re-inspecting if hydrated paths are requested.
		    // (Reducing how often we shallow-render is a better DX for function components that use hooks.)

		    var cleanedInspectedElement = _objectSpread({}, mostRecentlyInspectedElement);

		    cleanedInspectedElement.context = Object(backend_utils["a" /* cleanForBridge */])(cleanedInspectedElement.context, createIsPathAllowed('context', null));
		    cleanedInspectedElement.hooks = Object(backend_utils["a" /* cleanForBridge */])(cleanedInspectedElement.hooks, createIsPathAllowed('hooks', 'hooks'));
		    cleanedInspectedElement.props = Object(backend_utils["a" /* cleanForBridge */])(cleanedInspectedElement.props, createIsPathAllowed('props', null));
		    cleanedInspectedElement.state = Object(backend_utils["a" /* cleanForBridge */])(cleanedInspectedElement.state, createIsPathAllowed('state', null));
		    return {
		      id: id,
		      responseID: requestID,
		      type: 'full-data',
		      value: cleanedInspectedElement
		    };
		  }

		  function logElementToConsole(id) {
		    var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);

		    if (result === null) {
		      console.warn("Could not find Fiber with id \"".concat(id, "\""));
		      return;
		    }

		    var supportsGroup = typeof console.groupCollapsed === 'function';

		    if (supportsGroup) {
		      console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), // --dom-tag-name-color is the CSS variable Chrome styles HTML elements with in the console.
		      'color: var(--dom-tag-name-color); font-weight: normal;');
		    }

		    if (result.props !== null) {
		      console.log('Props:', result.props);
		    }

		    if (result.state !== null) {
		      console.log('State:', result.state);
		    }

		    if (result.hooks !== null) {
		      console.log('Hooks:', result.hooks);
		    }

		    var nativeNodes = findNativeNodesForFiberID(id);

		    if (nativeNodes !== null) {
		      console.log('Nodes:', nativeNodes);
		    }

		    if (result.source !== null) {
		      console.log('Location:', result.source);
		    }

		    if (window.chrome || /firefox/i.test(navigator.userAgent)) {
		      console.log('Right-click any value to save it as a global variable for further inspection.');
		    }

		    if (supportsGroup) {
		      console.groupEnd();
		    }
		  }

		  function deletePath(type, id, hookID, path) {
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber !== null) {
		      var instance = fiber.stateNode;

		      switch (type) {
		        case 'context':
		          // To simplify hydration and display of primitive context values (e.g. number, string)
		          // the inspectElement() method wraps context in a {value: ...} object.
		          // We need to remove the first part of the path (the "value") before continuing.
		          path = path.slice(1);

		          switch (fiber.tag) {
		            case ClassComponent:
		              if (path.length === 0) ; else {
		                Object(utils["a" /* deletePathInObject */])(instance.context, path);
		              }

		              instance.forceUpdate();
		              break;
		          }

		          break;

		        case 'hooks':
		          if (typeof overrideHookStateDeletePath === 'function') {
		            overrideHookStateDeletePath(fiber, hookID, path);
		          }

		          break;

		        case 'props':
		          if (instance === null) {
		            if (typeof overridePropsDeletePath === 'function') {
		              overridePropsDeletePath(fiber, path);
		            }
		          } else {
		            fiber.pendingProps = Object(backend_utils["c" /* copyWithDelete */])(instance.props, path);
		            instance.forceUpdate();
		          }

		          break;

		        case 'state':
		          Object(utils["a" /* deletePathInObject */])(instance.state, path);
		          instance.forceUpdate();
		          break;
		      }
		    }
		  }

		  function renamePath(type, id, hookID, oldPath, newPath) {
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber !== null) {
		      var instance = fiber.stateNode;

		      switch (type) {
		        case 'context':
		          // To simplify hydration and display of primitive context values (e.g. number, string)
		          // the inspectElement() method wraps context in a {value: ...} object.
		          // We need to remove the first part of the path (the "value") before continuing.
		          oldPath = oldPath.slice(1);
		          newPath = newPath.slice(1);

		          switch (fiber.tag) {
		            case ClassComponent:
		              if (oldPath.length === 0) ; else {
		                Object(utils["k" /* renamePathInObject */])(instance.context, oldPath, newPath);
		              }

		              instance.forceUpdate();
		              break;
		          }

		          break;

		        case 'hooks':
		          if (typeof overrideHookStateRenamePath === 'function') {
		            overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);
		          }

		          break;

		        case 'props':
		          if (instance === null) {
		            if (typeof overridePropsRenamePath === 'function') {
		              overridePropsRenamePath(fiber, oldPath, newPath);
		            }
		          } else {
		            fiber.pendingProps = Object(backend_utils["d" /* copyWithRename */])(instance.props, oldPath, newPath);
		            instance.forceUpdate();
		          }

		          break;

		        case 'state':
		          Object(utils["k" /* renamePathInObject */])(instance.state, oldPath, newPath);
		          instance.forceUpdate();
		          break;
		      }
		    }
		  }

		  function overrideValueAtPath(type, id, hookID, path, value) {
		    var fiber = findCurrentFiberUsingSlowPathById(id);

		    if (fiber !== null) {
		      var instance = fiber.stateNode;

		      switch (type) {
		        case 'context':
		          // To simplify hydration and display of primitive context values (e.g. number, string)
		          // the inspectElement() method wraps context in a {value: ...} object.
		          // We need to remove the first part of the path (the "value") before continuing.
		          path = path.slice(1);

		          switch (fiber.tag) {
		            case ClassComponent:
		              if (path.length === 0) {
		                // Simple context value
		                instance.context = value;
		              } else {
		                Object(utils["l" /* setInObject */])(instance.context, path, value);
		              }

		              instance.forceUpdate();
		              break;
		          }

		          break;

		        case 'hooks':
		          if (typeof overrideHookState === 'function') {
		            overrideHookState(fiber, hookID, path, value);
		          }

		          break;

		        case 'props':
		          switch (fiber.tag) {
		            case ClassComponent:
		              fiber.pendingProps = Object(backend_utils["e" /* copyWithSet */])(instance.props, path, value);
		              instance.forceUpdate();
		              break;

		            default:
		              if (typeof overrideProps === 'function') {
		                overrideProps(fiber, path, value);
		              }

		              break;
		          }

		          break;

		        case 'state':
		          switch (fiber.tag) {
		            case ClassComponent:
		              Object(utils["l" /* setInObject */])(instance.state, path, value);
		              instance.forceUpdate();
		              break;
		          }

		          break;
		      }
		    }
		  }

		  var currentCommitProfilingMetadata = null;
		  var displayNamesByRootID = null;
		  var idToContextsMap = null;
		  var initialTreeBaseDurationsMap = null;
		  var initialIDToRootMap = null;
		  var isProfiling = false;
		  var profilingStartTime = 0;
		  var recordChangeDescriptions = false;
		  var rootToCommitProfilingMetadataMap = null;

		  function getProfilingData() {
		    var dataForRoots = [];

		    if (rootToCommitProfilingMetadataMap === null) {
		      throw Error('getProfilingData() called before any profiling data was recorded');
		    }

		    rootToCommitProfilingMetadataMap.forEach(function (commitProfilingMetadata, rootID) {
		      var commitData = [];
		      var initialTreeBaseDurations = [];
		      var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || 'Unknown';

		      if (initialTreeBaseDurationsMap != null) {
		        initialTreeBaseDurationsMap.forEach(function (treeBaseDuration, id) {
		          if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {
		            // We don't need to convert milliseconds to microseconds in this case,
		            // because the profiling summary is JSON serialized.
		            initialTreeBaseDurations.push([id, treeBaseDuration]);
		          }
		        });
		      }

		      commitProfilingMetadata.forEach(function (commitProfilingData, commitIndex) {
		        var changeDescriptions = commitProfilingData.changeDescriptions,
		            durations = commitProfilingData.durations,
		            effectDuration = commitProfilingData.effectDuration,
		            maxActualDuration = commitProfilingData.maxActualDuration,
		            passiveEffectDuration = commitProfilingData.passiveEffectDuration,
		            priorityLevel = commitProfilingData.priorityLevel,
		            commitTime = commitProfilingData.commitTime,
		            updaters = commitProfilingData.updaters;
		        var fiberActualDurations = [];
		        var fiberSelfDurations = [];

		        for (var i = 0; i < durations.length; i += 3) {
		          var fiberID = durations[i];
		          fiberActualDurations.push([fiberID, durations[i + 1]]);
		          fiberSelfDurations.push([fiberID, durations[i + 2]]);
		        }

		        commitData.push({
		          changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,
		          duration: maxActualDuration,
		          effectDuration: effectDuration,
		          fiberActualDurations: fiberActualDurations,
		          fiberSelfDurations: fiberSelfDurations,
		          passiveEffectDuration: passiveEffectDuration,
		          priorityLevel: priorityLevel,
		          timestamp: commitTime,
		          updaters: updaters
		        });
		      });
		      dataForRoots.push({
		        commitData: commitData,
		        displayName: displayName,
		        initialTreeBaseDurations: initialTreeBaseDurations,
		        rootID: rootID
		      });
		    });
		    var timelineData = null;

		    if (typeof getTimelineData === 'function') {
		      var currentTimelineData = getTimelineData();

		      if (currentTimelineData) {
		        var batchUIDToMeasuresMap = currentTimelineData.batchUIDToMeasuresMap,
		            internalModuleSourceToRanges = currentTimelineData.internalModuleSourceToRanges,
		            laneToLabelMap = currentTimelineData.laneToLabelMap,
		            laneToReactMeasureMap = currentTimelineData.laneToReactMeasureMap,
		            rest = _objectWithoutProperties(currentTimelineData, ["batchUIDToMeasuresMap", "internalModuleSourceToRanges", "laneToLabelMap", "laneToReactMeasureMap"]);

		        timelineData = _objectSpread(_objectSpread({}, rest), {}, {
		          // Most of the data is safe to parse as-is,
		          // but we need to convert the nested Arrays back to Maps.
		          // Most of the data is safe to serialize as-is,
		          // but we need to convert the Maps to nested Arrays.
		          batchUIDToMeasuresKeyValueArray: Array.from(batchUIDToMeasuresMap.entries()),
		          internalModuleSourceToRanges: Array.from(internalModuleSourceToRanges.entries()),
		          laneToLabelKeyValueArray: Array.from(laneToLabelMap.entries()),
		          laneToReactMeasureKeyValueArray: Array.from(laneToReactMeasureMap.entries())
		        });
		      }
		    }

		    return {
		      dataForRoots: dataForRoots,
		      rendererID: rendererID,
		      timelineData: timelineData
		    };
		  }

		  function startProfiling(shouldRecordChangeDescriptions) {
		    if (isProfiling) {
		      return;
		    }

		    recordChangeDescriptions = shouldRecordChangeDescriptions; // Capture initial values as of the time profiling starts.
		    // It's important we snapshot both the durations and the id-to-root map,
		    // since either of these may change during the profiling session
		    // (e.g. when a fiber is re-rendered or when a fiber gets removed).

		    displayNamesByRootID = new Map();
		    initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);
		    initialIDToRootMap = new Map(idToRootMap);
		    idToContextsMap = new Map();
		    hook.getFiberRoots(rendererID).forEach(function (root) {
		      var rootID = getFiberIDThrows(root.current);
		      displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));

		      if (shouldRecordChangeDescriptions) {
		        // Record all contexts at the time profiling is started.
		        // Fibers only store the current context value,
		        // so we need to track them separately in order to determine changed keys.
		        crawlToInitializeContextsMap(root.current);
		      }
		    });
		    isProfiling = true;
		    profilingStartTime = renderer_getCurrentTime();
		    rootToCommitProfilingMetadataMap = new Map();

		    if (toggleProfilingStatus !== null) {
		      toggleProfilingStatus(true);
		    }
		  }

		  function stopProfiling() {
		    isProfiling = false;
		    recordChangeDescriptions = false;

		    if (toggleProfilingStatus !== null) {
		      toggleProfilingStatus(false);
		    }
		  } // Automatically start profiling so that we don't miss timing info from initial "mount".


		  if (Object(storage["c" /* sessionStorageGetItem */])(constants["k" /* SESSION_STORAGE_RELOAD_AND_PROFILE_KEY */]) === 'true') {
		    startProfiling(Object(storage["c" /* sessionStorageGetItem */])(constants["j" /* SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY */]) === 'true');
		  } // React will switch between these implementations depending on whether
		  // we have any manually suspended/errored-out Fibers or not.


		  function shouldErrorFiberAlwaysNull() {
		    return null;
		  } // Map of id and its force error status: true (error), false (toggled off),
		  // null (do nothing)


		  var forceErrorForFiberIDs = new Map();

		  function shouldErrorFiberAccordingToMap(fiber) {
		    if (typeof setErrorHandler !== 'function') {
		      throw new Error('Expected overrideError() to not get called for earlier React versions.');
		    }

		    var id = getFiberIDUnsafe(fiber);

		    if (id === null) {
		      return null;
		    }

		    var status = null;

		    if (forceErrorForFiberIDs.has(id)) {
		      status = forceErrorForFiberIDs.get(id);

		      if (status === false) {
		        // TRICKY overrideError adds entries to this Map,
		        // so ideally it would be the method that clears them too,
		        // but that would break the functionality of the feature,
		        // since DevTools needs to tell React to act differently than it normally would
		        // (don't just re-render the failed boundary, but reset its errored state too).
		        // So we can only clear it after telling React to reset the state.
		        // Technically this is premature and we should schedule it for later,
		        // since the render could always fail without committing the updated error boundary,
		        // but since this is a DEV-only feature, the simplicity is worth the trade off.
		        forceErrorForFiberIDs.delete(id);

		        if (forceErrorForFiberIDs.size === 0) {
		          // Last override is gone. Switch React back to fast path.
		          setErrorHandler(shouldErrorFiberAlwaysNull);
		        }
		      }
		    }

		    return status;
		  }

		  function overrideError(id, forceError) {
		    if (typeof setErrorHandler !== 'function' || typeof scheduleUpdate !== 'function') {
		      throw new Error('Expected overrideError() to not get called for earlier React versions.');
		    }

		    forceErrorForFiberIDs.set(id, forceError);

		    if (forceErrorForFiberIDs.size === 1) {
		      // First override is added. Switch React to slower path.
		      setErrorHandler(shouldErrorFiberAccordingToMap);
		    }

		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber != null) {
		      scheduleUpdate(fiber);
		    }
		  }

		  function shouldSuspendFiberAlwaysFalse() {
		    return false;
		  }

		  var forceFallbackForSuspenseIDs = new Set();

		  function shouldSuspendFiberAccordingToSet(fiber) {
		    var maybeID = getFiberIDUnsafe(fiber);
		    return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);
		  }

		  function overrideSuspense(id, forceFallback) {
		    if (typeof setSuspenseHandler !== 'function' || typeof scheduleUpdate !== 'function') {
		      throw new Error('Expected overrideSuspense() to not get called for earlier React versions.');
		    }

		    if (forceFallback) {
		      forceFallbackForSuspenseIDs.add(id);

		      if (forceFallbackForSuspenseIDs.size === 1) {
		        // First override is added. Switch React to slower path.
		        setSuspenseHandler(shouldSuspendFiberAccordingToSet);
		      }
		    } else {
		      forceFallbackForSuspenseIDs.delete(id);

		      if (forceFallbackForSuspenseIDs.size === 0) {
		        // Last override is gone. Switch React back to fast path.
		        setSuspenseHandler(shouldSuspendFiberAlwaysFalse);
		      }
		    }

		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber != null) {
		      scheduleUpdate(fiber);
		    }
		  } // Remember if we're trying to restore the selection after reload.
		  // In that case, we'll do some extra checks for matching mounts.


		  var trackedPath = null;
		  var trackedPathMatchFiber = null;
		  var trackedPathMatchDepth = -1;
		  var mightBeOnTrackedPath = false;

		  function setTrackedPath(path) {
		    if (path === null) {
		      trackedPathMatchFiber = null;
		      trackedPathMatchDepth = -1;
		      mightBeOnTrackedPath = false;
		    }

		    trackedPath = path;
		  } // We call this before traversing a new mount.
		  // It remembers whether this Fiber is the next best match for tracked path.
		  // The return value signals whether we should keep matching siblings or not.


		  function updateTrackedPathStateBeforeMount(fiber) {
		    if (trackedPath === null || !mightBeOnTrackedPath) {
		      // Fast path: there's nothing to track so do nothing and ignore siblings.
		      return false;
		    }

		    var returnFiber = fiber.return;
		    var returnAlternate = returnFiber !== null ? returnFiber.alternate : null; // By now we know there's some selection to restore, and this is a new Fiber.
		    // Is this newly mounted Fiber a direct child of the current best match?
		    // (This will also be true for new roots if we haven't matched anything yet.)

		    if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {
		      // Is this the next Fiber we should select? Let's compare the frames.
		      var actualFrame = getPathFrame(fiber);
		      var expectedFrame = trackedPath[trackedPathMatchDepth + 1];

		      if (expectedFrame === undefined) {
		        throw new Error('Expected to see a frame at the next depth.');
		      }

		      if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {
		        // We have our next match.
		        trackedPathMatchFiber = fiber;
		        trackedPathMatchDepth++; // Are we out of frames to match?

		        if (trackedPathMatchDepth === trackedPath.length - 1) {
		          // There's nothing that can possibly match afterwards.
		          // Don't check the children.
		          mightBeOnTrackedPath = false;
		        } else {
		          // Check the children, as they might reveal the next match.
		          mightBeOnTrackedPath = true;
		        } // In either case, since we have a match, we don't need
		        // to check the siblings. They'll never match.


		        return false;
		      }
		    } // This Fiber's parent is on the path, but this Fiber itself isn't.
		    // There's no need to check its children--they won't be on the path either.


		    mightBeOnTrackedPath = false; // However, one of its siblings may be on the path so keep searching.

		    return true;
		  }

		  function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {
		    // updateTrackedPathStateBeforeMount() told us whether to match siblings.
		    // Now that we're entering siblings, let's use that information.
		    mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;
		  } // Roots don't have a real persistent identity.
		  // A root's "pseudo key" is "childDisplayName:indexWithThatName".
		  // For example, "App:0" or, in case of similar roots, "Story:0", "Story:1", etc.
		  // We will use this to try to disambiguate roots when restoring selection between reloads.


		  var rootPseudoKeys = new Map();
		  var rootDisplayNameCounter = new Map();

		  function setRootPseudoKey(id, fiber) {
		    var name = getDisplayNameForRoot(fiber);
		    var counter = rootDisplayNameCounter.get(name) || 0;
		    rootDisplayNameCounter.set(name, counter + 1);
		    var pseudoKey = "".concat(name, ":").concat(counter);
		    rootPseudoKeys.set(id, pseudoKey);
		  }

		  function removeRootPseudoKey(id) {
		    var pseudoKey = rootPseudoKeys.get(id);

		    if (pseudoKey === undefined) {
		      throw new Error('Expected root pseudo key to be known.');
		    }

		    var name = pseudoKey.substring(0, pseudoKey.lastIndexOf(':'));
		    var counter = rootDisplayNameCounter.get(name);

		    if (counter === undefined) {
		      throw new Error('Expected counter to be known.');
		    }

		    if (counter > 1) {
		      rootDisplayNameCounter.set(name, counter - 1);
		    } else {
		      rootDisplayNameCounter.delete(name);
		    }

		    rootPseudoKeys.delete(id);
		  }

		  function getDisplayNameForRoot(fiber) {
		    var preferredDisplayName = null;
		    var fallbackDisplayName = null;
		    var child = fiber.child; // Go at most three levels deep into direct children
		    // while searching for a child that has a displayName.

		    for (var i = 0; i < 3; i++) {
		      if (child === null) {
		        break;
		      }

		      var displayName = getDisplayNameForFiber(child);

		      if (displayName !== null) {
		        // Prefer display names that we get from user-defined components.
		        // We want to avoid using e.g. 'Suspense' unless we find nothing else.
		        if (typeof child.type === 'function') {
		          // There's a few user-defined tags, but we'll prefer the ones
		          // that are usually explicitly named (function or class components).
		          preferredDisplayName = displayName;
		        } else if (fallbackDisplayName === null) {
		          fallbackDisplayName = displayName;
		        }
		      }

		      if (preferredDisplayName !== null) {
		        break;
		      }

		      child = child.child;
		    }

		    return preferredDisplayName || fallbackDisplayName || 'Anonymous';
		  }

		  function getPathFrame(fiber) {
		    var key = fiber.key;
		    var displayName = getDisplayNameForFiber(fiber);
		    var index = fiber.index;

		    switch (fiber.tag) {
		      case HostRoot:
		        // Roots don't have a real displayName, index, or key.
		        // Instead, we'll use the pseudo key (childDisplayName:indexWithThatName).
		        var id = getFiberIDThrows(fiber);
		        var pseudoKey = rootPseudoKeys.get(id);

		        if (pseudoKey === undefined) {
		          throw new Error('Expected mounted root to have known pseudo key.');
		        }

		        displayName = pseudoKey;
		        break;

		      case HostComponent:
		        displayName = fiber.type;
		        break;
		    }

		    return {
		      displayName: displayName,
		      key: key,
		      index: index
		    };
		  } // Produces a serializable representation that does a best effort
		  // of identifying a particular Fiber between page reloads.
		  // The return path will contain Fibers that are "invisible" to the store
		  // because their keys and indexes are important to restoring the selection.


		  function getPathForElement(id) {
		    var fiber = idToArbitraryFiberMap.get(id);

		    if (fiber == null) {
		      return null;
		    }

		    var keyPath = [];

		    while (fiber !== null) {
		      keyPath.push(getPathFrame(fiber));
		      fiber = fiber.return;
		    }

		    keyPath.reverse();
		    return keyPath;
		  }

		  function getBestMatchForTrackedPath() {
		    if (trackedPath === null) {
		      // Nothing to match.
		      return null;
		    }

		    if (trackedPathMatchFiber === null) {
		      // We didn't find anything.
		      return null;
		    } // Find the closest Fiber store is aware of.


		    var fiber = trackedPathMatchFiber;

		    while (fiber !== null && shouldFilterFiber(fiber)) {
		      fiber = fiber.return;
		    }

		    if (fiber === null) {
		      return null;
		    }

		    return {
		      id: getFiberIDThrows(fiber),
		      isFullMatch: trackedPathMatchDepth === trackedPath.length - 1
		    };
		  }

		  var formatPriorityLevel = function formatPriorityLevel(priorityLevel) {
		    if (priorityLevel == null) {
		      return 'Unknown';
		    }

		    switch (priorityLevel) {
		      case ImmediatePriority:
		        return 'Immediate';

		      case UserBlockingPriority:
		        return 'User-Blocking';

		      case NormalPriority:
		        return 'Normal';

		      case LowPriority:
		        return 'Low';

		      case IdlePriority:
		        return 'Idle';

		      case NoPriority:
		      default:
		        return 'Unknown';
		    }
		  };

		  function setTraceUpdatesEnabled(isEnabled) {
		    traceUpdatesEnabled = isEnabled;
		  }

		  return {
		    cleanup: cleanup,
		    clearErrorsAndWarnings: clearErrorsAndWarnings,
		    clearErrorsForFiberID: clearErrorsForFiberID,
		    clearWarningsForFiberID: clearWarningsForFiberID,
		    copyElementPath: copyElementPath,
		    deletePath: deletePath,
		    findNativeNodesForFiberID: findNativeNodesForFiberID,
		    flushInitialOperations: flushInitialOperations,
		    getBestMatchForTrackedPath: getBestMatchForTrackedPath,
		    getDisplayNameForFiberID: getDisplayNameForFiberID,
		    getFiberIDForNative: getFiberIDForNative,
		    getInstanceAndStyle: getInstanceAndStyle,
		    getOwnersList: getOwnersList,
		    getPathForElement: getPathForElement,
		    getProfilingData: getProfilingData,
		    handleCommitFiberRoot: handleCommitFiberRoot,
		    handleCommitFiberUnmount: handleCommitFiberUnmount,
		    handlePostCommitFiberRoot: handlePostCommitFiberRoot,
		    inspectElement: inspectElement,
		    logElementToConsole: logElementToConsole,
		    patchConsoleForStrictMode: backend_console["b" /* patchForStrictMode */],
		    prepareViewAttributeSource: prepareViewAttributeSource,
		    prepareViewElementSource: prepareViewElementSource,
		    overrideError: overrideError,
		    overrideSuspense: overrideSuspense,
		    overrideValueAtPath: overrideValueAtPath,
		    renamePath: renamePath,
		    renderer: renderer,
		    setTraceUpdatesEnabled: setTraceUpdatesEnabled,
		    setTrackedPath: setTrackedPath,
		    startProfiling: startProfiling,
		    stopProfiling: stopProfiling,
		    storeAsGlobal: storeAsGlobal,
		    unpatchConsoleForStrictMode: backend_console["d" /* unpatchForStrictMode */],
		    updateComponentFilters: updateComponentFilters
		  };
		}

		/***/ }),
		/* 16 */
		/***/ (function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		  throw new Error('setTimeout has not been defined');
		}

		function defaultClearTimeout() {
		  throw new Error('clearTimeout has not been defined');
		}

		(function () {
		  try {
		    if (typeof setTimeout === 'function') {
		      cachedSetTimeout = setTimeout;
		    } else {
		      cachedSetTimeout = defaultSetTimout;
		    }
		  } catch (e) {
		    cachedSetTimeout = defaultSetTimout;
		  }

		  try {
		    if (typeof clearTimeout === 'function') {
		      cachedClearTimeout = clearTimeout;
		    } else {
		      cachedClearTimeout = defaultClearTimeout;
		    }
		  } catch (e) {
		    cachedClearTimeout = defaultClearTimeout;
		  }
		})();

		function runTimeout(fun) {
		  if (cachedSetTimeout === setTimeout) {
		    //normal enviroments in sane situations
		    return setTimeout(fun, 0);
		  } // if setTimeout wasn't available but was latter defined


		  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		    cachedSetTimeout = setTimeout;
		    return setTimeout(fun, 0);
		  }

		  try {
		    // when when somebody has screwed with setTimeout but no I.E. maddness
		    return cachedSetTimeout(fun, 0);
		  } catch (e) {
		    try {
		      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		      return cachedSetTimeout.call(null, fun, 0);
		    } catch (e) {
		      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		      return cachedSetTimeout.call(this, fun, 0);
		    }
		  }
		}

		function runClearTimeout(marker) {
		  if (cachedClearTimeout === clearTimeout) {
		    //normal enviroments in sane situations
		    return clearTimeout(marker);
		  } // if clearTimeout wasn't available but was latter defined


		  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		    cachedClearTimeout = clearTimeout;
		    return clearTimeout(marker);
		  }

		  try {
		    // when when somebody has screwed with setTimeout but no I.E. maddness
		    return cachedClearTimeout(marker);
		  } catch (e) {
		    try {
		      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		      return cachedClearTimeout.call(null, marker);
		    } catch (e) {
		      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		      return cachedClearTimeout.call(this, marker);
		    }
		  }
		}

		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		  if (!draining || !currentQueue) {
		    return;
		  }

		  draining = false;

		  if (currentQueue.length) {
		    queue = currentQueue.concat(queue);
		  } else {
		    queueIndex = -1;
		  }

		  if (queue.length) {
		    drainQueue();
		  }
		}

		function drainQueue() {
		  if (draining) {
		    return;
		  }

		  var timeout = runTimeout(cleanUpNextTick);
		  draining = true;
		  var len = queue.length;

		  while (len) {
		    currentQueue = queue;
		    queue = [];

		    while (++queueIndex < len) {
		      if (currentQueue) {
		        currentQueue[queueIndex].run();
		      }
		    }

		    queueIndex = -1;
		    len = queue.length;
		  }

		  currentQueue = null;
		  draining = false;
		  runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		  var args = new Array(arguments.length - 1);

		  if (arguments.length > 1) {
		    for (var i = 1; i < arguments.length; i++) {
		      args[i - 1] = arguments[i];
		    }
		  }

		  queue.push(new Item(fun, args));

		  if (queue.length === 1 && !draining) {
		    runTimeout(drainQueue);
		  }
		}; // v8 likes predictible objects


		function Item(fun, array) {
		  this.fun = fun;
		  this.array = array;
		}

		Item.prototype.run = function () {
		  this.fun.apply(null, this.array);
		};

		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues

		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;
		process.prependListener = noop;
		process.prependOnceListener = noop;

		process.listeners = function (name) {
		  return [];
		};

		process.binding = function (name) {
		  throw new Error('process.binding is not supported');
		};

		process.cwd = function () {
		  return '/';
		};

		process.chdir = function (dir) {
		  throw new Error('process.chdir is not supported');
		};

		process.umask = function () {
		  return 0;
		};

		/***/ }),
		/* 17 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		/* unused harmony export REACT_ELEMENT_TYPE */
		/* unused harmony export REACT_PORTAL_TYPE */
		/* unused harmony export REACT_FRAGMENT_TYPE */
		/* unused harmony export REACT_STRICT_MODE_TYPE */
		/* unused harmony export REACT_PROFILER_TYPE */
		/* unused harmony export REACT_PROVIDER_TYPE */
		/* unused harmony export REACT_CONTEXT_TYPE */
		/* unused harmony export REACT_SERVER_CONTEXT_TYPE */
		/* unused harmony export REACT_FORWARD_REF_TYPE */
		/* unused harmony export REACT_SUSPENSE_TYPE */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REACT_SUSPENSE_LIST_TYPE; });
		/* unused harmony export REACT_MEMO_TYPE */
		/* unused harmony export REACT_LAZY_TYPE */
		/* unused harmony export REACT_SCOPE_TYPE */
		/* unused harmony export REACT_DEBUG_TRACING_MODE_TYPE */
		/* unused harmony export REACT_OFFSCREEN_TYPE */
		/* unused harmony export REACT_LEGACY_HIDDEN_TYPE */
		/* unused harmony export REACT_CACHE_TYPE */
		/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return REACT_TRACING_MARKER_TYPE; });
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');

		/***/ }),
		/* 18 */
		/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(setImmediate) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		//  Import support https://stackoverflow.com/questions/13673346/supporting-both-commonjs-and-amd
		(function (name, definition) {
		  {
		    module.exports = definition();
		  }
		})("clipboard", function () {
		  if (typeof document === 'undefined' || !document.addEventListener) {
		    return null;
		  }

		  var clipboard = {};

		  clipboard.copy = function () {
		    var _intercept = false;
		    var _data = null; // Map from data type (e.g. "text/html") to value.

		    var _bogusSelection = false;

		    function cleanup() {
		      _intercept = false;
		      _data = null;

		      if (_bogusSelection) {
		        window.getSelection().removeAllRanges();
		      }

		      _bogusSelection = false;
		    }

		    document.addEventListener("copy", function (e) {
		      if (_intercept) {
		        for (var key in _data) {
		          e.clipboardData.setData(key, _data[key]);
		        }

		        e.preventDefault();
		      }
		    }); // Workaround for Safari: https://bugs.webkit.org/show_bug.cgi?id=156529

		    function bogusSelect() {
		      var sel = document.getSelection(); // If "nothing" is selected...

		      if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
		        // ... temporarily select the entire body.
		        //
		        // We select the entire body because:
		        // - it's guaranteed to exist,
		        // - it works (unlike, say, document.head, or phantom element that is
		        //   not inserted into the DOM),
		        // - it doesn't seem to flicker (due to the synchronous copy event), and
		        // - it avoids modifying the DOM (can trigger mutation observers).
		        //
		        // Because we can't do proper feature detection (we already checked
		        // document.queryCommandEnabled("copy") , which actually gives a false
		        // negative for Blink when nothing is selected) and UA sniffing is not
		        // reliable (a lot of UA strings contain "Safari"), this will also
		        // happen for some browsers other than Safari. :-()
		        var range = document.createRange();
		        range.selectNodeContents(document.body);
		        sel.removeAllRanges();
		        sel.addRange(range);
		        _bogusSelection = true;
		      }
		    }
		    return function (data) {
		      return new Promise(function (resolve, reject) {
		        _intercept = true;

		        if (typeof data === "string") {
		          _data = {
		            "text/plain": data
		          };
		        } else if (data instanceof Node) {
		          _data = {
		            "text/html": new XMLSerializer().serializeToString(data)
		          };
		        } else if (data instanceof Object) {
		          _data = data;
		        } else {
		          reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
		        }

		        function triggerCopy(tryBogusSelect) {
		          try {
		            if (document.execCommand("copy")) {
		              // document.execCommand is synchronous: http://www.w3.org/TR/2015/WD-clipboard-apis-20150421/#integration-with-rich-text-editing-apis
		              // So we can call resolve() back here.
		              cleanup();
		              resolve();
		            } else {
		              if (!tryBogusSelect) {
		                bogusSelect();
		                triggerCopy(true);
		              } else {
		                cleanup();
		                throw new Error("Unable to copy. Perhaps it's not available in your browser?");
		              }
		            }
		          } catch (e) {
		            cleanup();
		            reject(e);
		          }
		        }

		        triggerCopy(false);
		      });
		    };
		  }();

		  clipboard.paste = function () {
		    var _intercept = false;

		    var _resolve;

		    var _dataType;

		    document.addEventListener("paste", function (e) {
		      if (_intercept) {
		        _intercept = false;
		        e.preventDefault();
		        var resolve = _resolve;
		        _resolve = null;
		        resolve(e.clipboardData.getData(_dataType));
		      }
		    });
		    return function (dataType) {
		      return new Promise(function (resolve, reject) {
		        _intercept = true;
		        _resolve = resolve;
		        _dataType = dataType || "text/plain";

		        try {
		          if (!document.execCommand("paste")) {
		            _intercept = false;
		            reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
		          }
		        } catch (e) {
		          _intercept = false;
		          reject(new Error(e));
		        }
		      });
		    };
		  }(); // Handle IE behaviour.


		  if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
		    /*! promise-polyfill 2.0.1 */
		    (function (a) {
		      function b(a, b) {
		        return function () {
		          a.apply(b, arguments);
		        };
		      }

		      function c(a) {
		        if ("object" != _typeof(this)) throw new TypeError("Promises must be constructed via new");
		        if ("function" != typeof a) throw new TypeError("not a function");
		        this._state = null, this._value = null, this._deferreds = [], i(a, b(e, this), b(f, this));
		      }

		      function d(a) {
		        var b = this;
		        return null === this._state ? void this._deferreds.push(a) : void j(function () {
		          var c = b._state ? a.onFulfilled : a.onRejected;
		          if (null === c) return void (b._state ? a.resolve : a.reject)(b._value);
		          var d;

		          try {
		            d = c(b._value);
		          } catch (e) {
		            return void a.reject(e);
		          }

		          a.resolve(d);
		        });
		      }

		      function e(a) {
		        try {
		          if (a === this) throw new TypeError("A promise cannot be resolved with itself.");

		          if (a && ("object" == _typeof(a) || "function" == typeof a)) {
		            var c = a.then;
		            if ("function" == typeof c) return void i(b(c, a), b(e, this), b(f, this));
		          }

		          this._state = !0, this._value = a, g.call(this);
		        } catch (d) {
		          f.call(this, d);
		        }
		      }

		      function f(a) {
		        this._state = !1, this._value = a, g.call(this);
		      }

		      function g() {
		        for (var a = 0, b = this._deferreds.length; b > a; a++) {
		          d.call(this, this._deferreds[a]);
		        }

		        this._deferreds = null;
		      }

		      function h(a, b, c, d) {
		        this.onFulfilled = "function" == typeof a ? a : null, this.onRejected = "function" == typeof b ? b : null, this.resolve = c, this.reject = d;
		      }

		      function i(a, b, c) {
		        var d = !1;

		        try {
		          a(function (a) {
		            d || (d = !0, b(a));
		          }, function (a) {
		            d || (d = !0, c(a));
		          });
		        } catch (e) {
		          if (d) return;
		          d = !0, c(e);
		        }
		      }

		      var j = c.immediateFn || "function" == typeof setImmediate && setImmediate || function (a) {
		        setTimeout(a, 1);
		      },
		          k = Array.isArray || function (a) {
		        return "[object Array]" === Object.prototype.toString.call(a);
		      };

		      c.prototype["catch"] = function (a) {
		        return this.then(null, a);
		      }, c.prototype.then = function (a, b) {
		        var e = this;
		        return new c(function (c, f) {
		          d.call(e, new h(a, b, c, f));
		        });
		      }, c.all = function () {
		        var a = Array.prototype.slice.call(1 === arguments.length && k(arguments[0]) ? arguments[0] : arguments);
		        return new c(function (b, c) {
		          function d(f, g) {
		            try {
		              if (g && ("object" == _typeof(g) || "function" == typeof g)) {
		                var h = g.then;
		                if ("function" == typeof h) return void h.call(g, function (a) {
		                  d(f, a);
		                }, c);
		              }

		              a[f] = g, 0 === --e && b(a);
		            } catch (i) {
		              c(i);
		            }
		          }

		          if (0 === a.length) return b([]);

		          for (var e = a.length, f = 0; f < a.length; f++) {
		            d(f, a[f]);
		          }
		        });
		      }, c.resolve = function (a) {
		        return a && "object" == _typeof(a) && a.constructor === c ? a : new c(function (b) {
		          b(a);
		        });
		      }, c.reject = function (a) {
		        return new c(function (b, c) {
		          c(a);
		        });
		      }, c.race = function (a) {
		        return new c(function (b, c) {
		          for (var d = 0, e = a.length; e > d; d++) {
		            a[d].then(b, c);
		          }
		        });
		      },  module.exports ? module.exports = c : a.Promise || (a.Promise = c);
		    })(this);

		    clipboard.copy = function (data) {
		      return new Promise(function (resolve, reject) {
		        // IE supports string and URL types: https://msdn.microsoft.com/en-us/library/ms536744(v=vs.85).aspx
		        // We only support the string type for now.
		        if (typeof data !== "string" && !("text/plain" in data)) {
		          throw new Error("You must provide a text/plain type.");
		        }

		        var strData = typeof data === "string" ? data : data["text/plain"];
		        var copySucceeded = window.clipboardData.setData("Text", strData);

		        if (copySucceeded) {
		          resolve();
		        } else {
		          reject(new Error("Copying was rejected."));
		        }
		      });
		    };

		    clipboard.paste = function () {
		      return new Promise(function (resolve, reject) {
		        var strData = window.clipboardData.getData("Text");

		        if (strData) {
		          resolve(strData);
		        } else {
		          // The user rejected the paste request.
		          reject(new Error("Pasting was rejected."));
		        }
		      });
		    };
		  }

		  return clipboard;
		});
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(22).setImmediate));

		/***/ }),
		/* 19 */
		/***/ (function(module, exports, __webpack_require__) {
		 // A linked list to keep track of recently-used-ness

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		var Yallist = __webpack_require__(24);

		var MAX = Symbol('max');
		var LENGTH = Symbol('length');
		var LENGTH_CALCULATOR = Symbol('lengthCalculator');
		var ALLOW_STALE = Symbol('allowStale');
		var MAX_AGE = Symbol('maxAge');
		var DISPOSE = Symbol('dispose');
		var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
		var LRU_LIST = Symbol('lruList');
		var CACHE = Symbol('cache');
		var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

		var naiveLength = function naiveLength() {
		  return 1;
		}; // lruList is a yallist where the head is the youngest
		// item, and the tail is the oldest.  the list contains the Hit
		// objects as the entries.
		// Each Hit object has a reference to its Yallist.Node.  This
		// never changes.
		//
		// cache is a Map (or PseudoMap) that matches the keys to
		// the Yallist.Node object.


		var LRUCache = /*#__PURE__*/function () {
		  function LRUCache(options) {
		    _classCallCheck(this, LRUCache);

		    if (typeof options === 'number') options = {
		      max: options
		    };
		    if (!options) options = {};
		    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.

		    this[MAX] = options.max || Infinity;
		    var lc = options.length || naiveLength;
		    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
		    this[ALLOW_STALE] = options.stale || false;
		    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
		    this[MAX_AGE] = options.maxAge || 0;
		    this[DISPOSE] = options.dispose;
		    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
		    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
		    this.reset();
		  } // resize the cache when the max changes.


		  _createClass(LRUCache, [{
		    key: "rforEach",
		    value: function rforEach(fn, thisp) {
		      thisp = thisp || this;

		      for (var walker = this[LRU_LIST].tail; walker !== null;) {
		        var prev = walker.prev;
		        forEachStep(this, fn, walker, thisp);
		        walker = prev;
		      }
		    }
		  }, {
		    key: "forEach",
		    value: function forEach(fn, thisp) {
		      thisp = thisp || this;

		      for (var walker = this[LRU_LIST].head; walker !== null;) {
		        var next = walker.next;
		        forEachStep(this, fn, walker, thisp);
		        walker = next;
		      }
		    }
		  }, {
		    key: "keys",
		    value: function keys() {
		      return this[LRU_LIST].toArray().map(function (k) {
		        return k.key;
		      });
		    }
		  }, {
		    key: "values",
		    value: function values() {
		      return this[LRU_LIST].toArray().map(function (k) {
		        return k.value;
		      });
		    }
		  }, {
		    key: "reset",
		    value: function reset() {
		      var _this = this;

		      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
		        this[LRU_LIST].forEach(function (hit) {
		          return _this[DISPOSE](hit.key, hit.value);
		        });
		      }

		      this[CACHE] = new Map(); // hash of items by key

		      this[LRU_LIST] = new Yallist(); // list of items in order of use recency

		      this[LENGTH] = 0; // length of items in the list
		    }
		  }, {
		    key: "dump",
		    value: function dump() {
		      var _this2 = this;

		      return this[LRU_LIST].map(function (hit) {
		        return isStale(_this2, hit) ? false : {
		          k: hit.key,
		          v: hit.value,
		          e: hit.now + (hit.maxAge || 0)
		        };
		      }).toArray().filter(function (h) {
		        return h;
		      });
		    }
		  }, {
		    key: "dumpLru",
		    value: function dumpLru() {
		      return this[LRU_LIST];
		    }
		  }, {
		    key: "set",
		    value: function set(key, value, maxAge) {
		      maxAge = maxAge || this[MAX_AGE];
		      if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
		      var now = maxAge ? Date.now() : 0;
		      var len = this[LENGTH_CALCULATOR](value, key);

		      if (this[CACHE].has(key)) {
		        if (len > this[MAX]) {
		          _del(this, this[CACHE].get(key));

		          return false;
		        }

		        var node = this[CACHE].get(key);
		        var item = node.value; // dispose of the old one before overwriting
		        // split out into 2 ifs for better coverage tracking

		        if (this[DISPOSE]) {
		          if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
		        }

		        item.now = now;
		        item.maxAge = maxAge;
		        item.value = value;
		        this[LENGTH] += len - item.length;
		        item.length = len;
		        this.get(key);
		        trim(this);
		        return true;
		      }

		      var hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.

		      if (hit.length > this[MAX]) {
		        if (this[DISPOSE]) this[DISPOSE](key, value);
		        return false;
		      }

		      this[LENGTH] += hit.length;
		      this[LRU_LIST].unshift(hit);
		      this[CACHE].set(key, this[LRU_LIST].head);
		      trim(this);
		      return true;
		    }
		  }, {
		    key: "has",
		    value: function has(key) {
		      if (!this[CACHE].has(key)) return false;
		      var hit = this[CACHE].get(key).value;
		      return !isStale(this, hit);
		    }
		  }, {
		    key: "get",
		    value: function get(key) {
		      return _get(this, key, true);
		    }
		  }, {
		    key: "peek",
		    value: function peek(key) {
		      return _get(this, key, false);
		    }
		  }, {
		    key: "pop",
		    value: function pop() {
		      var node = this[LRU_LIST].tail;
		      if (!node) return null;

		      _del(this, node);

		      return node.value;
		    }
		  }, {
		    key: "del",
		    value: function del(key) {
		      _del(this, this[CACHE].get(key));
		    }
		  }, {
		    key: "load",
		    value: function load(arr) {
		      // reset the cache
		      this.reset();
		      var now = Date.now(); // A previous serialized cache has the most recent items first

		      for (var l = arr.length - 1; l >= 0; l--) {
		        var hit = arr[l];
		        var expiresAt = hit.e || 0;
		        if (expiresAt === 0) // the item was created without expiration in a non aged cache
		          this.set(hit.k, hit.v);else {
		          var maxAge = expiresAt - now; // dont add already expired items

		          if (maxAge > 0) {
		            this.set(hit.k, hit.v, maxAge);
		          }
		        }
		      }
		    }
		  }, {
		    key: "prune",
		    value: function prune() {
		      var _this3 = this;

		      this[CACHE].forEach(function (value, key) {
		        return _get(_this3, key, false);
		      });
		    }
		  }, {
		    key: "max",
		    set: function set(mL) {
		      if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
		      this[MAX] = mL || Infinity;
		      trim(this);
		    },
		    get: function get() {
		      return this[MAX];
		    }
		  }, {
		    key: "allowStale",
		    set: function set(allowStale) {
		      this[ALLOW_STALE] = !!allowStale;
		    },
		    get: function get() {
		      return this[ALLOW_STALE];
		    }
		  }, {
		    key: "maxAge",
		    set: function set(mA) {
		      if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
		      this[MAX_AGE] = mA;
		      trim(this);
		    },
		    get: function get() {
		      return this[MAX_AGE];
		    } // resize the cache when the lengthCalculator changes.

		  }, {
		    key: "lengthCalculator",
		    set: function set(lC) {
		      var _this4 = this;

		      if (typeof lC !== 'function') lC = naiveLength;

		      if (lC !== this[LENGTH_CALCULATOR]) {
		        this[LENGTH_CALCULATOR] = lC;
		        this[LENGTH] = 0;
		        this[LRU_LIST].forEach(function (hit) {
		          hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
		          _this4[LENGTH] += hit.length;
		        });
		      }

		      trim(this);
		    },
		    get: function get() {
		      return this[LENGTH_CALCULATOR];
		    }
		  }, {
		    key: "length",
		    get: function get() {
		      return this[LENGTH];
		    }
		  }, {
		    key: "itemCount",
		    get: function get() {
		      return this[LRU_LIST].length;
		    }
		  }]);

		  return LRUCache;
		}();

		var _get = function _get(self, key, doUse) {
		  var node = self[CACHE].get(key);

		  if (node) {
		    var hit = node.value;

		    if (isStale(self, hit)) {
		      _del(self, node);

		      if (!self[ALLOW_STALE]) return undefined;
		    } else {
		      if (doUse) {
		        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
		        self[LRU_LIST].unshiftNode(node);
		      }
		    }

		    return hit.value;
		  }
		};

		var isStale = function isStale(self, hit) {
		  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
		  var diff = Date.now() - hit.now;
		  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
		};

		var trim = function trim(self) {
		  if (self[LENGTH] > self[MAX]) {
		    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
		      // We know that we're about to delete this one, and also
		      // what the next least recently used key will be, so just
		      // go ahead and set it now.
		      var prev = walker.prev;

		      _del(self, walker);

		      walker = prev;
		    }
		  }
		};

		var _del = function _del(self, node) {
		  if (node) {
		    var hit = node.value;
		    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
		    self[LENGTH] -= hit.length;
		    self[CACHE].delete(hit.key);
		    self[LRU_LIST].removeNode(node);
		  }
		};

		var Entry = function Entry(key, value, length, now, maxAge) {
		  _classCallCheck(this, Entry);

		  this.key = key;
		  this.value = value;
		  this.length = length;
		  this.now = now;
		  this.maxAge = maxAge || 0;
		};

		var forEachStep = function forEachStep(self, fn, node, thisp) {
		  var hit = node.value;

		  if (isStale(self, hit)) {
		    _del(self, node);

		    if (!self[ALLOW_STALE]) hit = undefined;
		  }

		  if (hit) fn.call(thisp, hit.value, hit.key, self);
		};

		module.exports = LRUCache;

		/***/ }),
		/* 20 */
		/***/ (function(module, exports, __webpack_require__) {


		{
		  module.exports = __webpack_require__(27);
		}

		/***/ }),
		/* 21 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {

		// EXPORTS
		__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ getStackByFiberInDevAndProd; });

		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/ReactSymbols.js
		__webpack_require__(3);

		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/DevToolsConsolePatching.js
		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// This is a DevTools fork of shared/ConsolePatchingDev.
		// The shared console patching code is DEV-only.
		// We can't use it since DevTools only ships production builds.
		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  if (disabledDepth === 0) {
		    /* eslint-disable react-internal/no-production-logging */
		    prevLog = console.log;
		    prevInfo = console.info;
		    prevWarn = console.warn;
		    prevError = console.error;
		    prevGroup = console.group;
		    prevGroupCollapsed = console.groupCollapsed;
		    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		    var props = {
		      configurable: true,
		      enumerable: true,
		      value: disabledLog,
		      writable: true
		    }; // $FlowFixMe Flow thinks console is immutable.

		    Object.defineProperties(console, {
		      info: props,
		      log: props,
		      warn: props,
		      error: props,
		      group: props,
		      groupCollapsed: props,
		      groupEnd: props
		    });
		    /* eslint-enable react-internal/no-production-logging */
		  }

		  disabledDepth++;
		}
		function reenableLogs() {
		  disabledDepth--;

		  if (disabledDepth === 0) {
		    /* eslint-disable react-internal/no-production-logging */
		    var props = {
		      configurable: true,
		      enumerable: true,
		      writable: true
		    }; // $FlowFixMe Flow thinks console is immutable.

		    Object.defineProperties(console, {
		      log: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevLog
		      }),
		      info: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevInfo
		      }),
		      warn: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevWarn
		      }),
		      error: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevError
		      }),
		      group: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevGroup
		      }),
		      groupCollapsed: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevGroupCollapsed
		      }),
		      groupEnd: _objectSpread(_objectSpread({}, props), {}, {
		        value: prevGroupEnd
		      })
		    });
		    /* eslint-enable react-internal/no-production-logging */
		  }

		  if (disabledDepth < 0) {
		    console.error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		  }
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js
		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// This is a DevTools fork of ReactComponentStackFrame.
		// This fork enables DevTools to use the same "native" component stack format,
		// while still maintaining support for multiple renderer versions
		// (which use different values for ReactTypeOfWork).
		 // The shared console patching code is DEV-only.
		// We can't use it since DevTools only ships production builds.


		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  if (prefix === undefined) {
		    // Extract the VM specific prefix used by each line.
		    try {
		      throw Error();
		    } catch (x) {
		      var match = x.stack.trim().match(/\n( *(at )?)/);
		      prefix = match && match[1] || '';
		    }
		  } // We use the prefix to ensure our stacks line up with native stack frames.


		  return '\n' + prefix + name;
		}
		var reentry = false;

		function describeNativeComponentFrame(fn, construct, currentDispatcherRef) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if (!fn || reentry) {
		    return '';
		  }

		  var control;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  reentry = true; // Override the dispatcher so effects scheduled by this shallow render are thrown away.
		  //
		  // Note that unlike the code this was forked from (in ReactComponentStackFrame)
		  // DevTools should override the dispatcher even when DevTools is compiled in production mode,
		  // because the app itself may be in development mode and log errors/warnings.

		  var previousDispatcher = currentDispatcherRef.current;
		  currentDispatcherRef.current = null;
		  disableLogs();

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function Fake() {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function set() {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;
		    Error.prepareStackTrace = previousPrepareStackTrace;
		    currentDispatcherRef.current = previousDispatcher;
		    reenableLogs();
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  return syntheticFrame;
		}
		function describeClassComponentFrame(ctor, source, ownerFn, currentDispatcherRef) {
		  return describeNativeComponentFrame(ctor, true, currentDispatcherRef);
		}
		function describeFunctionComponentFrame(fn, source, ownerFn, currentDispatcherRef) {
		  return describeNativeComponentFrame(fn, false, currentDispatcherRef);
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// This is a DevTools fork of ReactFiberComponentStack.
		// This fork enables DevTools to use the same "native" component stack format,
		// while still maintaining support for multiple renderer versions
		// (which use different values for ReactTypeOfWork).


		function describeFiber(workTagMap, workInProgress, currentDispatcherRef) {
		  var HostComponent = workTagMap.HostComponent,
		      LazyComponent = workTagMap.LazyComponent,
		      SuspenseComponent = workTagMap.SuspenseComponent,
		      SuspenseListComponent = workTagMap.SuspenseListComponent,
		      FunctionComponent = workTagMap.FunctionComponent,
		      IndeterminateComponent = workTagMap.IndeterminateComponent,
		      SimpleMemoComponent = workTagMap.SimpleMemoComponent,
		      ForwardRef = workTagMap.ForwardRef,
		      ClassComponent = workTagMap.ClassComponent;
		  var owner =  null;
		  var source =  null;

		  switch (workInProgress.tag) {
		    case HostComponent:
		      return describeBuiltInComponentFrame(workInProgress.type);

		    case LazyComponent:
		      return describeBuiltInComponentFrame('Lazy');

		    case SuspenseComponent:
		      return describeBuiltInComponentFrame('Suspense');

		    case SuspenseListComponent:
		      return describeBuiltInComponentFrame('SuspenseList');

		    case FunctionComponent:
		    case IndeterminateComponent:
		    case SimpleMemoComponent:
		      return describeFunctionComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

		    case ForwardRef:
		      return describeFunctionComponentFrame(workInProgress.type.render, source, owner, currentDispatcherRef);

		    case ClassComponent:
		      return describeClassComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

		    default:
		      return '';
		  }
		}

		function getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {
		  try {
		    var info = '';
		    var node = workInProgress;

		    do {
		      info += describeFiber(workTagMap, node, currentDispatcherRef);
		      node = node.return;
		    } while (node);

		    return info;
		  } catch (x) {
		    return '\nError generating stack: ' + x.message + '\n' + x.stack;
		  }
		}

		/***/ }),
		/* 22 */
		/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
		var apply = Function.prototype.apply; // DOM APIs, for completeness

		exports.setTimeout = function () {
		  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
		};

		exports.setInterval = function () {
		  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
		};

		exports.clearTimeout = exports.clearInterval = function (timeout) {
		  if (timeout) {
		    timeout.close();
		  }
		};

		function Timeout(id, clearFn) {
		  this._id = id;
		  this._clearFn = clearFn;
		}

		Timeout.prototype.unref = Timeout.prototype.ref = function () {};

		Timeout.prototype.close = function () {
		  this._clearFn.call(scope, this._id);
		}; // Does not start the time, just sets up the members needed.


		exports.enroll = function (item, msecs) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = msecs;
		};

		exports.unenroll = function (item) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = -1;
		};

		exports._unrefActive = exports.active = function (item) {
		  clearTimeout(item._idleTimeoutId);
		  var msecs = item._idleTimeout;

		  if (msecs >= 0) {
		    item._idleTimeoutId = setTimeout(function onTimeout() {
		      if (item._onTimeout) item._onTimeout();
		    }, msecs);
		  }
		}; // setimmediate attaches itself to the global object


		__webpack_require__(23); // On some exotic environments, it's not clear which object `setimmediate` was
		// able to install onto.  Search each possibility in the same order as the
		// `setimmediate` library.


		exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
		exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13)));

		/***/ }),
		/* 23 */
		/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined$1) {

		  if (global.setImmediate) {
		    return;
		  }

		  var nextHandle = 1; // Spec says greater than zero

		  var tasksByHandle = {};
		  var currentlyRunningATask = false;
		  var doc = global.document;
		  var registerImmediate;

		  function setImmediate(callback) {
		    // Callback can either be a function or a string
		    if (typeof callback !== "function") {
		      callback = new Function("" + callback);
		    } // Copy function arguments


		    var args = new Array(arguments.length - 1);

		    for (var i = 0; i < args.length; i++) {
		      args[i] = arguments[i + 1];
		    } // Store and register the task


		    var task = {
		      callback: callback,
		      args: args
		    };
		    tasksByHandle[nextHandle] = task;
		    registerImmediate(nextHandle);
		    return nextHandle++;
		  }

		  function clearImmediate(handle) {
		    delete tasksByHandle[handle];
		  }

		  function run(task) {
		    var callback = task.callback;
		    var args = task.args;

		    switch (args.length) {
		      case 0:
		        callback();
		        break;

		      case 1:
		        callback(args[0]);
		        break;

		      case 2:
		        callback(args[0], args[1]);
		        break;

		      case 3:
		        callback(args[0], args[1], args[2]);
		        break;

		      default:
		        callback.apply(undefined$1, args);
		        break;
		    }
		  }

		  function runIfPresent(handle) {
		    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
		    // So if we're currently running a task, we'll need to delay this invocation.
		    if (currentlyRunningATask) {
		      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
		      // "too much recursion" error.
		      setTimeout(runIfPresent, 0, handle);
		    } else {
		      var task = tasksByHandle[handle];

		      if (task) {
		        currentlyRunningATask = true;

		        try {
		          run(task);
		        } finally {
		          clearImmediate(handle);
		          currentlyRunningATask = false;
		        }
		      }
		    }
		  }

		  function installNextTickImplementation() {
		    registerImmediate = function registerImmediate(handle) {
		      process.nextTick(function () {
		        runIfPresent(handle);
		      });
		    };
		  }

		  function canUsePostMessage() {
		    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
		    // where `global.postMessage` means something completely different and can't be used for this purpose.
		    if (global.postMessage && !global.importScripts) {
		      var postMessageIsAsynchronous = true;
		      var oldOnMessage = global.onmessage;

		      global.onmessage = function () {
		        postMessageIsAsynchronous = false;
		      };

		      global.postMessage("", "*");
		      global.onmessage = oldOnMessage;
		      return postMessageIsAsynchronous;
		    }
		  }

		  function installPostMessageImplementation() {
		    // Installs an event handler on `global` for the `message` event: see
		    // * https://developer.mozilla.org/en/DOM/window.postMessage
		    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
		    var messagePrefix = "setImmediate$" + Math.random() + "$";

		    var onGlobalMessage = function onGlobalMessage(event) {
		      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
		        runIfPresent(+event.data.slice(messagePrefix.length));
		      }
		    };

		    if (global.addEventListener) {
		      global.addEventListener("message", onGlobalMessage, false);
		    } else {
		      global.attachEvent("onmessage", onGlobalMessage);
		    }

		    registerImmediate = function registerImmediate(handle) {
		      global.postMessage(messagePrefix + handle, "*");
		    };
		  }

		  function installMessageChannelImplementation() {
		    var channel = new MessageChannel();

		    channel.port1.onmessage = function (event) {
		      var handle = event.data;
		      runIfPresent(handle);
		    };

		    registerImmediate = function registerImmediate(handle) {
		      channel.port2.postMessage(handle);
		    };
		  }

		  function installReadyStateChangeImplementation() {
		    var html = doc.documentElement;

		    registerImmediate = function registerImmediate(handle) {
		      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
		      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
		      var script = doc.createElement("script");

		      script.onreadystatechange = function () {
		        runIfPresent(handle);
		        script.onreadystatechange = null;
		        html.removeChild(script);
		        script = null;
		      };

		      html.appendChild(script);
		    };
		  }

		  function installSetTimeoutImplementation() {
		    registerImmediate = function registerImmediate(handle) {
		      setTimeout(runIfPresent, 0, handle);
		    };
		  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


		  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
		  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

		  if ({}.toString.call(global.process) === "[object process]") {
		    // For Node.js before 0.9
		    installNextTickImplementation();
		  } else if (canUsePostMessage()) {
		    // For non-IE10 modern browsers
		    installPostMessageImplementation();
		  } else if (global.MessageChannel) {
		    // For web workers, where supported
		    installMessageChannelImplementation();
		  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
		    // For IE 6–8
		    installReadyStateChangeImplementation();
		  } else {
		    // For older browsers
		    installSetTimeoutImplementation();
		  }

		  attachTo.setImmediate = setImmediate;
		  attachTo.clearImmediate = clearImmediate;
		})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
		/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13), __webpack_require__(16)));

		/***/ }),
		/* 24 */
		/***/ (function(module, exports, __webpack_require__) {


		module.exports = Yallist;
		Yallist.Node = Node;
		Yallist.create = Yallist;

		function Yallist(list) {
		  var self = this;

		  if (!(self instanceof Yallist)) {
		    self = new Yallist();
		  }

		  self.tail = null;
		  self.head = null;
		  self.length = 0;

		  if (list && typeof list.forEach === 'function') {
		    list.forEach(function (item) {
		      self.push(item);
		    });
		  } else if (arguments.length > 0) {
		    for (var i = 0, l = arguments.length; i < l; i++) {
		      self.push(arguments[i]);
		    }
		  }

		  return self;
		}

		Yallist.prototype.removeNode = function (node) {
		  if (node.list !== this) {
		    throw new Error('removing node which does not belong to this list');
		  }

		  var next = node.next;
		  var prev = node.prev;

		  if (next) {
		    next.prev = prev;
		  }

		  if (prev) {
		    prev.next = next;
		  }

		  if (node === this.head) {
		    this.head = next;
		  }

		  if (node === this.tail) {
		    this.tail = prev;
		  }

		  node.list.length--;
		  node.next = null;
		  node.prev = null;
		  node.list = null;
		  return next;
		};

		Yallist.prototype.unshiftNode = function (node) {
		  if (node === this.head) {
		    return;
		  }

		  if (node.list) {
		    node.list.removeNode(node);
		  }

		  var head = this.head;
		  node.list = this;
		  node.next = head;

		  if (head) {
		    head.prev = node;
		  }

		  this.head = node;

		  if (!this.tail) {
		    this.tail = node;
		  }

		  this.length++;
		};

		Yallist.prototype.pushNode = function (node) {
		  if (node === this.tail) {
		    return;
		  }

		  if (node.list) {
		    node.list.removeNode(node);
		  }

		  var tail = this.tail;
		  node.list = this;
		  node.prev = tail;

		  if (tail) {
		    tail.next = node;
		  }

		  this.tail = node;

		  if (!this.head) {
		    this.head = node;
		  }

		  this.length++;
		};

		Yallist.prototype.push = function () {
		  for (var i = 0, l = arguments.length; i < l; i++) {
		    push(this, arguments[i]);
		  }

		  return this.length;
		};

		Yallist.prototype.unshift = function () {
		  for (var i = 0, l = arguments.length; i < l; i++) {
		    unshift(this, arguments[i]);
		  }

		  return this.length;
		};

		Yallist.prototype.pop = function () {
		  if (!this.tail) {
		    return undefined;
		  }

		  var res = this.tail.value;
		  this.tail = this.tail.prev;

		  if (this.tail) {
		    this.tail.next = null;
		  } else {
		    this.head = null;
		  }

		  this.length--;
		  return res;
		};

		Yallist.prototype.shift = function () {
		  if (!this.head) {
		    return undefined;
		  }

		  var res = this.head.value;
		  this.head = this.head.next;

		  if (this.head) {
		    this.head.prev = null;
		  } else {
		    this.tail = null;
		  }

		  this.length--;
		  return res;
		};

		Yallist.prototype.forEach = function (fn, thisp) {
		  thisp = thisp || this;

		  for (var walker = this.head, i = 0; walker !== null; i++) {
		    fn.call(thisp, walker.value, i, this);
		    walker = walker.next;
		  }
		};

		Yallist.prototype.forEachReverse = function (fn, thisp) {
		  thisp = thisp || this;

		  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
		    fn.call(thisp, walker.value, i, this);
		    walker = walker.prev;
		  }
		};

		Yallist.prototype.get = function (n) {
		  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
		    // abort out of the list early if we hit a cycle
		    walker = walker.next;
		  }

		  if (i === n && walker !== null) {
		    return walker.value;
		  }
		};

		Yallist.prototype.getReverse = function (n) {
		  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
		    // abort out of the list early if we hit a cycle
		    walker = walker.prev;
		  }

		  if (i === n && walker !== null) {
		    return walker.value;
		  }
		};

		Yallist.prototype.map = function (fn, thisp) {
		  thisp = thisp || this;
		  var res = new Yallist();

		  for (var walker = this.head; walker !== null;) {
		    res.push(fn.call(thisp, walker.value, this));
		    walker = walker.next;
		  }

		  return res;
		};

		Yallist.prototype.mapReverse = function (fn, thisp) {
		  thisp = thisp || this;
		  var res = new Yallist();

		  for (var walker = this.tail; walker !== null;) {
		    res.push(fn.call(thisp, walker.value, this));
		    walker = walker.prev;
		  }

		  return res;
		};

		Yallist.prototype.reduce = function (fn, initial) {
		  var acc;
		  var walker = this.head;

		  if (arguments.length > 1) {
		    acc = initial;
		  } else if (this.head) {
		    walker = this.head.next;
		    acc = this.head.value;
		  } else {
		    throw new TypeError('Reduce of empty list with no initial value');
		  }

		  for (var i = 0; walker !== null; i++) {
		    acc = fn(acc, walker.value, i);
		    walker = walker.next;
		  }

		  return acc;
		};

		Yallist.prototype.reduceReverse = function (fn, initial) {
		  var acc;
		  var walker = this.tail;

		  if (arguments.length > 1) {
		    acc = initial;
		  } else if (this.tail) {
		    walker = this.tail.prev;
		    acc = this.tail.value;
		  } else {
		    throw new TypeError('Reduce of empty list with no initial value');
		  }

		  for (var i = this.length - 1; walker !== null; i--) {
		    acc = fn(acc, walker.value, i);
		    walker = walker.prev;
		  }

		  return acc;
		};

		Yallist.prototype.toArray = function () {
		  var arr = new Array(this.length);

		  for (var i = 0, walker = this.head; walker !== null; i++) {
		    arr[i] = walker.value;
		    walker = walker.next;
		  }

		  return arr;
		};

		Yallist.prototype.toArrayReverse = function () {
		  var arr = new Array(this.length);

		  for (var i = 0, walker = this.tail; walker !== null; i++) {
		    arr[i] = walker.value;
		    walker = walker.prev;
		  }

		  return arr;
		};

		Yallist.prototype.slice = function (from, to) {
		  to = to || this.length;

		  if (to < 0) {
		    to += this.length;
		  }

		  from = from || 0;

		  if (from < 0) {
		    from += this.length;
		  }

		  var ret = new Yallist();

		  if (to < from || to < 0) {
		    return ret;
		  }

		  if (from < 0) {
		    from = 0;
		  }

		  if (to > this.length) {
		    to = this.length;
		  }

		  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
		    walker = walker.next;
		  }

		  for (; walker !== null && i < to; i++, walker = walker.next) {
		    ret.push(walker.value);
		  }

		  return ret;
		};

		Yallist.prototype.sliceReverse = function (from, to) {
		  to = to || this.length;

		  if (to < 0) {
		    to += this.length;
		  }

		  from = from || 0;

		  if (from < 0) {
		    from += this.length;
		  }

		  var ret = new Yallist();

		  if (to < from || to < 0) {
		    return ret;
		  }

		  if (from < 0) {
		    from = 0;
		  }

		  if (to > this.length) {
		    to = this.length;
		  }

		  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
		    walker = walker.prev;
		  }

		  for (; walker !== null && i > from; i--, walker = walker.prev) {
		    ret.push(walker.value);
		  }

		  return ret;
		};

		Yallist.prototype.splice = function (start, deleteCount
		/*, ...nodes */
		) {
		  if (start > this.length) {
		    start = this.length - 1;
		  }

		  if (start < 0) {
		    start = this.length + start;
		  }

		  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
		    walker = walker.next;
		  }

		  var ret = [];

		  for (var i = 0; walker && i < deleteCount; i++) {
		    ret.push(walker.value);
		    walker = this.removeNode(walker);
		  }

		  if (walker === null) {
		    walker = this.tail;
		  }

		  if (walker !== this.head && walker !== this.tail) {
		    walker = walker.prev;
		  }

		  for (var i = 2; i < arguments.length; i++) {
		    walker = insert(this, walker, arguments[i]);
		  }

		  return ret;
		};

		Yallist.prototype.reverse = function () {
		  var head = this.head;
		  var tail = this.tail;

		  for (var walker = head; walker !== null; walker = walker.prev) {
		    var p = walker.prev;
		    walker.prev = walker.next;
		    walker.next = p;
		  }

		  this.head = tail;
		  this.tail = head;
		  return this;
		};

		function insert(self, node, value) {
		  var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

		  if (inserted.next === null) {
		    self.tail = inserted;
		  }

		  if (inserted.prev === null) {
		    self.head = inserted;
		  }

		  self.length++;
		  return inserted;
		}

		function push(self, item) {
		  self.tail = new Node(item, self.tail, null, self);

		  if (!self.head) {
		    self.head = self.tail;
		  }

		  self.length++;
		}

		function unshift(self, item) {
		  self.head = new Node(item, null, self.head, self);

		  if (!self.tail) {
		    self.tail = self.head;
		  }

		  self.length++;
		}

		function Node(value, prev, next, list) {
		  if (!(this instanceof Node)) {
		    return new Node(value, prev, next, list);
		  }

		  this.list = list;
		  this.value = value;

		  if (prev) {
		    prev.next = this;
		    this.prev = prev;
		  } else {
		    this.prev = null;
		  }

		  if (next) {
		    next.prev = this;
		    this.next = next;
		  } else {
		    this.next = null;
		  }
		}

		try {
		  // add if support for Symbol.iterator is present
		  __webpack_require__(25)(Yallist);
		} catch (er) {}

		/***/ }),
		/* 25 */
		/***/ (function(module, exports, __webpack_require__) {


		module.exports = function (Yallist) {
		  Yallist.prototype[Symbol.iterator] = /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
		    var walker;
		    return regeneratorRuntime.wrap(function _callee$(_context) {
		      while (1) {
		        switch (_context.prev = _context.next) {
		          case 0:
		            walker = this.head;

		          case 1:
		            if (!walker) {
		              _context.next = 7;
		              break;
		            }

		            _context.next = 4;
		            return walker.value;

		          case 4:
		            walker = walker.next;
		            _context.next = 1;
		            break;

		          case 7:
		          case "end":
		            return _context.stop();
		        }
		      }
		    }, _callee, this);
		  });
		};

		/***/ }),
		/* 26 */
		/***/ (function(module, exports, __webpack_require__) {
		/**
		 * @license React
		 * react-is.production.min.js
		 *
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */


		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		var b = Symbol.for("react.element"),
		    c = Symbol.for("react.portal"),
		    d = Symbol.for("react.fragment"),
		    e = Symbol.for("react.strict_mode"),
		    f = Symbol.for("react.profiler"),
		    g = Symbol.for("react.provider"),
		    h = Symbol.for("react.context"),
		    k = Symbol.for("react.server_context"),
		    l = Symbol.for("react.forward_ref"),
		    m = Symbol.for("react.suspense"),
		    n = Symbol.for("react.suspense_list"),
		    p = Symbol.for("react.memo"),
		    q = Symbol.for("react.lazy"),
		    t = Symbol.for("react.offscreen"),
		    u = Symbol.for("react.cache"),
		    v;
		v = Symbol.for("react.module.reference");

		function w(a) {
		  if ("object" === _typeof(a) && null !== a) {
		    var r = a.$$typeof;

		    switch (r) {
		      case b:
		        switch (a = a.type, a) {
		          case d:
		          case f:
		          case e:
		          case m:
		          case n:
		            return a;

		          default:
		            switch (a = a && a.$$typeof, a) {
		              case k:
		              case h:
		              case l:
		              case q:
		              case p:
		              case g:
		                return a;

		              default:
		                return r;
		            }

		        }

		      case c:
		        return r;
		    }
		  }
		}

		exports.ContextConsumer = h;
		exports.ContextProvider = g;
		exports.Element = b;
		exports.ForwardRef = l;
		exports.Fragment = d;
		exports.Lazy = q;
		exports.Memo = p;
		exports.Portal = c;
		exports.Profiler = f;
		exports.StrictMode = e;
		exports.Suspense = m;
		exports.SuspenseList = n;

		exports.isAsyncMode = function () {
		  return !1;
		};

		exports.isConcurrentMode = function () {
		  return !1;
		};

		exports.isContextConsumer = function (a) {
		  return w(a) === h;
		};

		exports.isContextProvider = function (a) {
		  return w(a) === g;
		};

		exports.isElement = function (a) {
		  return "object" === _typeof(a) && null !== a && a.$$typeof === b;
		};

		exports.isForwardRef = function (a) {
		  return w(a) === l;
		};

		exports.isFragment = function (a) {
		  return w(a) === d;
		};

		exports.isLazy = function (a) {
		  return w(a) === q;
		};

		exports.isMemo = function (a) {
		  return w(a) === p;
		};

		exports.isPortal = function (a) {
		  return w(a) === c;
		};

		exports.isProfiler = function (a) {
		  return w(a) === f;
		};

		exports.isStrictMode = function (a) {
		  return w(a) === e;
		};

		exports.isSuspense = function (a) {
		  return w(a) === m;
		};

		exports.isSuspenseList = function (a) {
		  return w(a) === n;
		};

		exports.isValidElementType = function (a) {
		  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || a === u || "object" === _typeof(a) && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === v || void 0 !== a.getModuleId) ? !0 : !1;
		};

		exports.typeOf = w;

		/***/ }),
		/* 27 */
		/***/ (function(module, exports, __webpack_require__) {
		/**
		 * @license React
		 * react-debug-tools.production.min.js
		 *
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */


		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		var h = __webpack_require__(28),
		    l = __webpack_require__(30),
		    r = Object.assign,
		    w = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
		    x = [],
		    y = null;

		function z() {
		  if (null === y) {
		    var a = new Map();

		    try {
		      A.useContext({
		        _currentValue: null
		      }), A.useState(null), A.useReducer(function (a) {
		        return a;
		      }, null), A.useRef(null), "function" === typeof A.useCacheRefresh && A.useCacheRefresh(), A.useLayoutEffect(function () {}), A.useInsertionEffect(function () {}), A.useEffect(function () {}), A.useImperativeHandle(void 0, function () {
		        return null;
		      }), A.useDebugValue(null), A.useCallback(function () {}), A.useMemo(function () {
		        return null;
		      });
		    } finally {
		      var b = x;
		      x = [];
		    }

		    for (var e = 0; e < b.length; e++) {
		      var g = b[e];
		      a.set(g.primitive, h.parse(g.stackError));
		    }

		    y = a;
		  }

		  return y;
		}

		var B = null;

		function C() {
		  var a = B;
		  null !== a && (B = a.next);
		  return a;
		}

		var A = {
		  getCacheForType: function getCacheForType() {
		    throw Error("Not implemented.");
		  },
		  readContext: function readContext(a) {
		    return a._currentValue;
		  },
		  useCacheRefresh: function useCacheRefresh() {
		    var a = C();
		    x.push({
		      primitive: "CacheRefresh",
		      stackError: Error(),
		      value: null !== a ? a.memoizedState : function () {}
		    });
		    return function () {};
		  },
		  useCallback: function useCallback(a) {
		    var b = C();
		    x.push({
		      primitive: "Callback",
		      stackError: Error(),
		      value: null !== b ? b.memoizedState[0] : a
		    });
		    return a;
		  },
		  useContext: function useContext(a) {
		    x.push({
		      primitive: "Context",
		      stackError: Error(),
		      value: a._currentValue
		    });
		    return a._currentValue;
		  },
		  useEffect: function useEffect(a) {
		    C();
		    x.push({
		      primitive: "Effect",
		      stackError: Error(),
		      value: a
		    });
		  },
		  useImperativeHandle: function useImperativeHandle(a) {
		    C();
		    var b = void 0;
		    null !== a && "object" === _typeof(a) && (b = a.current);
		    x.push({
		      primitive: "ImperativeHandle",
		      stackError: Error(),
		      value: b
		    });
		  },
		  useDebugValue: function useDebugValue(a, b) {
		    x.push({
		      primitive: "DebugValue",
		      stackError: Error(),
		      value: "function" === typeof b ? b(a) : a
		    });
		  },
		  useLayoutEffect: function useLayoutEffect(a) {
		    C();
		    x.push({
		      primitive: "LayoutEffect",
		      stackError: Error(),
		      value: a
		    });
		  },
		  useInsertionEffect: function useInsertionEffect(a) {
		    C();
		    x.push({
		      primitive: "InsertionEffect",
		      stackError: Error(),
		      value: a
		    });
		  },
		  useMemo: function useMemo(a) {
		    var b = C();
		    a = null !== b ? b.memoizedState[0] : a();
		    x.push({
		      primitive: "Memo",
		      stackError: Error(),
		      value: a
		    });
		    return a;
		  },
		  useReducer: function useReducer(a, b, e) {
		    a = C();
		    b = null !== a ? a.memoizedState : void 0 !== e ? e(b) : b;
		    x.push({
		      primitive: "Reducer",
		      stackError: Error(),
		      value: b
		    });
		    return [b, function () {}];
		  },
		  useRef: function useRef(a) {
		    var b = C();
		    a = null !== b ? b.memoizedState : {
		      current: a
		    };
		    x.push({
		      primitive: "Ref",
		      stackError: Error(),
		      value: a.current
		    });
		    return a;
		  },
		  useState: function useState(a) {
		    var b = C();
		    a = null !== b ? b.memoizedState : "function" === typeof a ? a() : a;
		    x.push({
		      primitive: "State",
		      stackError: Error(),
		      value: a
		    });
		    return [a, function () {}];
		  },
		  useTransition: function useTransition() {
		    C();
		    C();
		    x.push({
		      primitive: "Transition",
		      stackError: Error(),
		      value: void 0
		    });
		    return [!1, function () {}];
		  },
		  useMutableSource: function useMutableSource(a, b) {
		    C();
		    C();
		    C();
		    C();
		    a = b(a._source);
		    x.push({
		      primitive: "MutableSource",
		      stackError: Error(),
		      value: a
		    });
		    return a;
		  },
		  useSyncExternalStore: function useSyncExternalStore(a, b) {
		    C();
		    C();
		    a = b();
		    x.push({
		      primitive: "SyncExternalStore",
		      stackError: Error(),
		      value: a
		    });
		    return a;
		  },
		  useDeferredValue: function useDeferredValue(a) {
		    C();
		    C();
		    x.push({
		      primitive: "DeferredValue",
		      stackError: Error(),
		      value: a
		    });
		    return a;
		  },
		  useId: function useId() {
		    var a = C();
		    a = null !== a ? a.memoizedState : "";
		    x.push({
		      primitive: "Id",
		      stackError: Error(),
		      value: a
		    });
		    return a;
		  }
		},
		    D = new Proxy(A, {
		  get: function get(a, b) {
		    if (a.hasOwnProperty(b)) return a[b];
		    a = Error("Missing method in Dispatcher: " + b);
		    a.name = "ReactDebugToolsUnsupportedHookError";
		    throw a;
		  }
		}),
		    E = 0;

		function F(a, b, e) {
		  var g = b[e].source,
		      c = 0;

		  a: for (; c < a.length; c++) {
		    if (a[c].source === g) {
		      for (var m = e + 1, q = c + 1; m < b.length && q < a.length; m++, q++) {
		        if (a[q].source !== b[m].source) continue a;
		      }

		      return c;
		    }
		  }

		  return -1;
		}

		function G(a, b) {
		  if (!a) return !1;
		  b = "use" + b;
		  return a.length < b.length ? !1 : a.lastIndexOf(b) === a.length - b.length;
		}

		function H(a, b, e) {
		  for (var g = [], c = null, m = g, q = 0, t = [], v = 0; v < b.length; v++) {
		    var u = b[v];
		    var d = a;
		    var k = h.parse(u.stackError);

		    b: {
		      var n = k,
		          p = F(n, d, E);
		      if (-1 !== p) d = p;else {
		        for (var f = 0; f < d.length && 5 > f; f++) {
		          if (p = F(n, d, f), -1 !== p) {
		            E = f;
		            d = p;
		            break b;
		          }
		        }

		        d = -1;
		      }
		    }

		    b: {
		      n = k;
		      p = z().get(u.primitive);
		      if (void 0 !== p) for (f = 0; f < p.length && f < n.length; f++) {
		        if (p[f].source !== n[f].source) {
		          f < n.length - 1 && G(n[f].functionName, u.primitive) && f++;
		          f < n.length - 1 && G(n[f].functionName, u.primitive) && f++;
		          n = f;
		          break b;
		        }
		      }
		      n = -1;
		    }

		    k = -1 === d || -1 === n || 2 > d - n ? null : k.slice(n, d - 1);

		    if (null !== k) {
		      d = 0;

		      if (null !== c) {
		        for (; d < k.length && d < c.length && k[k.length - d - 1].source === c[c.length - d - 1].source;) {
		          d++;
		        }

		        for (c = c.length - 1; c > d; c--) {
		          m = t.pop();
		        }
		      }

		      for (c = k.length - d - 1; 1 <= c; c--) {
		        d = [], n = k[c], (p = k[c - 1].functionName) ? (f = p.lastIndexOf("."), -1 === f && (f = 0), "use" === p.substr(f, 3) && (f += 3), p = p.substr(f)) : p = "", p = {
		          id: null,
		          isStateEditable: !1,
		          name: p,
		          value: void 0,
		          subHooks: d
		        }, e && (p.hookSource = {
		          lineNumber: n.lineNumber,
		          columnNumber: n.columnNumber,
		          functionName: n.functionName,
		          fileName: n.fileName
		        }), m.push(p), t.push(m), m = d;
		      }

		      c = k;
		    }

		    d = u.primitive;
		    u = {
		      id: "Context" === d || "DebugValue" === d ? null : q++,
		      isStateEditable: "Reducer" === d || "State" === d,
		      name: d,
		      value: u.value,
		      subHooks: []
		    };
		    e && (d = {
		      lineNumber: null,
		      functionName: null,
		      fileName: null,
		      columnNumber: null
		    }, k && 1 <= k.length && (k = k[0], d.lineNumber = k.lineNumber, d.functionName = k.functionName, d.fileName = k.fileName, d.columnNumber = k.columnNumber), u.hookSource = d);
		    m.push(u);
		  }

		  I(g, null);
		  return g;
		}

		function I(a, b) {
		  for (var e = [], g = 0; g < a.length; g++) {
		    var c = a[g];
		    "DebugValue" === c.name && 0 === c.subHooks.length ? (a.splice(g, 1), g--, e.push(c)) : I(c.subHooks, c);
		  }

		  null !== b && (1 === e.length ? b.value = e[0].value : 1 < e.length && (b.value = e.map(function (a) {
		    return a.value;
		  })));
		}

		function J(a) {
		  if (a instanceof Error && "ReactDebugToolsUnsupportedHookError" === a.name) throw a;
		  var b = Error("Error rendering inspected component", {
		    cause: a
		  });
		  b.name = "ReactDebugToolsRenderError";
		  b.cause = a;
		  throw b;
		}

		function K(a, b, e) {
		  var g = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : !1;
		  null == e && (e = w.ReactCurrentDispatcher);
		  var c = e.current;
		  e.current = D;

		  try {
		    var m = Error();
		    a(b);
		  } catch (t) {
		    J(t);
		  } finally {
		    var q = x;
		    x = [];
		    e.current = c;
		  }

		  c = h.parse(m);
		  return H(c, q, g);
		}

		function L(a) {
		  a.forEach(function (a, e) {
		    return e._currentValue = a;
		  });
		}

		exports.inspectHooks = K;

		exports.inspectHooksOfFiber = function (a, b) {
		  var e = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !1;
		  null == b && (b = w.ReactCurrentDispatcher);
		  if (0 !== a.tag && 15 !== a.tag && 11 !== a.tag) throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
		  z();
		  var g = a.type,
		      c = a.memoizedProps;

		  if (g !== a.elementType && g && g.defaultProps) {
		    c = r({}, c);
		    var m = g.defaultProps;

		    for (q in m) {
		      void 0 === c[q] && (c[q] = m[q]);
		    }
		  }

		  B = a.memoizedState;
		  var q = new Map();

		  try {
		    for (m = a; m;) {
		      if (10 === m.tag) {
		        var t = m.type._context;
		        q.has(t) || (q.set(t, t._currentValue), t._currentValue = m.memoizedProps.value);
		      }

		      m = m.return;
		    }

		    if (11 === a.tag) {
		      var v = g.render;
		      g = c;
		      var u = a.ref;
		      t = b;
		      var d = t.current;
		      t.current = D;

		      try {
		        var k = Error();
		        v(g, u);
		      } catch (f) {
		        J(f);
		      } finally {
		        var n = x;
		        x = [];
		        t.current = d;
		      }

		      var p = h.parse(k);
		      return H(p, n, e);
		    }

		    return K(g, c, b, e);
		  } finally {
		    B = null, L(q);
		  }
		};

		/***/ }),
		/* 28 */
		/***/ (function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
		(function (root, factory) {

		  /* istanbul ignore next */

		  {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(29)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
						__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
						(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
						__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		})(this, function ErrorStackParser(StackFrame) {

		  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
		  var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
		  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
		  return {
		    /**
		     * Given an Error object, extract the most information from it.
		     *
		     * @param {Error} error object
		     * @return {Array} of StackFrames
		     */
		    parse: function ErrorStackParser$$parse(error) {
		      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
		        return this.parseOpera(error);
		      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
		        return this.parseV8OrIE(error);
		      } else if (error.stack) {
		        return this.parseFFOrSafari(error);
		      } else {
		        throw new Error('Cannot parse given Error object');
		      }
		    },
		    // Separate line and column numbers from a string of the form: (URI:Line:Column)
		    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
		      // Fail-fast but return locations like "(native)"
		      if (urlLike.indexOf(':') === -1) {
		        return [urlLike];
		      }

		      var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
		      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
		      return [parts[1], parts[2] || undefined, parts[3] || undefined];
		    },
		    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
		      var filtered = error.stack.split('\n').filter(function (line) {
		        return !!line.match(CHROME_IE_STACK_REGEXP);
		      }, this);
		      return filtered.map(function (line) {
		        if (line.indexOf('(eval ') > -1) {
		          // Throw away eval information until we implement stacktrace.js/stackframe#8
		          line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
		        }

		        var sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '('); // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
		        // case it has spaces in it, as the string is split on \s+ later on

		        var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/); // remove the parenthesized location from the line, if it was matched

		        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
		        var tokens = sanitizedLine.split(/\s+/).slice(1); // if a location was matched, pass it to extractLocation() otherwise pop the last token

		        var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
		        var functionName = tokens.join(' ') || undefined;
		        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
		        return new StackFrame({
		          functionName: functionName,
		          fileName: fileName,
		          lineNumber: locationParts[1],
		          columnNumber: locationParts[2],
		          source: line
		        });
		      }, this);
		    },
		    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
		      var filtered = error.stack.split('\n').filter(function (line) {
		        return !line.match(SAFARI_NATIVE_CODE_REGEXP);
		      }, this);
		      return filtered.map(function (line) {
		        // Throw away eval information until we implement stacktrace.js/stackframe#8
		        if (line.indexOf(' > eval') > -1) {
		          line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1');
		        }

		        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
		          // Safari eval frames only have function names and nothing else
		          return new StackFrame({
		            functionName: line
		          });
		        } else {
		          var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
		          var matches = line.match(functionNameRegex);
		          var functionName = matches && matches[1] ? matches[1] : undefined;
		          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
		          return new StackFrame({
		            functionName: functionName,
		            fileName: locationParts[0],
		            lineNumber: locationParts[1],
		            columnNumber: locationParts[2],
		            source: line
		          });
		        }
		      }, this);
		    },
		    parseOpera: function ErrorStackParser$$parseOpera(e) {
		      if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
		        return this.parseOpera9(e);
		      } else if (!e.stack) {
		        return this.parseOpera10(e);
		      } else {
		        return this.parseOpera11(e);
		      }
		    },
		    parseOpera9: function ErrorStackParser$$parseOpera9(e) {
		      var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
		      var lines = e.message.split('\n');
		      var result = [];

		      for (var i = 2, len = lines.length; i < len; i += 2) {
		        var match = lineRE.exec(lines[i]);

		        if (match) {
		          result.push(new StackFrame({
		            fileName: match[2],
		            lineNumber: match[1],
		            source: lines[i]
		          }));
		        }
		      }

		      return result;
		    },
		    parseOpera10: function ErrorStackParser$$parseOpera10(e) {
		      var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
		      var lines = e.stacktrace.split('\n');
		      var result = [];

		      for (var i = 0, len = lines.length; i < len; i += 2) {
		        var match = lineRE.exec(lines[i]);

		        if (match) {
		          result.push(new StackFrame({
		            functionName: match[3] || undefined,
		            fileName: match[2],
		            lineNumber: match[1],
		            source: lines[i]
		          }));
		        }
		      }

		      return result;
		    },
		    // Opera 10.65+ Error.stack very similar to FF/Safari
		    parseOpera11: function ErrorStackParser$$parseOpera11(error) {
		      var filtered = error.stack.split('\n').filter(function (line) {
		        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
		      }, this);
		      return filtered.map(function (line) {
		        var tokens = line.split('@');
		        var locationParts = this.extractLocation(tokens.pop());
		        var functionCall = tokens.shift() || '';
		        var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^)]*\)/g, '') || undefined;
		        var argsRaw;

		        if (functionCall.match(/\(([^)]*)\)/)) {
		          argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
		        }

		        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
		        return new StackFrame({
		          functionName: functionName,
		          args: args,
		          fileName: locationParts[0],
		          lineNumber: locationParts[1],
		          columnNumber: locationParts[2],
		          source: line
		        });
		      }, this);
		    }
		  };
		});

		/***/ }),
		/* 29 */
		/***/ (function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
		(function (root, factory) {

		  /* istanbul ignore next */

		  {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
						__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
						(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
						__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  }
		})(this, function () {

		  function _isNumber(n) {
		    return !isNaN(parseFloat(n)) && isFinite(n);
		  }

		  function _capitalize(str) {
		    return str.charAt(0).toUpperCase() + str.substring(1);
		  }

		  function _getter(p) {
		    return function () {
		      return this[p];
		    };
		  }

		  var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
		  var numericProps = ['columnNumber', 'lineNumber'];
		  var stringProps = ['fileName', 'functionName', 'source'];
		  var arrayProps = ['args'];
		  var props = booleanProps.concat(numericProps, stringProps, arrayProps);

		  function StackFrame(obj) {
		    if (!obj) return;

		    for (var i = 0; i < props.length; i++) {
		      if (obj[props[i]] !== undefined) {
		        this['set' + _capitalize(props[i])](obj[props[i]]);
		      }
		    }
		  }

		  StackFrame.prototype = {
		    getArgs: function getArgs() {
		      return this.args;
		    },
		    setArgs: function setArgs(v) {
		      if (Object.prototype.toString.call(v) !== '[object Array]') {
		        throw new TypeError('Args must be an Array');
		      }

		      this.args = v;
		    },
		    getEvalOrigin: function getEvalOrigin() {
		      return this.evalOrigin;
		    },
		    setEvalOrigin: function setEvalOrigin(v) {
		      if (v instanceof StackFrame) {
		        this.evalOrigin = v;
		      } else if (v instanceof Object) {
		        this.evalOrigin = new StackFrame(v);
		      } else {
		        throw new TypeError('Eval Origin must be an Object or StackFrame');
		      }
		    },
		    toString: function toString() {
		      var fileName = this.getFileName() || '';
		      var lineNumber = this.getLineNumber() || '';
		      var columnNumber = this.getColumnNumber() || '';
		      var functionName = this.getFunctionName() || '';

		      if (this.getIsEval()) {
		        if (fileName) {
		          return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
		        }

		        return '[eval]:' + lineNumber + ':' + columnNumber;
		      }

		      if (functionName) {
		        return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
		      }

		      return fileName + ':' + lineNumber + ':' + columnNumber;
		    }
		  };

		  StackFrame.fromString = function StackFrame$$fromString(str) {
		    var argsStartIndex = str.indexOf('(');
		    var argsEndIndex = str.lastIndexOf(')');
		    var functionName = str.substring(0, argsStartIndex);
		    var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
		    var locationString = str.substring(argsEndIndex + 1);

		    if (locationString.indexOf('@') === 0) {
		      var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, '');
		      var fileName = parts[1];
		      var lineNumber = parts[2];
		      var columnNumber = parts[3];
		    }

		    return new StackFrame({
		      functionName: functionName,
		      args: args || undefined,
		      fileName: fileName,
		      lineNumber: lineNumber || undefined,
		      columnNumber: columnNumber || undefined
		    });
		  };

		  for (var i = 0; i < booleanProps.length; i++) {
		    StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);

		    StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
		      return function (v) {
		        this[p] = Boolean(v);
		      };
		    }(booleanProps[i]);
		  }

		  for (var j = 0; j < numericProps.length; j++) {
		    StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);

		    StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
		      return function (v) {
		        if (!_isNumber(v)) {
		          throw new TypeError(p + ' must be a Number');
		        }

		        this[p] = Number(v);
		      };
		    }(numericProps[j]);
		  }

		  for (var k = 0; k < stringProps.length; k++) {
		    StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);

		    StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
		      return function (v) {
		        this[p] = String(v);
		      };
		    }(stringProps[k]);
		  }

		  return StackFrame;
		});

		/***/ }),
		/* 30 */
		/***/ (function(module, exports, __webpack_require__) {


		{
		  module.exports = __webpack_require__(31);
		}

		/***/ }),
		/* 31 */
		/***/ (function(module, exports, __webpack_require__) {
		/**
		 * @license React
		 * react.production.min.js
		 *
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */


		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		var l = Symbol.for("react.element"),
		    n = Symbol.for("react.portal"),
		    p = Symbol.for("react.fragment"),
		    q = Symbol.for("react.strict_mode"),
		    r = Symbol.for("react.profiler"),
		    t = Symbol.for("react.provider"),
		    u = Symbol.for("react.context"),
		    v = Symbol.for("react.server_context"),
		    w = Symbol.for("react.forward_ref"),
		    x = Symbol.for("react.suspense"),
		    y = Symbol.for("react.suspense_list"),
		    z = Symbol.for("react.memo"),
		    A = Symbol.for("react.lazy"),
		    B = Symbol.for("react.debug_trace_mode"),
		    C = Symbol.for("react.offscreen"),
		    aa = Symbol.for("react.cache"),
		    D = Symbol.for("react.default_value"),
		    E = Symbol.iterator;

		function ba(a) {
		  if (null === a || "object" !== _typeof(a)) return null;
		  a = E && a[E] || a["@@iterator"];
		  return "function" === typeof a ? a : null;
		}

		var F = {
		  isMounted: function isMounted() {
		    return !1;
		  },
		  enqueueForceUpdate: function enqueueForceUpdate() {},
		  enqueueReplaceState: function enqueueReplaceState() {},
		  enqueueSetState: function enqueueSetState() {}
		},
		    G = Object.assign,
		    H = {};

		function I(a, b, d) {
		  this.props = a;
		  this.context = b;
		  this.refs = H;
		  this.updater = d || F;
		}

		I.prototype.isReactComponent = {};

		I.prototype.setState = function (a, b) {
		  if ("object" !== _typeof(a) && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
		  this.updater.enqueueSetState(this, a, b, "setState");
		};

		I.prototype.forceUpdate = function (a) {
		  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
		};

		function J() {}

		J.prototype = I.prototype;

		function K(a, b, d) {
		  this.props = a;
		  this.context = b;
		  this.refs = H;
		  this.updater = d || F;
		}

		var L = K.prototype = new J();
		L.constructor = K;
		G(L, I.prototype);
		L.isPureReactComponent = !0;
		var M = Array.isArray,
		    N = Object.prototype.hasOwnProperty,
		    O = {
		  current: null
		},
		    P = {
		  key: !0,
		  ref: !0,
		  __self: !0,
		  __source: !0
		};

		function Q(a, b, d) {
		  var c,
		      e = {},
		      k = null,
		      h = null;
		  if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
		    N.call(b, c) && !P.hasOwnProperty(c) && (e[c] = b[c]);
		  }
		  var g = arguments.length - 2;
		  if (1 === g) e.children = d;else if (1 < g) {
		    for (var f = Array(g), m = 0; m < g; m++) {
		      f[m] = arguments[m + 2];
		    }

		    e.children = f;
		  }
		  if (a && a.defaultProps) for (c in g = a.defaultProps, g) {
		    void 0 === e[c] && (e[c] = g[c]);
		  }
		  return {
		    $$typeof: l,
		    type: a,
		    key: k,
		    ref: h,
		    props: e,
		    _owner: O.current
		  };
		}

		function ca(a, b) {
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: b,
		    ref: a.ref,
		    props: a.props,
		    _owner: a._owner
		  };
		}

		function R(a) {
		  return "object" === _typeof(a) && null !== a && a.$$typeof === l;
		}

		function escape(a) {
		  var b = {
		    "=": "=0",
		    ":": "=2"
		  };
		  return "$" + a.replace(/[=:]/g, function (a) {
		    return b[a];
		  });
		}

		var S = /\/+/g;

		function T(a, b) {
		  return "object" === _typeof(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
		}

		function U(a, b, d, c, e) {
		  var k = _typeof(a);

		  if ("undefined" === k || "boolean" === k) a = null;
		  var h = !1;
		  if (null === a) h = !0;else switch (k) {
		    case "string":
		    case "number":
		      h = !0;
		      break;

		    case "object":
		      switch (a.$$typeof) {
		        case l:
		        case n:
		          h = !0;
		      }

		  }
		  if (h) return h = a, e = e(h), a = "" === c ? "." + T(h, 0) : c, M(e) ? (d = "", null != a && (d = a.replace(S, "$&/") + "/"), U(e, b, d, "", function (a) {
		    return a;
		  })) : null != e && (R(e) && (e = ca(e, d + (!e.key || h && h.key === e.key ? "" : ("" + e.key).replace(S, "$&/") + "/") + a)), b.push(e)), 1;
		  h = 0;
		  c = "" === c ? "." : c + ":";
		  if (M(a)) for (var g = 0; g < a.length; g++) {
		    k = a[g];
		    var f = c + T(k, g);
		    h += U(k, b, d, f, e);
		  } else if (f = ba(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
		    k = k.value, f = c + T(k, g++), h += U(k, b, d, f, e);
		  } else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
		  return h;
		}

		function V(a, b, d) {
		  if (null == a) return a;
		  var c = [],
		      e = 0;
		  U(a, c, "", "", function (a) {
		    return b.call(d, a, e++);
		  });
		  return c;
		}

		function da(a) {
		  if (-1 === a._status) {
		    var b = a._result;
		    b = b();
		    b.then(function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
		    }, function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
		    });
		    -1 === a._status && (a._status = 0, a._result = b);
		  }

		  if (1 === a._status) return a._result.default;
		  throw a._result;
		}

		var W = {
		  current: null
		},
		    X = {
		  transition: null
		},
		    Y = {
		  ReactCurrentDispatcher: W,
		  ReactCurrentBatchConfig: X,
		  ReactCurrentOwner: O,
		  ContextRegistry: {}
		},
		    Z = Y.ContextRegistry;
		exports.Children = {
		  map: V,
		  forEach: function forEach(a, b, d) {
		    V(a, function () {
		      b.apply(this, arguments);
		    }, d);
		  },
		  count: function count(a) {
		    var b = 0;
		    V(a, function () {
		      b++;
		    });
		    return b;
		  },
		  toArray: function toArray(a) {
		    return V(a, function (a) {
		      return a;
		    }) || [];
		  },
		  only: function only(a) {
		    if (!R(a)) throw Error("React.Children.only expected to receive a single React element child.");
		    return a;
		  }
		};
		exports.Component = I;
		exports.Fragment = p;
		exports.Profiler = r;
		exports.PureComponent = K;
		exports.StrictMode = q;
		exports.Suspense = x;
		exports.SuspenseList = y;
		exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y;

		exports.cloneElement = function (a, b, d) {
		  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
		  var c = G({}, a.props),
		      e = a.key,
		      k = a.ref,
		      h = a._owner;

		  if (null != b) {
		    void 0 !== b.ref && (k = b.ref, h = O.current);
		    void 0 !== b.key && (e = "" + b.key);
		    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

		    for (f in b) {
		      N.call(b, f) && !P.hasOwnProperty(f) && (c[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
		    }
		  }

		  var f = arguments.length - 2;
		  if (1 === f) c.children = d;else if (1 < f) {
		    g = Array(f);

		    for (var m = 0; m < f; m++) {
		      g[m] = arguments[m + 2];
		    }

		    c.children = g;
		  }
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: e,
		    ref: k,
		    props: c,
		    _owner: h
		  };
		};

		exports.createContext = function (a) {
		  a = {
		    $$typeof: u,
		    _currentValue: a,
		    _currentValue2: a,
		    _threadCount: 0,
		    Provider: null,
		    Consumer: null,
		    _defaultValue: null,
		    _globalName: null
		  };
		  a.Provider = {
		    $$typeof: t,
		    _context: a
		  };
		  return a.Consumer = a;
		};

		exports.createElement = Q;

		exports.createFactory = function (a) {
		  var b = Q.bind(null, a);
		  b.type = a;
		  return b;
		};

		exports.createRef = function () {
		  return {
		    current: null
		  };
		};

		exports.createServerContext = function (a, b) {
		  var d = !0;

		  if (!Z[a]) {
		    d = !1;
		    var c = {
		      $$typeof: v,
		      _currentValue: b,
		      _currentValue2: b,
		      _defaultValue: b,
		      _threadCount: 0,
		      Provider: null,
		      Consumer: null,
		      _globalName: a
		    };
		    c.Provider = {
		      $$typeof: t,
		      _context: c
		    };
		    Z[a] = c;
		  }

		  c = Z[a];
		  if (c._defaultValue === D) c._defaultValue = b, c._currentValue === D && (c._currentValue = b), c._currentValue2 === D && (c._currentValue2 = b);else if (d) throw Error("ServerContext: " + a + " already defined");
		  return c;
		};

		exports.forwardRef = function (a) {
		  return {
		    $$typeof: w,
		    render: a
		  };
		};

		exports.isValidElement = R;

		exports.lazy = function (a) {
		  return {
		    $$typeof: A,
		    _payload: {
		      _status: -1,
		      _result: a
		    },
		    _init: da
		  };
		};

		exports.memo = function (a, b) {
		  return {
		    $$typeof: z,
		    type: a,
		    compare: void 0 === b ? null : b
		  };
		};

		exports.startTransition = function (a) {
		  var b = X.transition;
		  X.transition = {};

		  try {
		    a();
		  } finally {
		    X.transition = b;
		  }
		};

		exports.unstable_Cache = aa;
		exports.unstable_DebugTracingMode = B;
		exports.unstable_Offscreen = C;

		exports.unstable_act = function () {
		  throw Error("act(...) is not supported in production builds of React.");
		};

		exports.unstable_getCacheForType = function (a) {
		  return W.current.getCacheForType(a);
		};

		exports.unstable_getCacheSignal = function () {
		  return W.current.getCacheSignal();
		};

		exports.unstable_useCacheRefresh = function () {
		  return W.current.useCacheRefresh();
		};

		exports.useCallback = function (a, b) {
		  return W.current.useCallback(a, b);
		};

		exports.useContext = function (a) {
		  return W.current.useContext(a);
		};

		exports.useDebugValue = function () {};

		exports.useDeferredValue = function (a) {
		  return W.current.useDeferredValue(a);
		};

		exports.useEffect = function (a, b) {
		  return W.current.useEffect(a, b);
		};

		exports.useId = function () {
		  return W.current.useId();
		};

		exports.useImperativeHandle = function (a, b, d) {
		  return W.current.useImperativeHandle(a, b, d);
		};

		exports.useInsertionEffect = function (a, b) {
		  return W.current.useInsertionEffect(a, b);
		};

		exports.useLayoutEffect = function (a, b) {
		  return W.current.useLayoutEffect(a, b);
		};

		exports.useMemo = function (a, b) {
		  return W.current.useMemo(a, b);
		};

		exports.useReducer = function (a, b, d) {
		  return W.current.useReducer(a, b, d);
		};

		exports.useRef = function (a) {
		  return W.current.useRef(a);
		};

		exports.useState = function (a) {
		  return W.current.useState(a);
		};

		exports.useSyncExternalStore = function (a, b, d) {
		  return W.current.useSyncExternalStore(a, b, d);
		};

		exports.useTransition = function () {
		  return W.current.useTransition();
		};

		exports.version = "18.2.0-experimental-52c434be1-20220512";

		/***/ }),
		/* 32 */
		/***/ (function(module, __webpack_exports__, __webpack_require__) {
		// ESM COMPAT FLAG
		__webpack_require__.r(__webpack_exports__);

		// EXPORTS
		__webpack_require__.d(__webpack_exports__, "connectToDevTools", function() { return /* binding */ connectToDevTools; });

		// CONCATENATED MODULE: ../react-devtools-shared/src/events.js
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		var EventEmitter = /*#__PURE__*/function () {
		  function EventEmitter() {
		    _classCallCheck(this, EventEmitter);

		    _defineProperty(this, "listenersMap", new Map());
		  }

		  _createClass(EventEmitter, [{
		    key: "addListener",
		    value: function addListener(event, listener) {
		      var listeners = this.listenersMap.get(event);

		      if (listeners === undefined) {
		        this.listenersMap.set(event, [listener]);
		      } else {
		        var index = listeners.indexOf(listener);

		        if (index < 0) {
		          listeners.push(listener);
		        }
		      }
		    }
		  }, {
		    key: "emit",
		    value: function emit(event) {
		      var listeners = this.listenersMap.get(event);

		      if (listeners !== undefined) {
		        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		          args[_key - 1] = arguments[_key];
		        }

		        if (listeners.length === 1) {
		          // No need to clone or try/catch
		          var listener = listeners[0];
		          listener.apply(null, args);
		        } else {
		          var didThrow = false;
		          var caughtError = null;
		          var clonedListeners = Array.from(listeners);

		          for (var i = 0; i < clonedListeners.length; i++) {
		            var _listener = clonedListeners[i];

		            try {
		              _listener.apply(null, args);
		            } catch (error) {
		              if (caughtError === null) {
		                didThrow = true;
		                caughtError = error;
		              }
		            }
		          }

		          if (didThrow) {
		            throw caughtError;
		          }
		        }
		      }
		    }
		  }, {
		    key: "removeAllListeners",
		    value: function removeAllListeners() {
		      this.listenersMap.clear();
		    }
		  }, {
		    key: "removeListener",
		    value: function removeListener(event, listener) {
		      var listeners = this.listenersMap.get(event);

		      if (listeners !== undefined) {
		        var index = listeners.indexOf(listener);

		        if (index >= 0) {
		          listeners.splice(index, 1);
		        }
		      }
		    }
		  }]);

		  return EventEmitter;
		}();


		// EXTERNAL MODULE: /Users/mengdi/workspace/git/react/node_modules/lodash.throttle/index.js
		var lodash_throttle = __webpack_require__(14);
		var lodash_throttle_default = /*#__PURE__*/__webpack_require__.n(lodash_throttle);

		// EXTERNAL MODULE: ../react-devtools-shared/src/constants.js
		var constants = __webpack_require__(0);

		// EXTERNAL MODULE: ../react-devtools-shared/src/storage.js
		var storage = __webpack_require__(5);

		// CONCATENATED MODULE: /Users/mengdi/workspace/git/react/node_modules/memoize-one/esm/index.js
		var simpleIsEqual = function simpleIsEqual(a, b) {
		  return a === b;
		};

		/* harmony default export */ var esm = (function (resultFn) {
		  var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleIsEqual;
		  var lastThis = void 0;
		  var lastArgs = [];
		  var lastResult = void 0;
		  var calledOnce = false;

		  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
		    return isEqual(newArg, lastArgs[index]);
		  };

		  var result = function result() {
		    for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
		      newArgs[_key] = arguments[_key];
		    }

		    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
		      return lastResult;
		    }

		    calledOnce = true;
		    lastThis = this;
		    lastArgs = newArgs;
		    lastResult = resultFn.apply(this, newArgs);
		    return lastResult;
		  };

		  return result;
		});
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/utils.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		// Get the window object for the document that a node belongs to,
		// or return null if it cannot be found (node not attached to DOM,
		// etc).
		function getOwnerWindow(node) {
		  if (!node.ownerDocument) {
		    return null;
		  }

		  return node.ownerDocument.defaultView;
		} // Get the iframe containing a node, or return null if it cannot
		// be found (node not within iframe, etc).

		function getOwnerIframe(node) {
		  var nodeWindow = getOwnerWindow(node);

		  if (nodeWindow) {
		    return nodeWindow.frameElement;
		  }

		  return null;
		} // Get a bounding client rect for a node, with an
		// offset added to compensate for its border.

		function getBoundingClientRectWithBorderOffset(node) {
		  var dimensions = getElementDimensions(node);
		  return mergeRectOffsets([node.getBoundingClientRect(), {
		    top: dimensions.borderTop,
		    left: dimensions.borderLeft,
		    bottom: dimensions.borderBottom,
		    right: dimensions.borderRight,
		    // This width and height won't get used by mergeRectOffsets (since this
		    // is not the first rect in the array), but we set them so that this
		    // object type checks as a ClientRect.
		    width: 0,
		    height: 0
		  }]);
		} // Add together the top, left, bottom, and right properties of
		// each ClientRect, but keep the width and height of the first one.

		function mergeRectOffsets(rects) {
		  return rects.reduce(function (previousRect, rect) {
		    if (previousRect == null) {
		      return rect;
		    }

		    return {
		      top: previousRect.top + rect.top,
		      left: previousRect.left + rect.left,
		      width: previousRect.width,
		      height: previousRect.height,
		      bottom: previousRect.bottom + rect.bottom,
		      right: previousRect.right + rect.right
		    };
		  });
		} // Calculate a boundingClientRect for a node relative to boundaryWindow,
		// taking into account any offsets caused by intermediate iframes.

		function getNestedBoundingClientRect(node, boundaryWindow) {
		  var ownerIframe = getOwnerIframe(node);

		  if (ownerIframe && ownerIframe !== boundaryWindow) {
		    var rects = [node.getBoundingClientRect()];
		    var currentIframe = ownerIframe;
		    var onlyOneMore = false;

		    while (currentIframe) {
		      var rect = getBoundingClientRectWithBorderOffset(currentIframe);
		      rects.push(rect);
		      currentIframe = getOwnerIframe(currentIframe);

		      if (onlyOneMore) {
		        break;
		      } // We don't want to calculate iframe offsets upwards beyond
		      // the iframe containing the boundaryWindow, but we
		      // need to calculate the offset relative to the boundaryWindow.


		      if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {
		        onlyOneMore = true;
		      }
		    }

		    return mergeRectOffsets(rects);
		  } else {
		    return node.getBoundingClientRect();
		  }
		}
		function getElementDimensions(domElement) {
		  var calculatedStyle = window.getComputedStyle(domElement);
		  return {
		    borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),
		    borderRight: parseInt(calculatedStyle.borderRightWidth, 10),
		    borderTop: parseInt(calculatedStyle.borderTopWidth, 10),
		    borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),
		    marginLeft: parseInt(calculatedStyle.marginLeft, 10),
		    marginRight: parseInt(calculatedStyle.marginRight, 10),
		    marginTop: parseInt(calculatedStyle.marginTop, 10),
		    marginBottom: parseInt(calculatedStyle.marginBottom, 10),
		    paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),
		    paddingRight: parseInt(calculatedStyle.paddingRight, 10),
		    paddingTop: parseInt(calculatedStyle.paddingTop, 10),
		    paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)
		  };
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/Highlighter/Overlay.js
		function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function Overlay_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function Overlay_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function Overlay_createClass(Constructor, protoProps, staticProps) { if (protoProps) Overlay_defineProperties(Constructor.prototype, protoProps); if (staticProps) Overlay_defineProperties(Constructor, staticProps); return Constructor; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var Overlay_assign = Object.assign;

		// Note that the Overlay components are not affected by the active Theme,
		// because they highlight elements in the main Chrome window (outside of devtools).
		// The colors below were chosen to roughly match those used by Chrome devtools.
		var OverlayRect = /*#__PURE__*/function () {
		  function OverlayRect(doc, container) {
		    Overlay_classCallCheck(this, OverlayRect);

		    this.node = doc.createElement('div');
		    this.border = doc.createElement('div');
		    this.padding = doc.createElement('div');
		    this.content = doc.createElement('div');
		    this.border.style.borderColor = overlayStyles.border;
		    this.padding.style.borderColor = overlayStyles.padding;
		    this.content.style.backgroundColor = overlayStyles.background;
		    Overlay_assign(this.node.style, {
		      borderColor: overlayStyles.margin,
		      pointerEvents: 'none',
		      position: 'fixed'
		    });
		    this.node.style.zIndex = '10000000';
		    this.node.appendChild(this.border);
		    this.border.appendChild(this.padding);
		    this.padding.appendChild(this.content);
		    container.appendChild(this.node);
		  }

		  Overlay_createClass(OverlayRect, [{
		    key: "remove",
		    value: function remove() {
		      if (this.node.parentNode) {
		        this.node.parentNode.removeChild(this.node);
		      }
		    }
		  }, {
		    key: "update",
		    value: function update(box, dims) {
		      boxWrap(dims, 'margin', this.node);
		      boxWrap(dims, 'border', this.border);
		      boxWrap(dims, 'padding', this.padding);
		      Overlay_assign(this.content.style, {
		        height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + 'px',
		        width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + 'px'
		      });
		      Overlay_assign(this.node.style, {
		        top: box.top - dims.marginTop + 'px',
		        left: box.left - dims.marginLeft + 'px'
		      });
		    }
		  }]);

		  return OverlayRect;
		}();

		var OverlayTip = /*#__PURE__*/function () {
		  function OverlayTip(doc, container) {
		    Overlay_classCallCheck(this, OverlayTip);

		    this.tip = doc.createElement('div');
		    Overlay_assign(this.tip.style, {
		      display: 'flex',
		      flexFlow: 'row nowrap',
		      backgroundColor: '#333740',
		      borderRadius: '2px',
		      fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
		      fontWeight: 'bold',
		      padding: '3px 5px',
		      pointerEvents: 'none',
		      position: 'fixed',
		      fontSize: '12px',
		      whiteSpace: 'nowrap'
		    });
		    this.nameSpan = doc.createElement('span');
		    this.tip.appendChild(this.nameSpan);
		    Overlay_assign(this.nameSpan.style, {
		      color: '#ee78e6',
		      borderRight: '1px solid #aaaaaa',
		      paddingRight: '0.5rem',
		      marginRight: '0.5rem'
		    });
		    this.dimSpan = doc.createElement('span');
		    this.tip.appendChild(this.dimSpan);
		    Overlay_assign(this.dimSpan.style, {
		      color: '#d7d7d7'
		    });
		    this.tip.style.zIndex = '10000000';
		    container.appendChild(this.tip);
		  }

		  Overlay_createClass(OverlayTip, [{
		    key: "remove",
		    value: function remove() {
		      if (this.tip.parentNode) {
		        this.tip.parentNode.removeChild(this.tip);
		      }
		    }
		  }, {
		    key: "updateText",
		    value: function updateText(name, width, height) {
		      this.nameSpan.textContent = name;
		      this.dimSpan.textContent = Math.round(width) + 'px × ' + Math.round(height) + 'px';
		    }
		  }, {
		    key: "updatePosition",
		    value: function updatePosition(dims, bounds) {
		      var tipRect = this.tip.getBoundingClientRect();
		      var tipPos = findTipPos(dims, bounds, {
		        width: tipRect.width,
		        height: tipRect.height
		      });
		      Overlay_assign(this.tip.style, tipPos.style);
		    }
		  }]);

		  return OverlayTip;
		}();

		var Overlay_Overlay = /*#__PURE__*/function () {
		  function Overlay() {
		    Overlay_classCallCheck(this, Overlay);

		    // Find the root window, because overlays are positioned relative to it.
		    var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
		    this.window = currentWindow; // When opened in shells/dev, the tooltip should be bound by the app iframe, not by the topmost window.

		    var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
		    this.tipBoundsWindow = tipBoundsWindow;
		    var doc = currentWindow.document;
		    this.container = doc.createElement('div');
		    this.container.style.zIndex = '10000000';
		    this.tip = new OverlayTip(doc, this.container);
		    this.rects = [];
		    doc.body.appendChild(this.container);
		  }

		  Overlay_createClass(Overlay, [{
		    key: "remove",
		    value: function remove() {
		      this.tip.remove();
		      this.rects.forEach(function (rect) {
		        rect.remove();
		      });
		      this.rects.length = 0;

		      if (this.container.parentNode) {
		        this.container.parentNode.removeChild(this.container);
		      }
		    }
		  }, {
		    key: "inspect",
		    value: function inspect(nodes, name) {
		      var _this = this;

		      // We can't get the size of text nodes or comment nodes. React as of v15
		      // heavily uses comment nodes to delimit text.
		      var elements = nodes.filter(function (node) {
		        return node.nodeType === Node.ELEMENT_NODE;
		      });

		      while (this.rects.length > elements.length) {
		        var rect = this.rects.pop();
		        rect.remove();
		      }

		      if (elements.length === 0) {
		        return;
		      }

		      while (this.rects.length < elements.length) {
		        this.rects.push(new OverlayRect(this.window.document, this.container));
		      }

		      var outerBox = {
		        top: Number.POSITIVE_INFINITY,
		        right: Number.NEGATIVE_INFINITY,
		        bottom: Number.NEGATIVE_INFINITY,
		        left: Number.POSITIVE_INFINITY
		      };
		      elements.forEach(function (element, index) {
		        var box = getNestedBoundingClientRect(element, _this.window);
		        var dims = getElementDimensions(element);
		        outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);
		        outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);
		        outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);
		        outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);
		        var rect = _this.rects[index];
		        rect.update(box, dims);
		      });

		      if (!name) {
		        name = elements[0].nodeName.toLowerCase();
		        var node = elements[0];
		        var hook = node.ownerDocument.defaultView.__REACT_DEVTOOLS_GLOBAL_HOOK__;

		        if (hook != null && hook.rendererInterfaces != null) {
		          var ownerName = null; // eslint-disable-next-line no-for-of-loops/no-for-of-loops

		          var _iterator = _createForOfIteratorHelper(hook.rendererInterfaces.values()),
		              _step;

		          try {
		            for (_iterator.s(); !(_step = _iterator.n()).done;) {
		              var rendererInterface = _step.value;
		              var id = rendererInterface.getFiberIDForNative(node, true);

		              if (id !== null) {
		                ownerName = rendererInterface.getDisplayNameForFiberID(id, true);
		                break;
		              }
		            }
		          } catch (err) {
		            _iterator.e(err);
		          } finally {
		            _iterator.f();
		          }

		          if (ownerName) {
		            name += ' (in ' + ownerName + ')';
		          }
		        }
		      }

		      this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);
		      var tipBounds = getNestedBoundingClientRect(this.tipBoundsWindow.document.documentElement, this.window);
		      this.tip.updatePosition({
		        top: outerBox.top,
		        left: outerBox.left,
		        height: outerBox.bottom - outerBox.top,
		        width: outerBox.right - outerBox.left
		      }, {
		        top: tipBounds.top + this.tipBoundsWindow.scrollY,
		        left: tipBounds.left + this.tipBoundsWindow.scrollX,
		        height: this.tipBoundsWindow.innerHeight,
		        width: this.tipBoundsWindow.innerWidth
		      });
		    }
		  }]);

		  return Overlay;
		}();



		function findTipPos(dims, bounds, tipSize) {
		  var tipHeight = Math.max(tipSize.height, 20);
		  var tipWidth = Math.max(tipSize.width, 60);
		  var margin = 5;
		  var top;

		  if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {
		    if (dims.top + dims.height < bounds.top + 0) {
		      top = bounds.top + margin;
		    } else {
		      top = dims.top + dims.height + margin;
		    }
		  } else if (dims.top - tipHeight <= bounds.top + bounds.height) {
		    if (dims.top - tipHeight - margin < bounds.top + margin) {
		      top = bounds.top + margin;
		    } else {
		      top = dims.top - tipHeight - margin;
		    }
		  } else {
		    top = bounds.top + bounds.height - tipHeight - margin;
		  }

		  var left = dims.left + margin;

		  if (dims.left < bounds.left) {
		    left = bounds.left + margin;
		  }

		  if (dims.left + tipWidth > bounds.left + bounds.width) {
		    left = bounds.left + bounds.width - tipWidth - margin;
		  }

		  top += 'px';
		  left += 'px';
		  return {
		    style: {
		      top: top,
		      left: left
		    }
		  };
		}

		function boxWrap(dims, what, node) {
		  Overlay_assign(node.style, {
		    borderTopWidth: dims[what + 'Top'] + 'px',
		    borderLeftWidth: dims[what + 'Left'] + 'px',
		    borderRightWidth: dims[what + 'Right'] + 'px',
		    borderBottomWidth: dims[what + 'Bottom'] + 'px',
		    borderStyle: 'solid'
		  });
		}

		var overlayStyles = {
		  background: 'rgba(120, 170, 210, 0.7)',
		  padding: 'rgba(77, 200, 0, 0.3)',
		  margin: 'rgba(255, 155, 0, 0.3)',
		  border: 'rgba(255, 200, 50, 0.3)'
		};
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var SHOW_DURATION = 2000;
		var timeoutID = null;
		var overlay = null;
		function hideOverlay() {
		  timeoutID = null;

		  if (overlay !== null) {
		    overlay.remove();
		    overlay = null;
		  }
		}
		function showOverlay(elements, componentName, hideAfterTimeout) {
		  // TODO (npm-packages) Detect RN and support it somehow
		  if (window.document == null) {
		    return;
		  }

		  if (timeoutID !== null) {
		    clearTimeout(timeoutID);
		  }

		  if (elements == null) {
		    return;
		  }

		  if (overlay === null) {
		    overlay = new Overlay_Overlay();
		  }

		  overlay.inspect(elements, componentName);

		  if (hideAfterTimeout) {
		    timeoutID = setTimeout(hideOverlay, SHOW_DURATION);
		  }
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/Highlighter/index.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */




		// This plug-in provides in-page highlighting of the selected element.
		// It is used by the browser extension and the standalone DevTools shell (when connected to a browser).
		// It is not currently the mechanism used to highlight React Native views.
		// That is done by the React Native Inspector component.
		var iframesListeningTo = new Set();
		function setupHighlighter(bridge, agent) {
		  bridge.addListener('clearNativeElementHighlight', clearNativeElementHighlight);
		  bridge.addListener('highlightNativeElement', highlightNativeElement);
		  bridge.addListener('shutdown', stopInspectingNative);
		  bridge.addListener('startInspectingNative', startInspectingNative);
		  bridge.addListener('stopInspectingNative', stopInspectingNative);

		  function startInspectingNative() {
		    registerListenersOnWindow(window);
		  }

		  function registerListenersOnWindow(window) {
		    // This plug-in may run in non-DOM environments (e.g. React Native).
		    if (window && typeof window.addEventListener === 'function') {
		      window.addEventListener('click', onClick, true);
		      window.addEventListener('mousedown', onMouseEvent, true);
		      window.addEventListener('mouseover', onMouseEvent, true);
		      window.addEventListener('mouseup', onMouseEvent, true);
		      window.addEventListener('pointerdown', onPointerDown, true);
		      window.addEventListener('pointerover', onPointerOver, true);
		      window.addEventListener('pointerup', onPointerUp, true);
		    }
		  }

		  function stopInspectingNative() {
		    hideOverlay();
		    removeListenersOnWindow(window);
		    iframesListeningTo.forEach(function (frame) {
		      try {
		        removeListenersOnWindow(frame.contentWindow);
		      } catch (error) {// This can error when the iframe is on a cross-origin.
		      }
		    });
		    iframesListeningTo = new Set();
		  }

		  function removeListenersOnWindow(window) {
		    // This plug-in may run in non-DOM environments (e.g. React Native).
		    if (window && typeof window.removeEventListener === 'function') {
		      window.removeEventListener('click', onClick, true);
		      window.removeEventListener('mousedown', onMouseEvent, true);
		      window.removeEventListener('mouseover', onMouseEvent, true);
		      window.removeEventListener('mouseup', onMouseEvent, true);
		      window.removeEventListener('pointerdown', onPointerDown, true);
		      window.removeEventListener('pointerover', onPointerOver, true);
		      window.removeEventListener('pointerup', onPointerUp, true);
		    }
		  }

		  function clearNativeElementHighlight() {
		    hideOverlay();
		  }

		  function highlightNativeElement(_ref) {
		    var displayName = _ref.displayName,
		        hideAfterTimeout = _ref.hideAfterTimeout,
		        id = _ref.id,
		        openNativeElementsPanel = _ref.openNativeElementsPanel,
		        rendererID = _ref.rendererID,
		        scrollIntoView = _ref.scrollIntoView;
		    var renderer = agent.rendererInterfaces[rendererID];

		    if (renderer == null) {
		      console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		    }

		    var nodes = null;

		    if (renderer != null) {
		      nodes = renderer.findNativeNodesForFiberID(id);
		    }

		    if (nodes != null && nodes[0] != null) {
		      var node = nodes[0];

		      if (scrollIntoView && typeof node.scrollIntoView === 'function') {
		        // If the node isn't visible show it before highlighting it.
		        // We may want to reconsider this; it might be a little disruptive.
		        // $FlowFixMe Flow only knows about 'start' | 'end'
		        node.scrollIntoView({
		          block: 'nearest',
		          inline: 'nearest'
		        });
		      }

		      showOverlay(nodes, displayName, hideAfterTimeout);

		      if (openNativeElementsPanel) {
		        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;
		        bridge.send('syncSelectionToNativeElementsPanel');
		      }
		    } else {
		      hideOverlay();
		    }
		  }

		  function onClick(event) {
		    event.preventDefault();
		    event.stopPropagation();
		    stopInspectingNative();
		    bridge.send('stopInspectingNative', true);
		  }

		  function onMouseEvent(event) {
		    event.preventDefault();
		    event.stopPropagation();
		  }

		  function onPointerDown(event) {
		    event.preventDefault();
		    event.stopPropagation();
		    selectFiberForNode(event.target);
		  }

		  function onPointerOver(event) {
		    event.preventDefault();
		    event.stopPropagation();
		    var target = event.target;

		    if (target.tagName === 'IFRAME') {
		      var iframe = target;

		      try {
		        if (!iframesListeningTo.has(iframe)) {
		          var _window = iframe.contentWindow;
		          registerListenersOnWindow(_window);
		          iframesListeningTo.add(iframe);
		        }
		      } catch (error) {// This can error when the iframe is on a cross-origin.
		      }
		    } // Don't pass the name explicitly.
		    // It will be inferred from DOM tag and Fiber owner.


		    showOverlay([target], null, false);
		    selectFiberForNode(target);
		  }

		  function onPointerUp(event) {
		    event.preventDefault();
		    event.stopPropagation();
		  }

		  var selectFiberForNode = lodash_throttle_default()(esm(function (node) {
		    var id = agent.getIDForNode(node);

		    if (id !== null) {
		      bridge.send('selectFiber', id);
		    }
		  }), 200, // Don't change the selection in the very first 200ms
		  // because those are usually unintentional as you lift the cursor.
		  {
		    leading: false
		  });
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		var OUTLINE_COLOR = '#f0f0f0'; // Note these colors are in sync with DevTools Profiler chart colors.

		var COLORS = ['#37afa9', '#63b19e', '#80b393', '#97b488', '#abb67d', '#beb771', '#cfb965', '#dfba57', '#efbb49', '#febc38'];
		var canvas = null;
		function draw(nodeToData) {
		  if (canvas === null) {
		    initialize();
		  }

		  var canvasFlow = canvas;
		  canvasFlow.width = window.innerWidth;
		  canvasFlow.height = window.innerHeight;
		  var context = canvasFlow.getContext('2d');
		  context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
		  nodeToData.forEach(function (_ref) {
		    var count = _ref.count,
		        rect = _ref.rect;

		    if (rect !== null) {
		      var colorIndex = Math.min(COLORS.length - 1, count - 1);
		      var color = COLORS[colorIndex];
		      drawBorder(context, rect, color);
		    }
		  });
		}

		function drawBorder(context, rect, color) {
		  var height = rect.height,
		      left = rect.left,
		      top = rect.top,
		      width = rect.width; // outline

		  context.lineWidth = 1;
		  context.strokeStyle = OUTLINE_COLOR;
		  context.strokeRect(left - 1, top - 1, width + 2, height + 2); // inset

		  context.lineWidth = 1;
		  context.strokeStyle = OUTLINE_COLOR;
		  context.strokeRect(left + 1, top + 1, width - 1, height - 1);
		  context.strokeStyle = color;
		  context.setLineDash([0]); // border

		  context.lineWidth = 1;
		  context.strokeRect(left, top, width - 1, height - 1);
		  context.setLineDash([0]);
		}

		function destroy() {
		  if (canvas !== null) {
		    if (canvas.parentNode != null) {
		      canvas.parentNode.removeChild(canvas);
		    }

		    canvas = null;
		  }
		}

		function initialize() {
		  canvas = window.document.createElement('canvas');
		  canvas.style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
		  var root = window.document.documentElement;
		  root.insertBefore(canvas, root.firstChild);
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/views/TraceUpdates/index.js
		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */



		// How long the rect should be shown for?
		var DISPLAY_DURATION = 250; // What's the longest we are willing to show the overlay for?
		// This can be important if we're getting a flurry of events (e.g. scroll update).

		var MAX_DISPLAY_DURATION = 3000; // How long should a rect be considered valid for?

		var REMEASUREMENT_AFTER_DURATION = 250; // Some environments (e.g. React Native / Hermes) don't support the performance API yet.

		var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
		  return performance.now();
		} : function () {
		  return Date.now();
		};
		var nodeToData = new Map();
		var TraceUpdates_agent = null;
		var drawAnimationFrameID = null;
		var isEnabled = false;
		var redrawTimeoutID = null;
		function TraceUpdates_initialize(injectedAgent) {
		  TraceUpdates_agent = injectedAgent;
		  TraceUpdates_agent.addListener('traceUpdates', traceUpdates);
		}
		function toggleEnabled(value) {
		  isEnabled = value;

		  if (!isEnabled) {
		    nodeToData.clear();

		    if (drawAnimationFrameID !== null) {
		      cancelAnimationFrame(drawAnimationFrameID);
		      drawAnimationFrameID = null;
		    }

		    if (redrawTimeoutID !== null) {
		      clearTimeout(redrawTimeoutID);
		      redrawTimeoutID = null;
		    }

		    destroy();
		  }
		}

		function traceUpdates(nodes) {
		  if (!isEnabled) {
		    return;
		  }

		  nodes.forEach(function (node) {
		    var data = nodeToData.get(node);
		    var now = getCurrentTime();
		    var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;
		    var rect = data != null ? data.rect : null;

		    if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {
		      lastMeasuredAt = now;
		      rect = measureNode(node);
		    }

		    nodeToData.set(node, {
		      count: data != null ? data.count + 1 : 1,
		      expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,
		      lastMeasuredAt: lastMeasuredAt,
		      rect: rect
		    });
		  });

		  if (redrawTimeoutID !== null) {
		    clearTimeout(redrawTimeoutID);
		    redrawTimeoutID = null;
		  }

		  if (drawAnimationFrameID === null) {
		    drawAnimationFrameID = requestAnimationFrame(prepareToDraw);
		  }
		}

		function prepareToDraw() {
		  drawAnimationFrameID = null;
		  redrawTimeoutID = null;
		  var now = getCurrentTime();
		  var earliestExpiration = Number.MAX_VALUE; // Remove any items that have already expired.

		  nodeToData.forEach(function (data, node) {
		    if (data.expirationTime < now) {
		      nodeToData.delete(node);
		    } else {
		      earliestExpiration = Math.min(earliestExpiration, data.expirationTime);
		    }
		  });
		  draw(nodeToData);

		  if (earliestExpiration !== Number.MAX_VALUE) {
		    redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);
		  }
		}

		function measureNode(node) {
		  if (!node || typeof node.getBoundingClientRect !== 'function') {
		    return null;
		  }

		  var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
		  return getNestedBoundingClientRect(node, currentWindow);
		}
		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/console.js
		var backend_console = __webpack_require__(8);

		// CONCATENATED MODULE: ../react-devtools-shared/src/bridge.js
		function bridge_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { bridge_typeof = function _typeof(obj) { return typeof obj; }; } else { bridge_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return bridge_typeof(obj); }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || bridge_unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function bridge_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bridge_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bridge_arrayLikeToArray(o, minLen); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return bridge_arrayLikeToArray(arr); }

		function bridge_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function bridge_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function bridge_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function bridge_createClass(Constructor, protoProps, staticProps) { if (protoProps) bridge_defineProperties(Constructor.prototype, protoProps); if (staticProps) bridge_defineProperties(Constructor, staticProps); return Constructor; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

		function _possibleConstructorReturn(self, call) { if (call && (bridge_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

		function bridge_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		var BATCH_DURATION = 100; // This message specifies the version of the DevTools protocol currently supported by the backend,
		// as well as the earliest NPM version (e.g. "4.13.0") that protocol is supported by on the frontend.
		// This enables an older frontend to display an upgrade message to users for a newer, unsupported backend.

		// Bump protocol version whenever a backwards breaking change is made
		// in the messages sent between BackendBridge and FrontendBridge.
		// This mapping is embedded in both frontend and backend builds.
		//
		// The backend protocol will always be the latest entry in the BRIDGE_PROTOCOL array.
		//
		// When an older frontend connects to a newer backend,
		// the backend can send the minNpmVersion and the frontend can display an NPM upgrade prompt.
		//
		// When a newer frontend connects with an older protocol version,
		// the frontend can use the embedded minNpmVersion/maxNpmVersion values to display a downgrade prompt.
		var BRIDGE_PROTOCOL = [// This version technically never existed,
		// but a backwards breaking change was added in 4.11,
		// so the safest guess to downgrade the frontend would be to version 4.10.
		{
		  version: 0,
		  minNpmVersion: '"<4.11.0"',
		  maxNpmVersion: '"<4.11.0"'
		}, // Versions 4.11.x – 4.12.x contained the backwards breaking change,
		// but we didn't add the "fix" of checking the protocol version until 4.13,
		// so we don't recommend downgrading to 4.11 or 4.12.
		{
		  version: 1,
		  minNpmVersion: '4.13.0',
		  maxNpmVersion: '4.21.0'
		}, // Version 2 adds a StrictMode-enabled and supports-StrictMode bits to add-root operation.
		{
		  version: 2,
		  minNpmVersion: '4.22.0',
		  maxNpmVersion: null
		}];
		var currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];

		var Bridge = /*#__PURE__*/function (_EventEmitter) {
		  _inherits(Bridge, _EventEmitter);

		  var _super = _createSuper(Bridge);

		  function Bridge(wall) {
		    var _this;

		    bridge_classCallCheck(this, Bridge);

		    _this = _super.call(this);

		    bridge_defineProperty(_assertThisInitialized(_this), "_isShutdown", false);

		    bridge_defineProperty(_assertThisInitialized(_this), "_messageQueue", []);

		    bridge_defineProperty(_assertThisInitialized(_this), "_timeoutID", null);

		    bridge_defineProperty(_assertThisInitialized(_this), "_wallUnlisten", null);

		    bridge_defineProperty(_assertThisInitialized(_this), "_flush", function () {
		      // This method is used after the bridge is marked as destroyed in shutdown sequence,
		      // so we do not bail out if the bridge marked as destroyed.
		      // It is a private method that the bridge ensures is only called at the right times.
		      if (_this._timeoutID !== null) {
		        clearTimeout(_this._timeoutID);
		        _this._timeoutID = null;
		      }

		      if (_this._messageQueue.length) {
		        for (var i = 0; i < _this._messageQueue.length; i += 2) {
		          var _this$_wall;

		          (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i]].concat(_toConsumableArray(_this._messageQueue[i + 1])));
		        }

		        _this._messageQueue.length = 0; // Check again for queued messages in BATCH_DURATION ms. This will keep
		        // flushing in a loop as long as messages continue to be added. Once no
		        // more are, the timer expires.

		        _this._timeoutID = setTimeout(_this._flush, BATCH_DURATION);
		      }
		    });

		    bridge_defineProperty(_assertThisInitialized(_this), "overrideValueAtPath", function (_ref) {
		      var id = _ref.id,
		          path = _ref.path,
		          rendererID = _ref.rendererID,
		          type = _ref.type,
		          value = _ref.value;

		      switch (type) {
		        case 'context':
		          _this.send('overrideContext', {
		            id: id,
		            path: path,
		            rendererID: rendererID,
		            wasForwarded: true,
		            value: value
		          });

		          break;

		        case 'hooks':
		          _this.send('overrideHookState', {
		            id: id,
		            path: path,
		            rendererID: rendererID,
		            wasForwarded: true,
		            value: value
		          });

		          break;

		        case 'props':
		          _this.send('overrideProps', {
		            id: id,
		            path: path,
		            rendererID: rendererID,
		            wasForwarded: true,
		            value: value
		          });

		          break;

		        case 'state':
		          _this.send('overrideState', {
		            id: id,
		            path: path,
		            rendererID: rendererID,
		            wasForwarded: true,
		            value: value
		          });

		          break;
		      }
		    });

		    _this._wall = wall;
		    _this._wallUnlisten = wall.listen(function (message) {
		      if (message && message.event) {
		        _assertThisInitialized(_this).emit(message.event, message.payload);
		      }
		    }) || null; // Temporarily support older standalone front-ends sending commands to newer embedded backends.
		    // We do this because React Native embeds the React DevTools backend,
		    // but cannot control which version of the frontend users use.

		    _this.addListener('overrideValueAtPath', _this.overrideValueAtPath);

		    return _this;
		  } // Listening directly to the wall isn't advised.
		  // It can be used to listen for legacy (v3) messages (since they use a different format).


		  bridge_createClass(Bridge, [{
		    key: "send",
		    value: function send(event) {
		      if (this._isShutdown) {
		        console.warn("Cannot send message \"".concat(event, "\" through a Bridge that has been shutdown."));
		        return;
		      } // When we receive a message:
		      // - we add it to our queue of messages to be sent
		      // - if there hasn't been a message recently, we set a timer for 0 ms in
		      //   the future, allowing all messages created in the same tick to be sent
		      //   together
		      // - if there *has* been a message flushed in the last BATCH_DURATION ms
		      //   (or we're waiting for our setTimeout-0 to fire), then _timeoutID will
		      //   be set, and we'll simply add to the queue and wait for that


		      for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        payload[_key - 1] = arguments[_key];
		      }

		      this._messageQueue.push(event, payload);

		      if (!this._timeoutID) {
		        this._timeoutID = setTimeout(this._flush, 0);
		      }
		    }
		  }, {
		    key: "shutdown",
		    value: function shutdown() {
		      if (this._isShutdown) {
		        console.warn('Bridge was already shutdown.');
		        return;
		      } // Queue the shutdown outgoing message for subscribers.


		      this.send('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.

		      this._isShutdown = true; // Disable the API inherited from EventEmitter that can add more listeners and send more messages.
		      // $FlowFixMe This property is not writable.

		      this.addListener = function () {}; // $FlowFixMe This property is not writable.


		      this.emit = function () {}; // NOTE: There's also EventEmitter API like `on` and `prependListener` that we didn't add to our Flow type of EventEmitter.
		      // Unsubscribe this bridge incoming message listeners to be sure, and so they don't have to do that.


		      this.removeAllListeners(); // Stop accepting and emitting incoming messages from the wall.

		      var wallUnlisten = this._wallUnlisten;

		      if (wallUnlisten) {
		        wallUnlisten();
		      } // Synchronously flush all queued outgoing messages.
		      // At this step the subscribers' code may run in this call stack.


		      do {
		        this._flush();
		      } while (this._messageQueue.length); // Make sure once again that there is no dangling timer.


		      if (this._timeoutID !== null) {
		        clearTimeout(this._timeoutID);
		        this._timeoutID = null;
		      }
		    }
		  }, {
		    key: "wall",
		    get: function get() {
		      return this._wall;
		    }
		  }]);

		  return Bridge;
		}(EventEmitter);

		/* harmony default export */ var src_bridge = (Bridge);
		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/utils.js
		var utils = __webpack_require__(4);

		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/agent.js
		function agent_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { agent_typeof = function _typeof(obj) { return typeof obj; }; } else { agent_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return agent_typeof(obj); }

		function agent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function agent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function agent_createClass(Constructor, protoProps, staticProps) { if (protoProps) agent_defineProperties(Constructor.prototype, protoProps); if (staticProps) agent_defineProperties(Constructor, staticProps); return Constructor; }

		function agent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) agent_setPrototypeOf(subClass, superClass); }

		function agent_setPrototypeOf(o, p) { agent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return agent_setPrototypeOf(o, p); }

		function agent_createSuper(Derived) { var hasNativeReflectConstruct = agent_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = agent_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = agent_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return agent_possibleConstructorReturn(this, result); }; }

		function agent_possibleConstructorReturn(self, call) { if (call && (agent_typeof(call) === "object" || typeof call === "function")) { return call; } return agent_assertThisInitialized(self); }

		function agent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

		function agent_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

		function agent_getPrototypeOf(o) { agent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return agent_getPrototypeOf(o); }

		function agent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */










		var agent_debug = function debug(methodName) {
		  if (constants["s" /* __DEBUG__ */]) {
		    var _console;

		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    (_console = console).log.apply(_console, ["%cAgent %c".concat(methodName), 'color: purple; font-weight: bold;', 'font-weight: bold;'].concat(args));
		  }
		};

		var agent_Agent = /*#__PURE__*/function (_EventEmitter) {
		  agent_inherits(Agent, _EventEmitter);

		  var _super = agent_createSuper(Agent);

		  function Agent(bridge) {
		    var _this;

		    agent_classCallCheck(this, Agent);

		    _this = _super.call(this);

		    agent_defineProperty(agent_assertThisInitialized(_this), "_isProfiling", false);

		    agent_defineProperty(agent_assertThisInitialized(_this), "_recordChangeDescriptions", false);

		    agent_defineProperty(agent_assertThisInitialized(_this), "_rendererInterfaces", {});

		    agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelection", null);

		    agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelectionMatch", null);

		    agent_defineProperty(agent_assertThisInitialized(_this), "_traceUpdatesEnabled", false);

		    agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsAndWarnings", function (_ref) {
		      var rendererID = _ref.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		      } else {
		        renderer.clearErrorsAndWarnings();
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsForFiberID", function (_ref2) {
		      var id = _ref2.id,
		          rendererID = _ref2.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		      } else {
		        renderer.clearErrorsForFiberID(id);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "clearWarningsForFiberID", function (_ref3) {
		      var id = _ref3.id,
		          rendererID = _ref3.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		      } else {
		        renderer.clearWarningsForFiberID(id);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "copyElementPath", function (_ref4) {
		      var id = _ref4.id,
		          path = _ref4.path,
		          rendererID = _ref4.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.copyElementPath(id, path);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "deletePath", function (_ref5) {
		      var hookID = _ref5.hookID,
		          id = _ref5.id,
		          path = _ref5.path,
		          rendererID = _ref5.rendererID,
		          type = _ref5.type;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.deletePath(type, id, hookID, path);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "getBackendVersion", function () {
		      var version = "4.24.6-ca7a38ae4";

		      {
		        _this._bridge.send('backendVersion', version);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "getBridgeProtocol", function () {
		      _this._bridge.send('bridgeProtocol', currentBridgeProtocol);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingData", function (_ref6) {
		      var rendererID = _ref6.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		      }

		      _this._bridge.send('profilingData', renderer.getProfilingData());
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingStatus", function () {
		      _this._bridge.send('profilingStatus', _this._isProfiling);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "getOwnersList", function (_ref7) {
		      var id = _ref7.id,
		          rendererID = _ref7.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        var owners = renderer.getOwnersList(id);

		        _this._bridge.send('ownersList', {
		          id: id,
		          owners: owners
		        });
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "inspectElement", function (_ref8) {
		      var forceFullData = _ref8.forceFullData,
		          id = _ref8.id,
		          path = _ref8.path,
		          rendererID = _ref8.rendererID,
		          requestID = _ref8.requestID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        _this._bridge.send('inspectedElement', renderer.inspectElement(requestID, id, path, forceFullData)); // When user selects an element, stop trying to restore the selection,
		        // and instead remember the current selection for the next reload.


		        if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {
		          _this._persistedSelection = null;
		          _this._persistedSelectionMatch = null;
		          renderer.setTrackedPath(null);

		          _this._throttledPersistSelection(rendererID, id);
		        } // TODO: If there was a way to change the selected DOM element
		        // in native Elements tab without forcing a switch to it, we'd do it here.
		        // For now, it doesn't seem like there is a way to do that:
		        // https://github.com/bvaughn/react-devtools-experimental/issues/102
		        // (Setting $0 doesn't work, and calling inspect() switches the tab.)

		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "logElementToConsole", function (_ref9) {
		      var id = _ref9.id,
		          rendererID = _ref9.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.logElementToConsole(id);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideError", function (_ref10) {
		      var id = _ref10.id,
		          rendererID = _ref10.rendererID,
		          forceError = _ref10.forceError;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.overrideError(id, forceError);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideSuspense", function (_ref11) {
		      var id = _ref11.id,
		          rendererID = _ref11.rendererID,
		          forceFallback = _ref11.forceFallback;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.overrideSuspense(id, forceFallback);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideValueAtPath", function (_ref12) {
		      var hookID = _ref12.hookID,
		          id = _ref12.id,
		          path = _ref12.path,
		          rendererID = _ref12.rendererID,
		          type = _ref12.type,
		          value = _ref12.value;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.overrideValueAtPath(type, id, hookID, path, value);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideContext", function (_ref13) {
		      var id = _ref13.id,
		          path = _ref13.path,
		          rendererID = _ref13.rendererID,
		          wasForwarded = _ref13.wasForwarded,
		          value = _ref13.value;

		      // Don't forward a message that's already been forwarded by the front-end Bridge.
		      // We only need to process the override command once!
		      if (!wasForwarded) {
		        _this.overrideValueAtPath({
		          id: id,
		          path: path,
		          rendererID: rendererID,
		          type: 'context',
		          value: value
		        });
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideHookState", function (_ref14) {
		      var id = _ref14.id;
		          _ref14.hookID;
		          var path = _ref14.path,
		          rendererID = _ref14.rendererID,
		          wasForwarded = _ref14.wasForwarded,
		          value = _ref14.value;

		      // Don't forward a message that's already been forwarded by the front-end Bridge.
		      // We only need to process the override command once!
		      if (!wasForwarded) {
		        _this.overrideValueAtPath({
		          id: id,
		          path: path,
		          rendererID: rendererID,
		          type: 'hooks',
		          value: value
		        });
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideProps", function (_ref15) {
		      var id = _ref15.id,
		          path = _ref15.path,
		          rendererID = _ref15.rendererID,
		          wasForwarded = _ref15.wasForwarded,
		          value = _ref15.value;

		      // Don't forward a message that's already been forwarded by the front-end Bridge.
		      // We only need to process the override command once!
		      if (!wasForwarded) {
		        _this.overrideValueAtPath({
		          id: id,
		          path: path,
		          rendererID: rendererID,
		          type: 'props',
		          value: value
		        });
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "overrideState", function (_ref16) {
		      var id = _ref16.id,
		          path = _ref16.path,
		          rendererID = _ref16.rendererID,
		          wasForwarded = _ref16.wasForwarded,
		          value = _ref16.value;

		      // Don't forward a message that's already been forwarded by the front-end Bridge.
		      // We only need to process the override command once!
		      if (!wasForwarded) {
		        _this.overrideValueAtPath({
		          id: id,
		          path: path,
		          rendererID: rendererID,
		          type: 'state',
		          value: value
		        });
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "reloadAndProfile", function (recordChangeDescriptions) {
		      Object(storage["e" /* sessionStorageSetItem */])(constants["k" /* SESSION_STORAGE_RELOAD_AND_PROFILE_KEY */], 'true');
		      Object(storage["e" /* sessionStorageSetItem */])(constants["j" /* SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY */], recordChangeDescriptions ? 'true' : 'false'); // This code path should only be hit if the shell has explicitly told the Store that it supports profiling.
		      // In that case, the shell must also listen for this specific message to know when it needs to reload the app.
		      // The agent can't do this in a way that is renderer agnostic.

		      _this._bridge.send('reloadAppForProfiling');
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "renamePath", function (_ref17) {
		      var hookID = _ref17.hookID,
		          id = _ref17.id,
		          newPath = _ref17.newPath,
		          oldPath = _ref17.oldPath,
		          rendererID = _ref17.rendererID,
		          type = _ref17.type;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.renamePath(type, id, hookID, oldPath, newPath);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "setTraceUpdatesEnabled", function (traceUpdatesEnabled) {
		      _this._traceUpdatesEnabled = traceUpdatesEnabled;
		      toggleEnabled(traceUpdatesEnabled);

		      for (var rendererID in _this._rendererInterfaces) {
		        var renderer = _this._rendererInterfaces[rendererID];
		        renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "syncSelectionFromNativeElementsPanel", function () {
		      var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

		      if (target == null) {
		        return;
		      }

		      _this.selectNode(target);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "shutdown", function () {
		      // Clean up the overlay if visible, and associated events.
		      _this.emit('shutdown');
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "startProfiling", function (recordChangeDescriptions) {
		      _this._recordChangeDescriptions = recordChangeDescriptions;
		      _this._isProfiling = true;

		      for (var rendererID in _this._rendererInterfaces) {
		        var renderer = _this._rendererInterfaces[rendererID];
		        renderer.startProfiling(recordChangeDescriptions);
		      }

		      _this._bridge.send('profilingStatus', _this._isProfiling);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "stopProfiling", function () {
		      _this._isProfiling = false;
		      _this._recordChangeDescriptions = false;

		      for (var rendererID in _this._rendererInterfaces) {
		        var renderer = _this._rendererInterfaces[rendererID];
		        renderer.stopProfiling();
		      }

		      _this._bridge.send('profilingStatus', _this._isProfiling);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "storeAsGlobal", function (_ref18) {
		      var count = _ref18.count,
		          id = _ref18.id,
		          path = _ref18.path,
		          rendererID = _ref18.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.storeAsGlobal(id, path, count);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "updateConsolePatchSettings", function (_ref19) {
		      var appendComponentStack = _ref19.appendComponentStack,
		          breakOnConsoleErrors = _ref19.breakOnConsoleErrors,
		          showInlineWarningsAndErrors = _ref19.showInlineWarningsAndErrors,
		          hideConsoleLogsInStrictMode = _ref19.hideConsoleLogsInStrictMode,
		          browserTheme = _ref19.browserTheme;
		      // If the frontend preference has change,
		      // or in the case of React Native- if the backend is just finding out the preference-
		      // then reinstall the console overrides.
		      // It's safe to call these methods multiple times, so we don't need to worry about that.
		      Object(backend_console["a" /* patch */])({
		        appendComponentStack: appendComponentStack,
		        breakOnConsoleErrors: breakOnConsoleErrors,
		        showInlineWarningsAndErrors: showInlineWarningsAndErrors,
		        hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
		        browserTheme: browserTheme
		      });
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "updateComponentFilters", function (componentFilters) {
		      for (var rendererID in _this._rendererInterfaces) {
		        var renderer = _this._rendererInterfaces[rendererID];
		        renderer.updateComponentFilters(componentFilters);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "viewAttributeSource", function (_ref20) {
		      var id = _ref20.id,
		          path = _ref20.path,
		          rendererID = _ref20.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.prepareViewAttributeSource(id, path);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "viewElementSource", function (_ref21) {
		      var id = _ref21.id,
		          rendererID = _ref21.rendererID;
		      var renderer = _this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
		      } else {
		        renderer.prepareViewElementSource(id);
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "onTraceUpdates", function (nodes) {
		      _this.emit('traceUpdates', nodes);
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "onFastRefreshScheduled", function () {
		      if (constants["s" /* __DEBUG__ */]) {
		        agent_debug('onFastRefreshScheduled');
		      }

		      _this._bridge.send('fastRefreshScheduled');
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "onHookOperations", function (operations) {
		      if (constants["s" /* __DEBUG__ */]) {
		        agent_debug('onHookOperations', "(".concat(operations.length, ") [").concat(operations.join(', '), "]"));
		      } // TODO:
		      // The chrome.runtime does not currently support transferables; it forces JSON serialization.
		      // See bug https://bugs.chromium.org/p/chromium/issues/detail?id=927134
		      //
		      // Regarding transferables, the postMessage doc states:
		      // If the ownership of an object is transferred, it becomes unusable (neutered)
		      // in the context it was sent from and becomes available only to the worker it was sent to.
		      //
		      // Even though Chrome is eventually JSON serializing the array buffer,
		      // using the transferable approach also sometimes causes it to throw:
		      //   DOMException: Failed to execute 'postMessage' on 'Window': ArrayBuffer at index 0 is already neutered.
		      //
		      // See bug https://github.com/bvaughn/react-devtools-experimental/issues/25
		      //
		      // The Store has a fallback in place that parses the message as JSON if the type isn't an array.
		      // For now the simplest fix seems to be to not transfer the array.
		      // This will negatively impact performance on Firefox so it's unfortunate,
		      // but until we're able to fix the Chrome error mentioned above, it seems necessary.
		      //
		      // this._bridge.send('operations', operations, [operations.buffer]);


		      _this._bridge.send('operations', operations);

		      if (_this._persistedSelection !== null) {
		        var rendererID = operations[0];

		        if (_this._persistedSelection.rendererID === rendererID) {
		          // Check if we can select a deeper match for the persisted selection.
		          var renderer = _this._rendererInterfaces[rendererID];

		          if (renderer == null) {
		            console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		          } else {
		            var prevMatch = _this._persistedSelectionMatch;
		            var nextMatch = renderer.getBestMatchForTrackedPath();
		            _this._persistedSelectionMatch = nextMatch;
		            var prevMatchID = prevMatch !== null ? prevMatch.id : null;
		            var nextMatchID = nextMatch !== null ? nextMatch.id : null;

		            if (prevMatchID !== nextMatchID) {
		              if (nextMatchID !== null) {
		                // We moved forward, unlocking a deeper node.
		                _this._bridge.send('selectFiber', nextMatchID);
		              }
		            }

		            if (nextMatch !== null && nextMatch.isFullMatch) {
		              // We've just unlocked the innermost selected node.
		              // There's no point tracking it further.
		              _this._persistedSelection = null;
		              _this._persistedSelectionMatch = null;
		              renderer.setTrackedPath(null);
		            }
		          }
		        }
		      }
		    });

		    agent_defineProperty(agent_assertThisInitialized(_this), "_throttledPersistSelection", lodash_throttle_default()(function (rendererID, id) {
		      // This is throttled, so both renderer and selected ID
		      // might not be available by the time we read them.
		      // This is why we need the defensive checks here.
		      var renderer = _this._rendererInterfaces[rendererID];
		      var path = renderer != null ? renderer.getPathForElement(id) : null;

		      if (path !== null) {
		        Object(storage["e" /* sessionStorageSetItem */])(constants["i" /* SESSION_STORAGE_LAST_SELECTION_KEY */], JSON.stringify({
		          rendererID: rendererID,
		          path: path
		        }));
		      } else {
		        Object(storage["d" /* sessionStorageRemoveItem */])(constants["i" /* SESSION_STORAGE_LAST_SELECTION_KEY */]);
		      }
		    }, 1000));

		    if (Object(storage["c" /* sessionStorageGetItem */])(constants["k" /* SESSION_STORAGE_RELOAD_AND_PROFILE_KEY */]) === 'true') {
		      _this._recordChangeDescriptions = Object(storage["c" /* sessionStorageGetItem */])(constants["j" /* SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY */]) === 'true';
		      _this._isProfiling = true;
		      Object(storage["d" /* sessionStorageRemoveItem */])(constants["j" /* SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY */]);
		      Object(storage["d" /* sessionStorageRemoveItem */])(constants["k" /* SESSION_STORAGE_RELOAD_AND_PROFILE_KEY */]);
		    }

		    var persistedSelectionString = Object(storage["c" /* sessionStorageGetItem */])(constants["i" /* SESSION_STORAGE_LAST_SELECTION_KEY */]);

		    if (persistedSelectionString != null) {
		      _this._persistedSelection = JSON.parse(persistedSelectionString);
		    }

		    _this._bridge = bridge;
		    bridge.addListener('clearErrorsAndWarnings', _this.clearErrorsAndWarnings);
		    bridge.addListener('clearErrorsForFiberID', _this.clearErrorsForFiberID);
		    bridge.addListener('clearWarningsForFiberID', _this.clearWarningsForFiberID);
		    bridge.addListener('copyElementPath', _this.copyElementPath);
		    bridge.addListener('deletePath', _this.deletePath);
		    bridge.addListener('getBackendVersion', _this.getBackendVersion);
		    bridge.addListener('getBridgeProtocol', _this.getBridgeProtocol);
		    bridge.addListener('getProfilingData', _this.getProfilingData);
		    bridge.addListener('getProfilingStatus', _this.getProfilingStatus);
		    bridge.addListener('getOwnersList', _this.getOwnersList);
		    bridge.addListener('inspectElement', _this.inspectElement);
		    bridge.addListener('logElementToConsole', _this.logElementToConsole);
		    bridge.addListener('overrideError', _this.overrideError);
		    bridge.addListener('overrideSuspense', _this.overrideSuspense);
		    bridge.addListener('overrideValueAtPath', _this.overrideValueAtPath);
		    bridge.addListener('reloadAndProfile', _this.reloadAndProfile);
		    bridge.addListener('renamePath', _this.renamePath);
		    bridge.addListener('setTraceUpdatesEnabled', _this.setTraceUpdatesEnabled);
		    bridge.addListener('startProfiling', _this.startProfiling);
		    bridge.addListener('stopProfiling', _this.stopProfiling);
		    bridge.addListener('storeAsGlobal', _this.storeAsGlobal);
		    bridge.addListener('syncSelectionFromNativeElementsPanel', _this.syncSelectionFromNativeElementsPanel);
		    bridge.addListener('shutdown', _this.shutdown);
		    bridge.addListener('updateConsolePatchSettings', _this.updateConsolePatchSettings);
		    bridge.addListener('updateComponentFilters', _this.updateComponentFilters);
		    bridge.addListener('viewAttributeSource', _this.viewAttributeSource);
		    bridge.addListener('viewElementSource', _this.viewElementSource); // Temporarily support older standalone front-ends sending commands to newer embedded backends.
		    // We do this because React Native embeds the React DevTools backend,
		    // but cannot control which version of the frontend users use.

		    bridge.addListener('overrideContext', _this.overrideContext);
		    bridge.addListener('overrideHookState', _this.overrideHookState);
		    bridge.addListener('overrideProps', _this.overrideProps);
		    bridge.addListener('overrideState', _this.overrideState);

		    if (_this._isProfiling) {
		      bridge.send('profilingStatus', true);
		    } // Send the Bridge protocol and backend versions, after initialization, in case the frontend has already requested it.
		    // The Store may be instantiated beore the agent.


		    var _version = "4.24.6-ca7a38ae4";

		    {
		      _this._bridge.send('backendVersion', _version);
		    }

		    _this._bridge.send('bridgeProtocol', currentBridgeProtocol); // Notify the frontend if the backend supports the Storage API (e.g. localStorage).
		    // If not, features like reload-and-profile will not work correctly and must be disabled.


		    var isBackendStorageAPISupported = false;

		    try {
		      localStorage.getItem('test');
		      isBackendStorageAPISupported = true;
		    } catch (error) {}

		    bridge.send('isBackendStorageAPISupported', isBackendStorageAPISupported);
		    bridge.send('isSynchronousXHRSupported', Object(utils["i" /* isSynchronousXHRSupported */])());
		    setupHighlighter(bridge, agent_assertThisInitialized(_this));
		    TraceUpdates_initialize(agent_assertThisInitialized(_this));
		    return _this;
		  }

		  agent_createClass(Agent, [{
		    key: "getInstanceAndStyle",
		    value: function getInstanceAndStyle(_ref22) {
		      var id = _ref22.id,
		          rendererID = _ref22.rendererID;
		      var renderer = this._rendererInterfaces[rendererID];

		      if (renderer == null) {
		        console.warn("Invalid renderer id \"".concat(rendererID, "\""));
		        return null;
		      }

		      return renderer.getInstanceAndStyle(id);
		    }
		  }, {
		    key: "getIDForNode",
		    value: function getIDForNode(node) {
		      for (var rendererID in this._rendererInterfaces) {
		        var renderer = this._rendererInterfaces[rendererID];

		        try {
		          var id = renderer.getFiberIDForNative(node, true);

		          if (id !== null) {
		            return id;
		          }
		        } catch (error) {// Some old React versions might throw if they can't find a match.
		          // If so we should ignore it...
		        }
		      }

		      return null;
		    }
		  }, {
		    key: "selectNode",
		    value: function selectNode(target) {
		      var id = this.getIDForNode(target);

		      if (id !== null) {
		        this._bridge.send('selectFiber', id);
		      }
		    }
		  }, {
		    key: "setRendererInterface",
		    value: function setRendererInterface(rendererID, rendererInterface) {
		      this._rendererInterfaces[rendererID] = rendererInterface;

		      if (this._isProfiling) {
		        rendererInterface.startProfiling(this._recordChangeDescriptions);
		      }

		      rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled); // When the renderer is attached, we need to tell it whether
		      // we remember the previous selection that we'd like to restore.
		      // It'll start tracking mounts for matches to the last selection path.

		      var selection = this._persistedSelection;

		      if (selection !== null && selection.rendererID === rendererID) {
		        rendererInterface.setTrackedPath(selection.path);
		      }
		    }
		  }, {
		    key: "onUnsupportedRenderer",
		    value: function onUnsupportedRenderer(rendererID) {
		      this._bridge.send('unsupportedRendererVersion', rendererID);
		    }
		  }, {
		    key: "rendererInterfaces",
		    get: function get() {
		      return this._rendererInterfaces;
		    }
		  }]);

		  return Agent;
		}(EventEmitter);


		// CONCATENATED MODULE: ../react-devtools-shared/src/hook.js
		function hook_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { hook_typeof = function _typeof(obj) { return typeof obj; }; } else { hook_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return hook_typeof(obj); }

		function hook_toConsumableArray(arr) { return hook_arrayWithoutHoles(arr) || hook_iterableToArray(arr) || hook_unsupportedIterableToArray(arr) || hook_nonIterableSpread(); }

		function hook_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function hook_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return hook_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return hook_arrayLikeToArray(o, minLen); }

		function hook_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function hook_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return hook_arrayLikeToArray(arr); }

		function hook_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		/**
		 * Install the hook on window, which is an event emitter.
		 * Note because Chrome content scripts cannot directly modify the window object,
		 * we are evaling this function by inserting a script tag.
		 * That's why we have to inline the whole event emitter implementation,
		 * the string format implementation, and part of the console implementation here.
		 *
		 * 
		 */

		function installHook(target) {
		  if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {
		    return null;
		  }

		  var targetConsole = console;

		  function detectReactBuildType(renderer) {
		    try {
		      if (typeof renderer.version === 'string') {
		        // React DOM Fiber (16+)
		        if (renderer.bundleType > 0) {
		          // This is not a production build.
		          // We are currently only using 0 (PROD) and 1 (DEV)
		          // but might add 2 (PROFILE) in the future.
		          return 'development';
		        } // React 16 uses flat bundles. If we report the bundle as production
		        // version, it means we also minified and envified it ourselves.


		        return 'production'; // Note: There is still a risk that the CommonJS entry point has not
		        // been envified or uglified. In this case the user would have *both*
		        // development and production bundle, but only the prod one would run.
		        // This would be really bad. We have a separate check for this because
		        // it happens *outside* of the renderer injection. See `checkDCE` below.
		      }

		      var _toString = Function.prototype.toString;

		      if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
		        // React DOM Stack
		        var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent); // Filter out bad results (if that is even possible):


		        if (renderRootCode.indexOf('function') !== 0) {
		          // Hope for the best if we're not sure.
		          return 'production';
		        } // Check for React DOM Stack < 15.1.0 in development.
		        // If it contains "storedMeasure" call, it's wrapped in ReactPerf (DEV only).
		        // This would be true even if it's minified, as method name still matches.


		        if (renderRootCode.indexOf('storedMeasure') !== -1) {
		          return 'development';
		        } // For other versions (and configurations) it's not so easy.
		        // Let's quickly exclude proper production builds.
		        // If it contains a warning message, it's either a DEV build,
		        // or an PROD build without proper dead code elimination.


		        if (renderRootCode.indexOf('should be a pure function') !== -1) {
		          // Now how do we tell a DEV build from a bad PROD build?
		          // If we see NODE_ENV, we're going to assume this is a dev build
		          // because most likely it is referring to an empty shim.
		          if (renderRootCode.indexOf('NODE_ENV') !== -1) {
		            return 'development';
		          } // If we see "development", we're dealing with an envified DEV build
		          // (such as the official React DEV UMD).


		          if (renderRootCode.indexOf('development') !== -1) {
		            return 'development';
		          } // I've seen process.env.NODE_ENV !== 'production' being smartly
		          // replaced by `true` in DEV by Webpack. I don't know how that
		          // works but we can safely guard against it because `true` was
		          // never used in the function source since it was written.


		          if (renderRootCode.indexOf('true') !== -1) {
		            return 'development';
		          } // By now either it is a production build that has not been minified,
		          // or (worse) this is a minified development build using non-standard
		          // environment (e.g. "staging"). We're going to look at whether
		          // the function argument name is mangled:


		          if ( // 0.13 to 15
		          renderRootCode.indexOf('nextElement') !== -1 || // 0.12
		          renderRootCode.indexOf('nextComponent') !== -1) {
		            // We can't be certain whether this is a development build or not,
		            // but it is definitely unminified.
		            return 'unminified';
		          } else {
		            // This is likely a minified development build.
		            return 'development';
		          }
		        } // By now we know that it's envified and dead code elimination worked,
		        // but what if it's still not minified? (Is this even possible?)
		        // Let's check matches for the first argument name.


		        if ( // 0.13 to 15
		        renderRootCode.indexOf('nextElement') !== -1 || // 0.12
		        renderRootCode.indexOf('nextComponent') !== -1) {
		          return 'unminified';
		        } // Seems like we're using the production version.
		        // However, the branch above is Stack-only so this is 15 or earlier.


		        return 'outdated';
		      }
		    } catch (err) {// Weird environments may exist.
		      // This code needs a higher fault tolerance
		      // because it runs even with closed DevTools.
		      // TODO: should we catch errors in all injected code, and not just this part?
		    }

		    return 'production';
		  }

		  function checkDCE(fn) {
		    // This runs for production versions of React.
		    // Needs to be super safe.
		    try {
		      var _toString2 = Function.prototype.toString;

		      var code = _toString2.call(fn); // This is a string embedded in the passed function under DEV-only
		      // condition. However the function executes only in PROD. Therefore,
		      // if we see it, dead code elimination did not work.


		      if (code.indexOf('^_^') > -1) {
		        // Remember to report during next injection.
		        hasDetectedBadDCE = true; // Bonus: throw an exception hoping that it gets picked up by a reporting system.
		        // Not synchronously so that it doesn't break the calling code.

		        setTimeout(function () {
		          throw new Error('React is running in production mode, but dead code ' + 'elimination has not been applied. Read how to correctly ' + 'configure React for production: ' + 'https://reactjs.org/link/perf-use-production-build');
		        });
		      }
		    } catch (err) {}
		  } // NOTE: KEEP IN SYNC with src/backend/utils.js


		  function formatWithStyles(inputArgs, style) {
		    if (inputArgs === undefined || inputArgs === null || inputArgs.length === 0 || typeof inputArgs[0] !== 'string' || // Matches any of %c but not %%c
		    inputArgs[0].match(/([^%]|^)(%c)/g) || style === undefined) {
		      return inputArgs;
		    } // Matches any of %(o|O|d|i|s|f), but not %%(o|O|d|i|s|f)


		    var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;

		    if (inputArgs[0].match(REGEXP)) {
		      return ["%c".concat(inputArgs[0]), style].concat(hook_toConsumableArray(inputArgs.slice(1)));
		    } else {
		      var firstArg = inputArgs.reduce(function (formatStr, elem, i) {
		        if (i > 0) {
		          formatStr += ' ';
		        }

		        switch (hook_typeof(elem)) {
		          case 'string':
		          case 'boolean':
		          case 'symbol':
		            return formatStr += '%s';

		          case 'number':
		            var formatting = Number.isInteger(elem) ? '%i' : '%f';
		            return formatStr += formatting;

		          default:
		            return formatStr += '%o';
		        }
		      }, '%c');
		      return [firstArg, style].concat(hook_toConsumableArray(inputArgs));
		    }
		  }

		  var unpatchFn = null; // NOTE: KEEP IN SYNC with src/backend/console.js:patchForStrictMode
		  // This function hides or dims console logs during the initial double renderer
		  // in Strict Mode. We need this function because during initial render,
		  // React and DevTools are connecting and the renderer interface isn't avaiable
		  // and we want to be able to have consistent logging behavior for double logs
		  // during the initial renderer.

		  function patchConsoleForInitialRenderInStrictMode(_ref) {
		    var hideConsoleLogsInStrictMode = _ref.hideConsoleLogsInStrictMode,
		        browserTheme = _ref.browserTheme;
		    var overrideConsoleMethods = ['error', 'trace', 'warn', 'log'];

		    if (unpatchFn !== null) {
		      // Don't patch twice.
		      return;
		    }

		    var originalConsoleMethods = {};

		    unpatchFn = function unpatchFn() {
		      for (var _method2 in originalConsoleMethods) {
		        try {
		          // $FlowFixMe property error|warn is not writable.
		          targetConsole[_method2] = originalConsoleMethods[_method2];
		        } catch (error) {}
		      }
		    };

		    overrideConsoleMethods.forEach(function (method) {
		      try {
		        var originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method];

		        var overrideMethod = function overrideMethod() {
		          if (!hideConsoleLogsInStrictMode) {
		            // Dim the text color of the double logs if we're not
		            // hiding them.
		            var color;

		            switch (method) {
		              case 'warn':
		                color = browserTheme === 'light' ? "rgba(250, 180, 50, 0.75)" : "rgba(250, 180, 50, 0.5)";
		                break;

		              case 'error':
		                color = browserTheme === 'light' ? "rgba(250, 123, 130, 0.75)" : "rgba(250, 123, 130, 0.5)";
		                break;

		              case 'log':
		              default:
		                color = browserTheme === 'light' ? "rgba(125, 125, 125, 0.75)" : "rgba(125, 125, 125, 0.5)";
		                break;
		            }

		            if (color) {
		              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		                args[_key] = arguments[_key];
		              }

		              originalMethod.apply(void 0, hook_toConsumableArray(formatWithStyles(args, "color: ".concat(color))));
		            } else {
		              throw Error('Console color is not defined');
		            }
		          }
		        };

		        overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;
		        originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod; // $FlowFixMe property error|warn is not writable.

		        targetConsole[method] = overrideMethod;
		      } catch (error) {}
		    });
		  } // NOTE: KEEP IN SYNC with src/backend/console.js:unpatchForStrictMode


		  function unpatchConsoleForInitialRenderInStrictMode() {
		    if (unpatchFn !== null) {
		      unpatchFn();
		      unpatchFn = null;
		    }
		  }

		  var uidCounter = 0;

		  function inject(renderer) {
		    var id = ++uidCounter;
		    renderers.set(id, renderer);
		    var reactBuildType = hasDetectedBadDCE ? 'deadcode' : detectReactBuildType(renderer); // Patching the console enables DevTools to do a few useful things:
		    // * Append component stacks to warnings and error messages
		    // * Disabling or marking logs during a double render in Strict Mode
		    // * Disable logging during re-renders to inspect hooks (see inspectHooksOfFiber)
		    //
		    // For React Native, we intentionally patch early (during injection).
		    // This provides React Native developers with components stacks even if they don't run DevTools.
		    //
		    // This won't work for DOM though, since this entire file is eval'ed and inserted as a script tag.
		    // In that case, we'll only patch parts of the console that are needed during the first render
		    // and patch everything else later (when the frontend attaches).
		    //
		    // Don't patch in test environments because we don't want to interfere with Jest's own console overrides.
		    //
		    // Note that because this function is inlined, this conditional check must only use static booleans.
		    // Otherwise the extension will throw with an undefined error.
		    // (See comments in the try/catch below for more context on inlining.)

		    {
		      try {
		        var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
		        var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
		        var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
		        var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
		        var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__; // The installHook() function is injected by being stringified in the browser,
		        // so imports outside of this function do not get included.
		        //
		        // Normally we could check "typeof patchConsole === 'function'",
		        // but Webpack wraps imports with an object (e.g. _backend_console__WEBPACK_IMPORTED_MODULE_0__)
		        // and the object itself will be undefined as well for the reasons mentioned above,
		        // so we use try/catch instead.

		        Object(backend_console["c" /* registerRenderer */])(renderer);
		        Object(backend_console["a" /* patch */])({
		          appendComponentStack: appendComponentStack,
		          breakOnConsoleErrors: breakOnConsoleErrors,
		          showInlineWarningsAndErrors: showInlineWarningsAndErrors,
		          hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
		          browserTheme: browserTheme
		        });
		      } catch (error) {}
		    } // If we have just reloaded to profile, we need to inject the renderer interface before the app loads.
		    // Otherwise the renderer won't yet exist and we can skip this step.


		    var attach = target.__REACT_DEVTOOLS_ATTACH__;

		    if (typeof attach === 'function') {
		      var rendererInterface = attach(hook, id, renderer, target);
		      hook.rendererInterfaces.set(id, rendererInterface);
		    }

		    hook.emit('renderer', {
		      id: id,
		      renderer: renderer,
		      reactBuildType: reactBuildType
		    });
		    return id;
		  }

		  var hasDetectedBadDCE = false;

		  function sub(event, fn) {
		    hook.on(event, fn);
		    return function () {
		      return hook.off(event, fn);
		    };
		  }

		  function on(event, fn) {
		    if (!listeners[event]) {
		      listeners[event] = [];
		    }

		    listeners[event].push(fn);
		  }

		  function off(event, fn) {
		    if (!listeners[event]) {
		      return;
		    }

		    var index = listeners[event].indexOf(fn);

		    if (index !== -1) {
		      listeners[event].splice(index, 1);
		    }

		    if (!listeners[event].length) {
		      delete listeners[event];
		    }
		  }

		  function emit(event, data) {
		    if (listeners[event]) {
		      listeners[event].map(function (fn) {
		        return fn(data);
		      });
		    }
		  }

		  function getFiberRoots(rendererID) {
		    var roots = fiberRoots;

		    if (!roots[rendererID]) {
		      roots[rendererID] = new Set();
		    }

		    return roots[rendererID];
		  }

		  function onCommitFiberUnmount(rendererID, fiber) {
		    var rendererInterface = rendererInterfaces.get(rendererID);

		    if (rendererInterface != null) {
		      rendererInterface.handleCommitFiberUnmount(fiber);
		    }
		  }

		  function onCommitFiberRoot(rendererID, root, priorityLevel) {
		    var mountedRoots = hook.getFiberRoots(rendererID);
		    var current = root.current;
		    var isKnownRoot = mountedRoots.has(root);
		    var isUnmounting = current.memoizedState == null || current.memoizedState.element == null; // Keep track of mounted roots so we can hydrate when DevTools connect.

		    if (!isKnownRoot && !isUnmounting) {
		      mountedRoots.add(root);
		    } else if (isKnownRoot && isUnmounting) {
		      mountedRoots.delete(root);
		    }

		    var rendererInterface = rendererInterfaces.get(rendererID);

		    if (rendererInterface != null) {
		      rendererInterface.handleCommitFiberRoot(root, priorityLevel);
		    }
		  }

		  function onPostCommitFiberRoot(rendererID, root) {
		    var rendererInterface = rendererInterfaces.get(rendererID);

		    if (rendererInterface != null) {
		      rendererInterface.handlePostCommitFiberRoot(root);
		    }
		  }

		  function setStrictMode(rendererID, isStrictMode) {
		    var rendererInterface = rendererInterfaces.get(rendererID);

		    if (rendererInterface != null) {
		      if (isStrictMode) {
		        rendererInterface.patchConsoleForStrictMode();
		      } else {
		        rendererInterface.unpatchConsoleForStrictMode();
		      }
		    } else {
		      // This should only happen during initial render in the extension before DevTools
		      // finishes its handshake with the injected renderer
		      if (isStrictMode) {
		        var hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;
		        var browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;
		        patchConsoleForInitialRenderInStrictMode({
		          hideConsoleLogsInStrictMode: hideConsoleLogsInStrictMode,
		          browserTheme: browserTheme
		        });
		      } else {
		        unpatchConsoleForInitialRenderInStrictMode();
		      }
		    }
		  }

		  var openModuleRangesStack = [];
		  var moduleRanges = [];

		  function getTopStackFrameString(error) {
		    var frames = error.stack.split('\n');
		    var frame = frames.length > 1 ? frames[1] : null;
		    return frame;
		  }

		  function getInternalModuleRanges() {
		    return moduleRanges;
		  }

		  function registerInternalModuleStart(error) {
		    var startStackFrame = getTopStackFrameString(error);

		    if (startStackFrame !== null) {
		      openModuleRangesStack.push(startStackFrame);
		    }
		  }

		  function registerInternalModuleStop(error) {
		    if (openModuleRangesStack.length > 0) {
		      var startStackFrame = openModuleRangesStack.pop();
		      var stopStackFrame = getTopStackFrameString(error);

		      if (stopStackFrame !== null) {
		        moduleRanges.push([startStackFrame, stopStackFrame]);
		      }
		    }
		  } // TODO: More meaningful names for "rendererInterfaces" and "renderers".


		  var fiberRoots = {};
		  var rendererInterfaces = new Map();
		  var listeners = {};
		  var renderers = new Map();
		  var hook = {
		    rendererInterfaces: rendererInterfaces,
		    listeners: listeners,
		    // Fast Refresh for web relies on this.
		    renderers: renderers,
		    emit: emit,
		    getFiberRoots: getFiberRoots,
		    inject: inject,
		    on: on,
		    off: off,
		    sub: sub,
		    // This is a legacy flag.
		    // React v16 checks the hook for this to ensure DevTools is new enough.
		    supportsFiber: true,
		    // React calls these methods.
		    checkDCE: checkDCE,
		    onCommitFiberUnmount: onCommitFiberUnmount,
		    onCommitFiberRoot: onCommitFiberRoot,
		    onPostCommitFiberRoot: onPostCommitFiberRoot,
		    setStrictMode: setStrictMode,
		    // Schedule Profiler runtime helpers.
		    // These internal React modules to report their own boundaries
		    // which in turn enables the profiler to dim or filter internal frames.
		    getInternalModuleRanges: getInternalModuleRanges,
		    registerInternalModuleStart: registerInternalModuleStart,
		    registerInternalModuleStop: registerInternalModuleStop
		  };

		  Object.defineProperty(target, '__REACT_DEVTOOLS_GLOBAL_HOOK__', {
		    // This property needs to be configurable for the test environment,
		    // else we won't be able to delete and recreate it between tests.
		    configurable: false,
		    enumerable: false,
		    get: function get() {
		      return hook;
		    }
		  });
		  return hook;
		}
		// EXTERNAL MODULE: ../react-devtools-shared/src/backend/renderer.js + 5 modules
		var backend_renderer = __webpack_require__(15);

		// EXTERNAL MODULE: ../react-devtools-shared/src/types.js
		var types = __webpack_require__(1);

		// EXTERNAL MODULE: ../react-devtools-shared/src/utils.js
		var src_utils = __webpack_require__(2);

		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/legacy/utils.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */
		function decorate(object, attr, fn) {
		  var old = object[attr];

		  object[attr] = function (instance) {
		    return fn.call(this, old, arguments);
		  };

		  return old;
		}
		function decorateMany(source, fns) {
		  var olds = {};

		  for (var name in fns) {
		    olds[name] = decorate(source, name, fns[name]);
		  }

		  return olds;
		}
		function restoreMany(source, olds) {
		  for (var name in olds) {
		    source[name] = olds[name];
		  }
		}
		function forceUpdate(instance) {
		  if (typeof instance.forceUpdate === 'function') {
		    instance.forceUpdate();
		  } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === 'function') {
		    instance.updater.enqueueForceUpdate(this, function () {}, 'forceUpdate');
		  }
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/legacy/renderer.js
		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { renderer_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function renderer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		function renderer_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { renderer_typeof = function _typeof(obj) { return typeof obj; }; } else { renderer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return renderer_typeof(obj); }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */







		function getData(internalInstance) {
		  var displayName = null;
		  var key = null; // != used deliberately here to catch undefined and null

		  if (internalInstance._currentElement != null) {
		    if (internalInstance._currentElement.key) {
		      key = String(internalInstance._currentElement.key);
		    }

		    var elementType = internalInstance._currentElement.type;

		    if (typeof elementType === 'string') {
		      displayName = elementType;
		    } else if (typeof elementType === 'function') {
		      displayName = Object(src_utils["f" /* getDisplayName */])(elementType);
		    }
		  }

		  return {
		    displayName: displayName,
		    key: key
		  };
		}

		function getElementType(internalInstance) {
		  // != used deliberately here to catch undefined and null
		  if (internalInstance._currentElement != null) {
		    var elementType = internalInstance._currentElement.type;

		    if (typeof elementType === 'function') {
		      var publicInstance = internalInstance.getPublicInstance();

		      if (publicInstance !== null) {
		        return types["e" /* ElementTypeClass */];
		      } else {
		        return types["h" /* ElementTypeFunction */];
		      }
		    } else if (typeof elementType === 'string') {
		      return types["i" /* ElementTypeHostComponent */];
		    }
		  }

		  return types["k" /* ElementTypeOtherOrUnknown */];
		}

		function getChildren(internalInstance) {
		  var children = []; // If the parent is a native node without rendered children, but with
		  // multiple string children, then the `element` that gets passed in here is
		  // a plain value -- a string or number.

		  if (renderer_typeof(internalInstance) !== 'object') ; else if (internalInstance._currentElement === null || internalInstance._currentElement === false) ; else if (internalInstance._renderedComponent) {
		    var child = internalInstance._renderedComponent;

		    if (getElementType(child) !== types["k" /* ElementTypeOtherOrUnknown */]) {
		      children.push(child);
		    }
		  } else if (internalInstance._renderedChildren) {
		    var renderedChildren = internalInstance._renderedChildren;

		    for (var name in renderedChildren) {
		      var _child = renderedChildren[name];

		      if (getElementType(_child) !== types["k" /* ElementTypeOtherOrUnknown */]) {
		        children.push(_child);
		      }
		    }
		  } // Note: we skip the case where children are just strings or numbers
		  // because the new DevTools skips over host text nodes anyway.


		  return children;
		}

		function renderer_attach(hook, rendererID, renderer, global) {
		  var idToInternalInstanceMap = new Map();
		  var internalInstanceToIDMap = new WeakMap();
		  var internalInstanceToRootIDMap = new WeakMap();
		  var getInternalIDForNative = null;
		  var findNativeNodeForInternalID;

		  if (renderer.ComponentTree) {
		    getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
		      var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);
		      return internalInstanceToIDMap.get(internalInstance) || null;
		    };

		    findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
		      var internalInstance = idToInternalInstanceMap.get(id);
		      return renderer.ComponentTree.getNodeFromInstance(internalInstance);
		    };
		  } else if (renderer.Mount.getID && renderer.Mount.getNode) {
		    getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
		      // Not implemented.
		      return null;
		    };

		    findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
		      // Not implemented.
		      return null;
		    };
		  }

		  function getDisplayNameForFiberID(id) {
		    var internalInstance = idToInternalInstanceMap.get(id);
		    return internalInstance ? getData(internalInstance).displayName : null;
		  }

		  function getID(internalInstance) {
		    if (renderer_typeof(internalInstance) !== 'object' || internalInstance === null) {
		      throw new Error('Invalid internal instance: ' + internalInstance);
		    }

		    if (!internalInstanceToIDMap.has(internalInstance)) {
		      var _id = Object(src_utils["i" /* getUID */])();

		      internalInstanceToIDMap.set(internalInstance, _id);
		      idToInternalInstanceMap.set(_id, internalInstance);
		    }

		    return internalInstanceToIDMap.get(internalInstance);
		  }

		  function areEqualArrays(a, b) {
		    if (a.length !== b.length) {
		      return false;
		    }

		    for (var i = 0; i < a.length; i++) {
		      if (a[i] !== b[i]) {
		        return false;
		      }
		    }

		    return true;
		  } // This is shared mutable state that lets us keep track of where we are.


		  var parentIDStack = [];
		  var oldReconcilerMethods = null;

		  if (renderer.Reconciler) {
		    // React 15
		    oldReconcilerMethods = decorateMany(renderer.Reconciler, {
		      mountComponent: function mountComponent(fn, args) {
		        var internalInstance = args[0];
		        var hostContainerInfo = args[3];

		        if (getElementType(internalInstance) === types["k" /* ElementTypeOtherOrUnknown */]) {
		          return fn.apply(this, args);
		        }

		        if (hostContainerInfo._topLevelWrapper === undefined) {
		          // SSR
		          return fn.apply(this, args);
		        }

		        var id = getID(internalInstance); // Push the operation.

		        var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;
		        recordMount(internalInstance, id, parentID);
		        parentIDStack.push(id); // Remember the root.

		        internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));

		        try {
		          var result = fn.apply(this, args);
		          parentIDStack.pop();
		          return result;
		        } catch (err) {
		          parentIDStack = [];
		          throw err;
		        } finally {
		          if (parentIDStack.length === 0) {
		            var rootID = internalInstanceToRootIDMap.get(internalInstance);

		            if (rootID === undefined) {
		              throw new Error('Expected to find root ID.');
		            }

		            flushPendingEvents(rootID);
		          }
		        }
		      },
		      performUpdateIfNecessary: function performUpdateIfNecessary(fn, args) {
		        var internalInstance = args[0];

		        if (getElementType(internalInstance) === types["k" /* ElementTypeOtherOrUnknown */]) {
		          return fn.apply(this, args);
		        }

		        var id = getID(internalInstance);
		        parentIDStack.push(id);
		        var prevChildren = getChildren(internalInstance);

		        try {
		          var result = fn.apply(this, args);
		          var nextChildren = getChildren(internalInstance);

		          if (!areEqualArrays(prevChildren, nextChildren)) {
		            // Push the operation
		            recordReorder(internalInstance, id, nextChildren);
		          }

		          parentIDStack.pop();
		          return result;
		        } catch (err) {
		          parentIDStack = [];
		          throw err;
		        } finally {
		          if (parentIDStack.length === 0) {
		            var rootID = internalInstanceToRootIDMap.get(internalInstance);

		            if (rootID === undefined) {
		              throw new Error('Expected to find root ID.');
		            }

		            flushPendingEvents(rootID);
		          }
		        }
		      },
		      receiveComponent: function receiveComponent(fn, args) {
		        var internalInstance = args[0];

		        if (getElementType(internalInstance) === types["k" /* ElementTypeOtherOrUnknown */]) {
		          return fn.apply(this, args);
		        }

		        var id = getID(internalInstance);
		        parentIDStack.push(id);
		        var prevChildren = getChildren(internalInstance);

		        try {
		          var result = fn.apply(this, args);
		          var nextChildren = getChildren(internalInstance);

		          if (!areEqualArrays(prevChildren, nextChildren)) {
		            // Push the operation
		            recordReorder(internalInstance, id, nextChildren);
		          }

		          parentIDStack.pop();
		          return result;
		        } catch (err) {
		          parentIDStack = [];
		          throw err;
		        } finally {
		          if (parentIDStack.length === 0) {
		            var rootID = internalInstanceToRootIDMap.get(internalInstance);

		            if (rootID === undefined) {
		              throw new Error('Expected to find root ID.');
		            }

		            flushPendingEvents(rootID);
		          }
		        }
		      },
		      unmountComponent: function unmountComponent(fn, args) {
		        var internalInstance = args[0];

		        if (getElementType(internalInstance) === types["k" /* ElementTypeOtherOrUnknown */]) {
		          return fn.apply(this, args);
		        }

		        var id = getID(internalInstance);
		        parentIDStack.push(id);

		        try {
		          var result = fn.apply(this, args);
		          parentIDStack.pop(); // Push the operation.

		          recordUnmount(internalInstance, id);
		          return result;
		        } catch (err) {
		          parentIDStack = [];
		          throw err;
		        } finally {
		          if (parentIDStack.length === 0) {
		            var rootID = internalInstanceToRootIDMap.get(internalInstance);

		            if (rootID === undefined) {
		              throw new Error('Expected to find root ID.');
		            }

		            flushPendingEvents(rootID);
		          }
		        }
		      }
		    });
		  }

		  function cleanup() {
		    if (oldReconcilerMethods !== null) {
		      if (renderer.Component) {
		        restoreMany(renderer.Component.Mixin, oldReconcilerMethods);
		      } else {
		        restoreMany(renderer.Reconciler, oldReconcilerMethods);
		      }
		    }

		    oldReconcilerMethods = null;
		  }

		  function recordMount(internalInstance, id, parentID) {
		    var isRoot = parentID === 0;

		    if (constants["s" /* __DEBUG__ */]) {
		      console.log('%crecordMount()', 'color: green; font-weight: bold;', id, getData(internalInstance).displayName);
		    }

		    if (isRoot) {
		      // TODO Is this right? For all versions?
		      var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;
		      pushOperation(constants["l" /* TREE_OPERATION_ADD */]);
		      pushOperation(id);
		      pushOperation(types["m" /* ElementTypeRoot */]);
		      pushOperation(0); // StrictMode compliant?

		      pushOperation(0); // Profiling flag

		      pushOperation(0); // StrictMode supported?

		      pushOperation(hasOwnerMetadata ? 1 : 0);
		    } else {
		      var type = getElementType(internalInstance);

		      var _getData = getData(internalInstance),
		          displayName = _getData.displayName,
		          key = _getData.key;

		      var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;
		      var displayNameStringID = getStringID(displayName);
		      var keyStringID = getStringID(key);
		      pushOperation(constants["l" /* TREE_OPERATION_ADD */]);
		      pushOperation(id);
		      pushOperation(type);
		      pushOperation(parentID);
		      pushOperation(ownerID);
		      pushOperation(displayNameStringID);
		      pushOperation(keyStringID);
		    }
		  }

		  function recordReorder(internalInstance, id, nextChildren) {
		    pushOperation(constants["o" /* TREE_OPERATION_REORDER_CHILDREN */]);
		    pushOperation(id);
		    var nextChildIDs = nextChildren.map(getID);
		    pushOperation(nextChildIDs.length);

		    for (var i = 0; i < nextChildIDs.length; i++) {
		      pushOperation(nextChildIDs[i]);
		    }
		  }

		  function recordUnmount(internalInstance, id) {
		    pendingUnmountedIDs.push(id);
		    idToInternalInstanceMap.delete(id);
		  }

		  function crawlAndRecordInitialMounts(id, parentID, rootID) {
		    if (constants["s" /* __DEBUG__ */]) {
		      console.group('crawlAndRecordInitialMounts() id:', id);
		    }

		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance != null) {
		      internalInstanceToRootIDMap.set(internalInstance, rootID);
		      recordMount(internalInstance, id, parentID);
		      getChildren(internalInstance).forEach(function (child) {
		        return crawlAndRecordInitialMounts(getID(child), id, rootID);
		      });
		    }

		    if (constants["s" /* __DEBUG__ */]) {
		      console.groupEnd();
		    }
		  }

		  function flushInitialOperations() {
		    // Crawl roots though and register any nodes that mounted before we were injected.
		    var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;

		    for (var key in roots) {
		      var internalInstance = roots[key];

		      var _id2 = getID(internalInstance);

		      crawlAndRecordInitialMounts(_id2, 0, _id2);
		      flushPendingEvents(_id2);
		    }
		  }

		  var pendingOperations = [];
		  var pendingStringTable = new Map();
		  var pendingUnmountedIDs = [];
		  var pendingStringTableLength = 0;
		  var pendingUnmountedRootID = null;

		  function flushPendingEvents(rootID) {
		    if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
		      return;
		    }

		    var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
		    var operations = new Array( // Identify which renderer this update is coming from.
		    2 + // [rendererID, rootFiberID]
		    // How big is the string table?
		    1 + // [stringTableLength]
		    // Then goes the actual string table.
		    pendingStringTableLength + ( // All unmounts are batched in a single message.
		    // [TREE_OPERATION_REMOVE, removedIDLength, ...ids]
		    numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + // Mount operations
		    pendingOperations.length); // Identify which renderer this update is coming from.
		    // This enables roots to be mapped to renderers,
		    // Which in turn enables fiber properations, states, and hooks to be inspected.

		    var i = 0;
		    operations[i++] = rendererID;
		    operations[i++] = rootID; // Now fill in the string table.
		    // [stringTableLength, str1Length, ...str1, str2Length, ...str2, ...]

		    operations[i++] = pendingStringTableLength;
		    pendingStringTable.forEach(function (value, key) {
		      operations[i++] = key.length;
		      var encodedKey = Object(src_utils["m" /* utfEncodeString */])(key);

		      for (var j = 0; j < encodedKey.length; j++) {
		        operations[i + j] = encodedKey[j];
		      }

		      i += key.length;
		    });

		    if (numUnmountIDs > 0) {
		      // All unmounts except roots are batched in a single message.
		      operations[i++] = constants["m" /* TREE_OPERATION_REMOVE */]; // The first number is how many unmounted IDs we're gonna send.

		      operations[i++] = numUnmountIDs; // Fill in the unmounts

		      for (var j = 0; j < pendingUnmountedIDs.length; j++) {
		        operations[i++] = pendingUnmountedIDs[j];
		      } // The root ID should always be unmounted last.


		      if (pendingUnmountedRootID !== null) {
		        operations[i] = pendingUnmountedRootID;
		        i++;
		      }
		    } // Fill in the rest of the operations.


		    for (var _j = 0; _j < pendingOperations.length; _j++) {
		      operations[i + _j] = pendingOperations[_j];
		    }

		    i += pendingOperations.length;

		    if (constants["s" /* __DEBUG__ */]) {
		      Object(src_utils["j" /* printOperationsArray */])(operations);
		    } // If we've already connected to the frontend, just pass the operations through.


		    hook.emit('operations', operations);
		    pendingOperations.length = 0;
		    pendingUnmountedIDs = [];
		    pendingUnmountedRootID = null;
		    pendingStringTable.clear();
		    pendingStringTableLength = 0;
		  }

		  function pushOperation(op) {

		    pendingOperations.push(op);
		  }

		  function getStringID(str) {
		    if (str === null) {
		      return 0;
		    }

		    var existingID = pendingStringTable.get(str);

		    if (existingID !== undefined) {
		      return existingID;
		    }

		    var stringID = pendingStringTable.size + 1;
		    pendingStringTable.set(str, stringID); // The string table total length needs to account
		    // both for the string length, and for the array item
		    // that contains the length itself. Hence + 1.

		    pendingStringTableLength += str.length + 1;
		    return stringID;
		  }

		  var currentlyInspectedElementID = null;
		  var currentlyInspectedPaths = {}; // Track the intersection of currently inspected paths,
		  // so that we can send their data along if the element is re-rendered.

		  function mergeInspectedPaths(path) {
		    var current = currentlyInspectedPaths;
		    path.forEach(function (key) {
		      if (!current[key]) {
		        current[key] = {};
		      }

		      current = current[key];
		    });
		  }

		  function createIsPathAllowed(key) {
		    // This function helps prevent previously-inspected paths from being dehydrated in updates.
		    // This is important to avoid a bad user experience where expanded toggles collapse on update.
		    return function isPathAllowed(path) {
		      var current = currentlyInspectedPaths[key];

		      if (!current) {
		        return false;
		      }

		      for (var i = 0; i < path.length; i++) {
		        current = current[path[i]];

		        if (!current) {
		          return false;
		        }
		      }

		      return true;
		    };
		  } // Fast path props lookup for React Native style editor.


		  function getInstanceAndStyle(id) {
		    var instance = null;
		    var style = null;
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance != null) {
		      instance = internalInstance._instance || null;
		      var element = internalInstance._currentElement;

		      if (element != null && element.props != null) {
		        style = element.props.style || null;
		      }
		    }

		    return {
		      instance: instance,
		      style: style
		    };
		  }

		  function updateSelectedElement(id) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance == null) {
		      console.warn("Could not find instance with id \"".concat(id, "\""));
		      return;
		    }

		    switch (getElementType(internalInstance)) {
		      case types["e" /* ElementTypeClass */]:
		        global.$r = internalInstance._instance;
		        break;

		      case types["h" /* ElementTypeFunction */]:
		        var element = internalInstance._currentElement;

		        if (element == null) {
		          console.warn("Could not find element with id \"".concat(id, "\""));
		          return;
		        }

		        global.$r = {
		          props: element.props,
		          type: element.type
		        };
		        break;

		      default:
		        global.$r = null;
		        break;
		    }
		  }

		  function storeAsGlobal(id, path, count) {
		    var inspectedElement = inspectElementRaw(id);

		    if (inspectedElement !== null) {
		      var value = Object(src_utils["h" /* getInObject */])(inspectedElement, path);
		      var key = "$reactTemp".concat(count);
		      window[key] = value;
		      console.log(key);
		      console.log(value);
		    }
		  }

		  function copyElementPath(id, path) {
		    var inspectedElement = inspectElementRaw(id);

		    if (inspectedElement !== null) {
		      Object(utils["b" /* copyToClipboard */])(Object(src_utils["h" /* getInObject */])(inspectedElement, path));
		    }
		  }

		  function inspectElement(requestID, id, path, forceFullData) {
		    if (forceFullData || currentlyInspectedElementID !== id) {
		      currentlyInspectedElementID = id;
		      currentlyInspectedPaths = {};
		    }

		    var inspectedElement = inspectElementRaw(id);

		    if (inspectedElement === null) {
		      return {
		        id: id,
		        responseID: requestID,
		        type: 'not-found'
		      };
		    }

		    if (path !== null) {
		      mergeInspectedPaths(path);
		    } // Any time an inspected element has an update,
		    // we should update the selected $r value as wel.
		    // Do this before dehydration (cleanForBridge).


		    updateSelectedElement(id);
		    inspectedElement.context = Object(utils["a" /* cleanForBridge */])(inspectedElement.context, createIsPathAllowed('context'));
		    inspectedElement.props = Object(utils["a" /* cleanForBridge */])(inspectedElement.props, createIsPathAllowed('props'));
		    inspectedElement.state = Object(utils["a" /* cleanForBridge */])(inspectedElement.state, createIsPathAllowed('state'));
		    return {
		      id: id,
		      responseID: requestID,
		      type: 'full-data',
		      value: inspectedElement
		    };
		  }

		  function inspectElementRaw(id) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance == null) {
		      return null;
		    }

		    var _getData2 = getData(internalInstance),
		        displayName = _getData2.displayName,
		        key = _getData2.key;

		    var type = getElementType(internalInstance);
		    var context = null;
		    var owners = null;
		    var props = null;
		    var state = null;
		    var source = null;
		    var element = internalInstance._currentElement;

		    if (element !== null) {
		      props = element.props;
		      source = element._source != null ? element._source : null;
		      var owner = element._owner;

		      if (owner) {
		        owners = [];

		        while (owner != null) {
		          owners.push({
		            displayName: getData(owner).displayName || 'Unknown',
		            id: getID(owner),
		            key: element.key,
		            type: getElementType(owner)
		          });

		          if (owner._currentElement) {
		            owner = owner._currentElement._owner;
		          }
		        }
		      }
		    }

		    var publicInstance = internalInstance._instance;

		    if (publicInstance != null) {
		      context = publicInstance.context || null;
		      state = publicInstance.state || null;
		    } // Not implemented


		    var errors = [];
		    var warnings = [];
		    return {
		      id: id,
		      // Does the current renderer support editable hooks and function props?
		      canEditHooks: false,
		      canEditFunctionProps: false,
		      // Does the current renderer support advanced editing interface?
		      canEditHooksAndDeletePaths: false,
		      canEditHooksAndRenamePaths: false,
		      canEditFunctionPropsDeletePaths: false,
		      canEditFunctionPropsRenamePaths: false,
		      // Toggle error boundary did not exist in legacy versions
		      canToggleError: false,
		      isErrored: false,
		      targetErrorBoundaryID: null,
		      // Suspense did not exist in legacy versions
		      canToggleSuspense: false,
		      // Can view component source location.
		      canViewSource: type === types["e" /* ElementTypeClass */] || type === types["h" /* ElementTypeFunction */],
		      // Only legacy context exists in legacy versions.
		      hasLegacyContext: true,
		      displayName: displayName,
		      type: type,
		      key: key != null ? key : null,
		      // Inspectable properties.
		      context: context,
		      hooks: null,
		      props: props,
		      state: state,
		      errors: errors,
		      warnings: warnings,
		      // List of owners
		      owners: owners,
		      // Location of component in source code.
		      source: source,
		      rootType: null,
		      rendererPackageName: null,
		      rendererVersion: null,
		      plugins: {
		        stylex: null
		      }
		    };
		  }

		  function logElementToConsole(id) {
		    var result = inspectElementRaw(id);

		    if (result === null) {
		      console.warn("Could not find element with id \"".concat(id, "\""));
		      return;
		    }

		    var supportsGroup = typeof console.groupCollapsed === 'function';

		    if (supportsGroup) {
		      console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), // --dom-tag-name-color is the CSS variable Chrome styles HTML elements with in the console.
		      'color: var(--dom-tag-name-color); font-weight: normal;');
		    }

		    if (result.props !== null) {
		      console.log('Props:', result.props);
		    }

		    if (result.state !== null) {
		      console.log('State:', result.state);
		    }

		    if (result.context !== null) {
		      console.log('Context:', result.context);
		    }

		    var nativeNode = findNativeNodeForInternalID(id);

		    if (nativeNode !== null) {
		      console.log('Node:', nativeNode);
		    }

		    if (window.chrome || /firefox/i.test(navigator.userAgent)) {
		      console.log('Right-click any value to save it as a global variable for further inspection.');
		    }

		    if (supportsGroup) {
		      console.groupEnd();
		    }
		  }

		  function prepareViewAttributeSource(id, path) {
		    var inspectedElement = inspectElementRaw(id);

		    if (inspectedElement !== null) {
		      window.$attribute = Object(src_utils["h" /* getInObject */])(inspectedElement, path);
		    }
		  }

		  function prepareViewElementSource(id) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance == null) {
		      console.warn("Could not find instance with id \"".concat(id, "\""));
		      return;
		    }

		    var element = internalInstance._currentElement;

		    if (element == null) {
		      console.warn("Could not find element with id \"".concat(id, "\""));
		      return;
		    }

		    global.$type = element.type;
		  }

		  function deletePath(type, id, hookID, path) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance != null) {
		      var publicInstance = internalInstance._instance;

		      if (publicInstance != null) {
		        switch (type) {
		          case 'context':
		            Object(src_utils["a" /* deletePathInObject */])(publicInstance.context, path);
		            forceUpdate(publicInstance);
		            break;

		          case 'hooks':
		            throw new Error('Hooks not supported by this renderer');

		          case 'props':
		            var element = internalInstance._currentElement;
		            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
		              props: Object(utils["c" /* copyWithDelete */])(element.props, path)
		            });
		            forceUpdate(publicInstance);
		            break;

		          case 'state':
		            Object(src_utils["a" /* deletePathInObject */])(publicInstance.state, path);
		            forceUpdate(publicInstance);
		            break;
		        }
		      }
		    }
		  }

		  function renamePath(type, id, hookID, oldPath, newPath) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance != null) {
		      var publicInstance = internalInstance._instance;

		      if (publicInstance != null) {
		        switch (type) {
		          case 'context':
		            Object(src_utils["k" /* renamePathInObject */])(publicInstance.context, oldPath, newPath);
		            forceUpdate(publicInstance);
		            break;

		          case 'hooks':
		            throw new Error('Hooks not supported by this renderer');

		          case 'props':
		            var element = internalInstance._currentElement;
		            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
		              props: Object(utils["d" /* copyWithRename */])(element.props, oldPath, newPath)
		            });
		            forceUpdate(publicInstance);
		            break;

		          case 'state':
		            Object(src_utils["k" /* renamePathInObject */])(publicInstance.state, oldPath, newPath);
		            forceUpdate(publicInstance);
		            break;
		        }
		      }
		    }
		  }

		  function overrideValueAtPath(type, id, hookID, path, value) {
		    var internalInstance = idToInternalInstanceMap.get(id);

		    if (internalInstance != null) {
		      var publicInstance = internalInstance._instance;

		      if (publicInstance != null) {
		        switch (type) {
		          case 'context':
		            Object(src_utils["l" /* setInObject */])(publicInstance.context, path, value);
		            forceUpdate(publicInstance);
		            break;

		          case 'hooks':
		            throw new Error('Hooks not supported by this renderer');

		          case 'props':
		            var element = internalInstance._currentElement;
		            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {
		              props: Object(utils["e" /* copyWithSet */])(element.props, path, value)
		            });
		            forceUpdate(publicInstance);
		            break;

		          case 'state':
		            Object(src_utils["l" /* setInObject */])(publicInstance.state, path, value);
		            forceUpdate(publicInstance);
		            break;
		        }
		      }
		    }
		  } // v16+ only features


		  var getProfilingData = function getProfilingData() {
		    throw new Error('getProfilingData not supported by this renderer');
		  };

		  var handleCommitFiberRoot = function handleCommitFiberRoot() {
		    throw new Error('handleCommitFiberRoot not supported by this renderer');
		  };

		  var handleCommitFiberUnmount = function handleCommitFiberUnmount() {
		    throw new Error('handleCommitFiberUnmount not supported by this renderer');
		  };

		  var handlePostCommitFiberRoot = function handlePostCommitFiberRoot() {
		    throw new Error('handlePostCommitFiberRoot not supported by this renderer');
		  };

		  var overrideError = function overrideError() {
		    throw new Error('overrideError not supported by this renderer');
		  };

		  var overrideSuspense = function overrideSuspense() {
		    throw new Error('overrideSuspense not supported by this renderer');
		  };

		  var startProfiling = function startProfiling() {// Do not throw, since this would break a multi-root scenario where v15 and v16 were both present.
		  };

		  var stopProfiling = function stopProfiling() {// Do not throw, since this would break a multi-root scenario where v15 and v16 were both present.
		  };

		  function getBestMatchForTrackedPath() {
		    // Not implemented.
		    return null;
		  }

		  function getPathForElement(id) {
		    // Not implemented.
		    return null;
		  }

		  function updateComponentFilters(componentFilters) {// Not implemented.
		  }

		  function setTraceUpdatesEnabled(enabled) {// Not implemented.
		  }

		  function setTrackedPath(path) {// Not implemented.
		  }

		  function getOwnersList(id) {
		    // Not implemented.
		    return null;
		  }

		  function clearErrorsAndWarnings() {// Not implemented
		  }

		  function clearErrorsForFiberID(id) {// Not implemented
		  }

		  function clearWarningsForFiberID(id) {// Not implemented
		  }

		  function patchConsoleForStrictMode() {}

		  function unpatchConsoleForStrictMode() {}

		  return {
		    clearErrorsAndWarnings: clearErrorsAndWarnings,
		    clearErrorsForFiberID: clearErrorsForFiberID,
		    clearWarningsForFiberID: clearWarningsForFiberID,
		    cleanup: cleanup,
		    copyElementPath: copyElementPath,
		    deletePath: deletePath,
		    flushInitialOperations: flushInitialOperations,
		    getBestMatchForTrackedPath: getBestMatchForTrackedPath,
		    getDisplayNameForFiberID: getDisplayNameForFiberID,
		    getFiberIDForNative: getInternalIDForNative,
		    getInstanceAndStyle: getInstanceAndStyle,
		    findNativeNodesForFiberID: function findNativeNodesForFiberID(id) {
		      var nativeNode = findNativeNodeForInternalID(id);
		      return nativeNode == null ? null : [nativeNode];
		    },
		    getOwnersList: getOwnersList,
		    getPathForElement: getPathForElement,
		    getProfilingData: getProfilingData,
		    handleCommitFiberRoot: handleCommitFiberRoot,
		    handleCommitFiberUnmount: handleCommitFiberUnmount,
		    handlePostCommitFiberRoot: handlePostCommitFiberRoot,
		    inspectElement: inspectElement,
		    logElementToConsole: logElementToConsole,
		    overrideError: overrideError,
		    overrideSuspense: overrideSuspense,
		    overrideValueAtPath: overrideValueAtPath,
		    renamePath: renamePath,
		    patchConsoleForStrictMode: patchConsoleForStrictMode,
		    prepareViewAttributeSource: prepareViewAttributeSource,
		    prepareViewElementSource: prepareViewElementSource,
		    renderer: renderer,
		    setTraceUpdatesEnabled: setTraceUpdatesEnabled,
		    setTrackedPath: setTrackedPath,
		    startProfiling: startProfiling,
		    stopProfiling: stopProfiling,
		    storeAsGlobal: storeAsGlobal,
		    unpatchConsoleForStrictMode: unpatchConsoleForStrictMode,
		    updateComponentFilters: updateComponentFilters
		  };
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/index.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */



		function initBackend(hook, agent, global) {
		  if (hook == null) {
		    // DevTools didn't get injected into this page (maybe b'c of the contentType).
		    return function () {};
		  }

		  var subs = [hook.sub('renderer-attached', function (_ref) {
		    var id = _ref.id;
		        _ref.renderer;
		        var rendererInterface = _ref.rendererInterface;
		    agent.setRendererInterface(id, rendererInterface); // Now that the Store and the renderer interface are connected,
		    // it's time to flush the pending operation codes to the frontend.

		    rendererInterface.flushInitialOperations();
		  }), hook.sub('unsupported-renderer-version', function (id) {
		    agent.onUnsupportedRenderer(id);
		  }), hook.sub('fastRefreshScheduled', agent.onFastRefreshScheduled), hook.sub('operations', agent.onHookOperations), hook.sub('traceUpdates', agent.onTraceUpdates) // TODO Add additional subscriptions required for profiling mode
		  ];

		  var attachRenderer = function attachRenderer(id, renderer) {
		    var rendererInterface = hook.rendererInterfaces.get(id); // Inject any not-yet-injected renderers (if we didn't reload-and-profile)

		    if (rendererInterface == null) {
		      if (typeof renderer.findFiberByHostInstance === 'function') {
		        // react-reconciler v16+
		        rendererInterface = Object(backend_renderer["a" /* attach */])(hook, id, renderer, global);
		      } else if (renderer.ComponentTree) {
		        // react-dom v15
		        rendererInterface = renderer_attach(hook, id, renderer, global);
		      } else ;

		      if (rendererInterface != null) {
		        hook.rendererInterfaces.set(id, rendererInterface);
		      }
		    } // Notify the DevTools frontend about new renderers.
		    // This includes any that were attached early (via __REACT_DEVTOOLS_ATTACH__).


		    if (rendererInterface != null) {
		      hook.emit('renderer-attached', {
		        id: id,
		        renderer: renderer,
		        rendererInterface: rendererInterface
		      });
		    } else {
		      hook.emit('unsupported-renderer-version', id);
		    }
		  }; // Connect renderers that have already injected themselves.


		  hook.renderers.forEach(function (renderer, id) {
		    attachRenderer(id, renderer);
		  }); // Connect any new renderers that injected themselves.

		  subs.push(hook.sub('renderer', function (_ref2) {
		    var id = _ref2.id,
		        renderer = _ref2.renderer;
		    attachRenderer(id, renderer);
		  }));
		  hook.emit('react-devtools', agent);
		  hook.reactDevtoolsAgent = agent;

		  var onAgentShutdown = function onAgentShutdown() {
		    subs.forEach(function (fn) {
		      return fn();
		    });
		    hook.rendererInterfaces.forEach(function (rendererInterface) {
		      rendererInterface.cleanup();
		    });
		    hook.reactDevtoolsAgent = null;
		  };

		  agent.addListener('shutdown', onAgentShutdown);
		  subs.push(function () {
		    agent.removeListener('shutdown', onAgentShutdown);
		  });
		  return function () {
		    subs.forEach(function (fn) {
		      return fn();
		    });
		  };
		}
		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		/**
		 * This mirrors react-native/Libraries/Inspector/resolveBoxStyle.js (but without RTL support).
		 *
		 * Resolve a style property into it's component parts, e.g.
		 *
		 * resolveBoxStyle('margin', {margin: 5, marginBottom: 10})
		 * -> {top: 5, left: 5, right: 5, bottom: 10}
		 */
		function resolveBoxStyle(prefix, style) {
		  var hasParts = false;
		  var result = {
		    bottom: 0,
		    left: 0,
		    right: 0,
		    top: 0
		  };
		  var styleForAll = style[prefix];

		  if (styleForAll != null) {
		    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
		    for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
		      var key = _Object$keys[_i];
		      result[key] = styleForAll;
		    }

		    hasParts = true;
		  }

		  var styleForHorizontal = style[prefix + 'Horizontal'];

		  if (styleForHorizontal != null) {
		    result.left = styleForHorizontal;
		    result.right = styleForHorizontal;
		    hasParts = true;
		  } else {
		    var styleForLeft = style[prefix + 'Left'];

		    if (styleForLeft != null) {
		      result.left = styleForLeft;
		      hasParts = true;
		    }

		    var styleForRight = style[prefix + 'Right'];

		    if (styleForRight != null) {
		      result.right = styleForRight;
		      hasParts = true;
		    }

		    var styleForEnd = style[prefix + 'End'];

		    if (styleForEnd != null) {
		      // TODO RTL support
		      result.right = styleForEnd;
		      hasParts = true;
		    }

		    var styleForStart = style[prefix + 'Start'];

		    if (styleForStart != null) {
		      // TODO RTL support
		      result.left = styleForStart;
		      hasParts = true;
		    }
		  }

		  var styleForVertical = style[prefix + 'Vertical'];

		  if (styleForVertical != null) {
		    result.bottom = styleForVertical;
		    result.top = styleForVertical;
		    hasParts = true;
		  } else {
		    var styleForBottom = style[prefix + 'Bottom'];

		    if (styleForBottom != null) {
		      result.bottom = styleForBottom;
		      hasParts = true;
		    }

		    var styleForTop = style[prefix + 'Top'];

		    if (styleForTop != null) {
		      result.top = styleForTop;
		      hasParts = true;
		    }
		  }

		  return hasParts ? result : null;
		}
		// EXTERNAL MODULE: ../react-devtools-shared/src/isArray.js
		var isArray = __webpack_require__(6);

		// CONCATENATED MODULE: ../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js
		function setupNativeStyleEditor_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { setupNativeStyleEditor_typeof = function _typeof(obj) { return typeof obj; }; } else { setupNativeStyleEditor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return setupNativeStyleEditor_typeof(obj); }

		function setupNativeStyleEditor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */



		function setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {
		  bridge.addListener('NativeStyleEditor_measure', function (_ref) {
		    var id = _ref.id,
		        rendererID = _ref.rendererID;
		    measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
		  });
		  bridge.addListener('NativeStyleEditor_renameAttribute', function (_ref2) {
		    var id = _ref2.id,
		        rendererID = _ref2.rendererID,
		        oldName = _ref2.oldName,
		        newName = _ref2.newName,
		        value = _ref2.value;
		    renameStyle(agent, id, rendererID, oldName, newName, value);
		    setTimeout(function () {
		      return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
		    });
		  });
		  bridge.addListener('NativeStyleEditor_setValue', function (_ref3) {
		    var id = _ref3.id,
		        rendererID = _ref3.rendererID,
		        name = _ref3.name,
		        value = _ref3.value;
		    setStyle(agent, id, rendererID, name, value);
		    setTimeout(function () {
		      return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
		    });
		  });
		  bridge.send('isNativeStyleEditorSupported', {
		    isSupported: true,
		    validAttributes: validAttributes
		  });
		}
		var EMPTY_BOX_STYLE = {
		  top: 0,
		  left: 0,
		  right: 0,
		  bottom: 0
		};
		var componentIDToStyleOverrides = new Map();

		function measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {
		  var data = agent.getInstanceAndStyle({
		    id: id,
		    rendererID: rendererID
		  });

		  if (!data || !data.style) {
		    bridge.send('NativeStyleEditor_styleAndLayout', {
		      id: id,
		      layout: null,
		      style: null
		    });
		    return;
		  }

		  var instance = data.instance,
		      style = data.style;
		  var resolvedStyle = resolveNativeStyle(style); // If it's a host component we edited before, amend styles.

		  var styleOverrides = componentIDToStyleOverrides.get(id);

		  if (styleOverrides != null) {
		    resolvedStyle = Object.assign({}, resolvedStyle, styleOverrides);
		  }

		  if (!instance || typeof instance.measure !== 'function') {
		    bridge.send('NativeStyleEditor_styleAndLayout', {
		      id: id,
		      layout: null,
		      style: resolvedStyle || null
		    });
		    return;
		  } // $FlowFixMe the parameter types of an unknown function are unknown


		  instance.measure(function (x, y, width, height, left, top) {
		    // RN Android sometimes returns undefined here. Don't send measurements in this case.
		    // https://github.com/jhen0409/react-native-debugger/issues/84#issuecomment-304611817
		    if (typeof x !== 'number') {
		      bridge.send('NativeStyleEditor_styleAndLayout', {
		        id: id,
		        layout: null,
		        style: resolvedStyle || null
		      });
		      return;
		    }

		    var margin = resolvedStyle != null && resolveBoxStyle('margin', resolvedStyle) || EMPTY_BOX_STYLE;
		    var padding = resolvedStyle != null && resolveBoxStyle('padding', resolvedStyle) || EMPTY_BOX_STYLE;
		    bridge.send('NativeStyleEditor_styleAndLayout', {
		      id: id,
		      layout: {
		        x: x,
		        y: y,
		        width: width,
		        height: height,
		        left: left,
		        top: top,
		        margin: margin,
		        padding: padding
		      },
		      style: resolvedStyle || null
		    });
		  });
		}

		function shallowClone(object) {
		  var cloned = {};

		  for (var n in object) {
		    cloned[n] = object[n];
		  }

		  return cloned;
		}

		function renameStyle(agent, id, rendererID, oldName, newName, value) {
		  var _ref4;

		  var data = agent.getInstanceAndStyle({
		    id: id,
		    rendererID: rendererID
		  });

		  if (!data || !data.style) {
		    return;
		  }

		  var instance = data.instance,
		      style = data.style;
		  var newStyle = newName ? (_ref4 = {}, setupNativeStyleEditor_defineProperty(_ref4, oldName, undefined), setupNativeStyleEditor_defineProperty(_ref4, newName, value), _ref4) : setupNativeStyleEditor_defineProperty({}, oldName, undefined);
		  var customStyle; // TODO It would be nice if the renderer interface abstracted this away somehow.

		  if (instance !== null && typeof instance.setNativeProps === 'function') {
		    // In the case of a host component, we need to use setNativeProps().
		    // Remember to "correct" resolved styles when we read them next time.
		    var styleOverrides = componentIDToStyleOverrides.get(id);

		    if (!styleOverrides) {
		      componentIDToStyleOverrides.set(id, newStyle);
		    } else {
		      Object.assign(styleOverrides, newStyle);
		    } // TODO Fabric does not support setNativeProps; chat with Sebastian or Eli


		    instance.setNativeProps({
		      style: newStyle
		    });
		  } else if (Object(isArray["a" /* default */])(style)) {
		    var lastIndex = style.length - 1;

		    if (setupNativeStyleEditor_typeof(style[lastIndex]) === 'object' && !Object(isArray["a" /* default */])(style[lastIndex])) {
		      customStyle = shallowClone(style[lastIndex]);
		      delete customStyle[oldName];

		      if (newName) {
		        customStyle[newName] = value;
		      } else {
		        customStyle[oldName] = undefined;
		      }

		      agent.overrideValueAtPath({
		        type: 'props',
		        id: id,
		        rendererID: rendererID,
		        path: ['style', lastIndex],
		        value: customStyle
		      });
		    } else {
		      agent.overrideValueAtPath({
		        type: 'props',
		        id: id,
		        rendererID: rendererID,
		        path: ['style'],
		        value: style.concat([newStyle])
		      });
		    }
		  } else if (setupNativeStyleEditor_typeof(style) === 'object') {
		    customStyle = shallowClone(style);
		    delete customStyle[oldName];

		    if (newName) {
		      customStyle[newName] = value;
		    } else {
		      customStyle[oldName] = undefined;
		    }

		    agent.overrideValueAtPath({
		      type: 'props',
		      id: id,
		      rendererID: rendererID,
		      path: ['style'],
		      value: customStyle
		    });
		  } else {
		    agent.overrideValueAtPath({
		      type: 'props',
		      id: id,
		      rendererID: rendererID,
		      path: ['style'],
		      value: [style, newStyle]
		    });
		  }

		  agent.emit('hideNativeHighlight');
		}

		function setStyle(agent, id, rendererID, name, value) {
		  var data = agent.getInstanceAndStyle({
		    id: id,
		    rendererID: rendererID
		  });

		  if (!data || !data.style) {
		    return;
		  }

		  var instance = data.instance,
		      style = data.style;

		  var newStyle = setupNativeStyleEditor_defineProperty({}, name, value); // TODO It would be nice if the renderer interface abstracted this away somehow.


		  if (instance !== null && typeof instance.setNativeProps === 'function') {
		    // In the case of a host component, we need to use setNativeProps().
		    // Remember to "correct" resolved styles when we read them next time.
		    var styleOverrides = componentIDToStyleOverrides.get(id);

		    if (!styleOverrides) {
		      componentIDToStyleOverrides.set(id, newStyle);
		    } else {
		      Object.assign(styleOverrides, newStyle);
		    } // TODO Fabric does not support setNativeProps; chat with Sebastian or Eli


		    instance.setNativeProps({
		      style: newStyle
		    });
		  } else if (Object(isArray["a" /* default */])(style)) {
		    var lastLength = style.length - 1;

		    if (setupNativeStyleEditor_typeof(style[lastLength]) === 'object' && !Object(isArray["a" /* default */])(style[lastLength])) {
		      agent.overrideValueAtPath({
		        type: 'props',
		        id: id,
		        rendererID: rendererID,
		        path: ['style', lastLength, name],
		        value: value
		      });
		    } else {
		      agent.overrideValueAtPath({
		        type: 'props',
		        id: id,
		        rendererID: rendererID,
		        path: ['style'],
		        value: style.concat([newStyle])
		      });
		    }
		  } else {
		    agent.overrideValueAtPath({
		      type: 'props',
		      id: id,
		      rendererID: rendererID,
		      path: ['style'],
		      value: [style, newStyle]
		    });
		  }

		  agent.emit('hideNativeHighlight');
		}
		// CONCATENATED MODULE: ./src/backend.js
		/**
		 * Copyright (c) Facebook, Inc. and its affiliates.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */







		installHook(window);
		var backend_hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
		var savedComponentFilters = Object(src_utils["e" /* getDefaultComponentFilters */])();

		function backend_debug(methodName) {
		  if (constants["s" /* __DEBUG__ */]) {
		    var _console;

		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    (_console = console).log.apply(_console, ["%c[core/backend] %c".concat(methodName), 'color: teal; font-weight: bold;', 'font-weight: bold;'].concat(args));
		  }
		}

		function connectToDevTools(options) {
		  if (backend_hook == null) {
		    // DevTools didn't get injected into this page (maybe b'c of the contentType).
		    return;
		  }

		  var _ref = options || {},
		      _ref$host = _ref.host,
		      host = _ref$host === void 0 ? 'localhost' : _ref$host,
		      nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes,
		      _ref$useHttps = _ref.useHttps,
		      useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps,
		      _ref$port = _ref.port,
		      port = _ref$port === void 0 ? 8097 : _ref$port,
		      websocket = _ref.websocket,
		      _ref$resolveRNStyle = _ref.resolveRNStyle,
		      resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle,
		      _ref$retryConnectionD = _ref.retryConnectionDelay,
		      retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2000 : _ref$retryConnectionD,
		      _ref$isAppActive = _ref.isAppActive,
		      isAppActive = _ref$isAppActive === void 0 ? function () {
		    return true;
		  } : _ref$isAppActive;

		  var protocol = useHttps ? 'wss' : 'ws';
		  var retryTimeoutID = null;

		  function scheduleRetry() {
		    if (retryTimeoutID === null) {
		      // Two seconds because RN had issues with quick retries.
		      retryTimeoutID = setTimeout(function () {
		        return connectToDevTools(options);
		      }, retryConnectionDelay);
		    }
		  }

		  if (!isAppActive()) {
		    // If the app is in background, maybe retry later.
		    // Don't actually attempt to connect until we're in foreground.
		    scheduleRetry();
		    return;
		  }

		  var bridge = null;
		  var messageListeners = [];
		  var uri = protocol + '://' + host + ':' + port; // If existing websocket is passed, use it.
		  // This is necessary to support our custom integrations.
		  // See D6251744.

		  var ws = websocket ? websocket : new window.WebSocket(uri);
		  ws.onclose = handleClose;
		  ws.onerror = handleFailed;
		  ws.onmessage = handleMessage;

		  ws.onopen = function () {
		    bridge = new src_bridge({
		      listen: function listen(fn) {
		        messageListeners.push(fn);
		        return function () {
		          var index = messageListeners.indexOf(fn);

		          if (index >= 0) {
		            messageListeners.splice(index, 1);
		          }
		        };
		      },
		      send: function send(event, payload, transferable) {
		        if (ws.readyState === ws.OPEN) {
		          if (constants["s" /* __DEBUG__ */]) {
		            backend_debug('wall.send()', event, payload);
		          }

		          ws.send(JSON.stringify({
		            event: event,
		            payload: payload
		          }));
		        } else {
		          if (constants["s" /* __DEBUG__ */]) {
		            backend_debug('wall.send()', 'Shutting down bridge because of closed WebSocket connection');
		          }

		          if (bridge !== null) {
		            bridge.shutdown();
		          }

		          scheduleRetry();
		        }
		      }
		    });
		    bridge.addListener('inspectElement', function (_ref2) {
		      var id = _ref2.id,
		          rendererID = _ref2.rendererID;
		      var renderer = agent.rendererInterfaces[rendererID];

		      if (renderer != null) {
		        // Send event for RN to highlight.
		        var nodes = renderer.findNativeNodesForFiberID(id);

		        if (nodes != null && nodes[0] != null) {
		          agent.emit('showNativeHighlight', nodes[0]);
		        }
		      }
		    });
		    bridge.addListener('updateComponentFilters', function (componentFilters) {
		      // Save filter changes in memory, in case DevTools is reloaded.
		      // In that case, the renderer will already be using the updated values.
		      // We'll lose these in between backend reloads but that can't be helped.
		      savedComponentFilters = componentFilters;
		    }); // The renderer interface doesn't read saved component filters directly,
		    // because they are generally stored in localStorage within the context of the extension.
		    // Because of this it relies on the extension to pass filters.
		    // In the case of the standalone DevTools being used with a website,
		    // saved filters are injected along with the backend script tag so we shouldn't override them here.
		    // This injection strategy doesn't work for React Native though.
		    // Ideally the backend would save the filters itself, but RN doesn't provide a sync storage solution.
		    // So for now we just fall back to using the default filters...

		    if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {
		      bridge.send('overrideComponentFilters', savedComponentFilters);
		    } // TODO (npm-packages) Warn if "isBackendStorageAPISupported"


		    var agent = new agent_Agent(bridge);
		    agent.addListener('shutdown', function () {
		      // If we received 'shutdown' from `agent`, we assume the `bridge` is already shutting down,
		      // and that caused the 'shutdown' event on the `agent`, so we don't need to call `bridge.shutdown()` here.
		      backend_hook.emit('shutdown');
		    });
		    initBackend(backend_hook, agent, window); // Setup React Native style editor if the environment supports it.

		    if (resolveRNStyle != null || backend_hook.resolveRNStyle != null) {
		      setupNativeStyleEditor(bridge, agent, resolveRNStyle || backend_hook.resolveRNStyle, nativeStyleEditorValidAttributes || backend_hook.nativeStyleEditorValidAttributes || null);
		    } else {
		      // Otherwise listen to detect if the environment later supports it.
		      // For example, Flipper does not eagerly inject these values.
		      // Instead it relies on the React Native Inspector to lazily inject them.
		      var lazyResolveRNStyle;
		      var lazyNativeStyleEditorValidAttributes;

		      var initAfterTick = function initAfterTick() {
		        if (bridge !== null) {
		          setupNativeStyleEditor(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);
		        }
		      };

		      if (!backend_hook.hasOwnProperty('resolveRNStyle')) {
		        Object.defineProperty(backend_hook, 'resolveRNStyle', {
		          enumerable: false,
		          get: function get() {
		            return lazyResolveRNStyle;
		          },
		          set: function set(value) {
		            lazyResolveRNStyle = value;
		            initAfterTick();
		          }
		        });
		      }

		      if (!backend_hook.hasOwnProperty('nativeStyleEditorValidAttributes')) {
		        Object.defineProperty(backend_hook, 'nativeStyleEditorValidAttributes', {
		          enumerable: false,
		          get: function get() {
		            return lazyNativeStyleEditorValidAttributes;
		          },
		          set: function set(value) {
		            lazyNativeStyleEditorValidAttributes = value;
		            initAfterTick();
		          }
		        });
		      }
		    }
		  };

		  function handleClose() {
		    if (constants["s" /* __DEBUG__ */]) {
		      backend_debug('WebSocket.onclose');
		    }

		    if (bridge !== null) {
		      bridge.emit('shutdown');
		    }

		    scheduleRetry();
		  }

		  function handleFailed() {
		    if (constants["s" /* __DEBUG__ */]) {
		      backend_debug('WebSocket.onerror');
		    }

		    scheduleRetry();
		  }

		  function handleMessage(event) {
		    var data;

		    try {
		      if (typeof event.data === 'string') {
		        data = JSON.parse(event.data);

		        if (constants["s" /* __DEBUG__ */]) {
		          backend_debug('WebSocket.onmessage', data);
		        }
		      } else {
		        throw Error();
		      }
		    } catch (e) {
		      console.error('[React DevTools] Failed to parse JSON: ' + event.data);
		      return;
		    }

		    messageListeners.forEach(function (fn) {
		      try {
		        fn(data);
		      } catch (error) {
		        // jsc doesn't play so well with tracebacks that go into eval'd code,
		        // so the stack trace here will stop at the `eval()` call. Getting the
		        // message that caused the error is the best we can do for now.
		        console.log('[React DevTools] Error calling listener', data);
		        console.log('error:', error);
		        throw error;
		      }
		    });
		  }
		}

		/***/ })
		/******/ ]);
		});
		
} (backend));
	return backend.exports;
}

var hasRequiredDevtools;

function requireDevtools () {
	if (hasRequiredDevtools) return devtools;
	hasRequiredDevtools = 1;
	Object.defineProperty(devtools, "__esModule", { value: true });
	// eslint-disable-next-line import/no-unassigned-import
	requireDevtoolsWindowPolyfill();
	// @ts-ignore
	const react_devtools_core_1 = requireBackend();
	react_devtools_core_1.connectToDevTools();
	
	return devtools;
}

var __importDefault$l = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(reconciler, "__esModule", { value: true });
const scheduler_1 = scheduler.exports;
const react_reconciler_1 = __importDefault$l(reactReconciler.exports);
const yoga_layout_prebuilt_1$3 = __importDefault$l(require$$0$4);
const dom_1 = dom$1;
// We need to conditionally perform devtools connection to avoid
// accidentally breaking other third-party code.
// See https://github.com/vadimdemedes/ink/issues/384
if (process.env.DEV === 'true') {
    // eslint-disable-next-line import/no-unassigned-import
    requireDevtools();
}
const cleanupYogaNode = (node) => {
    node === null || node === void 0 ? void 0 : node.unsetMeasureFunc();
    node === null || node === void 0 ? void 0 : node.freeRecursive();
};
reconciler.default = react_reconciler_1.default({
    // @ts-ignore
    schedulePassiveEffects: scheduler_1.unstable_scheduleCallback,
    cancelPassiveEffects: scheduler_1.unstable_cancelCallback,
    now: Date.now,
    getRootHostContext: () => ({
        isInsideText: false
    }),
    prepareForCommit: () => null,
    preparePortalMount: () => null,
    clearContainer: () => false,
    shouldDeprioritizeSubtree: () => false,
    resetAfterCommit: rootNode => {
        // Since renders are throttled at the instance level and <Static> component children
        // are rendered only once and then get deleted, we need an escape hatch to
        // trigger an immediate render to ensure <Static> children are written to output before they get erased
        if (rootNode.isStaticDirty) {
            rootNode.isStaticDirty = false;
            if (typeof rootNode.onImmediateRender === 'function') {
                rootNode.onImmediateRender();
            }
            return;
        }
        if (typeof rootNode.onRender === 'function') {
            rootNode.onRender();
        }
    },
    getChildHostContext: (parentHostContext, type) => {
        const previousIsInsideText = parentHostContext.isInsideText;
        const isInsideText = type === 'ink-text' || type === 'ink-virtual-text';
        if (previousIsInsideText === isInsideText) {
            return parentHostContext;
        }
        return { isInsideText };
    },
    shouldSetTextContent: () => false,
    createInstance: (originalType, newProps, _root, hostContext) => {
        if (hostContext.isInsideText && originalType === 'ink-box') {
            throw new Error(`<Box> can’t be nested inside <Text> component`);
        }
        const type = originalType === 'ink-text' && hostContext.isInsideText
            ? 'ink-virtual-text'
            : originalType;
        const node = dom_1.createNode(type);
        for (const [key, value] of Object.entries(newProps)) {
            if (key === 'children') {
                continue;
            }
            else if (key === 'style') {
                dom_1.setStyle(node, value);
            }
            else if (key === 'internal_transform') {
                node.internal_transform = value;
            }
            else if (key === 'internal_static') {
                node.internal_static = true;
            }
            else {
                dom_1.setAttribute(node, key, value);
            }
        }
        return node;
    },
    createTextInstance: (text, _root, hostContext) => {
        if (!hostContext.isInsideText) {
            throw new Error(`Text string "${text}" must be rendered inside <Text> component`);
        }
        return dom_1.createTextNode(text);
    },
    resetTextContent: () => { },
    hideTextInstance: node => {
        dom_1.setTextNodeValue(node, '');
    },
    unhideTextInstance: (node, text) => {
        dom_1.setTextNodeValue(node, text);
    },
    getPublicInstance: instance => instance,
    hideInstance: node => {
        var _a;
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setDisplay(yoga_layout_prebuilt_1$3.default.DISPLAY_NONE);
    },
    unhideInstance: node => {
        var _a;
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setDisplay(yoga_layout_prebuilt_1$3.default.DISPLAY_FLEX);
    },
    appendInitialChild: dom_1.appendChildNode,
    appendChild: dom_1.appendChildNode,
    insertBefore: dom_1.insertBeforeNode,
    finalizeInitialChildren: (node, _type, _props, rootNode) => {
        if (node.internal_static) {
            rootNode.isStaticDirty = true;
            // Save reference to <Static> node to skip traversal of entire
            // node tree to find it
            rootNode.staticNode = node;
        }
        return false;
    },
    supportsMutation: true,
    appendChildToContainer: dom_1.appendChildNode,
    insertInContainerBefore: dom_1.insertBeforeNode,
    removeChildFromContainer: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
    },
    prepareUpdate: (node, _type, oldProps, newProps, rootNode) => {
        if (node.internal_static) {
            rootNode.isStaticDirty = true;
        }
        const updatePayload = {};
        const keys = Object.keys(newProps);
        for (const key of keys) {
            if (newProps[key] !== oldProps[key]) {
                const isStyle = key === 'style' &&
                    typeof newProps.style === 'object' &&
                    typeof oldProps.style === 'object';
                if (isStyle) {
                    const newStyle = newProps.style;
                    const oldStyle = oldProps.style;
                    const styleKeys = Object.keys(newStyle);
                    for (const styleKey of styleKeys) {
                        // Always include `borderColor` and `borderStyle` to ensure border is rendered,
                        // otherwise resulting `updatePayload` may not contain them
                        // if they weren't changed during this update
                        if (styleKey === 'borderStyle' || styleKey === 'borderColor') {
                            if (typeof updatePayload.style !== 'object') {
                                // Linter didn't like `= {} as Style`
                                const style = {};
                                updatePayload.style = style;
                            }
                            updatePayload.style.borderStyle = newStyle.borderStyle;
                            updatePayload.style.borderColor = newStyle.borderColor;
                        }
                        if (newStyle[styleKey] !== oldStyle[styleKey]) {
                            if (typeof updatePayload.style !== 'object') {
                                // Linter didn't like `= {} as Style`
                                const style = {};
                                updatePayload.style = style;
                            }
                            updatePayload.style[styleKey] = newStyle[styleKey];
                        }
                    }
                    continue;
                }
                updatePayload[key] = newProps[key];
            }
        }
        return updatePayload;
    },
    commitUpdate: (node, updatePayload) => {
        for (const [key, value] of Object.entries(updatePayload)) {
            if (key === 'children') {
                continue;
            }
            else if (key === 'style') {
                dom_1.setStyle(node, value);
            }
            else if (key === 'internal_transform') {
                node.internal_transform = value;
            }
            else if (key === 'internal_static') {
                node.internal_static = true;
            }
            else {
                dom_1.setAttribute(node, key, value);
            }
        }
    },
    commitTextUpdate: (node, _oldText, newText) => {
        dom_1.setTextNodeValue(node, newText);
    },
    removeChild: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
    }
});

var renderer = {};

var renderNodeToOutput$1 = {};

var indentString = (string, count = 1, options) => {
	options = {
		indent: ' ',
		includeEmptyLines: false,
		...options
	};

	if (typeof string !== 'string') {
		throw new TypeError(
			`Expected \`input\` to be a \`string\`, got \`${typeof string}\``
		);
	}

	if (typeof count !== 'number') {
		throw new TypeError(
			`Expected \`count\` to be a \`number\`, got \`${typeof count}\``
		);
	}

	if (typeof options.indent !== 'string') {
		throw new TypeError(
			`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
		);
	}

	if (count === 0) {
		return string;
	}

	const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;

	return string.replace(regex, options.indent.repeat(count));
};

var getMaxWidth = {};

var __importDefault$k = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(getMaxWidth, "__esModule", { value: true });
const yoga_layout_prebuilt_1$2 = __importDefault$k(require$$0$4);
getMaxWidth.default = (yogaNode) => {
    return (yogaNode.getComputedWidth() -
        yogaNode.getComputedPadding(yoga_layout_prebuilt_1$2.default.EDGE_LEFT) -
        yogaNode.getComputedPadding(yoga_layout_prebuilt_1$2.default.EDGE_RIGHT) -
        yogaNode.getComputedBorder(yoga_layout_prebuilt_1$2.default.EDGE_LEFT) -
        yogaNode.getComputedBorder(yoga_layout_prebuilt_1$2.default.EDGE_RIGHT));
};

var renderBorder = {};

var cliBoxes$1 = {exports: {}};

var single = {
	topLeft: "┌",
	topRight: "┐",
	bottomRight: "┘",
	bottomLeft: "└",
	vertical: "│",
	horizontal: "─"
};
var double = {
	topLeft: "╔",
	topRight: "╗",
	bottomRight: "╝",
	bottomLeft: "╚",
	vertical: "║",
	horizontal: "═"
};
var round = {
	topLeft: "╭",
	topRight: "╮",
	bottomRight: "╯",
	bottomLeft: "╰",
	vertical: "│",
	horizontal: "─"
};
var bold = {
	topLeft: "┏",
	topRight: "┓",
	bottomRight: "┛",
	bottomLeft: "┗",
	vertical: "┃",
	horizontal: "━"
};
var singleDouble = {
	topLeft: "╓",
	topRight: "╖",
	bottomRight: "╜",
	bottomLeft: "╙",
	vertical: "║",
	horizontal: "─"
};
var doubleSingle = {
	topLeft: "╒",
	topRight: "╕",
	bottomRight: "╛",
	bottomLeft: "╘",
	vertical: "│",
	horizontal: "═"
};
var classic = {
	topLeft: "+",
	topRight: "+",
	bottomRight: "+",
	bottomLeft: "+",
	vertical: "|",
	horizontal: "-"
};
var require$$0 = {
	single: single,
	double: double,
	round: round,
	bold: bold,
	singleDouble: singleDouble,
	doubleSingle: doubleSingle,
	classic: classic
};

const cliBoxes = require$$0;

cliBoxes$1.exports = cliBoxes;
// TODO: Remove this for the next major release
cliBoxes$1.exports.default = cliBoxes;

var colorize = {};

var __importDefault$j = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(colorize, "__esModule", { value: true });
const chalk_1$1 = __importDefault$j(chalk);
const RGB_LIKE_REGEX = /^(rgb|hsl|hsv|hwb)\(\s?(\d+),\s?(\d+),\s?(\d+)\s?\)$/;
const ANSI_REGEX = /^(ansi|ansi256)\(\s?(\d+)\s?\)$/;
const getMethod$1 = (name, type) => {
    if (type === 'foreground') {
        return name;
    }
    return 'bg' + name[0].toUpperCase() + name.slice(1);
};
colorize.default = (str, color, type) => {
    if (!color) {
        return str;
    }
    if (color in chalk_1$1.default) {
        const method = getMethod$1(color, type);
        return chalk_1$1.default[method](str);
    }
    if (color.startsWith('#')) {
        const method = getMethod$1('hex', type);
        return chalk_1$1.default[method](color)(str);
    }
    if (color.startsWith('ansi')) {
        const matches = ANSI_REGEX.exec(color);
        if (!matches) {
            return str;
        }
        const method = getMethod$1(matches[1], type);
        const value = Number(matches[2]);
        return chalk_1$1.default[method](value)(str);
    }
    const isRgbLike = color.startsWith('rgb') ||
        color.startsWith('hsl') ||
        color.startsWith('hsv') ||
        color.startsWith('hwb');
    if (isRgbLike) {
        const matches = RGB_LIKE_REGEX.exec(color);
        if (!matches) {
            return str;
        }
        const method = getMethod$1(matches[1], type);
        const firstValue = Number(matches[2]);
        const secondValue = Number(matches[3]);
        const thirdValue = Number(matches[4]);
        return chalk_1$1.default[method](firstValue, secondValue, thirdValue)(str);
    }
    return str;
};

var __importDefault$i = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(renderBorder, "__esModule", { value: true });
const cli_boxes_1 = __importDefault$i(cliBoxes$1.exports);
const colorize_1$1 = __importDefault$i(colorize);
renderBorder.default = (x, y, node, output) => {
    if (typeof node.style.borderStyle === 'string') {
        const width = node.yogaNode.getComputedWidth();
        const height = node.yogaNode.getComputedHeight();
        const color = node.style.borderColor;
        const box = cli_boxes_1.default[node.style.borderStyle];
        const topBorder = colorize_1$1.default(box.topLeft + box.horizontal.repeat(width - 2) + box.topRight, color, 'foreground');
        const verticalBorder = (colorize_1$1.default(box.vertical, color, 'foreground') + '\n').repeat(height - 2);
        const bottomBorder = colorize_1$1.default(box.bottomLeft + box.horizontal.repeat(width - 2) + box.bottomRight, color, 'foreground');
        output.write(x, y, topBorder, { transformers: [] });
        output.write(x, y + 1, verticalBorder, { transformers: [] });
        output.write(x + width - 1, y + 1, verticalBorder, { transformers: [] });
        output.write(x, y + height - 1, bottomBorder, { transformers: [] });
    }
};

var __importDefault$h = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(renderNodeToOutput$1, "__esModule", { value: true });
const yoga_layout_prebuilt_1$1 = __importDefault$h(require$$0$4);
const widest_line_1 = __importDefault$h(widestLine$1.exports);
const indent_string_1 = __importDefault$h(indentString);
const wrap_text_1 = __importDefault$h(wrapText);
const get_max_width_1 = __importDefault$h(getMaxWidth);
const squash_text_nodes_1 = __importDefault$h(squashTextNodes$1);
const render_border_1 = __importDefault$h(renderBorder);
// If parent container is `<Box>`, text nodes will be treated as separate nodes in
// the tree and will have their own coordinates in the layout.
// To ensure text nodes are aligned correctly, take X and Y of the first text node
// and use it as offset for the rest of the nodes
// Only first node is taken into account, because other text nodes can't have margin or padding,
// so their coordinates will be relative to the first node anyway
const applyPaddingToText = (node, text) => {
    var _a;
    const yogaNode = (_a = node.childNodes[0]) === null || _a === void 0 ? void 0 : _a.yogaNode;
    if (yogaNode) {
        const offsetX = yogaNode.getComputedLeft();
        const offsetY = yogaNode.getComputedTop();
        text = '\n'.repeat(offsetY) + indent_string_1.default(text, offsetX);
    }
    return text;
};
// After nodes are laid out, render each to output object, which later gets rendered to terminal
const renderNodeToOutput = (node, output, options) => {
    var _a;
    const { offsetX = 0, offsetY = 0, transformers = [], skipStaticElements } = options;
    if (skipStaticElements && node.internal_static) {
        return;
    }
    const { yogaNode } = node;
    if (yogaNode) {
        if (yogaNode.getDisplay() === yoga_layout_prebuilt_1$1.default.DISPLAY_NONE) {
            return;
        }
        // Left and top positions in Yoga are relative to their parent node
        const x = offsetX + yogaNode.getComputedLeft();
        const y = offsetY + yogaNode.getComputedTop();
        // Transformers are functions that transform final text output of each component
        // See Output class for logic that applies transformers
        let newTransformers = transformers;
        if (typeof node.internal_transform === 'function') {
            newTransformers = [node.internal_transform, ...transformers];
        }
        if (node.nodeName === 'ink-text') {
            let text = squash_text_nodes_1.default(node);
            if (text.length > 0) {
                const currentWidth = widest_line_1.default(text);
                const maxWidth = get_max_width_1.default(yogaNode);
                if (currentWidth > maxWidth) {
                    const textWrap = (_a = node.style.textWrap) !== null && _a !== void 0 ? _a : 'wrap';
                    text = wrap_text_1.default(text, maxWidth, textWrap);
                }
                text = applyPaddingToText(node, text);
                output.write(x, y, text, { transformers: newTransformers });
            }
            return;
        }
        if (node.nodeName === 'ink-box') {
            render_border_1.default(x, y, node, output);
        }
        if (node.nodeName === 'ink-root' || node.nodeName === 'ink-box') {
            for (const childNode of node.childNodes) {
                renderNodeToOutput(childNode, output, {
                    offsetX: x,
                    offsetY: y,
                    transformers: newTransformers,
                    skipStaticElements
                });
            }
        }
    }
};
renderNodeToOutput$1.default = renderNodeToOutput;

var output = {};

var __importDefault$g = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(output, "__esModule", { value: true });
const slice_ansi_1 = __importDefault$g(sliceAnsi$1);
const string_width_1 = __importDefault$g(stringWidth$4.exports);
class Output {
    constructor(options) {
        // Initialize output array with a specific set of rows, so that margin/padding at the bottom is preserved
        this.writes = [];
        const { width, height } = options;
        this.width = width;
        this.height = height;
    }
    write(x, y, text, options) {
        const { transformers } = options;
        if (!text) {
            return;
        }
        this.writes.push({ x, y, text, transformers });
    }
    get() {
        const output = [];
        for (let y = 0; y < this.height; y++) {
            output.push(' '.repeat(this.width));
        }
        for (const write of this.writes) {
            const { x, y, text, transformers } = write;
            const lines = text.split('\n');
            let offsetY = 0;
            for (let line of lines) {
                const currentLine = output[y + offsetY];
                // Line can be missing if `text` is taller than height of pre-initialized `this.output`
                if (!currentLine) {
                    continue;
                }
                const width = string_width_1.default(line);
                for (const transformer of transformers) {
                    line = transformer(line);
                }
                output[y + offsetY] =
                    slice_ansi_1.default(currentLine, 0, x) +
                        line +
                        slice_ansi_1.default(currentLine, x + width);
                offsetY++;
            }
        }
        // eslint-disable-next-line unicorn/prefer-trim-start-end
        const generatedOutput = output.map(line => line.trimRight()).join('\n');
        return {
            output: generatedOutput,
            height: output.length
        };
    }
}
output.default = Output;

var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(renderer, "__esModule", { value: true });
const yoga_layout_prebuilt_1 = __importDefault$f(require$$0$4);
const render_node_to_output_1 = __importDefault$f(renderNodeToOutput$1);
const output_1 = __importDefault$f(output);
renderer.default = (node, terminalWidth) => {
    var _a;
    node.yogaNode.setWidth(terminalWidth);
    if (node.yogaNode) {
        node.yogaNode.calculateLayout(undefined, undefined, yoga_layout_prebuilt_1.default.DIRECTION_LTR);
        const output = new output_1.default({
            width: node.yogaNode.getComputedWidth(),
            height: node.yogaNode.getComputedHeight()
        });
        render_node_to_output_1.default(node, output, { skipStaticElements: true });
        let staticOutput;
        if ((_a = node.staticNode) === null || _a === void 0 ? void 0 : _a.yogaNode) {
            staticOutput = new output_1.default({
                width: node.staticNode.yogaNode.getComputedWidth(),
                height: node.staticNode.yogaNode.getComputedHeight()
            });
            render_node_to_output_1.default(node.staticNode, staticOutput, {
                skipStaticElements: false
            });
        }
        const { output: generatedOutput, height: outputHeight } = output.get();
        return {
            output: generatedOutput,
            outputHeight,
            // Newline at the end is needed, because static output doesn't have one, so
            // interactive output will override last line of static output
            staticOutput: staticOutput ? `${staticOutput.get().output}\n` : ''
        };
    }
    return {
        output: '',
        outputHeight: 0,
        staticOutput: ''
    };
};

const stream_1$1 = require$$0$6;
const CONSOLE_METHODS = [
    'assert',
    'count',
    'countReset',
    'debug',
    'dir',
    'dirxml',
    'error',
    'group',
    'groupCollapsed',
    'groupEnd',
    'info',
    'log',
    'table',
    'time',
    'timeEnd',
    'timeLog',
    'trace',
    'warn'
];
let originalMethods = {};
const patchConsole = (callback) => {
    const stdout = new stream_1$1.PassThrough();
    const stderr = new stream_1$1.PassThrough();
    stdout.write = (data) => callback('stdout', data);
    stderr.write = (data) => callback('stderr', data);
    const internalConsole = new console.Console(stdout, stderr);
    for (const method of CONSOLE_METHODS) {
        originalMethods[method] = console[method];
        console[method] = internalConsole[method];
    }
    return () => {
        for (const method of CONSOLE_METHODS) {
            console[method] = originalMethods[method];
        }
        originalMethods = {};
    };
};
var build = patchConsole;

var instances = {};

Object.defineProperty(instances, "__esModule", { value: true });
// Store all instances of Ink (instance.js) to ensure that consecutive render() calls
// use the same instance of Ink and don't create a new one
//
// This map has to be stored in a separate file, because render.js creates instances,
// but instance.js should delete itself from the map on unmount
instances.default = new WeakMap();

var App$2 = {};

var AppContext$1 = {};

Object.defineProperty(AppContext$1, "__esModule", { value: true });
const react_1$k = react.exports;
/**
 * `AppContext` is a React context, which exposes a method to manually exit the app (unmount).
 */
const AppContext = react_1$k.createContext({
    exit: () => { }
});
AppContext.displayName = 'InternalAppContext';
AppContext$1.default = AppContext;

var StdinContext$1 = {};

Object.defineProperty(StdinContext$1, "__esModule", { value: true });
const react_1$j = react.exports;
/**
 * `StdinContext` is a React context, which exposes input stream.
 */
const StdinContext = react_1$j.createContext({
    stdin: undefined,
    setRawMode: () => { },
    isRawModeSupported: false,
    internal_exitOnCtrlC: true
});
StdinContext.displayName = 'InternalStdinContext';
StdinContext$1.default = StdinContext;

var StdoutContext$1 = {};

Object.defineProperty(StdoutContext$1, "__esModule", { value: true });
const react_1$i = react.exports;
/**
 * `StdoutContext` is a React context, which exposes stdout stream, where Ink renders your app.
 */
const StdoutContext = react_1$i.createContext({
    stdout: undefined,
    write: () => { }
});
StdoutContext.displayName = 'InternalStdoutContext';
StdoutContext$1.default = StdoutContext;

var StderrContext$1 = {};

Object.defineProperty(StderrContext$1, "__esModule", { value: true });
const react_1$h = react.exports;
/**
 * `StderrContext` is a React context, which exposes stderr stream.
 */
const StderrContext = react_1$h.createContext({
    stderr: undefined,
    write: () => { }
});
StderrContext.displayName = 'InternalStderrContext';
StderrContext$1.default = StderrContext;

var FocusContext$1 = {};

Object.defineProperty(FocusContext$1, "__esModule", { value: true });
const react_1$g = react.exports;
const FocusContext = react_1$g.createContext({
    activeId: undefined,
    add: () => { },
    remove: () => { },
    activate: () => { },
    deactivate: () => { },
    enableFocus: () => { },
    disableFocus: () => { },
    focusNext: () => { },
    focusPrevious: () => { },
    focus: () => { }
});
FocusContext.displayName = 'InternalFocusContext';
FocusContext$1.default = FocusContext;

var ErrorOverview$1 = {};

const matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;

var escapeStringRegexp$1 = string => {
	if (typeof string !== 'string') {
		throw new TypeError('Expected a string');
	}

	return string.replace(matchOperatorsRegex, '\\$&');
};

const escapeStringRegexp = escapeStringRegexp$1;

const cwd = typeof process === 'object' && process && typeof process.cwd === 'function'
  ? process.cwd()
  : '.';

const natives = [].concat(
  require$$1$1.builtinModules,
  'bootstrap_node',
  'node',
).map(n => new RegExp(`(?:\\((?:node:)?${n}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n}(?:\\.js)?:\\d+:\\d+$)`));

natives.push(
  /\((?:node:)?internal\/[^:]+:\d+:\d+\)$/,
  /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/,
  /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/
);

class StackUtils {
  constructor (opts) {
    opts = {
      ignoredPackages: [],
      ...opts
    };

    if ('internals' in opts === false) {
      opts.internals = StackUtils.nodeInternals();
    }

    if ('cwd' in opts === false) {
      opts.cwd = cwd;
    }

    this._cwd = opts.cwd.replace(/\\/g, '/');
    this._internals = [].concat(
      opts.internals,
      ignoredPackagesRegExp(opts.ignoredPackages)
    );

    this._wrapCallSite = opts.wrapCallSite || false;
  }

  static nodeInternals () {
    return [...natives];
  }

  clean (stack, indent = 0) {
    indent = ' '.repeat(indent);

    if (!Array.isArray(stack)) {
      stack = stack.split('\n');
    }

    if (!(/^\s*at /.test(stack[0])) && (/^\s*at /.test(stack[1]))) {
      stack = stack.slice(1);
    }

    let outdent = false;
    let lastNonAtLine = null;
    const result = [];

    stack.forEach(st => {
      st = st.replace(/\\/g, '/');

      if (this._internals.some(internal => internal.test(st))) {
        return;
      }

      const isAtLine = /^\s*at /.test(st);

      if (outdent) {
        st = st.trimEnd().replace(/^(\s+)at /, '$1');
      } else {
        st = st.trim();
        if (isAtLine) {
          st = st.slice(3);
        }
      }

      st = st.replace(`${this._cwd}/`, '');

      if (st) {
        if (isAtLine) {
          if (lastNonAtLine) {
            result.push(lastNonAtLine);
            lastNonAtLine = null;
          }

          result.push(st);
        } else {
          outdent = true;
          lastNonAtLine = st;
        }
      }
    });

    return result.map(line => `${indent}${line}\n`).join('');
  }

  captureString (limit, fn = this.captureString) {
    if (typeof limit === 'function') {
      fn = limit;
      limit = Infinity;
    }

    const {stackTraceLimit} = Error;
    if (limit) {
      Error.stackTraceLimit = limit;
    }

    const obj = {};

    Error.captureStackTrace(obj, fn);
    const {stack} = obj;
    Error.stackTraceLimit = stackTraceLimit;

    return this.clean(stack);
  }

  capture (limit, fn = this.capture) {
    if (typeof limit === 'function') {
      fn = limit;
      limit = Infinity;
    }

    const {prepareStackTrace, stackTraceLimit} = Error;
    Error.prepareStackTrace = (obj, site) => {
      if (this._wrapCallSite) {
        return site.map(this._wrapCallSite);
      }

      return site;
    };

    if (limit) {
      Error.stackTraceLimit = limit;
    }

    const obj = {};
    Error.captureStackTrace(obj, fn);
    const { stack } = obj;
    Object.assign(Error, {prepareStackTrace, stackTraceLimit});

    return stack;
  }

  at (fn = this.at) {
    const [site] = this.capture(1, fn);

    if (!site) {
      return {};
    }

    const res = {
      line: site.getLineNumber(),
      column: site.getColumnNumber()
    };

    setFile(res, site.getFileName(), this._cwd);

    if (site.isConstructor()) {
      res.constructor = true;
    }

    if (site.isEval()) {
      res.evalOrigin = site.getEvalOrigin();
    }

    // Node v10 stopped with the isNative() on callsites, apparently
    /* istanbul ignore next */
    if (site.isNative()) {
      res.native = true;
    }

    let typename;
    try {
      typename = site.getTypeName();
    } catch (_) {
    }

    if (typename && typename !== 'Object' && typename !== '[object Object]') {
      res.type = typename;
    }

    const fname = site.getFunctionName();
    if (fname) {
      res.function = fname;
    }

    const meth = site.getMethodName();
    if (meth && fname !== meth) {
      res.method = meth;
    }

    return res;
  }

  parseLine (line) {
    const match = line && line.match(re);
    if (!match) {
      return null;
    }

    const ctor = match[1] === 'new';
    let fname = match[2];
    const evalOrigin = match[3];
    const evalFile = match[4];
    const evalLine = Number(match[5]);
    const evalCol = Number(match[6]);
    let file = match[7];
    const lnum = match[8];
    const col = match[9];
    const native = match[10] === 'native';
    const closeParen = match[11] === ')';
    let method;

    const res = {};

    if (lnum) {
      res.line = Number(lnum);
    }

    if (col) {
      res.column = Number(col);
    }

    if (closeParen && file) {
      // make sure parens are balanced
      // if we have a file like "asdf) [as foo] (xyz.js", then odds are
      // that the fname should be += " (asdf) [as foo]" and the file
      // should be just "xyz.js"
      // walk backwards from the end to find the last unbalanced (
      let closes = 0;
      for (let i = file.length - 1; i > 0; i--) {
        if (file.charAt(i) === ')') {
          closes++;
        } else if (file.charAt(i) === '(' && file.charAt(i - 1) === ' ') {
          closes--;
          if (closes === -1 && file.charAt(i - 1) === ' ') {
            const before = file.slice(0, i - 1);
            const after = file.slice(i + 1);
            file = after;
            fname += ` (${before}`;
            break;
          }
        }
      }
    }

    if (fname) {
      const methodMatch = fname.match(methodRe);
      if (methodMatch) {
        fname = methodMatch[1];
        method = methodMatch[2];
      }
    }

    setFile(res, file, this._cwd);

    if (ctor) {
      res.constructor = true;
    }

    if (evalOrigin) {
      res.evalOrigin = evalOrigin;
      res.evalLine = evalLine;
      res.evalColumn = evalCol;
      res.evalFile = evalFile && evalFile.replace(/\\/g, '/');
    }

    if (native) {
      res.native = true;
    }

    if (fname) {
      res.function = fname;
    }

    if (method && fname !== method) {
      res.method = method;
    }

    return res;
  }
}

function setFile (result, filename, cwd) {
  if (filename) {
    filename = filename.replace(/\\/g, '/');
    if (filename.startsWith(`${cwd}/`)) {
      filename = filename.slice(cwd.length + 1);
    }

    result.file = filename;
  }
}

function ignoredPackagesRegExp(ignoredPackages) {
  if (ignoredPackages.length === 0) {
    return [];
  }

  const packages = ignoredPackages.map(mod => escapeStringRegexp(mod));

  return new RegExp(`[\/\\\\]node_modules[\/\\\\](?:${packages.join('|')})[\/\\\\][^:]+:\\d+:\\d+`)
}

const re = new RegExp(
  '^' +
    // Sometimes we strip out the '    at' because it's noisy
  '(?:\\s*at )?' +
    // $1 = ctor if 'new'
  '(?:(new) )?' +
    // $2 = function name (can be literally anything)
    // May contain method at the end as [as xyz]
  '(?:(.*?) \\()?' +
    // (eval at <anonymous> (file.js:1:1),
    // $3 = eval origin
    // $4:$5:$6 are eval file/line/col, but not normally reported
  '(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?' +
    // file:line:col
    // $7:$8:$9
    // $10 = 'native' if native
  '(?:(.+?):(\\d+):(\\d+)|(native))' +
    // maybe close the paren, then end
    // if $11 is ), then we only allow balanced parens in the filename
    // any imbalance is placed on the fname.  This is a heuristic, and
    // bound to be incorrect in some edge cases.  The bet is that
    // having weird characters in method names is more common than
    // having weird characters in filenames, which seems reasonable.
  '(\\)?)$'
);

const methodRe = /^(.*?) \[as (.*?)\]$/;

var stackUtils$1 = StackUtils;

var convertToSpaces = (str, spaces) => {
	return str.replace(/^\t+/gm, $1 => ' '.repeat($1.length * (spaces || 2)));
};

const tabsToSpaces = convertToSpaces;

const generateLineNumbers = (line, around) => {
	const lineNumbers = [];

	const min = line - around;
	const max = line + around;

	for (let lineNumber = min; lineNumber <= max; lineNumber++) {
		lineNumbers.push(lineNumber);
	}

	return lineNumbers;
};

var codeExcerpt = (source, line, options) => {
	if (typeof source !== 'string') {
		throw new TypeError('Source code is missing.');
	}

	if (!line || line < 1) {
		throw new TypeError('Line number must start from `1`.');
	}

	source = tabsToSpaces(source).split(/\r?\n/);

	if (line > source.length) {
		return;
	}

	options = {
		around: 3,
		...options
	};

	return generateLineNumbers(line, options.around)
		.filter(line => source[line - 1] !== undefined)
		.map(line => ({line, value: source[line - 1]}));
};

var Box$1 = {};

var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
    __setModuleDefault$4(result, mod);
    return result;
};
var __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(Box$1, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
const react_1$f = __importStar$4(react.exports);
/**
 * `<Box>` is an essential Ink component to build your layout. It's like `<div style="display: flex">` in the browser.
 */
const Box = react_1$f.forwardRef((_a, ref) => {
    var { children } = _a, style = __rest(_a, ["children"]);
    const transformedStyle = Object.assign(Object.assign({}, style), { marginLeft: style.marginLeft || style.marginX || style.margin || 0, marginRight: style.marginRight || style.marginX || style.margin || 0, marginTop: style.marginTop || style.marginY || style.margin || 0, marginBottom: style.marginBottom || style.marginY || style.margin || 0, paddingLeft: style.paddingLeft || style.paddingX || style.padding || 0, paddingRight: style.paddingRight || style.paddingX || style.padding || 0, paddingTop: style.paddingTop || style.paddingY || style.padding || 0, paddingBottom: style.paddingBottom || style.paddingY || style.padding || 0 });
    return (react_1$f.default.createElement("ink-box", { ref: ref, style: transformedStyle }, children));
});
Box.displayName = 'Box';
Box.defaultProps = {
    flexDirection: 'row',
    flexGrow: 0,
    flexShrink: 1
};
Box$1.default = Box;

var Text$1 = {};

var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(Text$1, "__esModule", { value: true });
const react_1$e = __importDefault$e(react.exports);
const chalk_1 = __importDefault$e(chalk);
const colorize_1 = __importDefault$e(colorize);
/**
 * This component can display text, and change its style to make it colorful, bold, underline, italic or strikethrough.
 */
const Text = ({ color, backgroundColor, dimColor, bold, italic, underline, strikethrough, inverse, wrap, children }) => {
    if (children === undefined || children === null) {
        return null;
    }
    const transform = (children) => {
        if (dimColor) {
            children = chalk_1.default.dim(children);
        }
        if (color) {
            children = colorize_1.default(children, color, 'foreground');
        }
        if (backgroundColor) {
            children = colorize_1.default(children, backgroundColor, 'background');
        }
        if (bold) {
            children = chalk_1.default.bold(children);
        }
        if (italic) {
            children = chalk_1.default.italic(children);
        }
        if (underline) {
            children = chalk_1.default.underline(children);
        }
        if (strikethrough) {
            children = chalk_1.default.strikethrough(children);
        }
        if (inverse) {
            children = chalk_1.default.inverse(children);
        }
        return children;
    };
    return (react_1$e.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: 'row', textWrap: wrap }, internal_transform: transform }, children));
};
Text.displayName = 'Text';
Text.defaultProps = {
    dimColor: false,
    bold: false,
    italic: false,
    underline: false,
    strikethrough: false,
    wrap: 'wrap'
};
Text$1.default = Text;

var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
    __setModuleDefault$3(result, mod);
    return result;
};
var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(ErrorOverview$1, "__esModule", { value: true });
const fs = __importStar$3(require$$0$7);
const react_1$d = __importDefault$d(react.exports);
const stack_utils_1 = __importDefault$d(stackUtils$1);
const code_excerpt_1 = __importDefault$d(codeExcerpt);
const Box_1$1 = __importDefault$d(Box$1);
const Text_1 = __importDefault$d(Text$1);
const stackUtils = new stack_utils_1.default({
    cwd: process.cwd(),
    internals: stack_utils_1.default.nodeInternals()
});
const ErrorOverview = ({ error }) => {
    const stack = error.stack ? error.stack.split('\n').slice(1) : undefined;
    const origin = stack ? stackUtils.parseLine(stack[0]) : undefined;
    let excerpt;
    let lineWidth = 0;
    if ((origin === null || origin === void 0 ? void 0 : origin.file) && (origin === null || origin === void 0 ? void 0 : origin.line) && fs.existsSync(origin.file)) {
        const sourceCode = fs.readFileSync(origin.file, 'utf8');
        excerpt = code_excerpt_1.default(sourceCode, origin.line);
        if (excerpt) {
            for (const { line } of excerpt) {
                lineWidth = Math.max(lineWidth, String(line).length);
            }
        }
    }
    return (react_1$d.default.createElement(Box_1$1.default, { flexDirection: "column", padding: 1 },
        react_1$d.default.createElement(Box_1$1.default, null,
            react_1$d.default.createElement(Text_1.default, { backgroundColor: "red", color: "white" },
                ' ',
                "ERROR",
                ' '),
            react_1$d.default.createElement(Text_1.default, null,
                " ",
                error.message)),
        origin && (react_1$d.default.createElement(Box_1$1.default, { marginTop: 1 },
            react_1$d.default.createElement(Text_1.default, { dimColor: true },
                origin.file,
                ":",
                origin.line,
                ":",
                origin.column))),
        origin && excerpt && (react_1$d.default.createElement(Box_1$1.default, { marginTop: 1, flexDirection: "column" }, excerpt.map(({ line, value }) => (react_1$d.default.createElement(Box_1$1.default, { key: line },
            react_1$d.default.createElement(Box_1$1.default, { width: lineWidth + 1 },
                react_1$d.default.createElement(Text_1.default, { dimColor: line !== origin.line, backgroundColor: line === origin.line ? 'red' : undefined, color: line === origin.line ? 'white' : undefined },
                    String(line).padStart(lineWidth, ' '),
                    ":")),
            react_1$d.default.createElement(Text_1.default, { key: line, backgroundColor: line === origin.line ? 'red' : undefined, color: line === origin.line ? 'white' : undefined }, ' ' + value)))))),
        error.stack && (react_1$d.default.createElement(Box_1$1.default, { marginTop: 1, flexDirection: "column" }, error.stack
            .split('\n')
            .slice(1)
            .map(line => {
            const parsedLine = stackUtils.parseLine(line);
            // If the line from the stack cannot be parsed, we print out the unparsed line.
            if (!parsedLine) {
                return (react_1$d.default.createElement(Box_1$1.default, { key: line },
                    react_1$d.default.createElement(Text_1.default, { dimColor: true }, "- "),
                    react_1$d.default.createElement(Text_1.default, { dimColor: true, bold: true }, line)));
            }
            return (react_1$d.default.createElement(Box_1$1.default, { key: line },
                react_1$d.default.createElement(Text_1.default, { dimColor: true }, "- "),
                react_1$d.default.createElement(Text_1.default, { dimColor: true, bold: true }, parsedLine.function),
                react_1$d.default.createElement(Text_1.default, { dimColor: true, color: "gray" },
                    ' ',
                    "(",
                    parsedLine.file,
                    ":",
                    parsedLine.line,
                    ":",
                    parsedLine.column,
                    ")")));
        })))));
};
ErrorOverview$1.default = ErrorOverview;

var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
    __setModuleDefault$2(result, mod);
    return result;
};
var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(App$2, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
const react_1$c = __importStar$2(react.exports);
const cli_cursor_1 = __importDefault$c(cliCursor);
const AppContext_1$1 = __importDefault$c(AppContext$1);
const StdinContext_1$1 = __importDefault$c(StdinContext$1);
const StdoutContext_1$1 = __importDefault$c(StdoutContext$1);
const StderrContext_1$1 = __importDefault$c(StderrContext$1);
const FocusContext_1$2 = __importDefault$c(FocusContext$1);
const ErrorOverview_1 = __importDefault$c(ErrorOverview$1);
const TAB = '\t';
const SHIFT_TAB = '\u001B[Z';
const ESC = '\u001B';
// Root component for all Ink apps
// It renders stdin and stdout contexts, so that children can access them if needed
// It also handles Ctrl+C exiting and cursor visibility
class App$1 extends react_1$c.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isFocusEnabled: true,
            activeFocusId: undefined,
            focusables: [],
            error: undefined
        };
        // Count how many components enabled raw mode to avoid disabling
        // raw mode until all components don't need it anymore
        this.rawModeEnabledCount = 0;
        this.handleSetRawMode = (isEnabled) => {
            const { stdin } = this.props;
            if (!this.isRawModeSupported()) {
                if (stdin === process.stdin) {
                    throw new Error('Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported');
                }
                else {
                    throw new Error('Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported');
                }
            }
            stdin.setEncoding('utf8');
            if (isEnabled) {
                // Ensure raw mode is enabled only once
                if (this.rawModeEnabledCount === 0) {
                    stdin.addListener('data', this.handleInput);
                    stdin.resume();
                    stdin.setRawMode(true);
                }
                this.rawModeEnabledCount++;
                return;
            }
            // Disable raw mode only when no components left that are using it
            if (--this.rawModeEnabledCount === 0) {
                stdin.setRawMode(false);
                stdin.removeListener('data', this.handleInput);
                stdin.pause();
            }
        };
        this.handleInput = (input) => {
            // Exit on Ctrl+C
            // eslint-disable-next-line unicorn/no-hex-escape
            if (input === '\x03' && this.props.exitOnCtrlC) {
                this.handleExit();
            }
            // Reset focus when there's an active focused component on Esc
            if (input === ESC && this.state.activeFocusId) {
                this.setState({
                    activeFocusId: undefined
                });
            }
            if (this.state.isFocusEnabled && this.state.focusables.length > 0) {
                if (input === TAB) {
                    this.focusNext();
                }
                if (input === SHIFT_TAB) {
                    this.focusPrevious();
                }
            }
        };
        this.handleExit = (error) => {
            if (this.isRawModeSupported()) {
                this.handleSetRawMode(false);
            }
            this.props.onExit(error);
        };
        this.enableFocus = () => {
            this.setState({
                isFocusEnabled: true
            });
        };
        this.disableFocus = () => {
            this.setState({
                isFocusEnabled: false
            });
        };
        this.focus = (id) => {
            this.setState(previousState => {
                const hasFocusableId = previousState.focusables.some(focusable => (focusable === null || focusable === void 0 ? void 0 : focusable.id) === id);
                if (!hasFocusableId) {
                    return previousState;
                }
                return { activeFocusId: id };
            });
        };
        this.focusNext = () => {
            this.setState(previousState => {
                var _a;
                const firstFocusableId = (_a = previousState.focusables[0]) === null || _a === void 0 ? void 0 : _a.id;
                const nextFocusableId = this.findNextFocusable(previousState);
                return {
                    activeFocusId: nextFocusableId || firstFocusableId
                };
            });
        };
        this.focusPrevious = () => {
            this.setState(previousState => {
                var _a;
                const lastFocusableId = (_a = previousState.focusables[previousState.focusables.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
                const previousFocusableId = this.findPreviousFocusable(previousState);
                return {
                    activeFocusId: previousFocusableId || lastFocusableId
                };
            });
        };
        this.addFocusable = (id, { autoFocus }) => {
            this.setState(previousState => {
                let nextFocusId = previousState.activeFocusId;
                if (!nextFocusId && autoFocus) {
                    nextFocusId = id;
                }
                return {
                    activeFocusId: nextFocusId,
                    focusables: [
                        ...previousState.focusables,
                        {
                            id,
                            isActive: true
                        }
                    ]
                };
            });
        };
        this.removeFocusable = (id) => {
            this.setState(previousState => ({
                activeFocusId: previousState.activeFocusId === id
                    ? undefined
                    : previousState.activeFocusId,
                focusables: previousState.focusables.filter(focusable => {
                    return focusable.id !== id;
                })
            }));
        };
        this.activateFocusable = (id) => {
            this.setState(previousState => ({
                focusables: previousState.focusables.map(focusable => {
                    if (focusable.id !== id) {
                        return focusable;
                    }
                    return {
                        id,
                        isActive: true
                    };
                })
            }));
        };
        this.deactivateFocusable = (id) => {
            this.setState(previousState => ({
                activeFocusId: previousState.activeFocusId === id
                    ? undefined
                    : previousState.activeFocusId,
                focusables: previousState.focusables.map(focusable => {
                    if (focusable.id !== id) {
                        return focusable;
                    }
                    return {
                        id,
                        isActive: false
                    };
                })
            }));
        };
        this.findNextFocusable = (state) => {
            var _a;
            const activeIndex = state.focusables.findIndex(focusable => {
                return focusable.id === state.activeFocusId;
            });
            for (let index = activeIndex + 1; index < state.focusables.length; index++) {
                if ((_a = state.focusables[index]) === null || _a === void 0 ? void 0 : _a.isActive) {
                    return state.focusables[index].id;
                }
            }
            return undefined;
        };
        this.findPreviousFocusable = (state) => {
            var _a;
            const activeIndex = state.focusables.findIndex(focusable => {
                return focusable.id === state.activeFocusId;
            });
            for (let index = activeIndex - 1; index >= 0; index--) {
                if ((_a = state.focusables[index]) === null || _a === void 0 ? void 0 : _a.isActive) {
                    return state.focusables[index].id;
                }
            }
            return undefined;
        };
    }
    static getDerivedStateFromError(error) {
        return { error };
    }
    // Determines if TTY is supported on the provided stdin
    isRawModeSupported() {
        return this.props.stdin.isTTY;
    }
    render() {
        return (react_1$c.default.createElement(AppContext_1$1.default.Provider, { value: {
                exit: this.handleExit
            } },
            react_1$c.default.createElement(StdinContext_1$1.default.Provider, { value: {
                    stdin: this.props.stdin,
                    setRawMode: this.handleSetRawMode,
                    isRawModeSupported: this.isRawModeSupported(),
                    internal_exitOnCtrlC: this.props.exitOnCtrlC
                } },
                react_1$c.default.createElement(StdoutContext_1$1.default.Provider, { value: {
                        stdout: this.props.stdout,
                        write: this.props.writeToStdout
                    } },
                    react_1$c.default.createElement(StderrContext_1$1.default.Provider, { value: {
                            stderr: this.props.stderr,
                            write: this.props.writeToStderr
                        } },
                        react_1$c.default.createElement(FocusContext_1$2.default.Provider, { value: {
                                activeId: this.state.activeFocusId,
                                add: this.addFocusable,
                                remove: this.removeFocusable,
                                activate: this.activateFocusable,
                                deactivate: this.deactivateFocusable,
                                enableFocus: this.enableFocus,
                                disableFocus: this.disableFocus,
                                focusNext: this.focusNext,
                                focusPrevious: this.focusPrevious,
                                focus: this.focus
                            } }, this.state.error ? (react_1$c.default.createElement(ErrorOverview_1.default, { error: this.state.error })) : (this.props.children)))))));
    }
    componentDidMount() {
        cli_cursor_1.default.hide(this.props.stdout);
    }
    componentWillUnmount() {
        cli_cursor_1.default.show(this.props.stdout);
        // ignore calling setRawMode on an handle stdin it cannot be called
        if (this.isRawModeSupported()) {
            this.handleSetRawMode(false);
        }
    }
    componentDidCatch(error) {
        this.handleExit(error);
    }
}
App$2.default = App$1;
App$1.displayName = 'InternalApp';

var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
    __setModuleDefault$1(result, mod);
    return result;
};
var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(ink, "__esModule", { value: true });
const react_1$b = __importDefault$b(react.exports);
const lodash_1 = lodash.exports;
const log_update_1 = __importDefault$b(logUpdate);
const ansi_escapes_1 = __importDefault$b(ansiEscapes.exports);
const is_ci_1 = __importDefault$b(isCi);
const auto_bind_1 = __importDefault$b(autoBind);
const reconciler_1 = __importDefault$b(reconciler);
const renderer_1 = __importDefault$b(renderer);
const signal_exit_1 = __importDefault$b(signalExit$1.exports);
const patch_console_1 = __importDefault$b(build);
const dom = __importStar$1(dom$1);
const instances_1$1 = __importDefault$b(instances);
const App_1 = __importDefault$b(App$2);
const isCI = process.env.CI === 'false' ? false : is_ci_1.default;
const noop = () => { };
class Ink {
    constructor(options) {
        this.resolveExitPromise = () => { };
        this.rejectExitPromise = () => { };
        this.unsubscribeExit = () => { };
        this.onRender = () => {
            if (this.isUnmounted) {
                return;
            }
            const { output, outputHeight, staticOutput } = renderer_1.default(this.rootNode, 
            // The 'columns' property can be undefined or 0 when not using a TTY.
            // In that case we fall back to 80.
            this.options.stdout.columns || 80);
            // If <Static> output isn't empty, it means new children have been added to it
            const hasStaticOutput = staticOutput && staticOutput !== '\n';
            if (this.options.debug) {
                if (hasStaticOutput) {
                    this.fullStaticOutput += staticOutput;
                }
                this.options.stdout.write(this.fullStaticOutput + output);
                return;
            }
            if (isCI) {
                if (hasStaticOutput) {
                    this.options.stdout.write(staticOutput);
                }
                this.lastOutput = output;
                return;
            }
            if (hasStaticOutput) {
                this.fullStaticOutput += staticOutput;
            }
            if (outputHeight >= this.options.stdout.rows) {
                this.options.stdout.write(ansi_escapes_1.default.clearTerminal + this.fullStaticOutput + output);
                this.lastOutput = output;
                return;
            }
            // To ensure static output is cleanly rendered before main output, clear main output first
            if (hasStaticOutput) {
                this.log.clear();
                this.options.stdout.write(staticOutput);
                this.log(output);
            }
            if (!hasStaticOutput && output !== this.lastOutput) {
                this.throttledLog(output);
            }
            this.lastOutput = output;
        };
        auto_bind_1.default(this);
        this.options = options;
        this.rootNode = dom.createNode('ink-root');
        this.rootNode.onRender = options.debug
            ? this.onRender
            : lodash_1.throttle(this.onRender, 32, {
                leading: true,
                trailing: true
            });
        this.rootNode.onImmediateRender = this.onRender;
        this.log = log_update_1.default.create(options.stdout);
        this.throttledLog = options.debug
            ? this.log
            : lodash_1.throttle(this.log, undefined, {
                leading: true,
                trailing: true
            });
        // Ignore last render after unmounting a tree to prevent empty output before exit
        this.isUnmounted = false;
        // Store last output to only rerender when needed
        this.lastOutput = '';
        // This variable is used only in debug mode to store full static output
        // so that it's rerendered every time, not just new static parts, like in non-debug mode
        this.fullStaticOutput = '';
        this.container = reconciler_1.default.createContainer(this.rootNode, 
        // Legacy mode
        0, false, null);
        // Unmount when process exits
        this.unsubscribeExit = signal_exit_1.default(this.unmount, { alwaysLast: false });
        if (process.env.DEV === 'true') {
            reconciler_1.default.injectIntoDevTools({
                bundleType: 0,
                // Reporting React DOM's version, not Ink's
                // See https://github.com/facebook/react/issues/16666#issuecomment-532639905
                version: '16.13.1',
                rendererPackageName: 'ink'
            });
        }
        if (options.patchConsole) {
            this.patchConsole();
        }
        if (!isCI) {
            options.stdout.on('resize', this.onRender);
            this.unsubscribeResize = () => {
                options.stdout.off('resize', this.onRender);
            };
        }
    }
    render(node) {
        const tree = (react_1$b.default.createElement(App_1.default, { stdin: this.options.stdin, stdout: this.options.stdout, stderr: this.options.stderr, writeToStdout: this.writeToStdout, writeToStderr: this.writeToStderr, exitOnCtrlC: this.options.exitOnCtrlC, onExit: this.unmount }, node));
        reconciler_1.default.updateContainer(tree, this.container, null, noop);
    }
    writeToStdout(data) {
        if (this.isUnmounted) {
            return;
        }
        if (this.options.debug) {
            this.options.stdout.write(data + this.fullStaticOutput + this.lastOutput);
            return;
        }
        if (isCI) {
            this.options.stdout.write(data);
            return;
        }
        this.log.clear();
        this.options.stdout.write(data);
        this.log(this.lastOutput);
    }
    writeToStderr(data) {
        if (this.isUnmounted) {
            return;
        }
        if (this.options.debug) {
            this.options.stderr.write(data);
            this.options.stdout.write(this.fullStaticOutput + this.lastOutput);
            return;
        }
        if (isCI) {
            this.options.stderr.write(data);
            return;
        }
        this.log.clear();
        this.options.stderr.write(data);
        this.log(this.lastOutput);
    }
    unmount(error) {
        if (this.isUnmounted) {
            return;
        }
        this.onRender();
        this.unsubscribeExit();
        if (typeof this.restoreConsole === 'function') {
            this.restoreConsole();
        }
        if (typeof this.unsubscribeResize === 'function') {
            this.unsubscribeResize();
        }
        // CIs don't handle erasing ansi escapes well, so it's better to
        // only render last frame of non-static output
        if (isCI) {
            this.options.stdout.write(this.lastOutput + '\n');
        }
        else if (!this.options.debug) {
            this.log.done();
        }
        this.isUnmounted = true;
        reconciler_1.default.updateContainer(null, this.container, null, noop);
        instances_1$1.default.delete(this.options.stdout);
        if (error instanceof Error) {
            this.rejectExitPromise(error);
        }
        else {
            this.resolveExitPromise();
        }
    }
    waitUntilExit() {
        if (!this.exitPromise) {
            this.exitPromise = new Promise((resolve, reject) => {
                this.resolveExitPromise = resolve;
                this.rejectExitPromise = reject;
            });
        }
        return this.exitPromise;
    }
    clear() {
        if (!isCI && !this.options.debug) {
            this.log.clear();
        }
    }
    patchConsole() {
        if (this.options.debug) {
            return;
        }
        this.restoreConsole = patch_console_1.default((stream, data) => {
            if (stream === 'stdout') {
                this.writeToStdout(data);
            }
            if (stream === 'stderr') {
                const isReactMessage = data.startsWith('The above error occurred');
                if (!isReactMessage) {
                    this.writeToStderr(data);
                }
            }
        });
    }
}
ink.default = Ink;

var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(render$1, "__esModule", { value: true });
const ink_1 = __importDefault$a(ink);
const instances_1 = __importDefault$a(instances);
const stream_1 = require$$0$6;
/**
 * Mount a component and render the output.
 */
const render = (node, options) => {
    const inkOptions = Object.assign({ stdout: process.stdout, stdin: process.stdin, stderr: process.stderr, debug: false, exitOnCtrlC: true, patchConsole: true }, getOptions(options));
    const instance = getInstance(inkOptions.stdout, () => new ink_1.default(inkOptions));
    instance.render(node);
    return {
        rerender: instance.render,
        unmount: () => instance.unmount(),
        waitUntilExit: instance.waitUntilExit,
        cleanup: () => instances_1.default.delete(inkOptions.stdout),
        clear: instance.clear
    };
};
render$1.default = render;
const getOptions = (stdout = {}) => {
    if (stdout instanceof stream_1.Stream) {
        return {
            stdout,
            stdin: process.stdin
        };
    }
    return stdout;
};
const getInstance = (stdout, createInstance) => {
    let instance;
    if (instances_1.default.has(stdout)) {
        instance = instances_1.default.get(stdout);
    }
    else {
        instance = createInstance();
        instances_1.default.set(stdout, instance);
    }
    return instance;
};

var Static$1 = {};

var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(Static$1, "__esModule", { value: true });
const react_1$a = __importStar(react.exports);
/**
 * `<Static>` component permanently renders its output above everything else.
 * It's useful for displaying activity like completed tasks or logs - things that
 * are not changing after they're rendered (hence the name "Static").
 *
 * It's preferred to use `<Static>` for use cases like these, when you can't know
 * or control the amount of items that need to be rendered.
 *
 * For example, [Tap](https://github.com/tapjs/node-tap) uses `<Static>` to display
 * a list of completed tests. [Gatsby](https://github.com/gatsbyjs/gatsby) uses it
 * to display a list of generated pages, while still displaying a live progress bar.
 */
const Static = (props) => {
    const { items, children: render, style: customStyle } = props;
    const [index, setIndex] = react_1$a.useState(0);
    const itemsToRender = react_1$a.useMemo(() => {
        return items.slice(index);
    }, [items, index]);
    react_1$a.useLayoutEffect(() => {
        setIndex(items.length);
    }, [items.length]);
    const children = itemsToRender.map((item, itemIndex) => {
        return render(item, index + itemIndex);
    });
    const style = react_1$a.useMemo(() => (Object.assign({ position: 'absolute', flexDirection: 'column' }, customStyle)), [customStyle]);
    return (react_1$a.default.createElement("ink-box", { 
        // @ts-ignore
        internal_static: true, style: style }, children));
};
Static.displayName = 'Static';
Static$1.default = Static;

var Transform$1 = {};

var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(Transform$1, "__esModule", { value: true });
const react_1$9 = __importDefault$9(react.exports);
/**
 * Transform a string representation of React components before they are written to output.
 * For example, you might want to apply a gradient to text, add a clickable link or create some text effects.
 * These use cases can't accept React nodes as input, they are expecting a string.
 * That's what <Transform> component does, it gives you an output string of its child components and lets you transform it in any way.
 */
const Transform = ({ children, transform }) => {
    if (children === undefined || children === null) {
        return null;
    }
    return (react_1$9.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: 'row' }, internal_transform: transform }, children));
};
Transform.displayName = 'Transform';
Transform$1.default = Transform;

var Newline$1 = {};

var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(Newline$1, "__esModule", { value: true });
const react_1$8 = __importDefault$8(react.exports);
/**
 * Adds one or more newline (\n) characters. Must be used within <Text> components.
 */
const Newline = ({ count = 1 }) => (react_1$8.default.createElement("ink-text", null, '\n'.repeat(count)));
Newline.displayName = 'Newline';
Newline$1.default = Newline;

var Spacer$1 = {};

var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(Spacer$1, "__esModule", { value: true });
const react_1$7 = __importDefault$7(react.exports);
const Box_1 = __importDefault$7(Box$1);
/**
 * A flexible space that expands along the major axis of its containing layout.
 * It's useful as a shortcut for filling all the available spaces between elements.
 */
const Spacer = () => react_1$7.default.createElement(Box_1.default, { flexGrow: 1 });
Spacer.displayName = 'Spacer';
Spacer$1.default = Spacer;

var useInput$1 = {};

var useStdin$1 = {};

var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useStdin$1, "__esModule", { value: true });
const react_1$6 = react.exports;
const StdinContext_1 = __importDefault$6(StdinContext$1);
/**
 * `useStdin` is a React hook, which exposes stdin stream.
 */
const useStdin = () => react_1$6.useContext(StdinContext_1.default);
useStdin$1.default = useStdin;

var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useInput$1, "__esModule", { value: true });
const react_1$5 = react.exports;
const use_stdin_1$1 = __importDefault$5(useStdin$1);
/**
 * This hook is used for handling user input.
 * It's a more convenient alternative to using `StdinContext` and listening to `data` events.
 * The callback you pass to `useInput` is called for each character when user enters any input.
 * However, if user pastes text and it's more than one character, the callback will be called only once and the whole string will be passed as `input`.
 *
 * ```
 * import {useInput} from 'ink';
 *
 * const UserInput = () => {
 *   useInput((input, key) => {
 *     if (input === 'q') {
 *       // Exit program
 *     }
 *
 *     if (key.leftArrow) {
 *       // Left arrow key pressed
 *     }
 *   });
 *
 *   return …
 * };
 * ```
 */
const useInput = (inputHandler, options = {}) => {
    const { stdin, setRawMode, internal_exitOnCtrlC } = use_stdin_1$1.default();
    react_1$5.useEffect(() => {
        if (options.isActive === false) {
            return;
        }
        setRawMode(true);
        return () => {
            setRawMode(false);
        };
    }, [options.isActive, setRawMode]);
    react_1$5.useEffect(() => {
        if (options.isActive === false) {
            return;
        }
        const handleData = (data) => {
            let input = String(data);
            const key = {
                upArrow: input === '\u001B[A',
                downArrow: input === '\u001B[B',
                leftArrow: input === '\u001B[D',
                rightArrow: input === '\u001B[C',
                pageDown: input === '\u001B[6~',
                pageUp: input === '\u001B[5~',
                return: input === '\r',
                escape: input === '\u001B',
                ctrl: false,
                shift: false,
                tab: input === '\t' || input === '\u001B[Z',
                backspace: input === '\u0008',
                delete: input === '\u007F' || input === '\u001B[3~',
                meta: false
            };
            // Copied from `keypress` module
            if (input <= '\u001A' && !key.return) {
                input = String.fromCharCode(input.charCodeAt(0) + 'a'.charCodeAt(0) - 1);
                key.ctrl = true;
            }
            if (input.startsWith('\u001B')) {
                input = input.slice(1);
                key.meta = true;
            }
            const isLatinUppercase = input >= 'A' && input <= 'Z';
            const isCyrillicUppercase = input >= 'А' && input <= 'Я';
            if (input.length === 1 && (isLatinUppercase || isCyrillicUppercase)) {
                key.shift = true;
            }
            // Shift+Tab
            if (key.tab && input === '[Z') {
                key.shift = true;
            }
            if (key.tab || key.backspace || key.delete) {
                input = '';
            }
            // If app is not supposed to exit on Ctrl+C, then let input listener handle it
            if (!(input === 'c' && key.ctrl) || !internal_exitOnCtrlC) {
                inputHandler(input, key);
            }
        };
        stdin === null || stdin === void 0 ? void 0 : stdin.on('data', handleData);
        return () => {
            stdin === null || stdin === void 0 ? void 0 : stdin.off('data', handleData);
        };
    }, [options.isActive, stdin, internal_exitOnCtrlC, inputHandler]);
};
useInput$1.default = useInput;

var useApp$1 = {};

var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useApp$1, "__esModule", { value: true });
const react_1$4 = react.exports;
const AppContext_1 = __importDefault$4(AppContext$1);
/**
 * `useApp` is a React hook, which exposes a method to manually exit the app (unmount).
 */
const useApp = () => react_1$4.useContext(AppContext_1.default);
useApp$1.default = useApp;

var useStdout$1 = {};

var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useStdout$1, "__esModule", { value: true });
const react_1$3 = react.exports;
const StdoutContext_1 = __importDefault$3(StdoutContext$1);
/**
 * `useStdout` is a React hook, which exposes stdout stream.
 */
const useStdout = () => react_1$3.useContext(StdoutContext_1.default);
useStdout$1.default = useStdout;

var useStderr$1 = {};

var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useStderr$1, "__esModule", { value: true });
const react_1$2 = react.exports;
const StderrContext_1 = __importDefault$2(StderrContext$1);
/**
 * `useStderr` is a React hook, which exposes stderr stream.
 */
const useStderr = () => react_1$2.useContext(StderrContext_1.default);
useStderr$1.default = useStderr;

var useFocus$1 = {};

var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useFocus$1, "__esModule", { value: true });
const react_1$1 = react.exports;
const FocusContext_1$1 = __importDefault$1(FocusContext$1);
const use_stdin_1 = __importDefault$1(useStdin$1);
/**
 * Component that uses `useFocus` hook becomes "focusable" to Ink,
 * so when user presses <kbd>Tab</kbd>, Ink will switch focus to this component.
 * If there are multiple components that execute `useFocus` hook, focus will be
 * given to them in the order that these components are rendered in.
 * This hook returns an object with `isFocused` boolean property, which
 * determines if this component is focused or not.
 */
const useFocus = ({ isActive = true, autoFocus = false, id: customId } = {}) => {
    const { isRawModeSupported, setRawMode } = use_stdin_1.default();
    const { activeId, add, remove, activate, deactivate, focus } = react_1$1.useContext(FocusContext_1$1.default);
    const id = react_1$1.useMemo(() => {
        return customId !== null && customId !== void 0 ? customId : Math.random().toString().slice(2, 7);
    }, [customId]);
    react_1$1.useEffect(() => {
        add(id, { autoFocus });
        return () => {
            remove(id);
        };
    }, [id, autoFocus]);
    react_1$1.useEffect(() => {
        if (isActive) {
            activate(id);
        }
        else {
            deactivate(id);
        }
    }, [isActive, id]);
    react_1$1.useEffect(() => {
        if (!isRawModeSupported || !isActive) {
            return;
        }
        setRawMode(true);
        return () => {
            setRawMode(false);
        };
    }, [isActive]);
    return {
        isFocused: Boolean(id) && activeId === id,
        focus
    };
};
useFocus$1.default = useFocus;

var useFocusManager$1 = {};

var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(useFocusManager$1, "__esModule", { value: true });
const react_1 = react.exports;
const FocusContext_1 = __importDefault(FocusContext$1);
/**
 * This hook exposes methods to enable or disable focus management for all
 * components or manually switch focus to next or previous components.
 */
const useFocusManager = () => {
    const focusContext = react_1.useContext(FocusContext_1.default);
    return {
        enableFocus: focusContext.enableFocus,
        disableFocus: focusContext.disableFocus,
        focusNext: focusContext.focusNext,
        focusPrevious: focusContext.focusPrevious,
        focus: focusContext.focus
    };
};
useFocusManager$1.default = useFocusManager;

var measureElement = {};

Object.defineProperty(measureElement, "__esModule", { value: true });
/**
 * Measure the dimensions of a particular `<Box>` element.
 */
measureElement.default = (node) => {
    var _a, _b, _c, _d;
    return ({
        width: (_b = (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.getComputedWidth()) !== null && _b !== void 0 ? _b : 0,
        height: (_d = (_c = node.yogaNode) === null || _c === void 0 ? void 0 : _c.getComputedHeight()) !== null && _d !== void 0 ? _d : 0
    });
};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var render_1 = render$1;
	Object.defineProperty(exports, "render", { enumerable: true, get: function () { return render_1.default; } });
	var Box_1 = Box$1;
	Object.defineProperty(exports, "Box", { enumerable: true, get: function () { return Box_1.default; } });
	var Text_1 = Text$1;
	Object.defineProperty(exports, "Text", { enumerable: true, get: function () { return Text_1.default; } });
	var Static_1 = Static$1;
	Object.defineProperty(exports, "Static", { enumerable: true, get: function () { return Static_1.default; } });
	var Transform_1 = Transform$1;
	Object.defineProperty(exports, "Transform", { enumerable: true, get: function () { return Transform_1.default; } });
	var Newline_1 = Newline$1;
	Object.defineProperty(exports, "Newline", { enumerable: true, get: function () { return Newline_1.default; } });
	var Spacer_1 = Spacer$1;
	Object.defineProperty(exports, "Spacer", { enumerable: true, get: function () { return Spacer_1.default; } });
	var use_input_1 = useInput$1;
	Object.defineProperty(exports, "useInput", { enumerable: true, get: function () { return use_input_1.default; } });
	var use_app_1 = useApp$1;
	Object.defineProperty(exports, "useApp", { enumerable: true, get: function () { return use_app_1.default; } });
	var use_stdin_1 = useStdin$1;
	Object.defineProperty(exports, "useStdin", { enumerable: true, get: function () { return use_stdin_1.default; } });
	var use_stdout_1 = useStdout$1;
	Object.defineProperty(exports, "useStdout", { enumerable: true, get: function () { return use_stdout_1.default; } });
	var use_stderr_1 = useStderr$1;
	Object.defineProperty(exports, "useStderr", { enumerable: true, get: function () { return use_stderr_1.default; } });
	var use_focus_1 = useFocus$1;
	Object.defineProperty(exports, "useFocus", { enumerable: true, get: function () { return use_focus_1.default; } });
	var use_focus_manager_1 = useFocusManager$1;
	Object.defineProperty(exports, "useFocusManager", { enumerable: true, get: function () { return use_focus_manager_1.default; } });
	var measure_element_1 = measureElement;
	Object.defineProperty(exports, "measureElement", { enumerable: true, get: function () { return measure_element_1.default; } });
	
} (build$1));

// Fork from `ink-text-input` package
const TextInput = ({ value: originalValue, placeholder = "", focus = true, mask, highlightPastedText = false, showCursor = true, onChange, onSubmit, }) => {
    const [{ cursorOffset, cursorWidth }, setState] = react.exports.useState({
        cursorOffset: (originalValue || "").length,
        cursorWidth: 0,
    });
    react.exports.useEffect(() => {
        setState((previousState) => {
            if (!focus || !showCursor) {
                return previousState;
            }
            const newValue = originalValue || "";
            if (previousState.cursorOffset > newValue.length - 1) {
                return {
                    cursorOffset: newValue.length,
                    cursorWidth: 0,
                };
            }
            return previousState;
        });
    }, [originalValue, focus, showCursor]);
    const cursorActualWidth = highlightPastedText ? cursorWidth : 0;
    const value = mask ? mask.repeat(originalValue.length) : originalValue;
    let renderedValue = value;
    let renderedPlaceholder = placeholder ? chalk.grey(placeholder) : undefined;
    // Fake mouse cursor, because it's too inconvenient to deal with actual cursor and ansi escapes
    if (showCursor && focus) {
        renderedPlaceholder =
            placeholder.length > 0
                ? chalk.inverse(placeholder[0]) + chalk.grey(placeholder.slice(1))
                : chalk.inverse(" ");
        renderedValue = value.length > 0 ? "" : chalk.inverse(" ");
        let i = 0;
        for (const char of value) {
            if (i >= cursorOffset - cursorActualWidth && i <= cursorOffset) {
                renderedValue += chalk.inverse(char);
            }
            else {
                renderedValue += char;
            }
            i++;
        }
        if (value.length > 0 && cursorOffset === value.length) {
            renderedValue += chalk.inverse(" ");
        }
    }
    build$1.useInput((input, key) => {
        if (key.upArrow ||
            key.downArrow ||
            (key.ctrl && input === "c") ||
            key.tab ||
            (key.shift && key.tab)) {
            return;
        }
        if (key.return) {
            if (onSubmit) {
                onSubmit(originalValue);
            }
            return;
        }
        let nextCursorOffset = cursorOffset;
        let nextValue = originalValue;
        let nextCursorWidth = 0;
        if (key.leftArrow) {
            if (showCursor) {
                nextCursorOffset--;
            }
        }
        else if (key.rightArrow) {
            if (showCursor) {
                nextCursorOffset++;
            }
        }
        else if (key.backspace || key.delete) {
            if (cursorOffset > 0) {
                nextValue =
                    originalValue.slice(0, cursorOffset - 1) +
                        originalValue.slice(cursorOffset, originalValue.length);
                nextCursorOffset--;
            }
        }
        else {
            nextValue =
                originalValue.slice(0, cursorOffset) +
                    input +
                    originalValue.slice(cursorOffset, originalValue.length);
            nextCursorOffset += input.length;
            if (input.length > 1) {
                nextCursorWidth = input.length;
            }
        }
        if (cursorOffset < 0) {
            nextCursorOffset = 0;
        }
        if (cursorOffset > originalValue.length) {
            nextCursorOffset = originalValue.length;
        }
        setState({
            cursorOffset: nextCursorOffset,
            cursorWidth: nextCursorWidth,
        });
        if (nextValue !== originalValue) {
            onChange(nextValue);
        }
    }, { isActive: focus });
    return (React.createElement(build$1.Text, null, placeholder
        ? value.length > 0
            ? renderedValue
            : renderedPlaceholder
        : renderedValue));
};

/**
 * Display a validated answer.
 */
const Answer = ({ children }) => (React.createElement(build$1.Text, { color: "cyan" }, children));

/**
 * Display a hint to the user.
 */
const Hint = ({ children }) => (React.createElement(build$1.Box, { marginLeft: 1 },
    React.createElement(build$1.Text, { color: "blackBright" }, children)));

/**
 * Display a question to the user.
 */
const Message = ({ children }) => (React.createElement(build$1.Box, { flexDirection: "row" },
    React.createElement(build$1.Box, { marginRight: 1 },
        React.createElement(build$1.Text, { color: "green" }, "?")),
    React.createElement(build$1.Box, { marginRight: 1 },
        React.createElement(build$1.Text, { bold: true }, children))));

const Input = ({ message, hint, defaultValue, onSubmit, }) => {
    const [value, setValue] = React.useState("");
    const [answer, setAnswer] = React.useState();
    const [isValid, setIsValid] = React.useState(true);
    return (React.createElement(React.Fragment, null,
        React.createElement(build$1.Box, null,
            React.createElement(Message, null, message),
            defaultValue ? (React.createElement(build$1.Box, { marginRight: 1 },
                React.createElement(build$1.Text, null,
                    "(",
                    defaultValue,
                    ")"))) : null,
            answer ? (React.createElement(Answer, null, answer)) : (React.createElement(TextInput, { onChange: (val) => {
                    setIsValid(true);
                    setValue(val);
                }, value: value, onSubmit: (val) => {
                    if (val === "" && defaultValue) {
                        setAnswer(defaultValue);
                        onSubmit(defaultValue);
                    }
                    else if (val === "" && !defaultValue) {
                        setIsValid(false);
                    }
                    else {
                        setAnswer(val);
                        onSubmit(val);
                    }
                }, showCursor: !answer })),
            !value && hint ? React.createElement(Hint, null, hint) : null),
        !isValid ? React.createElement(build$1.Text, { color: "red" }, "The answer can\u2019t be empty!") : null));
};

function Select({ message, choices, onSubmit, }) {
    const [selectedChoice, setSelectedChoice] = react.exports.useState(0);
    const [answer, setAnswer] = react.exports.useState();
    build$1.useInput((input, key) => {
        if (key.downArrow) {
            setSelectedChoice((prev) => (prev + 1) % choices.length);
        }
        if (key.upArrow) {
            setSelectedChoice((prev) => {
                if (prev === 0)
                    return choices.length - 1;
                return prev - 1;
            });
        }
        if (key.return) {
            setAnswer(choices[selectedChoice].label);
            onSubmit(choices[selectedChoice].value);
        }
    });
    const choiceMaxLength = choices
        .map((c) => c.label.length)
        .reduce((mem, i) => Math.max(mem, i), 0);
    return (React.createElement(build$1.Box, { flexDirection: answer ? "row" : "column" },
        message && React.createElement(Message, null, message),
        answer ? (React.createElement(Answer, null, answer)) : (React.createElement(build$1.Box, { flexDirection: "column" }, choices.map((choice, i) => (React.createElement(build$1.Box, { key: `choice-${i}` },
            React.createElement(build$1.Box, { minWidth: 2 }, i === selectedChoice && React.createElement(build$1.Text, { color: "cyan" }, "\u276F")),
            React.createElement(build$1.Box, { minWidth: choiceMaxLength + 1 },
                React.createElement(build$1.Text, null, choice.label)),
            choice.hint ? React.createElement(Hint, null, choice.hint) : null)))))));
}

const Confirm = ({ message, defaultValue, onSubmit }) => {
    const [value, setValue] = react.exports.useState("");
    const [isValid, setIsValid] = react.exports.useState(true);
    const [answer, setAnswer] = react.exports.useState();
    return (React.createElement(React.Fragment, null,
        React.createElement(build$1.Box, null,
            React.createElement(Message, null, message),
            React.createElement(build$1.Box, { marginRight: 1 }, typeof defaultValue === "boolean" ? (React.createElement(build$1.Text, null,
                "(",
                defaultValue ? "Y/n" : "y/N",
                ")")) : (React.createElement(build$1.Text, null, "(y/n)"))),
            answer !== undefined ? (React.createElement(build$1.Text, { color: answer ? "green" : "red" }, answer ? "Yes" : "No")) : (React.createElement(TextInput, { onChange: (val) => {
                    setIsValid(true);
                    setValue(val);
                }, value: value, onSubmit: (val) => {
                    if (typeof defaultValue === "boolean" && val === "") {
                        setAnswer(defaultValue);
                        onSubmit(defaultValue);
                        return;
                    }
                    const result = valueToBoolean(val);
                    if (result.valid) {
                        setAnswer(result.value);
                        onSubmit(result.value);
                    }
                    else {
                        setIsValid(false);
                    }
                }, showCursor: !answer }))),
        !isValid ? (React.createElement(build$1.Text, { color: "red" }, "The answer need to be \"Yes\" or \"No\"!")) : null));
};
const valueToBoolean = (input) => {
    const lowerInput = input.toLowerCase();
    if (lowerInput === "y" || lowerInput === "yes") {
        return { valid: true, value: true };
    }
    if (lowerInput === "n" || lowerInput === "no") {
        return { valid: true, value: false };
    }
    return { valid: false };
};

var genericMessage = "Invariant Violation";
var _a$3 = Object.setPrototypeOf, setPrototypeOf = _a$3 === void 0 ? function (obj, proto) {
    obj.__proto__ = proto;
    return obj;
} : _a$3;
var InvariantError = /** @class */ (function (_super) {
    __extends(InvariantError, _super);
    function InvariantError(message) {
        if (message === void 0) { message = genericMessage; }
        var _this = _super.call(this, typeof message === "number"
            ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)"
            : message) || this;
        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError.prototype);
        return _this;
    }
    return InvariantError;
}(Error));
function invariant(condition, message) {
    if (!condition) {
        throw new InvariantError(message);
    }
}
var verbosityLevels = ["debug", "log", "warn", "error", "silent"];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(name) {
    return function () {
        if (verbosityLevels.indexOf(name) >= verbosityLevel) {
            // Default to console.log if this host environment happens not to provide
            // all the console.* methods we need.
            var method = console[name] || console.log;
            return method.apply(console, arguments);
        }
    };
}
(function (invariant) {
    invariant.debug = wrapConsoleMethod("debug");
    invariant.log = wrapConsoleMethod("log");
    invariant.warn = wrapConsoleMethod("warn");
    invariant.error = wrapConsoleMethod("error");
})(invariant || (invariant = {}));
function setVerbosity(level) {
    var old = verbosityLevels[verbosityLevel];
    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
    return old;
}

function maybe$1(thunk) {
    try {
        return thunk();
    }
    catch (_a) { }
}

var global$1 = (maybe$1(function () { return globalThis; }) ||
    maybe$1(function () { return window; }) ||
    maybe$1(function () { return self; }) ||
    maybe$1(function () { return global; }) || maybe$1(function () { return maybe$1.constructor("return this")(); }));

var __ = "__";
var GLOBAL_KEY = [__, __].join("DEV");
function getDEV() {
    try {
        return Boolean(__DEV__);
    }
    catch (_a) {
        Object.defineProperty(global$1, GLOBAL_KEY, {
            value: maybe$1(function () { return process.env.NODE_ENV; }) !== "production",
            enumerable: false,
            configurable: true,
            writable: true,
        });
        return global$1[GLOBAL_KEY];
    }
}
var DEV = getDEV();

function maybe(thunk) {
  try { return thunk() } catch (_) {}
}

var safeGlobal = (
  maybe(function() { return globalThis }) ||
  maybe(function() { return window }) ||
  maybe(function() { return self }) ||
  maybe(function() { return global }) ||
  // We don't expect the Function constructor ever to be invoked at runtime, as
  // long as at least one of globalThis, window, self, or global is defined, so
  // we are under no obligation to make it easy for static analysis tools to
  // detect syntactic usage of the Function constructor. If you think you can
  // improve your static analysis to detect this obfuscation, think again. This
  // is an arms race you cannot win, at least not in JavaScript.
  maybe(function() { return maybe.constructor("return this")() })
);

var needToRemove = false;

function install() {
  if (safeGlobal &&
      !maybe(function() { return process.env.NODE_ENV }) &&
      !maybe(function() { return process })) {
    Object.defineProperty(safeGlobal, "process", {
      value: {
        env: {
          // This default needs to be "production" instead of "development", to
          // avoid the problem https://github.com/graphql/graphql-js/pull/2894
          // will eventually solve, once merged and released.
          NODE_ENV: "production",
        },
      },
      // Let anyone else change global.process as they see fit, but hide it from
      // Object.keys(global) enumeration.
      configurable: true,
      enumerable: false,
      writable: true,
    });
    needToRemove = true;
  }
}

// Call install() at least once, when this module is imported.
install();

function remove() {
  if (needToRemove) {
    delete safeGlobal.process;
    needToRemove = false;
  }
}

function removeTemporaryGlobals() {
    return typeof Source === "function" ? remove() : remove();
}

function checkDEV() {
    __DEV__ ? invariant("boolean" === typeof DEV, DEV) : invariant("boolean" === typeof DEV, 36);
}
removeTemporaryGlobals();
checkDEV();

function shouldInclude(_a, variables) {
    var directives = _a.directives;
    if (!directives || !directives.length) {
        return true;
    }
    return getInclusionDirectives(directives).every(function (_a) {
        var directive = _a.directive, ifArgument = _a.ifArgument;
        var evaledValue = false;
        if (ifArgument.value.kind === 'Variable') {
            evaledValue = variables && variables[ifArgument.value.name.value];
            __DEV__ ? invariant(evaledValue !== void 0, "Invalid variable referenced in @".concat(directive.name.value, " directive.")) : invariant(evaledValue !== void 0, 37);
        }
        else {
            evaledValue = ifArgument.value.value;
        }
        return directive.name.value === 'skip' ? !evaledValue : evaledValue;
    });
}
function getDirectiveNames(root) {
    var names = [];
    visit(root, {
        Directive: function (node) {
            names.push(node.name.value);
        },
    });
    return names;
}
function hasDirectives(names, root) {
    return getDirectiveNames(root).some(function (name) { return names.indexOf(name) > -1; });
}
function hasClientExports(document) {
    return (document &&
        hasDirectives(['client'], document) &&
        hasDirectives(['export'], document));
}
function isInclusionDirective(_a) {
    var value = _a.name.value;
    return value === 'skip' || value === 'include';
}
function getInclusionDirectives(directives) {
    var result = [];
    if (directives && directives.length) {
        directives.forEach(function (directive) {
            if (!isInclusionDirective(directive))
                return;
            var directiveArguments = directive.arguments;
            var directiveName = directive.name.value;
            __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @".concat(directiveName, " directive.")) : invariant(directiveArguments && directiveArguments.length === 1, 38);
            var ifArgument = directiveArguments[0];
            __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', "Invalid argument for the @".concat(directiveName, " directive.")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 39);
            var ifValue = ifArgument.value;
            __DEV__ ? invariant(ifValue &&
                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), "Argument for the @".concat(directiveName, " directive must be a variable or a boolean value.")) : invariant(ifValue &&
                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 40);
            result.push({ directive: directive, ifArgument: ifArgument });
        });
    }
    return result;
}

function getFragmentQueryDocument(document, fragmentName) {
    var actualFragmentName = fragmentName;
    var fragments = [];
    document.definitions.forEach(function (definition) {
        if (definition.kind === 'OperationDefinition') {
            throw __DEV__ ? new InvariantError("Found a ".concat(definition.operation, " operation").concat(definition.name ? " named '".concat(definition.name.value, "'") : '', ". ") +
                'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(41);
        }
        if (definition.kind === 'FragmentDefinition') {
            fragments.push(definition);
        }
    });
    if (typeof actualFragmentName === 'undefined') {
        __DEV__ ? invariant(fragments.length === 1, "Found ".concat(fragments.length, " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.")) : invariant(fragments.length === 1, 42);
        actualFragmentName = fragments[0].name.value;
    }
    var query = __assign(__assign({}, document), { definitions: __spreadArray([
            {
                kind: 'OperationDefinition',
                operation: 'query',
                selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                        {
                            kind: 'FragmentSpread',
                            name: {
                                kind: 'Name',
                                value: actualFragmentName,
                            },
                        },
                    ],
                },
            }
        ], document.definitions, true) });
    return query;
}
function createFragmentMap(fragments) {
    if (fragments === void 0) { fragments = []; }
    var symTable = {};
    fragments.forEach(function (fragment) {
        symTable[fragment.name.value] = fragment;
    });
    return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
    switch (selection.kind) {
        case 'InlineFragment':
            return selection;
        case 'FragmentSpread': {
            var fragment = fragmentMap && fragmentMap[selection.name.value];
            __DEV__ ? invariant(fragment, "No fragment named ".concat(selection.name.value, ".")) : invariant(fragment, 43);
            return fragment;
        }
        default:
            return null;
    }
}

function isNonNullObject(obj) {
    return obj !== null && typeof obj === 'object';
}

function makeReference(id) {
    return { __ref: String(id) };
}
function isReference(obj) {
    return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');
}
function isDocumentNode(value) {
    return (isNonNullObject(value) &&
        value.kind === "Document" &&
        Array.isArray(value.definitions));
}
function isStringValue(value) {
    return value.kind === 'StringValue';
}
function isBooleanValue(value) {
    return value.kind === 'BooleanValue';
}
function isIntValue(value) {
    return value.kind === 'IntValue';
}
function isFloatValue(value) {
    return value.kind === 'FloatValue';
}
function isVariable(value) {
    return value.kind === 'Variable';
}
function isObjectValue(value) {
    return value.kind === 'ObjectValue';
}
function isListValue(value) {
    return value.kind === 'ListValue';
}
function isEnumValue(value) {
    return value.kind === 'EnumValue';
}
function isNullValue(value) {
    return value.kind === 'NullValue';
}
function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) {
        argObj[name.value] = Number(value.value);
    }
    else if (isBooleanValue(value) || isStringValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isObjectValue(value)) {
        var nestedArgObj_1 = {};
        value.fields.map(function (obj) {
            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
        });
        argObj[name.value] = nestedArgObj_1;
    }
    else if (isVariable(value)) {
        var variableValue = (variables || {})[value.name.value];
        argObj[name.value] = variableValue;
    }
    else if (isListValue(value)) {
        argObj[name.value] = value.values.map(function (listValue) {
            var nestedArgArrayObj = {};
            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
            return nestedArgArrayObj[name.value];
        });
    }
    else if (isEnumValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isNullValue(value)) {
        argObj[name.value] = null;
    }
    else {
        throw __DEV__ ? new InvariantError("The inline argument \"".concat(name.value, "\" of kind \"").concat(value.kind, "\"") +
            'is not supported. Use variables instead of inline arguments to ' +
            'overcome this limitation.') : new InvariantError(52);
    }
}
function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
        directivesObj = {};
        field.directives.forEach(function (directive) {
            directivesObj[directive.name.value] = {};
            if (directive.arguments) {
                directive.arguments.forEach(function (_a) {
                    var name = _a.name, value = _a.value;
                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
                });
            }
        });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
        argObj = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj, name, value, variables);
        });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = [
    'connection',
    'include',
    'skip',
    'client',
    'rest',
    'export',
];
var getStoreKeyName = Object.assign(function (fieldName, args, directives) {
    if (args &&
        directives &&
        directives['connection'] &&
        directives['connection']['key']) {
        if (directives['connection']['filter'] &&
            directives['connection']['filter'].length > 0) {
            var filterKeys = directives['connection']['filter']
                ? directives['connection']['filter']
                : [];
            filterKeys.sort();
            var filteredArgs_1 = {};
            filterKeys.forEach(function (key) {
                filteredArgs_1[key] = args[key];
            });
            return "".concat(directives['connection']['key'], "(").concat(stringify(filteredArgs_1), ")");
        }
        else {
            return directives['connection']['key'];
        }
    }
    var completeFieldName = fieldName;
    if (args) {
        var stringifiedArgs = stringify(args);
        completeFieldName += "(".concat(stringifiedArgs, ")");
    }
    if (directives) {
        Object.keys(directives).forEach(function (key) {
            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
                return;
            if (directives[key] && Object.keys(directives[key]).length) {
                completeFieldName += "@".concat(key, "(").concat(stringify(directives[key]), ")");
            }
            else {
                completeFieldName += "@".concat(key);
            }
        });
    }
    return completeFieldName;
}, {
    setStringify: function (s) {
        var previous = stringify;
        stringify = s;
        return previous;
    },
});
var stringify = function defaultStringify(value) {
    return JSON.stringify(value, stringifyReplacer);
};
function stringifyReplacer(_key, value) {
    if (isNonNullObject(value) && !Array.isArray(value)) {
        value = Object.keys(value).sort().reduce(function (copy, key) {
            copy[key] = value[key];
            return copy;
        }, {});
    }
    return value;
}
function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
        var argObj_1 = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj_1, name, value, variables);
        });
        return argObj_1;
    }
    return null;
}
function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
    if (typeof result.__typename === 'string') {
        return result.__typename;
    }
    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
        var selection = _a[_i];
        if (isField(selection)) {
            if (selection.name.value === '__typename') {
                return result[resultKeyNameFromField(selection)];
            }
        }
        else {
            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);
            if (typeof typename === 'string') {
                return typename;
            }
        }
    }
}
function isField(selection) {
    return selection.kind === 'Field';
}
function isInlineFragment(selection) {
    return selection.kind === 'InlineFragment';
}

function checkDocument(doc) {
    __DEV__ ? invariant(doc && doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : invariant(doc && doc.kind === 'Document', 44);
    var operations = doc.definitions
        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })
        .map(function (definition) {
        if (definition.kind !== 'OperationDefinition') {
            throw __DEV__ ? new InvariantError("Schema type definitions not allowed in queries. Found: \"".concat(definition.kind, "\"")) : new InvariantError(45);
        }
        return definition;
    });
    __DEV__ ? invariant(operations.length <= 1, "Ambiguous GraphQL document: contains ".concat(operations.length, " operations")) : invariant(operations.length <= 1, 46);
    return doc;
}
function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];
}
function getOperationName(doc) {
    return (doc.definitions
        .filter(function (definition) {
        return definition.kind === 'OperationDefinition' && definition.name;
    })
        .map(function (x) { return x.name.value; })[0] || null);
}
function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });
}
function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 47);
    return queryDef;
}
function getFragmentDefinition(doc) {
    __DEV__ ? invariant(doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : invariant(doc.kind === 'Document', 48);
    __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 49);
    var fragmentDef = doc.definitions[0];
    __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 50);
    return fragmentDef;
}
function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
        var definition = _a[_i];
        if (definition.kind === 'OperationDefinition') {
            var operation = definition.operation;
            if (operation === 'query' ||
                operation === 'mutation' ||
                operation === 'subscription') {
                return definition;
            }
        }
        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {
            fragmentDefinition = definition;
        }
    }
    if (fragmentDefinition) {
        return fragmentDefinition;
    }
    throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(51);
}
function getDefaultValues(definition) {
    var defaultValues = Object.create(null);
    var defs = definition && definition.variableDefinitions;
    if (defs && defs.length) {
        defs.forEach(function (def) {
            if (def.defaultValue) {
                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);
            }
        });
    }
    return defaultValues;
}

function filterInPlace(array, test, context) {
    var target = 0;
    array.forEach(function (elem, i) {
        if (test.call(this, elem, i, array)) {
            array[target++] = elem;
        }
    }, context);
    array.length = target;
    return array;
}

var TYPENAME_FIELD = {
    kind: 'Field',
    name: {
        kind: 'Name',
        value: '__typename',
    },
};
function isEmpty(op, fragments) {
    return op.selectionSet.selections.every(function (selection) {
        return selection.kind === 'FragmentSpread' &&
            isEmpty(fragments[selection.name.value], fragments);
    });
}
function nullIfDocIsEmpty(doc) {
    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))
        ? null
        : doc;
}
function getDirectiveMatcher(directives) {
    return function directiveMatcher(directive) {
        return directives.some(function (dir) {
            return (dir.name && dir.name === directive.name.value) ||
                (dir.test && dir.test(directive));
        });
    };
}
function removeDirectivesFromDocument(directives, doc) {
    var variablesInUse = Object.create(null);
    var variablesToRemove = [];
    var fragmentSpreadsInUse = Object.create(null);
    var fragmentSpreadsToRemove = [];
    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {
        Variable: {
            enter: function (node, _key, parent) {
                if (parent.kind !== 'VariableDefinition') {
                    variablesInUse[node.name.value] = true;
                }
            },
        },
        Field: {
            enter: function (node) {
                if (directives && node.directives) {
                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });
                    if (shouldRemoveField &&
                        node.directives &&
                        node.directives.some(getDirectiveMatcher(directives))) {
                        if (node.arguments) {
                            node.arguments.forEach(function (arg) {
                                if (arg.value.kind === 'Variable') {
                                    variablesToRemove.push({
                                        name: arg.value.name.value,
                                    });
                                }
                            });
                        }
                        if (node.selectionSet) {
                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {
                                fragmentSpreadsToRemove.push({
                                    name: frag.name.value,
                                });
                            });
                        }
                        return null;
                    }
                }
            },
        },
        FragmentSpread: {
            enter: function (node) {
                fragmentSpreadsInUse[node.name.value] = true;
            },
        },
        Directive: {
            enter: function (node) {
                if (getDirectiveMatcher(directives)(node)) {
                    return null;
                }
            },
        },
    }));
    if (modifiedDoc &&
        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {
        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
    }
    if (modifiedDoc &&
        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })
            .length) {
        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
    }
    return modifiedDoc;
}
var addTypenameToDocument = Object.assign(function (doc) {
    return visit(doc, {
        SelectionSet: {
            enter: function (node, _key, parent) {
                if (parent &&
                    parent.kind === 'OperationDefinition') {
                    return;
                }
                var selections = node.selections;
                if (!selections) {
                    return;
                }
                var skip = selections.some(function (selection) {
                    return (isField(selection) &&
                        (selection.name.value === '__typename' ||
                            selection.name.value.lastIndexOf('__', 0) === 0));
                });
                if (skip) {
                    return;
                }
                var field = parent;
                if (isField(field) &&
                    field.directives &&
                    field.directives.some(function (d) { return d.name.value === 'export'; })) {
                    return;
                }
                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });
            },
        },
    });
}, {
    added: function (field) {
        return field === TYPENAME_FIELD;
    },
});
var connectionRemoveConfig = {
    test: function (directive) {
        var willRemove = directive.name.value === 'connection';
        if (willRemove) {
            if (!directive.arguments ||
                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {
                __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' +
                    'You may want to use the key parameter to specify a store key.');
            }
        }
        return willRemove;
    },
};
function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
}
function getArgumentMatcher(config) {
    return function argumentMatcher(argument) {
        return config.some(function (aConfig) {
            return argument.value &&
                argument.value.kind === 'Variable' &&
                argument.value.name &&
                (aConfig.name === argument.value.name.value ||
                    (aConfig.test && aConfig.test(argument)));
        });
    };
}
function removeArgumentsFromDocument(config, doc) {
    var argMatcher = getArgumentMatcher(config);
    return nullIfDocIsEmpty(visit(doc, {
        OperationDefinition: {
            enter: function (node) {
                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {
                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });
                    }) : [] });
            },
        },
        Field: {
            enter: function (node) {
                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });
                if (shouldRemoveField) {
                    var argMatchCount_1 = 0;
                    if (node.arguments) {
                        node.arguments.forEach(function (arg) {
                            if (argMatcher(arg)) {
                                argMatchCount_1 += 1;
                            }
                        });
                    }
                    if (argMatchCount_1 === 1) {
                        return null;
                    }
                }
            },
        },
        Argument: {
            enter: function (node) {
                if (argMatcher(node)) {
                    return null;
                }
            },
        },
    }));
}
function removeFragmentSpreadFromDocument(config, doc) {
    function enter(node) {
        if (config.some(function (def) { return def.name === node.name.value; })) {
            return null;
        }
    }
    return nullIfDocIsEmpty(visit(doc, {
        FragmentSpread: { enter: enter },
        FragmentDefinition: { enter: enter },
    }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
    var allFragments = [];
    selectionSet.selections.forEach(function (selection) {
        if ((isField(selection) || isInlineFragment(selection)) &&
            selection.selectionSet) {
            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });
        }
        else if (selection.kind === 'FragmentSpread') {
            allFragments.push(selection);
        }
    });
    return allFragments;
}
function buildQueryFromSelectionSet(document) {
    var definition = getMainDefinition(document);
    var definitionOperation = definition.operation;
    if (definitionOperation === 'query') {
        return document;
    }
    var modifiedDoc = visit(document, {
        OperationDefinition: {
            enter: function (node) {
                return __assign(__assign({}, node), { operation: 'query' });
            },
        },
    });
    return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
    checkDocument(document);
    var modifiedDoc = removeDirectivesFromDocument([
        {
            test: function (directive) { return directive.name.value === 'client'; },
            remove: true,
        },
    ], document);
    if (modifiedDoc) {
        modifiedDoc = visit(modifiedDoc, {
            FragmentDefinition: {
                enter: function (node) {
                    if (node.selectionSet) {
                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {
                            return isField(selection) && selection.name.value === '__typename';
                        });
                        if (isTypenameOnly) {
                            return null;
                        }
                    }
                },
            },
        });
    }
    return modifiedDoc;
}

var hasOwnProperty$7 = Object.prototype.hasOwnProperty;
function mergeDeep() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
    var target = sources[0] || {};
    var count = sources.length;
    if (count > 1) {
        var merger = new DeepMerger();
        for (var i = 1; i < count; ++i) {
            target = merger.merge(target, sources[i]);
        }
    }
    return target;
}
var defaultReconciler = function (target, source, property) {
    return this.merge(target[property], source[property]);
};
var DeepMerger = (function () {
    function DeepMerger(reconciler) {
        if (reconciler === void 0) { reconciler = defaultReconciler; }
        this.reconciler = reconciler;
        this.isObject = isNonNullObject;
        this.pastCopies = new Set();
    }
    DeepMerger.prototype.merge = function (target, source) {
        var _this = this;
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (isNonNullObject(source) && isNonNullObject(target)) {
            Object.keys(source).forEach(function (sourceKey) {
                if (hasOwnProperty$7.call(target, sourceKey)) {
                    var targetValue = target[sourceKey];
                    if (source[sourceKey] !== targetValue) {
                        var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));
                        if (result !== targetValue) {
                            target = _this.shallowCopyForMerge(target);
                            target[sourceKey] = result;
                        }
                    }
                }
                else {
                    target = _this.shallowCopyForMerge(target);
                    target[sourceKey] = source[sourceKey];
                }
            });
            return target;
        }
        return source;
    };
    DeepMerger.prototype.shallowCopyForMerge = function (value) {
        if (isNonNullObject(value)) {
            if (this.pastCopies.has(value)) {
                if (!Object.isFrozen(value))
                    return value;
                this.pastCopies.delete(value);
            }
            if (Array.isArray(value)) {
                value = value.slice(0);
            }
            else {
                value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);
            }
            this.pastCopies.add(value);
        }
        return value;
    };
    return DeepMerger;
}());

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// === Symbol Support ===
var hasSymbols = function () {
  return typeof Symbol === 'function';
};

var hasSymbol = function (name) {
  return hasSymbols() && Boolean(Symbol[name]);
};

var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};

if (hasSymbols() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}

var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];
  if (value == null) return undefined;
  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
  return value;
}

function getSpecies(obj) {
  var ctor = obj.constructor;

  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];

    if (ctor === null) {
      ctor = undefined;
    }
  }

  return ctor !== undefined ? ctor : Observable;
}

function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}

function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}

function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}

function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;
  subscription._cleanup = undefined;

  if (!cleanup) {
    return;
  }

  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');

      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}

function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}

function flushSubscription(subscription) {
  var queue = subscription._queue;

  if (!queue) {
    return;
  }

  subscription._queue = undefined;
  subscription._state = 'ready';

  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}

function notifySubscription(subscription, type, value) {
  subscription._state = 'running';
  var observer = subscription._observer;

  try {
    var m = getMethod(observer, type);

    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;

      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;

      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }

  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}

function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;

  if (subscription._state === 'buffering') {
    subscription._queue.push({
      type: type,
      value: value
    });

    return;
  }

  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{
      type: type,
      value: value
    }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }

  notifySubscription(subscription, type, value);
}

var Subscription = /*#__PURE__*/function () {
  function Subscription(observer, subscriber) {
    // ASSERT: observer is an object
    // ASSERT: subscriber is callable
    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';
    var subscriptionObserver = new SubscriptionObserver(this);

    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }

    if (this._state === 'initializing') this._state = 'ready';
  }

  var _proto = Subscription.prototype;

  _proto.unsubscribe = function unsubscribe() {
    if (this._state !== 'closed') {
      closeSubscription(this);
      cleanupSubscription(this);
    }
  };

  _createClass(Subscription, [{
    key: "closed",
    get: function () {
      return this._state === 'closed';
    }
  }]);

  return Subscription;
}();

var SubscriptionObserver = /*#__PURE__*/function () {
  function SubscriptionObserver(subscription) {
    this._subscription = subscription;
  }

  var _proto2 = SubscriptionObserver.prototype;

  _proto2.next = function next(value) {
    onNotify(this._subscription, 'next', value);
  };

  _proto2.error = function error(value) {
    onNotify(this._subscription, 'error', value);
  };

  _proto2.complete = function complete() {
    onNotify(this._subscription, 'complete');
  };

  _createClass(SubscriptionObserver, [{
    key: "closed",
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);

  return SubscriptionObserver;
}();

var Observable = /*#__PURE__*/function () {
  function Observable(subscriber) {
    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
    this._subscriber = subscriber;
  }

  var _proto3 = Observable.prototype;

  _proto3.subscribe = function subscribe(observer) {
    if (typeof observer !== 'object' || observer === null) {
      observer = {
        next: observer,
        error: arguments[1],
        complete: arguments[2]
      };
    }

    return new Subscription(observer, this._subscriber);
  };

  _proto3.forEach = function forEach(fn) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      if (typeof fn !== 'function') {
        reject(new TypeError(fn + ' is not a function'));
        return;
      }

      function done() {
        subscription.unsubscribe();
        resolve();
      }

      var subscription = _this.subscribe({
        next: function (value) {
          try {
            fn(value, done);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  };

  _proto3.map = function map(fn) {
    var _this2 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this2.subscribe({
        next: function (value) {
          try {
            value = fn(value);
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.filter = function filter(fn) {
    var _this3 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this3.subscribe({
        next: function (value) {
          try {
            if (!fn(value)) return;
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.reduce = function reduce(fn) {
    var _this4 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    var hasSeed = arguments.length > 1;
    var hasValue = false;
    var seed = arguments[1];
    var acc = seed;
    return new C(function (observer) {
      return _this4.subscribe({
        next: function (value) {
          var first = !hasValue;
          hasValue = true;

          if (!first || hasSeed) {
            try {
              acc = fn(acc, value);
            } catch (e) {
              return observer.error(e);
            }
          } else {
            acc = value;
          }
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
          observer.next(acc);
          observer.complete();
        }
      });
    });
  };

  _proto3.concat = function concat() {
    var _this5 = this;

    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }

    var C = getSpecies(this);
    return new C(function (observer) {
      var subscription;
      var index = 0;

      function startNext(next) {
        subscription = next.subscribe({
          next: function (v) {
            observer.next(v);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (index === sources.length) {
              subscription = undefined;
              observer.complete();
            } else {
              startNext(C.from(sources[index++]));
            }
          }
        });
      }

      startNext(_this5);
      return function () {
        if (subscription) {
          subscription.unsubscribe();
          subscription = undefined;
        }
      };
    });
  };

  _proto3.flatMap = function flatMap(fn) {
    var _this6 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      var subscriptions = [];

      var outer = _this6.subscribe({
        next: function (value) {
          if (fn) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }
          }

          var inner = C.from(value).subscribe({
            next: function (value) {
              observer.next(value);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              var i = subscriptions.indexOf(inner);
              if (i >= 0) subscriptions.splice(i, 1);
              completeIfDone();
            }
          });
          subscriptions.push(inner);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          completeIfDone();
        }
      });

      function completeIfDone() {
        if (outer.closed && subscriptions.length === 0) observer.complete();
      }

      return function () {
        subscriptions.forEach(function (s) {
          return s.unsubscribe();
        });
        outer.unsubscribe();
      };
    });
  };

  _proto3[SymbolObservable] = function () {
    return this;
  };

  Observable.from = function from(x) {
    var C = typeof this === 'function' ? this : Observable;
    if (x == null) throw new TypeError(x + ' is not an object');
    var method = getMethod(x, SymbolObservable);

    if (method) {
      var observable = method.call(x);
      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
      if (isObservable(observable) && observable.constructor === C) return observable;
      return new C(function (observer) {
        return observable.subscribe(observer);
      });
    }

    if (hasSymbol('iterator')) {
      method = getMethod(x, SymbolIterator);

      if (method) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;

            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {
              var item = _step.value;
              observer.next(item);
              if (observer.closed) return;
            }

            observer.complete();
          });
        });
      }
    }

    if (Array.isArray(x)) {
      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;

          for (var i = 0; i < x.length; ++i) {
            observer.next(x[i]);
            if (observer.closed) return;
          }

          observer.complete();
        });
      });
    }

    throw new TypeError(x + ' is not observable');
  };

  Observable.of = function of() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    var C = typeof this === 'function' ? this : Observable;
    return new C(function (observer) {
      enqueue(function () {
        if (observer.closed) return;

        for (var i = 0; i < items.length; ++i) {
          observer.next(items[i]);
          if (observer.closed) return;
        }

        observer.complete();
      });
    });
  };

  _createClass(Observable, null, [{
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);

  return Observable;
}();

if (hasSymbols()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}

function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {

			if (typeof Symbol.for === 'function') {
				// This just needs to be something that won't trample other user's Symbol.for use
				// It also will guide people to the source of their issues, if this is problematic.
				// META: It's a resource locator!
				result = Symbol.for('https://github.com/benlesh/symbol-observable');
			} else {
				// Symbol.for didn't exist! The best we can do at this point is a totally 
				// unique symbol. Note that the string argument here is a descriptor, not
				// an identifier. This symbol is unique.
				result = Symbol('https://github.com/benlesh/symbol-observable');
			}
			try {
				Symbol.observable = result;
			} catch (err) {
				// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
				// if it is frozen assigning to it will throw. In this case, we don't care, because
				// they will need to use the returned value from the ponyfill.
			}
		}
	} else {
		result = '@@observable';
	}

	return result;
}

/* global window */

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

symbolObservablePonyfill(root);

var prototype = Observable.prototype;
var fakeObsSymbol = '@@observable';
if (!prototype[fakeObsSymbol]) {
    prototype[fakeObsSymbol] = function () { return this; };
}

var toString$1 = Object.prototype.toString;
function cloneDeep(value) {
    return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
    switch (toString$1.call(val)) {
        case "[object Array]": {
            seen = seen || new Map;
            if (seen.has(val))
                return seen.get(val);
            var copy_1 = val.slice(0);
            seen.set(val, copy_1);
            copy_1.forEach(function (child, i) {
                copy_1[i] = cloneDeepHelper(child, seen);
            });
            return copy_1;
        }
        case "[object Object]": {
            seen = seen || new Map;
            if (seen.has(val))
                return seen.get(val);
            var copy_2 = Object.create(Object.getPrototypeOf(val));
            seen.set(val, copy_2);
            Object.keys(val).forEach(function (key) {
                copy_2[key] = cloneDeepHelper(val[key], seen);
            });
            return copy_2;
        }
        default:
            return val;
    }
}

function deepFreeze(value) {
    var workSet = new Set([value]);
    workSet.forEach(function (obj) {
        if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {
            Object.getOwnPropertyNames(obj).forEach(function (name) {
                if (isNonNullObject(obj[name]))
                    workSet.add(obj[name]);
            });
        }
    });
    return value;
}
function shallowFreeze(obj) {
    if (__DEV__ && !Object.isFrozen(obj)) {
        try {
            Object.freeze(obj);
        }
        catch (e) {
            if (e instanceof TypeError)
                return null;
            throw e;
        }
    }
    return obj;
}
function maybeDeepFreeze(obj) {
    if (__DEV__) {
        deepFreeze(obj);
    }
    return obj;
}

function iterateObserversSafely(observers, method, argument) {
    var observersWithMethod = [];
    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });
    observersWithMethod.forEach(function (obs) { return obs[method](argument); });
}

function asyncMap(observable, mapFn, catchFn) {
    return new Observable(function (observer) {
        var next = observer.next, error = observer.error, complete = observer.complete;
        var activeCallbackCount = 0;
        var completed = false;
        var promiseQueue = {
            then: function (callback) {
                return new Promise(function (resolve) { return resolve(callback()); });
            },
        };
        function makeCallback(examiner, delegate) {
            if (examiner) {
                return function (arg) {
                    ++activeCallbackCount;
                    var both = function () { return examiner(arg); };
                    promiseQueue = promiseQueue.then(both, both).then(function (result) {
                        --activeCallbackCount;
                        next && next.call(observer, result);
                        if (completed) {
                            handler.complete();
                        }
                    }, function (error) {
                        --activeCallbackCount;
                        throw error;
                    }).catch(function (caught) {
                        error && error.call(observer, caught);
                    });
                };
            }
            else {
                return function (arg) { return delegate && delegate.call(observer, arg); };
            }
        }
        var handler = {
            next: makeCallback(mapFn, next),
            error: makeCallback(catchFn, error),
            complete: function () {
                completed = true;
                if (!activeCallbackCount) {
                    complete && complete.call(observer);
                }
            },
        };
        var sub = observable.subscribe(handler);
        return function () { return sub.unsubscribe(); };
    });
}

var canUseWeakMap = typeof WeakMap === 'function' &&
    maybe$1(function () { return navigator.product; }) !== 'ReactNative';
var canUseWeakSet = typeof WeakSet === 'function';
var canUseSymbol = typeof Symbol === 'function' &&
    typeof Symbol.for === 'function';
var canUseDOM = typeof maybe$1(function () { return window.document.createElement; }) === "function";
var usingJSDOM = maybe$1(function () { return navigator.userAgent.indexOf("jsdom") >= 0; }) || false;
var canUseLayoutEffect = canUseDOM && !usingJSDOM;

function fixObservableSubclass(subclass) {
    function set(key) {
        Object.defineProperty(subclass, key, { value: Observable });
    }
    if (canUseSymbol && Symbol.species) {
        set(Symbol.species);
    }
    set("@@species");
    return subclass;
}

function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
var Concast = (function (_super) {
    __extends(Concast, _super);
    function Concast(sources) {
        var _this = _super.call(this, function (observer) {
            _this.addObserver(observer);
            return function () { return _this.removeObserver(observer); };
        }) || this;
        _this.observers = new Set();
        _this.addCount = 0;
        _this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
        _this.handlers = {
            next: function (result) {
                if (_this.sub !== null) {
                    _this.latest = ["next", result];
                    iterateObserversSafely(_this.observers, "next", result);
                }
            },
            error: function (error) {
                var sub = _this.sub;
                if (sub !== null) {
                    if (sub)
                        setTimeout(function () { return sub.unsubscribe(); });
                    _this.sub = null;
                    _this.latest = ["error", error];
                    _this.reject(error);
                    iterateObserversSafely(_this.observers, "error", error);
                }
            },
            complete: function () {
                var sub = _this.sub;
                if (sub !== null) {
                    var value = _this.sources.shift();
                    if (!value) {
                        if (sub)
                            setTimeout(function () { return sub.unsubscribe(); });
                        _this.sub = null;
                        if (_this.latest &&
                            _this.latest[0] === "next") {
                            _this.resolve(_this.latest[1]);
                        }
                        else {
                            _this.resolve();
                        }
                        iterateObserversSafely(_this.observers, "complete");
                    }
                    else if (isPromiseLike(value)) {
                        value.then(function (obs) { return _this.sub = obs.subscribe(_this.handlers); });
                    }
                    else {
                        _this.sub = value.subscribe(_this.handlers);
                    }
                }
            },
        };
        _this.cancel = function (reason) {
            _this.reject(reason);
            _this.sources = [];
            _this.handlers.complete();
        };
        _this.promise.catch(function (_) { });
        if (typeof sources === "function") {
            sources = [new Observable(sources)];
        }
        if (isPromiseLike(sources)) {
            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);
        }
        else {
            _this.start(sources);
        }
        return _this;
    }
    Concast.prototype.start = function (sources) {
        if (this.sub !== void 0)
            return;
        this.sources = Array.from(sources);
        this.handlers.complete();
    };
    Concast.prototype.deliverLastMessage = function (observer) {
        if (this.latest) {
            var nextOrError = this.latest[0];
            var method = observer[nextOrError];
            if (method) {
                method.call(observer, this.latest[1]);
            }
            if (this.sub === null &&
                nextOrError === "next" &&
                observer.complete) {
                observer.complete();
            }
        }
    };
    Concast.prototype.addObserver = function (observer) {
        if (!this.observers.has(observer)) {
            this.deliverLastMessage(observer);
            this.observers.add(observer);
            ++this.addCount;
        }
    };
    Concast.prototype.removeObserver = function (observer, quietly) {
        if (this.observers.delete(observer) &&
            --this.addCount < 1 &&
            !quietly) {
            this.handlers.complete();
        }
    };
    Concast.prototype.cleanup = function (callback) {
        var _this = this;
        var called = false;
        var once = function () {
            if (!called) {
                called = true;
                _this.observers.delete(observer);
                callback();
            }
        };
        var observer = {
            next: once,
            error: once,
            complete: once,
        };
        var count = this.addCount;
        this.addObserver(observer);
        this.addCount = count;
    };
    return Concast;
}(Observable));
fixObservableSubclass(Concast);

function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
}

function graphQLResultHasError(result) {
    return (result.errors && result.errors.length > 0) || false;
}

function compact() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    var result = Object.create(null);
    objects.forEach(function (obj) {
        if (!obj)
            return;
        Object.keys(obj).forEach(function (key) {
            var value = obj[key];
            if (value !== void 0) {
                result[key] = value;
            }
        });
    });
    return result;
}

var prefixCounts = new Map();
function makeUniqueId(prefix) {
    var count = prefixCounts.get(prefix) || 1;
    prefixCounts.set(prefix, count + 1);
    return "".concat(prefix, ":").concat(count, ":").concat(Math.random().toString(36).slice(2));
}

function stringifyForDisplay(value) {
    var undefId = makeUniqueId("stringifyForDisplay");
    return JSON.stringify(value, function (key, value) {
        return value === void 0 ? undefId : value;
    }).split(JSON.stringify(undefId)).join("<undefined>");
}

function mergeOptions(defaults, options) {
    return compact(defaults, options, options.variables && {
        variables: __assign(__assign({}, (defaults && defaults.variables)), options.variables),
    });
}

function fromError(errorValue) {
    return new Observable(function (observer) {
        observer.error(errorValue);
    });
}

var throwServerError = function (response, result, message) {
    var error = new Error(message);
    error.name = 'ServerError';
    error.response = response;
    error.statusCode = response.status;
    error.result = result;
    throw error;
};

function validateOperation(operation) {
    var OPERATION_FIELDS = [
        'query',
        'operationName',
        'variables',
        'extensions',
        'context',
    ];
    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
        var key = _a[_i];
        if (OPERATION_FIELDS.indexOf(key) < 0) {
            throw __DEV__ ? new InvariantError("illegal argument: ".concat(key)) : new InvariantError(24);
        }
    }
    return operation;
}

function createOperation(starting, operation) {
    var context = __assign({}, starting);
    var setContext = function (next) {
        if (typeof next === 'function') {
            context = __assign(__assign({}, context), next(context));
        }
        else {
            context = __assign(__assign({}, context), next);
        }
    };
    var getContext = function () { return (__assign({}, context)); };
    Object.defineProperty(operation, 'setContext', {
        enumerable: false,
        value: setContext,
    });
    Object.defineProperty(operation, 'getContext', {
        enumerable: false,
        value: getContext,
    });
    return operation;
}

function transformOperation(operation) {
    var transformedOperation = {
        variables: operation.variables || {},
        extensions: operation.extensions || {},
        operationName: operation.operationName,
        query: operation.query,
    };
    if (!transformedOperation.operationName) {
        transformedOperation.operationName =
            typeof transformedOperation.query !== 'string'
                ? getOperationName(transformedOperation.query) || undefined
                : '';
    }
    return transformedOperation;
}

function passthrough(op, forward) {
    return (forward ? forward(op) : Observable.of());
}
function toLink(handler) {
    return typeof handler === 'function' ? new ApolloLink(handler) : handler;
}
function isTerminating(link) {
    return link.request.length <= 1;
}
var LinkError = (function (_super) {
    __extends(LinkError, _super);
    function LinkError(message, link) {
        var _this = _super.call(this, message) || this;
        _this.link = link;
        return _this;
    }
    return LinkError;
}(Error));
var ApolloLink = (function () {
    function ApolloLink(request) {
        if (request)
            this.request = request;
    }
    ApolloLink.empty = function () {
        return new ApolloLink(function () { return Observable.of(); });
    };
    ApolloLink.from = function (links) {
        if (links.length === 0)
            return ApolloLink.empty();
        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });
    };
    ApolloLink.split = function (test, left, right) {
        var leftLink = toLink(left);
        var rightLink = toLink(right || new ApolloLink(passthrough));
        if (isTerminating(leftLink) && isTerminating(rightLink)) {
            return new ApolloLink(function (operation) {
                return test(operation)
                    ? leftLink.request(operation) || Observable.of()
                    : rightLink.request(operation) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return test(operation)
                    ? leftLink.request(operation, forward) || Observable.of()
                    : rightLink.request(operation, forward) || Observable.of();
            });
        }
    };
    ApolloLink.execute = function (link, operation) {
        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());
    };
    ApolloLink.concat = function (first, second) {
        var firstLink = toLink(first);
        if (isTerminating(firstLink)) {
            __DEV__ && invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
            return firstLink;
        }
        var nextLink = toLink(second);
        if (isTerminating(nextLink)) {
            return new ApolloLink(function (operation) {
                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return (firstLink.request(operation, function (op) {
                    return nextLink.request(op, forward) || Observable.of();
                }) || Observable.of());
            });
        }
    };
    ApolloLink.prototype.split = function (test, left, right) {
        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));
    };
    ApolloLink.prototype.concat = function (next) {
        return ApolloLink.concat(this, next);
    };
    ApolloLink.prototype.request = function (operation, forward) {
        throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(19);
    };
    ApolloLink.prototype.onError = function (error, observer) {
        if (observer && observer.error) {
            observer.error(error);
            return false;
        }
        throw error;
    };
    ApolloLink.prototype.setOnError = function (fn) {
        this.onError = fn;
        return this;
    };
    return ApolloLink;
}());

ApolloLink.empty;

ApolloLink.from;

ApolloLink.split;

ApolloLink.concat;

var execute = ApolloLink.execute;

var version = '3.6.4';

var hasOwnProperty$6 = Object.prototype.hasOwnProperty;
function parseAndCheckHttpResponse(operations) {
    return function (response) { return response
        .text()
        .then(function (bodyText) {
        try {
            return JSON.parse(bodyText);
        }
        catch (err) {
            var parseError = err;
            parseError.name = 'ServerParseError';
            parseError.response = response;
            parseError.statusCode = response.status;
            parseError.bodyText = bodyText;
            throw parseError;
        }
    })
        .then(function (result) {
        if (response.status >= 300) {
            throwServerError(response, result, "Response not successful: Received status code ".concat(response.status));
        }
        if (!Array.isArray(result) &&
            !hasOwnProperty$6.call(result, 'data') &&
            !hasOwnProperty$6.call(result, 'errors')) {
            throwServerError(response, result, "Server response was missing for query '".concat(Array.isArray(operations)
                ? operations.map(function (op) { return op.operationName; })
                : operations.operationName, "'."));
        }
        return result;
    }); };
}

var serializeFetchParameter = function (p, label) {
    var serialized;
    try {
        serialized = JSON.stringify(p);
    }
    catch (e) {
        var parseError = __DEV__ ? new InvariantError("Network request failed. ".concat(label, " is not serializable: ").concat(e.message)) : new InvariantError(21);
        parseError.parseError = e;
        throw parseError;
    }
    return serialized;
};

var defaultHttpOptions = {
    includeQuery: true,
    includeExtensions: false,
};
var defaultHeaders = {
    accept: '*/*',
    'content-type': 'application/json',
};
var defaultOptions$1 = {
    method: 'POST',
};
var fallbackHttpConfig = {
    http: defaultHttpOptions,
    headers: defaultHeaders,
    options: defaultOptions$1,
};
var defaultPrinter = function (ast, printer) { return printer(ast); };
function selectHttpOptionsAndBodyInternal(operation, printer) {
    var configs = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        configs[_i - 2] = arguments[_i];
    }
    var options = {};
    var http = {};
    configs.forEach(function (config) {
        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), headersToLowerCase(config.headers)) });
        if (config.credentials) {
            options.credentials = config.credentials;
        }
        http = __assign(__assign({}, http), config.http);
    });
    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
    var body = { operationName: operationName, variables: variables };
    if (http.includeExtensions)
        body.extensions = extensions;
    if (http.includeQuery)
        body.query = printer(query, print);
    return {
        options: options,
        body: body,
    };
}
function headersToLowerCase(headers) {
    if (headers) {
        var normalized_1 = Object.create(null);
        Object.keys(Object(headers)).forEach(function (name) {
            normalized_1[name.toLowerCase()] = headers[name];
        });
        return normalized_1;
    }
    return headers;
}

var checkFetcher = function (fetcher) {
    if (!fetcher && typeof fetch === 'undefined') {
        throw __DEV__ ? new InvariantError("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ") : new InvariantError(20);
    }
};

var createSignalIfSupported = function () {
    if (typeof AbortController === 'undefined')
        return { controller: false, signal: false };
    var controller = new AbortController();
    var signal = controller.signal;
    return { controller: controller, signal: signal };
};

var selectURI = function (operation, fallbackURI) {
    var context = operation.getContext();
    var contextURI = context.uri;
    if (contextURI) {
        return contextURI;
    }
    else if (typeof fallbackURI === 'function') {
        return fallbackURI(operation);
    }
    else {
        return fallbackURI || '/graphql';
    }
};

function rewriteURIForGET(chosenURI, body) {
    var queryParams = [];
    var addQueryParam = function (key, value) {
        queryParams.push("".concat(key, "=").concat(encodeURIComponent(value)));
    };
    if ('query' in body) {
        addQueryParam('query', body.query);
    }
    if (body.operationName) {
        addQueryParam('operationName', body.operationName);
    }
    if (body.variables) {
        var serializedVariables = void 0;
        try {
            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');
        }
        catch (parseError) {
            return { parseError: parseError };
        }
        addQueryParam('variables', serializedVariables);
    }
    if (body.extensions) {
        var serializedExtensions = void 0;
        try {
            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');
        }
        catch (parseError) {
            return { parseError: parseError };
        }
        addQueryParam('extensions', serializedExtensions);
    }
    var fragment = '', preFragment = chosenURI;
    var fragmentStart = chosenURI.indexOf('#');
    if (fragmentStart !== -1) {
        fragment = chosenURI.substr(fragmentStart);
        preFragment = chosenURI.substr(0, fragmentStart);
    }
    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';
    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;
    return { newURI: newURI };
}

var backupFetch = maybe$1(function () { return fetch; });
var createHttpLink = function (linkOptions) {
    if (linkOptions === void 0) { linkOptions = {}; }
    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest$1(linkOptions, ["uri", "fetch", "print", "includeExtensions", "useGETForQueries", "includeUnusedVariables"]);
    if (__DEV__) {
        checkFetcher(preferredFetch || backupFetch);
    }
    var linkConfig = {
        http: { includeExtensions: includeExtensions },
        options: requestOptions.fetchOptions,
        credentials: requestOptions.credentials,
        headers: requestOptions.headers,
    };
    return new ApolloLink(function (operation) {
        var chosenURI = selectURI(operation, uri);
        var context = operation.getContext();
        var clientAwarenessHeaders = {};
        if (context.clientAwareness) {
            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;
            if (name_1) {
                clientAwarenessHeaders['apollographql-client-name'] = name_1;
            }
            if (version) {
                clientAwarenessHeaders['apollographql-client-version'] = version;
            }
        }
        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);
        var contextConfig = {
            http: context.http,
            options: context.fetchOptions,
            credentials: context.credentials,
            headers: contextHeaders,
        };
        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
        if (body.variables && !includeUnusedVariables) {
            var unusedNames_1 = new Set(Object.keys(body.variables));
            visit(operation.query, {
                Variable: function (node, _key, parent) {
                    if (parent && parent.kind !== 'VariableDefinition') {
                        unusedNames_1.delete(node.name.value);
                    }
                },
            });
            if (unusedNames_1.size) {
                body.variables = __assign({}, body.variables);
                unusedNames_1.forEach(function (name) {
                    delete body.variables[name];
                });
            }
        }
        var controller;
        if (!options.signal) {
            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
            controller = _controller;
            if (controller)
                options.signal = signal;
        }
        var definitionIsMutation = function (d) {
            return d.kind === 'OperationDefinition' && d.operation === 'mutation';
        };
        if (useGETForQueries &&
            !operation.query.definitions.some(definitionIsMutation)) {
            options.method = 'GET';
        }
        if (options.method === 'GET') {
            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
            if (parseError) {
                return fromError(parseError);
            }
            chosenURI = newURI;
        }
        else {
            try {
                options.body = serializeFetchParameter(body, 'Payload');
            }
            catch (parseError) {
                return fromError(parseError);
            }
        }
        return new Observable(function (observer) {
            var currentFetch = preferredFetch || maybe$1(function () { return fetch; }) || backupFetch;
            currentFetch(chosenURI, options)
                .then(function (response) {
                operation.setContext({ response: response });
                return response;
            })
                .then(parseAndCheckHttpResponse(operation))
                .then(function (result) {
                observer.next(result);
                observer.complete();
                return result;
            })
                .catch(function (err) {
                if (err.name === 'AbortError')
                    return;
                if (err.result && err.result.errors && err.result.data) {
                    observer.next(err.result);
                }
                observer.error(err);
            });
            return function () {
                if (controller)
                    controller.abort();
            };
        });
    });
};

var HttpLink = (function (_super) {
    __extends(HttpLink, _super);
    function HttpLink(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, createHttpLink(options).request) || this;
        _this.options = options;
        return _this;
    }
    return HttpLink;
}(ApolloLink));

var _a$2 = Object.prototype, toString = _a$2.toString, hasOwnProperty$5 = _a$2.hasOwnProperty;
var fnToStr = Function.prototype.toString;
var previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */
function equal(a, b) {
    try {
        return check(a, b);
    }
    finally {
        previousComparisons.clear();
    }
}
function check(a, b) {
    // If the two values are strictly equal, our job is easy.
    if (a === b) {
        return true;
    }
    // Object.prototype.toString returns a representation of the runtime type of
    // the given value that is considerably more precise than typeof.
    var aTag = toString.call(a);
    var bTag = toString.call(b);
    // If the runtime types of a and b are different, they could maybe be equal
    // under some interpretation of equality, but for simplicity and performance
    // we just return false instead.
    if (aTag !== bTag) {
        return false;
    }
    switch (aTag) {
        case '[object Array]':
            // Arrays are a lot like other objects, but we can cheaply compare their
            // lengths as a short-cut before comparing their elements.
            if (a.length !== b.length)
                return false;
        // Fall through to object case...
        case '[object Object]': {
            if (previouslyCompared(a, b))
                return true;
            var aKeys = definedKeys(a);
            var bKeys = definedKeys(b);
            // If `a` and `b` have a different number of enumerable keys, they
            // must be different.
            var keyCount = aKeys.length;
            if (keyCount !== bKeys.length)
                return false;
            // Now make sure they have the same keys.
            for (var k = 0; k < keyCount; ++k) {
                if (!hasOwnProperty$5.call(b, aKeys[k])) {
                    return false;
                }
            }
            // Finally, check deep equality of all child properties.
            for (var k = 0; k < keyCount; ++k) {
                var key = aKeys[k];
                if (!check(a[key], b[key])) {
                    return false;
                }
            }
            return true;
        }
        case '[object Error]':
            return a.name === b.name && a.message === b.message;
        case '[object Number]':
            // Handle NaN, which is !== itself.
            if (a !== a)
                return b !== b;
        // Fall through to shared +a === +b case...
        case '[object Boolean]':
        case '[object Date]':
            return +a === +b;
        case '[object RegExp]':
        case '[object String]':
            return a == "" + b;
        case '[object Map]':
        case '[object Set]': {
            if (a.size !== b.size)
                return false;
            if (previouslyCompared(a, b))
                return true;
            var aIterator = a.entries();
            var isMap = aTag === '[object Map]';
            while (true) {
                var info = aIterator.next();
                if (info.done)
                    break;
                // If a instanceof Set, aValue === aKey.
                var _a = info.value, aKey = _a[0], aValue = _a[1];
                // So this works the same way for both Set and Map.
                if (!b.has(aKey)) {
                    return false;
                }
                // However, we care about deep equality of values only when dealing
                // with Map structures.
                if (isMap && !check(aValue, b.get(aKey))) {
                    return false;
                }
            }
            return true;
        }
        case '[object Uint16Array]':
        case '[object Uint8Array]': // Buffer, in Node.js.
        case '[object Uint32Array]':
        case '[object Int32Array]':
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object ArrayBuffer]':
            // DataView doesn't need these conversions, but the equality check is
            // otherwise the same.
            a = new Uint8Array(a);
            b = new Uint8Array(b);
        // Fall through...
        case '[object DataView]': {
            var len = a.byteLength;
            if (len === b.byteLength) {
                while (len-- && a[len] === b[len]) {
                    // Keep looping as long as the bytes are equal.
                }
            }
            return len === -1;
        }
        case '[object AsyncFunction]':
        case '[object GeneratorFunction]':
        case '[object AsyncGeneratorFunction]':
        case '[object Function]': {
            var aCode = fnToStr.call(a);
            if (aCode !== fnToStr.call(b)) {
                return false;
            }
            // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.
            return !endsWith(aCode, nativeCodeSuffix);
        }
    }
    // Otherwise the values are not equal.
    return false;
}
function definedKeys(obj) {
    // Remember that the second argument to Array.prototype.filter will be
    // used as `this` within the callback function.
    return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
    return this[key] !== void 0;
}
var nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
    var fromIndex = full.length - suffix.length;
    return fromIndex >= 0 &&
        full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
    // Though cyclic references can make an object graph appear infinite from the
    // perspective of a depth-first traversal, the graph still contains a finite
    // number of distinct object references. We use the previousComparisons cache
    // to avoid comparing the same pair of object references more than once, which
    // guarantees termination (even if we end up comparing every object in one
    // graph to every object in the other graph, which is extremely unlikely),
    // while still allowing weird isomorphic structures (like rings with different
    // lengths) a chance to pass the equality test.
    var bSet = previousComparisons.get(a);
    if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b))
            return true;
    }
    else {
        previousComparisons.set(a, bSet = new Set);
    }
    bSet.add(b);
    return false;
}

// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function () { return Object.create(null); };
// Useful for processing arguments objects as well as arrays.
var _a$1 = Array.prototype, forEach = _a$1.forEach, slice = _a$1.slice;
var Trie = /** @class */ (function () {
    function Trie(weakness, makeData) {
        if (weakness === void 0) { weakness = true; }
        if (makeData === void 0) { makeData = defaultMakeData; }
        this.weakness = weakness;
        this.makeData = makeData;
    }
    Trie.prototype.lookup = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
        }
        return this.lookupArray(array);
    };
    Trie.prototype.lookupArray = function (array) {
        var node = this;
        forEach.call(array, function (key) { return node = node.getChildTrie(key); });
        return node.data || (node.data = this.makeData(slice.call(array)));
    };
    Trie.prototype.getChildTrie = function (key) {
        var map = this.weakness && isObjRef(key)
            ? this.weak || (this.weak = new WeakMap())
            : this.strong || (this.strong = new Map());
        var child = map.get(key);
        if (!child)
            map.set(key, child = new Trie(this.weakness, this.makeData));
        return child;
    };
    return Trie;
}());
function isObjRef(value) {
    switch (typeof value) {
        case "object":
            if (value === null)
                break;
        // Fall through to return true...
        case "function":
            return true;
    }
    return false;
}

// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
var currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
var MISSING_VALUE = {};
var idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
var makeSlotClass = function () { return /** @class */ (function () {
    function Slot() {
        // If you have a Slot object, you can find out its slot.id, but you cannot
        // guess the slot.id of a Slot you don't have access to, thanks to the
        // randomized suffix.
        this.id = [
            "slot",
            idCounter++,
            Date.now(),
            Math.random().toString(36).slice(2),
        ].join(":");
    }
    Slot.prototype.hasValue = function () {
        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
            // We use the Slot object iself as a key to its value, which means the
            // value cannot be obtained without a reference to the Slot object.
            if (this.id in context_1.slots) {
                var value = context_1.slots[this.id];
                if (value === MISSING_VALUE)
                    break;
                if (context_1 !== currentContext) {
                    // Cache the value in currentContext.slots so the next lookup will
                    // be faster. This caching is safe because the tree of contexts and
                    // the values of the slots are logically immutable.
                    currentContext.slots[this.id] = value;
                }
                return true;
            }
        }
        if (currentContext) {
            // If a value was not found for this Slot, it's never going to be found
            // no matter how many times we look it up, so we might as well cache
            // the absence of the value, too.
            currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
    };
    Slot.prototype.getValue = function () {
        if (this.hasValue()) {
            return currentContext.slots[this.id];
        }
    };
    Slot.prototype.withValue = function (value, callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        var _a;
        var slots = (_a = {
                __proto__: null
            },
            _a[this.id] = value,
            _a);
        var parent = currentContext;
        currentContext = { parent: parent, slots: slots };
        try {
            // Function.prototype.apply allows the arguments array argument to be
            // omitted or undefined, so args! is fine here.
            return callback.apply(thisArg, args);
        }
        finally {
            currentContext = parent;
        }
    };
    // Capture the current context and wrap a callback function so that it
    // reestablishes the captured context when called.
    Slot.bind = function (callback) {
        var context = currentContext;
        return function () {
            var saved = currentContext;
            try {
                currentContext = context;
                return callback.apply(this, arguments);
            }
            finally {
                currentContext = saved;
            }
        };
    };
    // Immediately run a callback function without any captured context.
    Slot.noContext = function (callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        if (currentContext) {
            var saved = currentContext;
            try {
                currentContext = null;
                // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.
                return callback.apply(thisArg, args);
            }
            finally {
                currentContext = saved;
            }
        }
        else {
            return callback.apply(thisArg, args);
        }
    };
    return Slot;
}()); };
// We store a single global implementation of the Slot class as a permanent
// non-enumerable symbol property of the Array constructor. This obfuscation
// does nothing to prevent access to the Slot class, but at least it ensures
// the implementation (i.e. currentContext) cannot be tampered with, and all
// copies of the @wry/context package (hopefully just one) will share the
// same Slot implementation. Since the first copy of the @wry/context package
// to be imported wins, this technique imposes a very high cost for any
// future breaking changes to the Slot class.
var globalKey = "@wry/context:Slot";
var host = Array;
var Slot = host[globalKey] || function () {
    var Slot = makeSlotClass();
    try {
        Object.defineProperty(host, globalKey, {
            value: host[globalKey] = Slot,
            enumerable: false,
            writable: false,
            configurable: false,
        });
    }
    finally {
        return Slot;
    }
}();

Slot.bind; Slot.noContext;

function defaultDispose() { }
var Cache = /** @class */ (function () {
    function Cache(max, dispose) {
        if (max === void 0) { max = Infinity; }
        if (dispose === void 0) { dispose = defaultDispose; }
        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
    }
    Cache.prototype.has = function (key) {
        return this.map.has(key);
    };
    Cache.prototype.get = function (key) {
        var node = this.getNode(key);
        return node && node.value;
    };
    Cache.prototype.getNode = function (key) {
        var node = this.map.get(key);
        if (node && node !== this.newest) {
            var older = node.older, newer = node.newer;
            if (newer) {
                newer.older = older;
            }
            if (older) {
                older.newer = newer;
            }
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) {
                this.oldest = newer;
            }
        }
        return node;
    };
    Cache.prototype.set = function (key, value) {
        var node = this.getNode(key);
        if (node) {
            return node.value = value;
        }
        node = {
            key: key,
            value: value,
            newer: null,
            older: this.newest
        };
        if (this.newest) {
            this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.map.set(key, node);
        return node.value;
    };
    Cache.prototype.clean = function () {
        while (this.oldest && this.map.size > this.max) {
            this.delete(this.oldest.key);
        }
    };
    Cache.prototype.delete = function (key) {
        var node = this.map.get(key);
        if (node) {
            if (node === this.newest) {
                this.newest = node.older;
            }
            if (node === this.oldest) {
                this.oldest = node.newer;
            }
            if (node.newer) {
                node.newer.older = node.older;
            }
            if (node.older) {
                node.older.newer = node.newer;
            }
            this.map.delete(key);
            this.dispose(node.value, key);
            return true;
        }
        return false;
    };
    return Cache;
}());

var parentEntrySlot = new Slot();

var _a;
var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
var 
// This Array.from polyfill is restricted to working with Set<any> for now,
// but we can improve the polyfill and add other input types, as needed. Note
// that this fallback implementation will only be used if the host environment
// does not support a native Array.from function. In most modern JS runtimes,
// the toArray function exported here will be === Array.from.
toArray = (_a = Array.from, _a === void 0 ? function (collection) {
    var array = [];
    collection.forEach(function (item) { return array.push(item); });
    return array;
} : _a);
function maybeUnsubscribe(entryOrDep) {
    var unsubscribe = entryOrDep.unsubscribe;
    if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
    }
}

var emptySetPool = [];
var POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
    if (!condition) {
        throw new Error(optionalMessage || "assertion failure");
    }
}
function valueIs(a, b) {
    var len = a.length;
    return (
    // Unknown values are not equal to each other.
    len > 0 &&
        // Both values must be ordinary (or both exceptional) to be equal.
        len === b.length &&
        // The underlying value or exception must be the same.
        a[len - 1] === b[len - 1]);
}
function valueGet(value) {
    switch (value.length) {
        case 0: throw new Error("unknown value");
        case 1: return value[0];
        case 2: throw value[1];
    }
}
function valueCopy(value) {
    return value.slice(0);
}
var Entry = /** @class */ (function () {
    function Entry(fn) {
        this.fn = fn;
        this.parents = new Set();
        this.childValues = new Map();
        // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.
        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry.count;
    }
    Entry.prototype.peek = function () {
        if (this.value.length === 1 && !mightBeDirty(this)) {
            rememberParent(this);
            return this.value[0];
        }
    };
    // This is the most important method of the Entry API, because it
    // determines whether the cached this.value can be returned immediately,
    // or must be recomputed. The overall performance of the caching system
    // depends on the truth of the following observations: (1) this.dirty is
    // usually false, (2) this.dirtyChildren is usually null/empty, and thus
    // (3) valueGet(this.value) is usually returned without recomputation.
    Entry.prototype.recompute = function (args) {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this)
            ? reallyRecompute(this, args)
            : valueGet(this.value);
    };
    Entry.prototype.setDirty = function () {
        if (this.dirty)
            return;
        this.dirty = true;
        this.value.length = 0;
        reportDirty(this);
        // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.
        maybeUnsubscribe(this);
    };
    Entry.prototype.dispose = function () {
        var _this = this;
        this.setDirty();
        // Sever any dependency relationships with our own children, so those
        // children don't retain this parent Entry in their child.parents sets,
        // thereby preventing it from being fully garbage collected.
        forgetChildren(this);
        // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.
        eachParent(this, function (parent, child) {
            parent.setDirty();
            forgetChild(parent, _this);
        });
    };
    Entry.prototype.forget = function () {
        // The code that creates Entry objects in index.ts will replace this method
        // with one that actually removes the Entry from the cache, which will also
        // trigger the entry.dispose method.
        this.dispose();
    };
    Entry.prototype.dependOn = function (dep) {
        dep.add(this);
        if (!this.deps) {
            this.deps = emptySetPool.pop() || new Set();
        }
        this.deps.add(dep);
    };
    Entry.prototype.forgetDeps = function () {
        var _this = this;
        if (this.deps) {
            toArray(this.deps).forEach(function (dep) { return dep.delete(_this); });
            this.deps.clear();
            emptySetPool.push(this.deps);
            this.deps = null;
        }
    };
    Entry.count = 0;
    return Entry;
}());
function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
        child.parents.add(parent);
        if (!parent.childValues.has(child)) {
            parent.childValues.set(child, []);
        }
        if (mightBeDirty(child)) {
            reportDirtyChild(parent, child);
        }
        else {
            reportCleanChild(parent, child);
        }
        return parent;
    }
}
function reallyRecompute(entry, args) {
    forgetChildren(entry);
    // Set entry as the parent entry while calling recomputeNewValue(entry).
    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
    if (maybeSubscribe(entry, args)) {
        // If we successfully recomputed entry.value and did not fail to
        // (re)subscribe, then this Entry is no longer explicitly dirty.
        setClean(entry);
    }
    return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    // Set entry.value as unknown.
    entry.value.length = 0;
    try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, args);
    }
    catch (e) {
        // If entry.fn throws, entry.value will become exceptional.
        entry.value[1] = e;
    }
    // Either way, this line is always reached.
    entry.recomputing = false;
}
function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
        // This Entry may still have dirty children, in which case we can't
        // let our parents know we're clean just yet.
        return;
    }
    reportClean(entry);
}
function reportDirty(child) {
    eachParent(child, reportDirtyChild);
}
function reportClean(child) {
    eachParent(child, reportCleanChild);
}
function eachParent(child, callback) {
    var parentCount = child.parents.size;
    if (parentCount) {
        var parents = toArray(child.parents);
        for (var i = 0; i < parentCount; ++i) {
            callback(parents[i], child);
        }
    }
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
    // Must have called rememberParent(child) before calling
    // reportDirtyChild(parent, child).
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    var parentWasClean = !mightBeDirty(parent);
    if (!parent.dirtyChildren) {
        parent.dirtyChildren = emptySetPool.pop() || new Set;
    }
    else if (parent.dirtyChildren.has(child)) {
        // If we already know this child is dirty, then we must have already
        // informed our own parents that we are dirty, so we can terminate
        // the recursion early.
        return;
    }
    parent.dirtyChildren.add(child);
    // If parent was clean before, it just became (possibly) dirty (according to
    // mightBeDirty), since we just added child to parent.dirtyChildren.
    if (parentWasClean) {
        reportDirty(parent);
    }
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
    // Must have called rememberChild(child) before calling
    // reportCleanChild(parent, child).
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
        parent.childValues.set(child, valueCopy(child.value));
    }
    else if (!valueIs(childValue, child.value)) {
        parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
        return;
    }
    reportClean(parent);
}
function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
        dc.delete(child);
        if (dc.size === 0) {
            if (emptySetPool.length < POOL_TARGET_SIZE) {
                emptySetPool.push(dc);
            }
            parent.dirtyChildren = null;
        }
    }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
    if (parent.childValues.size > 0) {
        parent.childValues.forEach(function (_value, child) {
            forgetChild(parent, child);
        });
    }
    // Remove this parent Entry from any sets to which it was added by the
    // addToSet method.
    parent.forgetDeps();
    // After we forget all our children, this.dirtyChildren must be empty
    // and therefore must have been reset to null.
    assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") {
        try {
            maybeUnsubscribe(entry); // Prevent double subscriptions.
            entry.unsubscribe = entry.subscribe.apply(null, args);
        }
        catch (e) {
            // If this Entry has a subscribe function and it threw an exception
            // (or an unsubscribe function it previously returned now throws),
            // return false to indicate that we were not able to subscribe (or
            // unsubscribe), and this Entry should remain dirty.
            entry.setDirty();
            return false;
        }
    }
    // Returning true indicates either that there was no entry.subscribe
    // function or that it succeeded.
    return true;
}

var EntryMethods = {
    setDirty: true,
    dispose: true,
    forget: true,
};
function dep(options) {
    var depsByKey = new Map();
    var subscribe = options && options.subscribe;
    function depend(key) {
        var parent = parentEntrySlot.getValue();
        if (parent) {
            var dep_1 = depsByKey.get(key);
            if (!dep_1) {
                depsByKey.set(key, dep_1 = new Set);
            }
            parent.dependOn(dep_1);
            if (typeof subscribe === "function") {
                maybeUnsubscribe(dep_1);
                dep_1.unsubscribe = subscribe(key);
            }
        }
    }
    depend.dirty = function dirty(key, entryMethodName) {
        var dep = depsByKey.get(key);
        if (dep) {
            var m_1 = (entryMethodName &&
                hasOwnProperty$4.call(EntryMethods, entryMethodName)) ? entryMethodName : "setDirty";
            // We have to use toArray(dep).forEach instead of dep.forEach, because
            // modifying a Set while iterating over it can cause elements in the Set
            // to be removed from the Set before they've been iterated over.
            toArray(dep).forEach(function (entry) { return entry[m_1](); });
            depsByKey.delete(key);
            maybeUnsubscribe(dep);
        }
    };
    return depend;
}

function makeDefaultMakeCacheKeyFunction() {
    var keyTrie = new Trie(typeof WeakMap === "function");
    return function () {
        return keyTrie.lookupArray(arguments);
    };
}
// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
makeDefaultMakeCacheKeyFunction();
var caches = new Set();
function wrap(originalFunction, options) {
    if (options === void 0) { options = Object.create(null); }
    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });
    var keyArgs = options.keyArgs;
    var makeCacheKey = options.makeCacheKey ||
        makeDefaultMakeCacheKeyFunction();
    var optimistic = function () {
        var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
        if (key === void 0) {
            return originalFunction.apply(null, arguments);
        }
        var entry = cache.get(key);
        if (!entry) {
            cache.set(key, entry = new Entry(originalFunction));
            entry.subscribe = options.subscribe;
            // Give the Entry the ability to trigger cache.delete(key), even though
            // the Entry itself does not know about key or cache.
            entry.forget = function () { return cache.delete(key); };
        }
        var value = entry.recompute(Array.prototype.slice.call(arguments));
        // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.
        cache.set(key, entry);
        caches.add(cache);
        // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.
        if (!parentEntrySlot.hasValue()) {
            caches.forEach(function (cache) { return cache.clean(); });
            caches.clear();
        }
        return value;
    };
    Object.defineProperty(optimistic, "size", {
        get: function () {
            return cache["map"].size;
        },
        configurable: false,
        enumerable: false,
    });
    function dirtyKey(key) {
        var entry = cache.get(key);
        if (entry) {
            entry.setDirty();
        }
    }
    optimistic.dirtyKey = dirtyKey;
    optimistic.dirty = function dirty() {
        dirtyKey(makeCacheKey.apply(null, arguments));
    };
    function peekKey(key) {
        var entry = cache.get(key);
        if (entry) {
            return entry.peek();
        }
    }
    optimistic.peekKey = peekKey;
    optimistic.peek = function peek() {
        return peekKey(makeCacheKey.apply(null, arguments));
    };
    function forgetKey(key) {
        return cache.delete(key);
    }
    optimistic.forgetKey = forgetKey;
    optimistic.forget = function forget() {
        return forgetKey(makeCacheKey.apply(null, arguments));
    };
    optimistic.makeCacheKey = makeCacheKey;
    optimistic.getKey = keyArgs ? function getKey() {
        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));
    } : makeCacheKey;
    return Object.freeze(optimistic);
}

var ApolloCache = (function () {
    function ApolloCache() {
        this.getFragmentDoc = wrap(getFragmentQueryDocument);
    }
    ApolloCache.prototype.batch = function (options) {
        var _this = this;
        var optimisticId = typeof options.optimistic === "string" ? options.optimistic :
            options.optimistic === false ? null : void 0;
        var updateResult;
        this.performTransaction(function () { return updateResult = options.update(_this); }, optimisticId);
        return updateResult;
    };
    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
        this.performTransaction(transaction, optimisticId);
    };
    ApolloCache.prototype.transformDocument = function (document) {
        return document;
    };
    ApolloCache.prototype.identify = function (object) {
        return;
    };
    ApolloCache.prototype.gc = function () {
        return [];
    };
    ApolloCache.prototype.modify = function (options) {
        return false;
    };
    ApolloCache.prototype.transformForLink = function (document) {
        return document;
    };
    ApolloCache.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        return this.read(__assign(__assign({}, options), { rootId: options.id || 'ROOT_QUERY', optimistic: optimistic }));
    };
    ApolloCache.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));
    };
    ApolloCache.prototype.writeQuery = function (_a) {
        var id = _a.id, data = _a.data, options = __rest$1(_a, ["id", "data"]);
        return this.write(Object.assign(options, {
            dataId: id || 'ROOT_QUERY',
            result: data,
        }));
    };
    ApolloCache.prototype.writeFragment = function (_a) {
        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest$1(_a, ["id", "data", "fragment", "fragmentName"]);
        return this.write(Object.assign(options, {
            query: this.getFragmentDoc(fragment, fragmentName),
            dataId: id,
            result: data,
        }));
    };
    ApolloCache.prototype.updateQuery = function (options, update) {
        return this.batch({
            update: function (cache) {
                var value = cache.readQuery(options);
                var data = update(value);
                if (data === void 0 || data === null)
                    return value;
                cache.writeQuery(__assign(__assign({}, options), { data: data }));
                return data;
            },
        });
    };
    ApolloCache.prototype.updateFragment = function (options, update) {
        return this.batch({
            update: function (cache) {
                var value = cache.readFragment(options);
                var data = update(value);
                if (data === void 0 || data === null)
                    return value;
                cache.writeFragment(__assign(__assign({}, options), { data: data }));
                return data;
            },
        });
    };
    return ApolloCache;
}());

var MissingFieldError = (function () {
    function MissingFieldError(message, path, query, variables) {
        this.message = message;
        this.path = path;
        this.query = query;
        this.variables = variables;
    }
    return MissingFieldError;
}());

var hasOwn = Object.prototype.hasOwnProperty;
function defaultDataIdFromObject(_a, context) {
    var __typename = _a.__typename, id = _a.id, _id = _a._id;
    if (typeof __typename === "string") {
        if (context) {
            context.keyObject =
                id !== void 0 ? { id: id } :
                    _id !== void 0 ? { _id: _id } :
                        void 0;
        }
        if (id === void 0)
            id = _id;
        if (id !== void 0) {
            return "".concat(__typename, ":").concat((typeof id === "number" ||
                typeof id === "string") ? id : JSON.stringify(id));
        }
    }
}
var defaultConfig = {
    dataIdFromObject: defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    canonizeResults: false,
};
function normalizeConfig(config) {
    return compact(defaultConfig, config);
}
function shouldCanonizeResults(config) {
    var value = config.canonizeResults;
    return value === void 0 ? defaultConfig.canonizeResults : value;
}
function getTypenameFromStoreObject(store, objectOrReference) {
    return isReference(objectOrReference)
        ? store.get(objectOrReference.__ref, "__typename")
        : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
    var match = storeFieldName.match(TypeOrFieldNameRegExp);
    return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
    if (isNonNullObject(result)) {
        return isArray(result)
            ? result.every(function (item) { return selectionSetMatchesResult(selectionSet, item, variables); })
            : selectionSet.selections.every(function (field) {
                if (isField(field) && shouldInclude(field, variables)) {
                    var key = resultKeyNameFromField(field);
                    return hasOwn.call(result, key) &&
                        (!field.selectionSet ||
                            selectionSetMatchesResult(field.selectionSet, result[key], variables));
                }
                return true;
            });
    }
    return false;
}
function storeValueIsStoreObject(value) {
    return isNonNullObject(value) &&
        !isReference(value) &&
        !isArray(value);
}
function makeProcessedFieldsMerger() {
    return new DeepMerger;
}
var isArray = function (a) { return Array.isArray(a); };

var DELETE = Object.create(null);
var delModifier = function () { return DELETE; };
var INVALIDATE = Object.create(null);
var EntityStore = (function () {
    function EntityStore(policies, group) {
        var _this = this;
        this.policies = policies;
        this.group = group;
        this.data = Object.create(null);
        this.rootIds = Object.create(null);
        this.refs = Object.create(null);
        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)
            ? _this.get(objectOrReference.__ref, storeFieldName)
            : objectOrReference && objectOrReference[storeFieldName]); };
        this.canRead = function (objOrRef) {
            return isReference(objOrRef)
                ? _this.has(objOrRef.__ref)
                : typeof objOrRef === "object";
        };
        this.toReference = function (objOrIdOrRef, mergeIntoStore) {
            if (typeof objOrIdOrRef === "string") {
                return makeReference(objOrIdOrRef);
            }
            if (isReference(objOrIdOrRef)) {
                return objOrIdOrRef;
            }
            var id = _this.policies.identify(objOrIdOrRef)[0];
            if (id) {
                var ref = makeReference(id);
                if (mergeIntoStore) {
                    _this.merge(id, objOrIdOrRef);
                }
                return ref;
            }
        };
    }
    EntityStore.prototype.toObject = function () {
        return __assign({}, this.data);
    };
    EntityStore.prototype.has = function (dataId) {
        return this.lookup(dataId, true) !== void 0;
    };
    EntityStore.prototype.get = function (dataId, fieldName) {
        this.group.depend(dataId, fieldName);
        if (hasOwn.call(this.data, dataId)) {
            var storeObject = this.data[dataId];
            if (storeObject && hasOwn.call(storeObject, fieldName)) {
                return storeObject[fieldName];
            }
        }
        if (fieldName === "__typename" &&
            hasOwn.call(this.policies.rootTypenamesById, dataId)) {
            return this.policies.rootTypenamesById[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.get(dataId, fieldName);
        }
    };
    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
        if (dependOnExistence)
            this.group.depend(dataId, "__exists");
        if (hasOwn.call(this.data, dataId)) {
            return this.data[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.lookup(dataId, dependOnExistence);
        }
        if (this.policies.rootTypenamesById[dataId]) {
            return Object.create(null);
        }
    };
    EntityStore.prototype.merge = function (older, newer) {
        var _this = this;
        var dataId;
        if (isReference(older))
            older = older.__ref;
        if (isReference(newer))
            newer = newer.__ref;
        var existing = typeof older === "string"
            ? this.lookup(dataId = older)
            : older;
        var incoming = typeof newer === "string"
            ? this.lookup(dataId = newer)
            : newer;
        if (!incoming)
            return;
        __DEV__ ? invariant(typeof dataId === "string", "store.merge expects a string ID") : invariant(typeof dataId === "string", 1);
        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);
        this.data[dataId] = merged;
        if (merged !== existing) {
            delete this.refs[dataId];
            if (this.group.caching) {
                var fieldsToDirty_1 = Object.create(null);
                if (!existing)
                    fieldsToDirty_1.__exists = 1;
                Object.keys(incoming).forEach(function (storeFieldName) {
                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
                        fieldsToDirty_1[storeFieldName] = 1;
                        var fieldName = fieldNameFromStoreName(storeFieldName);
                        if (fieldName !== storeFieldName &&
                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
                            fieldsToDirty_1[fieldName] = 1;
                        }
                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
                            delete merged[storeFieldName];
                        }
                    }
                });
                if (fieldsToDirty_1.__typename &&
                    !(existing && existing.__typename) &&
                    this.policies.rootTypenamesById[dataId] === merged.__typename) {
                    delete fieldsToDirty_1.__typename;
                }
                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });
            }
        }
    };
    EntityStore.prototype.modify = function (dataId, fields) {
        var _this = this;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var changedFields_1 = Object.create(null);
            var needToMerge_1 = false;
            var allDeleted_1 = true;
            var sharedDetails_1 = {
                DELETE: DELETE,
                INVALIDATE: INVALIDATE,
                isReference: isReference,
                toReference: this.toReference,
                canRead: this.canRead,
                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
                    fieldName: fieldNameOrOptions,
                    from: from || makeReference(dataId),
                } : fieldNameOrOptions, { store: _this }); },
            };
            Object.keys(storeObject).forEach(function (storeFieldName) {
                var fieldName = fieldNameFromStoreName(storeFieldName);
                var fieldValue = storeObject[storeFieldName];
                if (fieldValue === void 0)
                    return;
                var modify = typeof fields === "function"
                    ? fields
                    : fields[storeFieldName] || fields[fieldName];
                if (modify) {
                    var newValue = modify === delModifier ? DELETE :
                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));
                    if (newValue === INVALIDATE) {
                        _this.group.dirty(dataId, storeFieldName);
                    }
                    else {
                        if (newValue === DELETE)
                            newValue = void 0;
                        if (newValue !== fieldValue) {
                            changedFields_1[storeFieldName] = newValue;
                            needToMerge_1 = true;
                            fieldValue = newValue;
                        }
                    }
                }
                if (fieldValue !== void 0) {
                    allDeleted_1 = false;
                }
            });
            if (needToMerge_1) {
                this.merge(dataId, changedFields_1);
                if (allDeleted_1) {
                    if (this instanceof Layer) {
                        this.data[dataId] = void 0;
                    }
                    else {
                        delete this.data[dataId];
                    }
                    this.group.dirty(dataId, "__exists");
                }
                return true;
            }
        }
        return false;
    };
    EntityStore.prototype.delete = function (dataId, fieldName, args) {
        var _a;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var typename = this.getFieldValue(storeObject, "__typename");
            var storeFieldName = fieldName && args
                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })
                : fieldName;
            return this.modify(dataId, storeFieldName ? (_a = {},
                _a[storeFieldName] = delModifier,
                _a) : delModifier);
        }
        return false;
    };
    EntityStore.prototype.evict = function (options, limit) {
        var evicted = false;
        if (options.id) {
            if (hasOwn.call(this.data, options.id)) {
                evicted = this.delete(options.id, options.fieldName, options.args);
            }
            if (this instanceof Layer && this !== limit) {
                evicted = this.parent.evict(options, limit) || evicted;
            }
            if (options.fieldName || evicted) {
                this.group.dirty(options.id, options.fieldName || "__exists");
            }
        }
        return evicted;
    };
    EntityStore.prototype.clear = function () {
        this.replace(null);
    };
    EntityStore.prototype.extract = function () {
        var _this = this;
        var obj = this.toObject();
        var extraRootIds = [];
        this.getRootIdSet().forEach(function (id) {
            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {
                extraRootIds.push(id);
            }
        });
        if (extraRootIds.length) {
            obj.__META = { extraRootIds: extraRootIds.sort() };
        }
        return obj;
    };
    EntityStore.prototype.replace = function (newData) {
        var _this = this;
        Object.keys(this.data).forEach(function (dataId) {
            if (!(newData && hasOwn.call(newData, dataId))) {
                _this.delete(dataId);
            }
        });
        if (newData) {
            var __META = newData.__META, rest_1 = __rest$1(newData, ["__META"]);
            Object.keys(rest_1).forEach(function (dataId) {
                _this.merge(dataId, rest_1[dataId]);
            });
            if (__META) {
                __META.extraRootIds.forEach(this.retain, this);
            }
        }
    };
    EntityStore.prototype.retain = function (rootId) {
        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
    };
    EntityStore.prototype.release = function (rootId) {
        if (this.rootIds[rootId] > 0) {
            var count = --this.rootIds[rootId];
            if (!count)
                delete this.rootIds[rootId];
            return count;
        }
        return 0;
    };
    EntityStore.prototype.getRootIdSet = function (ids) {
        if (ids === void 0) { ids = new Set(); }
        Object.keys(this.rootIds).forEach(ids.add, ids);
        if (this instanceof Layer) {
            this.parent.getRootIdSet(ids);
        }
        else {
            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
        }
        return ids;
    };
    EntityStore.prototype.gc = function () {
        var _this = this;
        var ids = this.getRootIdSet();
        var snapshot = this.toObject();
        ids.forEach(function (id) {
            if (hasOwn.call(snapshot, id)) {
                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
                delete snapshot[id];
            }
        });
        var idsToRemove = Object.keys(snapshot);
        if (idsToRemove.length) {
            var root_1 = this;
            while (root_1 instanceof Layer)
                root_1 = root_1.parent;
            idsToRemove.forEach(function (id) { return root_1.delete(id); });
        }
        return idsToRemove;
    };
    EntityStore.prototype.findChildRefIds = function (dataId) {
        if (!hasOwn.call(this.refs, dataId)) {
            var found_1 = this.refs[dataId] = Object.create(null);
            var root = this.data[dataId];
            if (!root)
                return found_1;
            var workSet_1 = new Set([root]);
            workSet_1.forEach(function (obj) {
                if (isReference(obj)) {
                    found_1[obj.__ref] = true;
                }
                if (isNonNullObject(obj)) {
                    Object.keys(obj).forEach(function (key) {
                        var child = obj[key];
                        if (isNonNullObject(child)) {
                            workSet_1.add(child);
                        }
                    });
                }
            });
        }
        return this.refs[dataId];
    };
    EntityStore.prototype.makeCacheKey = function () {
        return this.group.keyMaker.lookupArray(arguments);
    };
    return EntityStore;
}());
var CacheGroup = (function () {
    function CacheGroup(caching, parent) {
        if (parent === void 0) { parent = null; }
        this.caching = caching;
        this.parent = parent;
        this.d = null;
        this.resetCaching();
    }
    CacheGroup.prototype.resetCaching = function () {
        this.d = this.caching ? dep() : null;
        this.keyMaker = new Trie(canUseWeakMap);
    };
    CacheGroup.prototype.depend = function (dataId, storeFieldName) {
        if (this.d) {
            this.d(makeDepKey(dataId, storeFieldName));
            var fieldName = fieldNameFromStoreName(storeFieldName);
            if (fieldName !== storeFieldName) {
                this.d(makeDepKey(dataId, fieldName));
            }
            if (this.parent) {
                this.parent.depend(dataId, storeFieldName);
            }
        }
    };
    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
        if (this.d) {
            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === "__exists" ? "forget" : "setDirty");
        }
    };
    return CacheGroup;
}());
function makeDepKey(dataId, storeFieldName) {
    return storeFieldName + '#' + dataId;
}
function maybeDependOnExistenceOfEntity(store, entityId) {
    if (supportsResultCaching(store)) {
        store.group.depend(entityId, "__exists");
    }
}
(function (EntityStore) {
    var Root = (function (_super) {
        __extends(Root, _super);
        function Root(_a) {
            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;
            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
            _this.stump = new Stump(_this);
            _this.storageTrie = new Trie(canUseWeakMap);
            if (seed)
                _this.replace(seed);
            return _this;
        }
        Root.prototype.addLayer = function (layerId, replay) {
            return this.stump.addLayer(layerId, replay);
        };
        Root.prototype.removeLayer = function () {
            return this;
        };
        Root.prototype.getStorage = function () {
            return this.storageTrie.lookupArray(arguments);
        };
        return Root;
    }(EntityStore));
    EntityStore.Root = Root;
})(EntityStore || (EntityStore = {}));
var Layer = (function (_super) {
    __extends(Layer, _super);
    function Layer(id, parent, replay, group) {
        var _this = _super.call(this, parent.policies, group) || this;
        _this.id = id;
        _this.parent = parent;
        _this.replay = replay;
        _this.group = group;
        replay(_this);
        return _this;
    }
    Layer.prototype.addLayer = function (layerId, replay) {
        return new Layer(layerId, this, replay, this.group);
    };
    Layer.prototype.removeLayer = function (layerId) {
        var _this = this;
        var parent = this.parent.removeLayer(layerId);
        if (layerId === this.id) {
            if (this.group.caching) {
                Object.keys(this.data).forEach(function (dataId) {
                    var ownStoreObject = _this.data[dataId];
                    var parentStoreObject = parent["lookup"](dataId);
                    if (!parentStoreObject) {
                        _this.delete(dataId);
                    }
                    else if (!ownStoreObject) {
                        _this.group.dirty(dataId, "__exists");
                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {
                            _this.group.dirty(dataId, storeFieldName);
                        });
                    }
                    else if (ownStoreObject !== parentStoreObject) {
                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {
                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {
                                _this.group.dirty(dataId, storeFieldName);
                            }
                        });
                    }
                });
            }
            return parent;
        }
        if (parent === this.parent)
            return this;
        return parent.addLayer(this.id, this.replay);
    };
    Layer.prototype.toObject = function () {
        return __assign(__assign({}, this.parent.toObject()), this.data);
    };
    Layer.prototype.findChildRefIds = function (dataId) {
        var fromParent = this.parent.findChildRefIds(dataId);
        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
    };
    Layer.prototype.getStorage = function () {
        var p = this.parent;
        while (p.parent)
            p = p.parent;
        return p.getStorage.apply(p, arguments);
    };
    return Layer;
}(EntityStore));
var Stump = (function (_super) {
    __extends(Stump, _super);
    function Stump(root) {
        return _super.call(this, "EntityStore.Stump", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;
    }
    Stump.prototype.removeLayer = function () {
        return this;
    };
    Stump.prototype.merge = function () {
        return this.parent.merge.apply(this.parent, arguments);
    };
    return Stump;
}(Layer));
function storeObjectReconciler(existingObject, incomingObject, property) {
    var existingValue = existingObject[property];
    var incomingValue = incomingObject[property];
    return equal(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
    return !!(store instanceof EntityStore && store.group.caching);
}

function shallowCopy(value) {
    if (isNonNullObject(value)) {
        return isArray(value)
            ? value.slice(0)
            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);
    }
    return value;
}
var ObjectCanon = (function () {
    function ObjectCanon() {
        this.known = new (canUseWeakSet ? WeakSet : Set)();
        this.pool = new Trie(canUseWeakMap);
        this.passes = new WeakMap();
        this.keysByJSON = new Map();
        this.empty = this.admit({});
    }
    ObjectCanon.prototype.isKnown = function (value) {
        return isNonNullObject(value) && this.known.has(value);
    };
    ObjectCanon.prototype.pass = function (value) {
        if (isNonNullObject(value)) {
            var copy = shallowCopy(value);
            this.passes.set(copy, value);
            return copy;
        }
        return value;
    };
    ObjectCanon.prototype.admit = function (value) {
        var _this = this;
        if (isNonNullObject(value)) {
            var original = this.passes.get(value);
            if (original)
                return original;
            var proto = Object.getPrototypeOf(value);
            switch (proto) {
                case Array.prototype: {
                    if (this.known.has(value))
                        return value;
                    var array = value.map(this.admit, this);
                    var node = this.pool.lookupArray(array);
                    if (!node.array) {
                        this.known.add(node.array = array);
                        if (__DEV__) {
                            Object.freeze(array);
                        }
                    }
                    return node.array;
                }
                case null:
                case Object.prototype: {
                    if (this.known.has(value))
                        return value;
                    var proto_1 = Object.getPrototypeOf(value);
                    var array_1 = [proto_1];
                    var keys = this.sortedKeys(value);
                    array_1.push(keys.json);
                    var firstValueIndex_1 = array_1.length;
                    keys.sorted.forEach(function (key) {
                        array_1.push(_this.admit(value[key]));
                    });
                    var node = this.pool.lookupArray(array_1);
                    if (!node.object) {
                        var obj_1 = node.object = Object.create(proto_1);
                        this.known.add(obj_1);
                        keys.sorted.forEach(function (key, i) {
                            obj_1[key] = array_1[firstValueIndex_1 + i];
                        });
                        if (__DEV__) {
                            Object.freeze(obj_1);
                        }
                    }
                    return node.object;
                }
            }
        }
        return value;
    };
    ObjectCanon.prototype.sortedKeys = function (obj) {
        var keys = Object.keys(obj);
        var node = this.pool.lookupArray(keys);
        if (!node.keys) {
            keys.sort();
            var json = JSON.stringify(keys);
            if (!(node.keys = this.keysByJSON.get(json))) {
                this.keysByJSON.set(json, node.keys = { sorted: keys, json: json });
            }
        }
        return node.keys;
    };
    return ObjectCanon;
}());
var canonicalStringify = Object.assign(function (value) {
    if (isNonNullObject(value)) {
        if (stringifyCanon === void 0) {
            resetCanonicalStringify();
        }
        var canonical = stringifyCanon.admit(value);
        var json = stringifyCache.get(canonical);
        if (json === void 0) {
            stringifyCache.set(canonical, json = JSON.stringify(canonical));
        }
        return json;
    }
    return JSON.stringify(value);
}, {
    reset: resetCanonicalStringify,
});
var stringifyCanon;
var stringifyCache;
function resetCanonicalStringify() {
    stringifyCanon = new ObjectCanon;
    stringifyCache = new (canUseWeakMap ? WeakMap : Map)();
}

function execSelectionSetKeyArgs(options) {
    return [
        options.selectionSet,
        options.objectOrReference,
        options.context,
        options.context.canonizeResults,
    ];
}
var StoreReader = (function () {
    function StoreReader(config) {
        var _this = this;
        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();
        this.config = compact(config, {
            addTypename: config.addTypename !== false,
            canonizeResults: shouldCanonizeResults(config),
        });
        this.canon = config.canon || new ObjectCanon;
        this.executeSelectionSet = wrap(function (options) {
            var _a;
            var canonizeResults = options.context.canonizeResults;
            var peekArgs = execSelectionSetKeyArgs(options);
            peekArgs[3] = !canonizeResults;
            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);
            if (other) {
                if (canonizeResults) {
                    return __assign(__assign({}, other), { result: _this.canon.admit(other.result) });
                }
                return other;
            }
            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSelectionSetImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            keyArgs: execSelectionSetKeyArgs,
            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {
                if (supportsResultCaching(context.store)) {
                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);
                }
            }
        });
        this.executeSubSelectedArray = wrap(function (options) {
            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSubSelectedArrayImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function (_a) {
                var field = _a.field, array = _a.array, context = _a.context;
                if (supportsResultCaching(context.store)) {
                    return context.store.makeCacheKey(field, array, context.varString);
                }
            }
        });
    }
    StoreReader.prototype.resetCanon = function () {
        this.canon = new ObjectCanon;
    };
    StoreReader.prototype.diffQueryAgainstStore = function (_a) {
        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;
        var policies = this.config.cache.policies;
        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);
        var rootRef = makeReference(rootId);
        var merger = new DeepMerger;
        var execResult = this.executeSelectionSet({
            selectionSet: getMainDefinition(query).selectionSet,
            objectOrReference: rootRef,
            enclosingRef: rootRef,
            context: {
                store: store,
                query: query,
                policies: policies,
                variables: variables,
                varString: canonicalStringify(variables),
                canonizeResults: canonizeResults,
                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),
                merge: function (a, b) {
                    return merger.merge(a, b);
                },
            },
        });
        var missing;
        if (execResult.missing) {
            missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];
            if (!returnPartialData) {
                throw missing[0];
            }
        }
        return {
            result: execResult.result,
            complete: !missing,
            missing: missing,
        };
    };
    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
        if (supportsResultCaching(context.store) &&
            this.knownResults.get(result) === selectionSet) {
            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));
            if (latest && result === latest.result) {
                return true;
            }
        }
        return false;
    };
    StoreReader.prototype.execSelectionSetImpl = function (_a) {
        var _this = this;
        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;
        if (isReference(objectOrReference) &&
            !context.policies.rootTypenamesById[objectOrReference.__ref] &&
            !context.store.has(objectOrReference.__ref)) {
            return {
                result: this.canon.empty,
                missing: "Dangling reference to missing ".concat(objectOrReference.__ref, " object"),
            };
        }
        var variables = context.variables, policies = context.policies, store = context.store;
        var typename = store.getFieldValue(objectOrReference, "__typename");
        var result = {};
        var missing;
        if (this.config.addTypename &&
            typeof typename === "string" &&
            !policies.rootIdsByTypename[typename]) {
            result = { __typename: typename };
        }
        function handleMissing(result, resultName) {
            var _a;
            if (result.missing) {
                missing = context.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));
            }
            return result.result;
        }
        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function (selection) {
            var _a, _b;
            if (!shouldInclude(selection, variables))
                return;
            if (isField(selection)) {
                var fieldValue = policies.readField({
                    fieldName: selection.name.value,
                    field: selection,
                    variables: context.variables,
                    from: objectOrReference,
                }, context);
                var resultName = resultKeyNameFromField(selection);
                if (fieldValue === void 0) {
                    if (!addTypenameToDocument.added(selection)) {
                        missing = context.merge(missing, (_a = {},
                            _a[resultName] = "Can't find field '".concat(selection.name.value, "' on ").concat(isReference(objectOrReference)
                                ? objectOrReference.__ref + " object"
                                : "object " + JSON.stringify(objectOrReference, null, 2)),
                            _a));
                    }
                }
                else if (isArray(fieldValue)) {
                    fieldValue = handleMissing(_this.executeSubSelectedArray({
                        field: selection,
                        array: fieldValue,
                        enclosingRef: enclosingRef,
                        context: context,
                    }), resultName);
                }
                else if (!selection.selectionSet) {
                    if (context.canonizeResults) {
                        fieldValue = _this.canon.pass(fieldValue);
                    }
                }
                else if (fieldValue != null) {
                    fieldValue = handleMissing(_this.executeSelectionSet({
                        selectionSet: selection.selectionSet,
                        objectOrReference: fieldValue,
                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,
                        context: context,
                    }), resultName);
                }
                if (fieldValue !== void 0) {
                    result = context.merge(result, (_b = {}, _b[resultName] = fieldValue, _b));
                }
            }
            else {
                var fragment = getFragmentFromSelection(selection, context.fragmentMap);
                if (fragment && policies.fragmentMatches(fragment, typename)) {
                    fragment.selectionSet.selections.forEach(workSet.add, workSet);
                }
            }
        });
        var finalResult = { result: result, missing: missing };
        var frozen = context.canonizeResults
            ? this.canon.admit(finalResult)
            : maybeDeepFreeze(finalResult);
        if (frozen.result) {
            this.knownResults.set(frozen.result, selectionSet);
        }
        return frozen;
    };
    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
        var _this = this;
        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;
        var missing;
        function handleMissing(childResult, i) {
            var _a;
            if (childResult.missing) {
                missing = context.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));
            }
            return childResult.result;
        }
        if (field.selectionSet) {
            array = array.filter(context.store.canRead);
        }
        array = array.map(function (item, i) {
            if (item === null) {
                return null;
            }
            if (isArray(item)) {
                return handleMissing(_this.executeSubSelectedArray({
                    field: field,
                    array: item,
                    enclosingRef: enclosingRef,
                    context: context,
                }), i);
            }
            if (field.selectionSet) {
                return handleMissing(_this.executeSelectionSet({
                    selectionSet: field.selectionSet,
                    objectOrReference: item,
                    enclosingRef: isReference(item) ? item : enclosingRef,
                    context: context,
                }), i);
            }
            if (__DEV__) {
                assertSelectionSetForIdValue(context.store, field, item);
            }
            return item;
        });
        return {
            result: context.canonizeResults ? this.canon.admit(array) : array,
            missing: missing,
        };
    };
    return StoreReader;
}());
function firstMissing(tree) {
    try {
        JSON.stringify(tree, function (_, value) {
            if (typeof value === "string")
                throw value;
            return value;
        });
    }
    catch (result) {
        return result;
    }
}
function assertSelectionSetForIdValue(store, field, fieldValue) {
    if (!field.selectionSet) {
        var workSet_1 = new Set([fieldValue]);
        workSet_1.forEach(function (value) {
            if (isNonNullObject(value)) {
                __DEV__ ? invariant(!isReference(value), "Missing selection set for object of type ".concat(getTypenameFromStoreObject(store, value), " returned for query field ").concat(field.name.value)) : invariant(!isReference(value), 5);
                Object.values(value).forEach(workSet_1.add, workSet_1);
            }
        });
    }
}

var cacheSlot = new Slot();
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
    var info = cacheInfoMap.get(cache);
    if (!info) {
        cacheInfoMap.set(cache, info = {
            vars: new Set,
            dep: dep(),
        });
    }
    return info;
}
function forgetCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });
}
function recallCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });
}
function makeVar(value) {
    var caches = new Set();
    var listeners = new Set();
    var rv = function (newValue) {
        if (arguments.length > 0) {
            if (value !== newValue) {
                value = newValue;
                caches.forEach(function (cache) {
                    getCacheInfo(cache).dep.dirty(rv);
                    broadcast(cache);
                });
                var oldListeners = Array.from(listeners);
                listeners.clear();
                oldListeners.forEach(function (listener) { return listener(value); });
            }
        }
        else {
            var cache = cacheSlot.getValue();
            if (cache) {
                attach(cache);
                getCacheInfo(cache).dep(rv);
            }
        }
        return value;
    };
    rv.onNextChange = function (listener) {
        listeners.add(listener);
        return function () {
            listeners.delete(listener);
        };
    };
    var attach = rv.attachCache = function (cache) {
        caches.add(cache);
        getCacheInfo(cache).vars.add(rv);
        return rv;
    };
    rv.forgetCache = function (cache) { return caches.delete(cache); };
    return rv;
}
function broadcast(cache) {
    if (cache.broadcastWatches) {
        cache.broadcastWatches();
    }
}

var specifierInfoCache = Object.create(null);
function lookupSpecifierInfo(spec) {
    var cacheKey = JSON.stringify(spec);
    return specifierInfoCache[cacheKey] ||
        (specifierInfoCache[cacheKey] = Object.create(null));
}
function keyFieldsFnFromSpecifier(specifier) {
    var info = lookupSpecifierInfo(specifier);
    return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {
        var extract = function (from, key) { return context.readField(key, from); };
        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {
            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);
            if (extracted === void 0 &&
                object !== context.storeObject &&
                hasOwn.call(object, schemaKeyPath[0])) {
                extracted = extractKeyPath(object, schemaKeyPath, extractKey);
            }
            __DEV__ ? invariant(extracted !== void 0, "Missing field '".concat(schemaKeyPath.join('.'), "' while extracting keyFields from ").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);
            return extracted;
        });
        return "".concat(context.typename, ":").concat(JSON.stringify(keyObject));
    });
}
function keyArgsFnFromSpecifier(specifier) {
    var info = lookupSpecifierInfo(specifier);
    return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {
        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;
        var collected = collectSpecifierPaths(specifier, function (keyPath) {
            var firstKey = keyPath[0];
            var firstChar = firstKey.charAt(0);
            if (firstChar === "@") {
                if (field && isNonEmptyArray(field.directives)) {
                    var directiveName_1 = firstKey.slice(1);
                    var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });
                    var directiveArgs = d && argumentsObjectFromField(d, variables);
                    return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));
                }
                return;
            }
            if (firstChar === "$") {
                var variableName = firstKey.slice(1);
                if (variables && hasOwn.call(variables, variableName)) {
                    var varKeyPath = keyPath.slice(0);
                    varKeyPath[0] = variableName;
                    return extractKeyPath(variables, varKeyPath);
                }
                return;
            }
            if (args) {
                return extractKeyPath(args, keyPath);
            }
        });
        var suffix = JSON.stringify(collected);
        if (args || suffix !== "{}") {
            fieldName += ":" + suffix;
        }
        return fieldName;
    });
}
function collectSpecifierPaths(specifier, extractor) {
    var merger = new DeepMerger;
    return getSpecifierPaths(specifier).reduce(function (collected, path) {
        var _a;
        var toMerge = extractor(path);
        if (toMerge !== void 0) {
            for (var i = path.length - 1; i >= 0; --i) {
                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);
            }
            collected = merger.merge(collected, toMerge);
        }
        return collected;
    }, Object.create(null));
}
function getSpecifierPaths(spec) {
    var info = lookupSpecifierInfo(spec);
    if (!info.paths) {
        var paths_1 = info.paths = [];
        var currentPath_1 = [];
        spec.forEach(function (s, i) {
            if (isArray(s)) {
                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });
                currentPath_1.length = 0;
            }
            else {
                currentPath_1.push(s);
                if (!isArray(spec[i + 1])) {
                    paths_1.push(currentPath_1.slice(0));
                    currentPath_1.length = 0;
                }
            }
        });
    }
    return info.paths;
}
function extractKey(object, key) {
    return object[key];
}
function extractKeyPath(object, path, extract) {
    extract = extract || extractKey;
    return normalize$1(path.reduce(function reducer(obj, key) {
        return isArray(obj)
            ? obj.map(function (child) { return reducer(child, key); })
            : obj && extract(obj, key);
    }, object));
}
function normalize$1(value) {
    if (isNonNullObject(value)) {
        if (isArray(value)) {
            return value.map(normalize$1);
        }
        return collectSpecifierPaths(Object.keys(value).sort(), function (path) { return extractKeyPath(value, path); });
    }
    return value;
}

getStoreKeyName.setStringify(canonicalStringify);
function argsFromFieldSpecifier(spec) {
    return spec.args !== void 0 ? spec.args :
        spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;
}
var nullKeyFieldsFn = function () { return void 0; };
var simpleKeyArgsFn = function (_args, context) { return context.fieldName; };
var mergeTrueFn = function (existing, incoming, _a) {
    var mergeObjects = _a.mergeObjects;
    return mergeObjects(existing, incoming);
};
var mergeFalseFn = function (_, incoming) { return incoming; };
var Policies = (function () {
    function Policies(config) {
        this.config = config;
        this.typePolicies = Object.create(null);
        this.toBeAdded = Object.create(null);
        this.supertypeMap = new Map();
        this.fuzzySubtypes = new Map();
        this.rootIdsByTypename = Object.create(null);
        this.rootTypenamesById = Object.create(null);
        this.usingPossibleTypes = false;
        this.config = __assign({ dataIdFromObject: defaultDataIdFromObject }, config);
        this.cache = this.config.cache;
        this.setRootTypename("Query");
        this.setRootTypename("Mutation");
        this.setRootTypename("Subscription");
        if (config.possibleTypes) {
            this.addPossibleTypes(config.possibleTypes);
        }
        if (config.typePolicies) {
            this.addTypePolicies(config.typePolicies);
        }
    }
    Policies.prototype.identify = function (object, partialContext) {
        var _a;
        var policies = this;
        var typename = partialContext && (partialContext.typename ||
            ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;
        if (typename === this.rootTypenamesById.ROOT_QUERY) {
            return ["ROOT_QUERY"];
        }
        var storeObject = partialContext && partialContext.storeObject || object;
        var context = __assign(__assign({}, partialContext), { typename: typename, storeObject: storeObject, readField: partialContext && partialContext.readField || function () {
                var options = normalizeReadFieldOptions(arguments, storeObject);
                return policies.readField(options, {
                    store: policies.cache["data"],
                    variables: options.variables,
                });
            } });
        var id;
        var policy = typename && this.getTypePolicy(typename);
        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
        while (keyFn) {
            var specifierOrId = keyFn(object, context);
            if (isArray(specifierOrId)) {
                keyFn = keyFieldsFnFromSpecifier(specifierOrId);
            }
            else {
                id = specifierOrId;
                break;
            }
        }
        id = id ? String(id) : void 0;
        return context.keyObject ? [id, context.keyObject] : [id];
    };
    Policies.prototype.addTypePolicies = function (typePolicies) {
        var _this = this;
        Object.keys(typePolicies).forEach(function (typename) {
            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = __rest$1(_a, ["queryType", "mutationType", "subscriptionType"]);
            if (queryType)
                _this.setRootTypename("Query", typename);
            if (mutationType)
                _this.setRootTypename("Mutation", typename);
            if (subscriptionType)
                _this.setRootTypename("Subscription", typename);
            if (hasOwn.call(_this.toBeAdded, typename)) {
                _this.toBeAdded[typename].push(incoming);
            }
            else {
                _this.toBeAdded[typename] = [incoming];
            }
        });
    };
    Policies.prototype.updateTypePolicy = function (typename, incoming) {
        var _this = this;
        var existing = this.getTypePolicy(typename);
        var keyFields = incoming.keyFields, fields = incoming.fields;
        function setMerge(existing, merge) {
            existing.merge =
                typeof merge === "function" ? merge :
                    merge === true ? mergeTrueFn :
                        merge === false ? mergeFalseFn :
                            existing.merge;
        }
        setMerge(existing, incoming.merge);
        existing.keyFn =
            keyFields === false ? nullKeyFieldsFn :
                isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :
                    typeof keyFields === "function" ? keyFields :
                        existing.keyFn;
        if (fields) {
            Object.keys(fields).forEach(function (fieldName) {
                var existing = _this.getFieldPolicy(typename, fieldName, true);
                var incoming = fields[fieldName];
                if (typeof incoming === "function") {
                    existing.read = incoming;
                }
                else {
                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;
                    existing.keyFn =
                        keyArgs === false ? simpleKeyArgsFn :
                            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :
                                typeof keyArgs === "function" ? keyArgs :
                                    existing.keyFn;
                    if (typeof read === "function") {
                        existing.read = read;
                    }
                    setMerge(existing, merge);
                }
                if (existing.read && existing.merge) {
                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;
                }
            });
        }
    };
    Policies.prototype.setRootTypename = function (which, typename) {
        if (typename === void 0) { typename = which; }
        var rootId = "ROOT_" + which.toUpperCase();
        var old = this.rootTypenamesById[rootId];
        if (typename !== old) {
            __DEV__ ? invariant(!old || old === which, "Cannot change root ".concat(which, " __typename more than once")) : invariant(!old || old === which, 3);
            if (old)
                delete this.rootIdsByTypename[old];
            this.rootIdsByTypename[typename] = rootId;
            this.rootTypenamesById[rootId] = typename;
        }
    };
    Policies.prototype.addPossibleTypes = function (possibleTypes) {
        var _this = this;
        this.usingPossibleTypes = true;
        Object.keys(possibleTypes).forEach(function (supertype) {
            _this.getSupertypeSet(supertype, true);
            possibleTypes[supertype].forEach(function (subtype) {
                _this.getSupertypeSet(subtype, true).add(supertype);
                var match = subtype.match(TypeOrFieldNameRegExp);
                if (!match || match[0] !== subtype) {
                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
                }
            });
        });
    };
    Policies.prototype.getTypePolicy = function (typename) {
        var _this = this;
        if (!hasOwn.call(this.typePolicies, typename)) {
            var policy_1 = this.typePolicies[typename] = Object.create(null);
            policy_1.fields = Object.create(null);
            var supertypes = this.supertypeMap.get(typename);
            if (supertypes && supertypes.size) {
                supertypes.forEach(function (supertype) {
                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = __rest$1(_a, ["fields"]);
                    Object.assign(policy_1, rest);
                    Object.assign(policy_1.fields, fields);
                });
            }
        }
        var inbox = this.toBeAdded[typename];
        if (inbox && inbox.length) {
            inbox.splice(0).forEach(function (policy) {
                _this.updateTypePolicy(typename, policy);
            });
        }
        return this.typePolicies[typename];
    };
    Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {
        if (typename) {
            var fieldPolicies = this.getTypePolicy(typename).fields;
            return fieldPolicies[fieldName] || (createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));
        }
    };
    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
        var supertypeSet = this.supertypeMap.get(subtype);
        if (!supertypeSet && createIfMissing) {
            this.supertypeMap.set(subtype, supertypeSet = new Set());
        }
        return supertypeSet;
    };
    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
        var _this = this;
        if (!fragment.typeCondition)
            return true;
        if (!typename)
            return false;
        var supertype = fragment.typeCondition.name.value;
        if (typename === supertype)
            return true;
        if (this.usingPossibleTypes &&
            this.supertypeMap.has(supertype)) {
            var typenameSupertypeSet = this.getSupertypeSet(typename, true);
            var workQueue_1 = [typenameSupertypeSet];
            var maybeEnqueue_1 = function (subtype) {
                var supertypeSet = _this.getSupertypeSet(subtype, false);
                if (supertypeSet &&
                    supertypeSet.size &&
                    workQueue_1.indexOf(supertypeSet) < 0) {
                    workQueue_1.push(supertypeSet);
                }
            };
            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
            var checkingFuzzySubtypes = false;
            for (var i = 0; i < workQueue_1.length; ++i) {
                var supertypeSet = workQueue_1[i];
                if (supertypeSet.has(supertype)) {
                    if (!typenameSupertypeSet.has(supertype)) {
                        if (checkingFuzzySubtypes) {
                            __DEV__ && invariant.warn("Inferring subtype ".concat(typename, " of supertype ").concat(supertype));
                        }
                        typenameSupertypeSet.add(supertype);
                    }
                    return true;
                }
                supertypeSet.forEach(maybeEnqueue_1);
                if (needToCheckFuzzySubtypes &&
                    i === workQueue_1.length - 1 &&
                    selectionSetMatchesResult(fragment.selectionSet, result, variables)) {
                    needToCheckFuzzySubtypes = false;
                    checkingFuzzySubtypes = true;
                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
                        var match = typename.match(regExp);
                        if (match && match[0] === typename) {
                            maybeEnqueue_1(fuzzyString);
                        }
                    });
                }
            }
        }
        return false;
    };
    Policies.prototype.hasKeyArgs = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName, false);
        return !!(policy && policy.keyFn);
    };
    Policies.prototype.getStoreFieldName = function (fieldSpec) {
        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
        var policy = this.getFieldPolicy(typename, fieldName, false);
        var storeFieldName;
        var keyFn = policy && policy.keyFn;
        if (keyFn && typename) {
            var context = {
                typename: typename,
                fieldName: fieldName,
                field: fieldSpec.field || null,
                variables: fieldSpec.variables,
            };
            var args = argsFromFieldSpecifier(fieldSpec);
            while (keyFn) {
                var specifierOrString = keyFn(args, context);
                if (isArray(specifierOrString)) {
                    keyFn = keyArgsFnFromSpecifier(specifierOrString);
                }
                else {
                    storeFieldName = specifierOrString || fieldName;
                    break;
                }
            }
        }
        if (storeFieldName === void 0) {
            storeFieldName = fieldSpec.field
                ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)
                : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));
        }
        if (storeFieldName === false) {
            return fieldName;
        }
        return fieldName === fieldNameFromStoreName(storeFieldName)
            ? storeFieldName
            : fieldName + ":" + storeFieldName;
    };
    Policies.prototype.readField = function (options, context) {
        var objectOrReference = options.from;
        if (!objectOrReference)
            return;
        var nameOrField = options.field || options.fieldName;
        if (!nameOrField)
            return;
        if (options.typename === void 0) {
            var typename = context.store.getFieldValue(objectOrReference, "__typename");
            if (typename)
                options.typename = typename;
        }
        var storeFieldName = this.getStoreFieldName(options);
        var fieldName = fieldNameFromStoreName(storeFieldName);
        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
        var policy = this.getFieldPolicy(options.typename, fieldName, false);
        var read = policy && policy.read;
        if (read) {
            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference)
                ? objectOrReference.__ref
                : objectOrReference, storeFieldName));
            return cacheSlot.withValue(this.cache, read, [existing, readOptions]);
        }
        return existing;
    };
    Policies.prototype.getReadFunction = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName, false);
        return policy && policy.read;
    };
    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {
        var policy = this.getFieldPolicy(parentTypename, fieldName, false);
        var merge = policy && policy.merge;
        if (!merge && childTypename) {
            policy = this.getTypePolicy(childTypename);
            merge = policy && policy.merge;
        }
        return merge;
    };
    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {
        var field = _a.field, typename = _a.typename, merge = _a.merge;
        if (merge === mergeTrueFn) {
            return makeMergeObjectsFunction(context.store)(existing, incoming);
        }
        if (merge === mergeFalseFn) {
            return incoming;
        }
        if (context.overwrite) {
            existing = void 0;
        }
        return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, { typename: typename, fieldName: field.name.value, field: field, variables: context.variables }, context, storage || Object.create(null)));
    };
    return Policies;
}());
function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
    var storeFieldName = policies.getStoreFieldName(fieldSpec);
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var variables = fieldSpec.variables || context.variables;
    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;
    return {
        args: argsFromFieldSpecifier(fieldSpec),
        field: fieldSpec.field || null,
        fieldName: fieldName,
        storeFieldName: storeFieldName,
        variables: variables,
        isReference: isReference,
        toReference: toReference,
        storage: storage,
        cache: policies.cache,
        canRead: canRead,
        readField: function () {
            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, context), context);
        },
        mergeObjects: makeMergeObjectsFunction(context.store),
    };
}
function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {
    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;
    var options;
    if (typeof fieldNameOrOptions === "string") {
        options = {
            fieldName: fieldNameOrOptions,
            from: argc > 1 ? from : objectOrReference,
        };
    }
    else {
        options = __assign({}, fieldNameOrOptions);
        if (!hasOwn.call(options, "from")) {
            options.from = objectOrReference;
        }
    }
    if (__DEV__ && options.from === void 0) {
        __DEV__ && invariant.warn("Undefined 'from' passed to readField with arguments ".concat(stringifyForDisplay(Array.from(readFieldArgs))));
    }
    if (void 0 === options.variables) {
        options.variables = variables;
    }
    return options;
}
function makeMergeObjectsFunction(store) {
    return function mergeObjects(existing, incoming) {
        if (isArray(existing) || isArray(incoming)) {
            throw __DEV__ ? new InvariantError("Cannot automatically merge arrays") : new InvariantError(4);
        }
        if (isNonNullObject(existing) &&
            isNonNullObject(incoming)) {
            var eType = store.getFieldValue(existing, "__typename");
            var iType = store.getFieldValue(incoming, "__typename");
            var typesDiffer = eType && iType && eType !== iType;
            if (typesDiffer) {
                return incoming;
            }
            if (isReference(existing) &&
                storeValueIsStoreObject(incoming)) {
                store.merge(existing.__ref, incoming);
                return existing;
            }
            if (storeValueIsStoreObject(existing) &&
                isReference(incoming)) {
                store.merge(existing, incoming.__ref);
                return incoming;
            }
            if (storeValueIsStoreObject(existing) &&
                storeValueIsStoreObject(incoming)) {
                return __assign(__assign({}, existing), incoming);
            }
        }
        return incoming;
    };
}

function getContextFlavor(context, clientOnly, deferred) {
    var key = "".concat(clientOnly).concat(deferred);
    var flavored = context.flavors.get(key);
    if (!flavored) {
        context.flavors.set(key, flavored = (context.clientOnly === clientOnly &&
            context.deferred === deferred) ? context : __assign(__assign({}, context), { clientOnly: clientOnly, deferred: deferred }));
    }
    return flavored;
}
var StoreWriter = (function () {
    function StoreWriter(cache, reader) {
        this.cache = cache;
        this.reader = reader;
    }
    StoreWriter.prototype.writeToStore = function (store, _a) {
        var _this = this;
        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;
        var operationDefinition = getOperationDefinition(query);
        var merger = makeProcessedFieldsMerger();
        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);
        var context = {
            store: store,
            written: Object.create(null),
            merge: function (existing, incoming) {
                return merger.merge(existing, incoming);
            },
            variables: variables,
            varString: canonicalStringify(variables),
            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),
            overwrite: !!overwrite,
            incomingById: new Map,
            clientOnly: false,
            deferred: false,
            flavors: new Map,
        };
        var ref = this.processSelectionSet({
            result: result || Object.create(null),
            dataId: dataId,
            selectionSet: operationDefinition.selectionSet,
            mergeTree: { map: new Map },
            context: context,
        });
        if (!isReference(ref)) {
            throw __DEV__ ? new InvariantError("Could not identify object ".concat(JSON.stringify(result))) : new InvariantError(6);
        }
        context.incomingById.forEach(function (_a, dataId) {
            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;
            var entityRef = makeReference(dataId);
            if (mergeTree && mergeTree.map.size) {
                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);
                if (isReference(applied)) {
                    return;
                }
                storeObject = applied;
            }
            if (__DEV__ && !context.overwrite) {
                var fieldsWithSelectionSets_1 = Object.create(null);
                fieldNodeSet.forEach(function (field) {
                    if (field.selectionSet) {
                        fieldsWithSelectionSets_1[field.name.value] = true;
                    }
                });
                var hasSelectionSet_1 = function (storeFieldName) {
                    return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;
                };
                var hasMergeFunction_1 = function (storeFieldName) {
                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);
                    return Boolean(childTree && childTree.info && childTree.info.merge);
                };
                Object.keys(storeObject).forEach(function (storeFieldName) {
                    if (hasSelectionSet_1(storeFieldName) &&
                        !hasMergeFunction_1(storeFieldName)) {
                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);
                    }
                });
            }
            store.merge(dataId, storeObject);
        });
        store.retain(ref.__ref);
        return ref;
    };
    StoreWriter.prototype.processSelectionSet = function (_a) {
        var _this = this;
        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;
        var policies = this.cache.policies;
        var incoming = Object.create(null);
        var typename = (dataId && policies.rootTypenamesById[dataId]) ||
            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||
            (dataId && context.store.get(dataId, "__typename"));
        if ("string" === typeof typename) {
            incoming.__typename = typename;
        }
        var readField = function () {
            var options = normalizeReadFieldOptions(arguments, incoming, context.variables);
            if (isReference(options.from)) {
                var info = context.incomingById.get(options.from.__ref);
                if (info) {
                    var result_1 = policies.readField(__assign(__assign({}, options), { from: info.storeObject }), context);
                    if (result_1 !== void 0) {
                        return result_1;
                    }
                }
            }
            return policies.readField(options, context);
        };
        var fieldNodeSet = new Set();
        this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {
            var _a;
            var resultFieldKey = resultKeyNameFromField(field);
            var value = result[resultFieldKey];
            fieldNodeSet.add(field);
            if (value !== void 0) {
                var storeFieldName = policies.getStoreFieldName({
                    typename: typename,
                    fieldName: field.name.value,
                    field: field,
                    variables: context.variables,
                });
                var childTree = getChildMergeTree(mergeTree, storeFieldName);
                var incomingValue = _this.processFieldValue(value, field, field.selectionSet
                    ? getContextFlavor(context, false, false)
                    : context, childTree);
                var childTypename = void 0;
                if (field.selectionSet &&
                    (isReference(incomingValue) ||
                        storeValueIsStoreObject(incomingValue))) {
                    childTypename = readField("__typename", incomingValue);
                }
                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);
                if (merge) {
                    childTree.info = {
                        field: field,
                        typename: typename,
                        merge: merge,
                    };
                }
                else {
                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);
                }
                incoming = context.merge(incoming, (_a = {},
                    _a[storeFieldName] = incomingValue,
                    _a));
            }
            else if (__DEV__ &&
                !context.clientOnly &&
                !context.deferred &&
                !addTypenameToDocument.added(field) &&
                !policies.getReadFunction(typename, field.name.value)) {
                __DEV__ && invariant.error("Missing field '".concat(resultKeyNameFromField(field), "' while writing result ").concat(JSON.stringify(result, null, 2)).substring(0, 1000));
            }
        });
        try {
            var _b = policies.identify(result, {
                typename: typename,
                selectionSet: selectionSet,
                fragmentMap: context.fragmentMap,
                storeObject: incoming,
                readField: readField,
            }), id = _b[0], keyObject = _b[1];
            dataId = dataId || id;
            if (keyObject) {
                incoming = context.merge(incoming, keyObject);
            }
        }
        catch (e) {
            if (!dataId)
                throw e;
        }
        if ("string" === typeof dataId) {
            var dataRef = makeReference(dataId);
            var sets = context.written[dataId] || (context.written[dataId] = []);
            if (sets.indexOf(selectionSet) >= 0)
                return dataRef;
            sets.push(selectionSet);
            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {
                return dataRef;
            }
            var previous_1 = context.incomingById.get(dataId);
            if (previous_1) {
                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);
                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);
                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });
            }
            else {
                context.incomingById.set(dataId, {
                    storeObject: incoming,
                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,
                    fieldNodeSet: fieldNodeSet,
                });
            }
            return dataRef;
        }
        return incoming;
    };
    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {
        var _this = this;
        if (!field.selectionSet || value === null) {
            return __DEV__ ? cloneDeep(value) : value;
        }
        if (isArray(value)) {
            return value.map(function (item, i) {
                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
                maybeRecycleChildMergeTree(mergeTree, i);
                return value;
            });
        }
        return this.processSelectionSet({
            result: value,
            selectionSet: field.selectionSet,
            context: context,
            mergeTree: mergeTree,
        });
    };
    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {
        if (typename === void 0) { typename = getTypenameFromResult(result, selectionSet, context.fragmentMap); }
        var fieldMap = new Map();
        var policies = this.cache.policies;
        var limitingTrie = new Trie(false);
        (function flatten(selectionSet, inheritedContext) {
            var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);
            if (visitedNode.visited)
                return;
            visitedNode.visited = true;
            selectionSet.selections.forEach(function (selection) {
                if (!shouldInclude(selection, context.variables))
                    return;
                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;
                if (!(clientOnly && deferred) &&
                    isNonEmptyArray(selection.directives)) {
                    selection.directives.forEach(function (dir) {
                        var name = dir.name.value;
                        if (name === "client")
                            clientOnly = true;
                        if (name === "defer") {
                            var args = argumentsObjectFromField(dir, context.variables);
                            if (!args || args.if !== false) {
                                deferred = true;
                            }
                        }
                    });
                }
                if (isField(selection)) {
                    var existing = fieldMap.get(selection);
                    if (existing) {
                        clientOnly = clientOnly && existing.clientOnly;
                        deferred = deferred && existing.deferred;
                    }
                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));
                }
                else {
                    var fragment = getFragmentFromSelection(selection, context.fragmentMap);
                    if (fragment &&
                        policies.fragmentMatches(fragment, typename, result, context.variables)) {
                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));
                    }
                }
            });
        })(selectionSet, context);
        return fieldMap;
    };
    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {
        var _a;
        var _this = this;
        if (mergeTree.map.size && !isReference(incoming)) {
            var e_1 = (!isArray(incoming) &&
                (isReference(existing) || storeValueIsStoreObject(existing))) ? existing : void 0;
            var i_1 = incoming;
            if (e_1 && !getStorageArgs) {
                getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];
            }
            var changedFields_1;
            var getValue_1 = function (from, name) {
                return isArray(from)
                    ? (typeof name === "number" ? from[name] : void 0)
                    : context.store.getFieldValue(from, String(name));
            };
            mergeTree.map.forEach(function (childTree, storeFieldName) {
                var eVal = getValue_1(e_1, storeFieldName);
                var iVal = getValue_1(i_1, storeFieldName);
                if (void 0 === iVal)
                    return;
                if (getStorageArgs) {
                    getStorageArgs.push(storeFieldName);
                }
                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
                if (aVal !== iVal) {
                    changedFields_1 = changedFields_1 || new Map;
                    changedFields_1.set(storeFieldName, aVal);
                }
                if (getStorageArgs) {
                    invariant(getStorageArgs.pop() === storeFieldName);
                }
            });
            if (changedFields_1) {
                incoming = (isArray(i_1) ? i_1.slice(0) : __assign({}, i_1));
                changedFields_1.forEach(function (value, name) {
                    incoming[name] = value;
                });
            }
        }
        if (mergeTree.info) {
            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
        }
        return incoming;
    };
    return StoreWriter;
}());
var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
    var map = _a.map;
    if (!map.has(name)) {
        map.set(name, emptyMergeTreePool.pop() || { map: new Map });
    }
    return map.get(name);
}
function mergeMergeTrees(left, right) {
    if (left === right || !right || mergeTreeIsEmpty(right))
        return left;
    if (!left || mergeTreeIsEmpty(left))
        return right;
    var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;
    var needToMergeMaps = left.map.size && right.map.size;
    var map = needToMergeMaps ? new Map :
        left.map.size ? left.map : right.map;
    var merged = { info: info, map: map };
    if (needToMergeMaps) {
        var remainingRightKeys_1 = new Set(right.map.keys());
        left.map.forEach(function (leftTree, key) {
            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));
            remainingRightKeys_1.delete(key);
        });
        remainingRightKeys_1.forEach(function (key) {
            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));
        });
    }
    return merged;
}
function mergeTreeIsEmpty(tree) {
    return !tree || !(tree.info || tree.map.size);
}
function maybeRecycleChildMergeTree(_a, name) {
    var map = _a.map;
    var childTree = map.get(name);
    if (childTree && mergeTreeIsEmpty(childTree)) {
        emptyMergeTreePool.push(childTree);
        map.delete(name);
    }
}
var warnings = new Set();
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
    var getChild = function (objOrRef) {
        var child = store.getFieldValue(objOrRef, storeFieldName);
        return typeof child === "object" && child;
    };
    var existing = getChild(existingRef);
    if (!existing)
        return;
    var incoming = getChild(incomingObj);
    if (!incoming)
        return;
    if (isReference(existing))
        return;
    if (equal(existing, incoming))
        return;
    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {
        return;
    }
    var parentType = store.getFieldValue(existingRef, "__typename") ||
        store.getFieldValue(incomingObj, "__typename");
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var typeDotName = "".concat(parentType, ".").concat(fieldName);
    if (warnings.has(typeDotName))
        return;
    warnings.add(typeDotName);
    var childTypenames = [];
    if (!isArray(existing) &&
        !isArray(incoming)) {
        [existing, incoming].forEach(function (child) {
            var typename = store.getFieldValue(child, "__typename");
            if (typeof typename === "string" &&
                !childTypenames.includes(typename)) {
                childTypenames.push(typename);
            }
        });
    }
    __DEV__ && invariant.warn("Cache data may be lost when replacing the ".concat(fieldName, " field of a ").concat(parentType, " object.\n\nTo address this problem (which is not a bug in Apollo Client), ").concat(childTypenames.length
        ? "either ensure all objects of type " +
            childTypenames.join(" and ") + " have an ID or a custom merge function, or "
        : "", "define a custom merge function for the ").concat(typeDotName, " field, so InMemoryCache can safely merge these objects:\n\n  existing: ").concat(JSON.stringify(existing).slice(0, 1000), "\n  incoming: ").concat(JSON.stringify(incoming).slice(0, 1000), "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n"));
}

var InMemoryCache = (function (_super) {
    __extends(InMemoryCache, _super);
    function InMemoryCache(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.watches = new Set();
        _this.typenameDocumentCache = new Map();
        _this.makeVar = makeVar;
        _this.txCount = 0;
        _this.config = normalizeConfig(config);
        _this.addTypename = !!_this.config.addTypename;
        _this.policies = new Policies({
            cache: _this,
            dataIdFromObject: _this.config.dataIdFromObject,
            possibleTypes: _this.config.possibleTypes,
            typePolicies: _this.config.typePolicies,
        });
        _this.init();
        return _this;
    }
    InMemoryCache.prototype.init = function () {
        var rootStore = this.data = new EntityStore.Root({
            policies: this.policies,
            resultCaching: this.config.resultCaching,
        });
        this.optimisticData = rootStore.stump;
        this.resetResultCache();
    };
    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {
        var _this = this;
        var previousReader = this.storeReader;
        this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({
            cache: this,
            addTypename: this.addTypename,
            resultCacheMaxSize: this.config.resultCacheMaxSize,
            canonizeResults: shouldCanonizeResults(this.config),
            canon: resetResultIdentities
                ? void 0
                : previousReader && previousReader.canon,
        }));
        this.maybeBroadcastWatch = wrap(function (c, options) {
            return _this.broadcastWatch(c, options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function (c) {
                var store = c.optimistic ? _this.optimisticData : _this.data;
                if (supportsResultCaching(store)) {
                    var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;
                    return store.makeCacheKey(c.query, c.callback, canonicalStringify({ optimistic: optimistic, rootId: rootId, variables: variables }));
                }
            }
        });
        new Set([
            this.data.group,
            this.optimisticData.group,
        ]).forEach(function (group) { return group.resetCaching(); });
    };
    InMemoryCache.prototype.restore = function (data) {
        this.init();
        if (data)
            this.data.replace(data);
        return this;
    };
    InMemoryCache.prototype.extract = function (optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return (optimistic ? this.optimisticData : this.data).extract();
    };
    InMemoryCache.prototype.read = function (options) {
        var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;
        try {
            return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null;
        }
        catch (e) {
            if (e instanceof MissingFieldError) {
                return null;
            }
            throw e;
        }
    };
    InMemoryCache.prototype.write = function (options) {
        try {
            ++this.txCount;
            return this.storeWriter.writeToStore(this.data, options);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.modify = function (options) {
        if (hasOwn.call(options, "id") && !options.id) {
            return false;
        }
        var store = options.optimistic
            ? this.optimisticData
            : this.data;
        try {
            ++this.txCount;
            return store.modify(options.id || "ROOT_QUERY", options.fields);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.diff = function (options) {
        return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || "ROOT_QUERY", config: this.config }));
    };
    InMemoryCache.prototype.watch = function (watch) {
        var _this = this;
        if (!this.watches.size) {
            recallCache(this);
        }
        this.watches.add(watch);
        if (watch.immediate) {
            this.maybeBroadcastWatch(watch);
        }
        return function () {
            if (_this.watches.delete(watch) && !_this.watches.size) {
                forgetCache(_this);
            }
            _this.maybeBroadcastWatch.forget(watch);
        };
    };
    InMemoryCache.prototype.gc = function (options) {
        canonicalStringify.reset();
        var ids = this.optimisticData.gc();
        if (options && !this.txCount) {
            if (options.resetResultCache) {
                this.resetResultCache(options.resetResultIdentities);
            }
            else if (options.resetResultIdentities) {
                this.storeReader.resetCanon();
            }
        }
        return ids;
    };
    InMemoryCache.prototype.retain = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).retain(rootId);
    };
    InMemoryCache.prototype.release = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).release(rootId);
    };
    InMemoryCache.prototype.identify = function (object) {
        if (isReference(object))
            return object.__ref;
        try {
            return this.policies.identify(object)[0];
        }
        catch (e) {
            __DEV__ && invariant.warn(e);
        }
    };
    InMemoryCache.prototype.evict = function (options) {
        if (!options.id) {
            if (hasOwn.call(options, "id")) {
                return false;
            }
            options = __assign(__assign({}, options), { id: "ROOT_QUERY" });
        }
        try {
            ++this.txCount;
            return this.optimisticData.evict(options, this.data);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.reset = function (options) {
        var _this = this;
        this.init();
        canonicalStringify.reset();
        if (options && options.discardWatches) {
            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });
            this.watches.clear();
            forgetCache(this);
        }
        else {
            this.broadcastWatches();
        }
        return Promise.resolve();
    };
    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
        if (newOptimisticData !== this.optimisticData) {
            this.optimisticData = newOptimisticData;
            this.broadcastWatches();
        }
    };
    InMemoryCache.prototype.batch = function (options) {
        var _this = this;
        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;
        var updateResult;
        var perform = function (layer) {
            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;
            ++_this.txCount;
            if (layer) {
                _this.data = _this.optimisticData = layer;
            }
            try {
                return updateResult = update(_this);
            }
            finally {
                --_this.txCount;
                _this.data = data;
                _this.optimisticData = optimisticData;
            }
        };
        var alreadyDirty = new Set();
        if (onWatchUpdated && !this.txCount) {
            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch) {
                    alreadyDirty.add(watch);
                    return false;
                } }));
        }
        if (typeof optimistic === 'string') {
            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);
        }
        else if (optimistic === false) {
            perform(this.data);
        }
        else {
            perform();
        }
        if (typeof removeOptimistic === "string") {
            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);
        }
        if (onWatchUpdated && alreadyDirty.size) {
            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch, diff) {
                    var result = onWatchUpdated.call(this, watch, diff);
                    if (result !== false) {
                        alreadyDirty.delete(watch);
                    }
                    return result;
                } }));
            if (alreadyDirty.size) {
                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });
            }
        }
        else {
            this.broadcastWatches(options);
        }
        return updateResult;
    };
    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {
        return this.batch({
            update: update,
            optimistic: optimisticId || (optimisticId !== null),
        });
    };
    InMemoryCache.prototype.transformDocument = function (document) {
        if (this.addTypename) {
            var result = this.typenameDocumentCache.get(document);
            if (!result) {
                result = addTypenameToDocument(document);
                this.typenameDocumentCache.set(document, result);
                this.typenameDocumentCache.set(result, result);
            }
            return result;
        }
        return document;
    };
    InMemoryCache.prototype.broadcastWatches = function (options) {
        var _this = this;
        if (!this.txCount) {
            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });
        }
    };
    InMemoryCache.prototype.broadcastWatch = function (c, options) {
        var lastDiff = c.lastDiff;
        var diff = this.diff(c);
        if (options) {
            if (c.optimistic &&
                typeof options.optimistic === "string") {
                diff.fromOptimisticTransaction = true;
            }
            if (options.onWatchUpdated &&
                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {
                return;
            }
        }
        if (!lastDiff || !equal(lastDiff.result, diff.result)) {
            c.callback(c.lastDiff = diff, lastDiff);
        }
    };
    return InMemoryCache;
}(ApolloCache));

function isApolloError(err) {
    return err.hasOwnProperty('graphQLErrors');
}
var generateErrorMessage = function (err) {
    var message = '';
    if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {
        var errors = (err.graphQLErrors || [])
            .concat(err.clientErrors || []);
        errors.forEach(function (error) {
            var errorMessage = error
                ? error.message
                : 'Error message not found.';
            message += "".concat(errorMessage, "\n");
        });
    }
    if (err.networkError) {
        message += "".concat(err.networkError.message, "\n");
    }
    message = message.replace(/\n$/, '');
    return message;
};
var ApolloError = (function (_super) {
    __extends(ApolloError, _super);
    function ApolloError(_a) {
        var graphQLErrors = _a.graphQLErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.clientErrors = clientErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError.prototype;
        return _this;
    }
    return ApolloError;
}(Error));

var NetworkStatus;
(function (NetworkStatus) {
    NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
    NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
    NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
    NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
    NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
    NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
    NetworkStatus[NetworkStatus["error"] = 8] = "error";
})(NetworkStatus || (NetworkStatus = {}));
function isNetworkRequestInFlight(networkStatus) {
    return networkStatus ? networkStatus < 7 : false;
}

var assign = Object.assign, hasOwnProperty$3 = Object.hasOwnProperty;
var ObservableQuery = (function (_super) {
    __extends(ObservableQuery, _super);
    function ObservableQuery(_a) {
        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;
        var _this = _super.call(this, function (observer) {
            try {
                var subObserver = observer._subscription._observer;
                if (subObserver && !subObserver.error) {
                    subObserver.error = defaultSubscriptionObserverErrorCallback;
                }
            }
            catch (_a) { }
            var first = !_this.observers.size;
            _this.observers.add(observer);
            var last = _this.last;
            if (last && last.error) {
                observer.error && observer.error(last.error);
            }
            else if (last && last.result) {
                observer.next && observer.next(last.result);
            }
            if (first) {
                _this.reobserve().catch(function () { });
            }
            return function () {
                if (_this.observers.delete(observer) && !_this.observers.size) {
                    _this.tearDownQuery();
                }
            };
        }) || this;
        _this.observers = new Set();
        _this.subscriptions = new Set();
        _this.queryInfo = queryInfo;
        _this.queryManager = queryManager;
        _this.isTornDown = false;
        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? "cache-first" : _d;
        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, _f = options.initialFetchPolicy, initialFetchPolicy = _f === void 0 ? (fetchPolicy === "standby" ? defaultFetchPolicy : fetchPolicy) : _f;
        _this.options = __assign(__assign({}, options), { initialFetchPolicy: initialFetchPolicy, fetchPolicy: fetchPolicy });
        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();
        var opDef = getOperationDefinition(_this.query);
        _this.queryName = opDef && opDef.name && opDef.name.value;
        return _this;
    }
    Object.defineProperty(ObservableQuery.prototype, "query", {
        get: function () {
            return this.queryManager.transform(this.options.query).document;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObservableQuery.prototype, "variables", {
        get: function () {
            return this.options.variables;
        },
        enumerable: false,
        configurable: true
    });
    ObservableQuery.prototype.result = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var observer = {
                next: function (result) {
                    resolve(result);
                    _this.observers.delete(observer);
                    if (!_this.observers.size) {
                        _this.queryManager.removeQuery(_this.queryId);
                    }
                    setTimeout(function () {
                        subscription.unsubscribe();
                    }, 0);
                },
                error: reject,
            };
            var subscription = _this.subscribe(observer);
        });
    };
    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {
        if (saveAsLastResult === void 0) { saveAsLastResult = true; }
        var lastResult = this.getLastResult(true);
        var networkStatus = this.queryInfo.networkStatus ||
            (lastResult && lastResult.networkStatus) ||
            NetworkStatus.ready;
        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });
        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a;
        if (fetchPolicy === 'network-only' ||
            fetchPolicy === 'no-cache' ||
            fetchPolicy === 'standby' ||
            this.queryManager.transform(this.options.query).hasForcedResolvers) ;
        else {
            var diff = this.queryInfo.getDiff();
            if (diff.complete || this.options.returnPartialData) {
                result.data = diff.result;
            }
            if (equal(result.data, {})) {
                result.data = void 0;
            }
            if (diff.complete) {
                delete result.partial;
                if (diff.complete &&
                    result.networkStatus === NetworkStatus.loading &&
                    (fetchPolicy === 'cache-first' ||
                        fetchPolicy === 'cache-only')) {
                    result.networkStatus = NetworkStatus.ready;
                    result.loading = false;
                }
            }
            else {
                result.partial = true;
            }
            if (__DEV__ &&
                !diff.complete &&
                !this.options.partialRefetch &&
                !result.loading &&
                !result.data &&
                !result.error) {
                logMissingFieldErrors(diff.missing);
            }
        }
        if (saveAsLastResult) {
            this.updateLastResult(result);
        }
        return result;
    };
    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {
        return !this.last || !equal(this.last.result, newResult);
    };
    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {
        var last = this.last;
        if (last &&
            last[key] &&
            (!variablesMustMatch || equal(last.variables, this.variables))) {
            return last[key];
        }
    };
    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {
        return this.getLast("result", variablesMustMatch);
    };
    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {
        return this.getLast("error", variablesMustMatch);
    };
    ObservableQuery.prototype.resetLastResults = function () {
        delete this.last;
        this.isTornDown = false;
    };
    ObservableQuery.prototype.resetQueryStoreErrors = function () {
        this.queryManager.resetErrors(this.queryId);
    };
    ObservableQuery.prototype.refetch = function (variables) {
        var _a;
        var reobserveOptions = {
            pollInterval: 0,
        };
        var fetchPolicy = this.options.fetchPolicy;
        if (fetchPolicy === 'cache-and-network') {
            reobserveOptions.fetchPolicy = fetchPolicy;
        }
        else if (fetchPolicy === 'no-cache') {
            reobserveOptions.fetchPolicy = 'no-cache';
        }
        else {
            reobserveOptions.fetchPolicy = 'network-only';
        }
        if (__DEV__ && variables && hasOwnProperty$3.call(variables, "variables")) {
            var queryDef = getQueryDefinition(this.query);
            var vars = queryDef.variableDefinitions;
            if (!vars || !vars.some(function (v) { return v.variable.name.value === "variables"; })) {
                __DEV__ && invariant.warn("Called refetch(".concat(JSON.stringify(variables), ") for query ").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), ", which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?"));
            }
        }
        if (variables && !equal(this.options.variables, variables)) {
            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);
        }
        this.queryInfo.resetLastWrite();
        return this.reobserve(reobserveOptions, NetworkStatus.refetch);
    };
    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
        var _this = this;
        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), { query: this.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: "no-cache" });
        var qid = this.queryManager.generateQueryId();
        var queryInfo = this.queryInfo;
        var originalNetworkStatus = queryInfo.networkStatus;
        queryInfo.networkStatus = NetworkStatus.fetchMore;
        if (combinedOptions.notifyOnNetworkStatusChange) {
            this.observe();
        }
        var updatedQuerySet = new Set();
        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {
            _this.queryManager.removeQuery(qid);
            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {
                queryInfo.networkStatus = originalNetworkStatus;
            }
            _this.queryManager.cache.batch({
                update: function (cache) {
                    var updateQuery = fetchMoreOptions.updateQuery;
                    if (updateQuery) {
                        cache.updateQuery({
                            query: _this.query,
                            variables: _this.variables,
                            returnPartialData: true,
                            optimistic: false,
                        }, function (previous) { return updateQuery(previous, {
                            fetchMoreResult: fetchMoreResult.data,
                            variables: combinedOptions.variables,
                        }); });
                    }
                    else {
                        cache.writeQuery({
                            query: combinedOptions.query,
                            variables: combinedOptions.variables,
                            data: fetchMoreResult.data,
                        });
                    }
                },
                onWatchUpdated: function (watch) {
                    updatedQuerySet.add(watch.query);
                },
            });
            return fetchMoreResult;
        }).finally(function () {
            if (!updatedQuerySet.has(_this.query)) {
                reobserveCacheFirst(_this);
            }
        });
    };
    ObservableQuery.prototype.subscribeToMore = function (options) {
        var _this = this;
        var subscription = this.queryManager
            .startGraphQLSubscription({
            query: options.document,
            variables: options.variables,
            context: options.context,
        })
            .subscribe({
            next: function (subscriptionData) {
                var updateQuery = options.updateQuery;
                if (updateQuery) {
                    _this.updateQuery(function (previous, _a) {
                        var variables = _a.variables;
                        return updateQuery(previous, {
                            subscriptionData: subscriptionData,
                            variables: variables,
                        });
                    });
                }
            },
            error: function (err) {
                if (options.onError) {
                    options.onError(err);
                    return;
                }
                __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);
            },
        });
        this.subscriptions.add(subscription);
        return function () {
            if (_this.subscriptions.delete(subscription)) {
                subscription.unsubscribe();
            }
        };
    };
    ObservableQuery.prototype.setOptions = function (newOptions) {
        return this.reobserve(newOptions);
    };
    ObservableQuery.prototype.setVariables = function (variables) {
        if (equal(this.variables, variables)) {
            return this.observers.size
                ? this.result()
                : Promise.resolve();
        }
        this.options.variables = variables;
        if (!this.observers.size) {
            return Promise.resolve();
        }
        return this.reobserve({
            fetchPolicy: this.options.initialFetchPolicy,
            variables: variables,
        }, NetworkStatus.setVariables);
    };
    ObservableQuery.prototype.updateQuery = function (mapFn) {
        var queryManager = this.queryManager;
        var result = queryManager.cache.diff({
            query: this.options.query,
            variables: this.variables,
            returnPartialData: true,
            optimistic: false,
        }).result;
        var newResult = mapFn(result, {
            variables: this.variables,
        });
        if (newResult) {
            queryManager.cache.writeQuery({
                query: this.options.query,
                data: newResult,
                variables: this.variables,
            });
            queryManager.broadcastQueries();
        }
    };
    ObservableQuery.prototype.startPolling = function (pollInterval) {
        this.options.pollInterval = pollInterval;
        this.updatePolling();
    };
    ObservableQuery.prototype.stopPolling = function () {
        this.options.pollInterval = 0;
        this.updatePolling();
    };
    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {
        if (options.nextFetchPolicy) {
            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;
            if (typeof options.nextFetchPolicy === "function") {
                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {
                    reason: reason,
                    options: options,
                    observable: this,
                    initialFetchPolicy: initialFetchPolicy,
                });
            }
            else if (reason === "variables-changed") {
                options.fetchPolicy = initialFetchPolicy;
            }
            else {
                options.fetchPolicy = options.nextFetchPolicy;
            }
        }
        return options.fetchPolicy;
    };
    ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {
        this.queryManager.setObservableQuery(this);
        return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);
    };
    ObservableQuery.prototype.updatePolling = function () {
        var _this = this;
        if (this.queryManager.ssrMode) {
            return;
        }
        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;
        if (!pollInterval) {
            if (pollingInfo) {
                clearTimeout(pollingInfo.timeout);
                delete this.pollingInfo;
            }
            return;
        }
        if (pollingInfo &&
            pollingInfo.interval === pollInterval) {
            return;
        }
        __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 10);
        var info = pollingInfo || (this.pollingInfo = {});
        info.interval = pollInterval;
        var maybeFetch = function () {
            if (_this.pollingInfo) {
                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {
                    _this.reobserve({
                        fetchPolicy: "network-only",
                    }, NetworkStatus.poll).then(poll, poll);
                }
                else {
                    poll();
                }
            }
        };
        var poll = function () {
            var info = _this.pollingInfo;
            if (info) {
                clearTimeout(info.timeout);
                info.timeout = setTimeout(maybeFetch, info.interval);
            }
        };
        poll();
    };
    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {
        if (variables === void 0) { variables = this.variables; }
        this.last = __assign(__assign({}, this.last), { result: this.queryManager.assumeImmutableResults
                ? newResult
                : cloneDeep(newResult), variables: variables });
        if (!isNonEmptyArray(newResult.errors)) {
            delete this.last.error;
        }
        return this.last;
    };
    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {
        var _this = this;
        this.isTornDown = false;
        var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch ||
            newNetworkStatus === NetworkStatus.fetchMore ||
            newNetworkStatus === NetworkStatus.poll;
        var oldVariables = this.options.variables;
        var oldFetchPolicy = this.options.fetchPolicy;
        var mergedOptions = mergeOptions(this.options, newOptions || {});
        var options = useDisposableConcast
            ? mergedOptions
            : assign(this.options, mergedOptions);
        if (!useDisposableConcast) {
            this.updatePolling();
            if (newOptions &&
                newOptions.variables &&
                !equal(newOptions.variables, oldVariables) &&
                (!newOptions.fetchPolicy || newOptions.fetchPolicy === oldFetchPolicy)) {
                this.applyNextFetchPolicy("variables-changed", options);
                if (newNetworkStatus === void 0) {
                    newNetworkStatus = NetworkStatus.setVariables;
                }
            }
        }
        var variables = options.variables && __assign({}, options.variables);
        var concast = this.fetch(options, newNetworkStatus);
        var observer = {
            next: function (result) {
                _this.reportResult(result, variables);
            },
            error: function (error) {
                _this.reportError(error, variables);
            },
        };
        if (!useDisposableConcast) {
            if (this.concast && this.observer) {
                this.concast.removeObserver(this.observer, true);
            }
            this.concast = concast;
            this.observer = observer;
        }
        concast.addObserver(observer);
        return concast.promise;
    };
    ObservableQuery.prototype.observe = function () {
        this.reportResult(this.getCurrentResult(false), this.variables);
    };
    ObservableQuery.prototype.reportResult = function (result, variables) {
        var lastError = this.getLastError();
        if (lastError || this.isDifferentFromLastResult(result)) {
            if (lastError || !result.partial || this.options.returnPartialData) {
                this.updateLastResult(result, variables);
            }
            iterateObserversSafely(this.observers, 'next', result);
        }
    };
    ObservableQuery.prototype.reportError = function (error, variables) {
        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });
        this.updateLastResult(errorResult, variables);
        iterateObserversSafely(this.observers, 'error', this.last.error = error);
    };
    ObservableQuery.prototype.hasObservers = function () {
        return this.observers.size > 0;
    };
    ObservableQuery.prototype.tearDownQuery = function () {
        if (this.isTornDown)
            return;
        if (this.concast && this.observer) {
            this.concast.removeObserver(this.observer);
            delete this.concast;
            delete this.observer;
        }
        this.stopPolling();
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        this.subscriptions.clear();
        this.queryManager.stopQuery(this.queryId);
        this.observers.clear();
        this.isTornDown = true;
    };
    return ObservableQuery;
}(Observable));
fixObservableSubclass(ObservableQuery);
function reobserveCacheFirst(obsQuery) {
    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;
    if (fetchPolicy === "cache-and-network" ||
        fetchPolicy === "network-only") {
        return obsQuery.reobserve({
            fetchPolicy: "cache-first",
            nextFetchPolicy: function () {
                this.nextFetchPolicy = nextFetchPolicy;
                if (typeof nextFetchPolicy === "function") {
                    return nextFetchPolicy.apply(this, arguments);
                }
                return fetchPolicy;
            },
        });
    }
    return obsQuery.reobserve();
}
function defaultSubscriptionObserverErrorCallback(error) {
    __DEV__ && invariant.error('Unhandled error', error.message, error.stack);
}
function logMissingFieldErrors(missing) {
    if (__DEV__ && missing) {
        __DEV__ && invariant.debug("Missing cache result fields: ".concat(JSON.stringify(missing)), missing);
    }
}

var LocalState = (function () {
    function LocalState(_a) {
        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;
        this.cache = cache;
        if (client) {
            this.client = client;
        }
        if (resolvers) {
            this.addResolvers(resolvers);
        }
        if (fragmentMatcher) {
            this.setFragmentMatcher(fragmentMatcher);
        }
    }
    LocalState.prototype.addResolvers = function (resolvers) {
        var _this = this;
        this.resolvers = this.resolvers || {};
        if (Array.isArray(resolvers)) {
            resolvers.forEach(function (resolverGroup) {
                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
            });
        }
        else {
            this.resolvers = mergeDeep(this.resolvers, resolvers);
        }
    };
    LocalState.prototype.setResolvers = function (resolvers) {
        this.resolvers = {};
        this.addResolvers(resolvers);
    };
    LocalState.prototype.getResolvers = function () {
        return this.resolvers || {};
    };
    LocalState.prototype.runResolvers = function (_a) {
        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                if (document) {
                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];
                }
                return [2, remoteResult];
            });
        });
    };
    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {
        this.fragmentMatcher = fragmentMatcher;
    };
    LocalState.prototype.getFragmentMatcher = function () {
        return this.fragmentMatcher;
    };
    LocalState.prototype.clientQuery = function (document) {
        if (hasDirectives(['client'], document)) {
            if (this.resolvers) {
                return document;
            }
        }
        return null;
    };
    LocalState.prototype.serverQuery = function (document) {
        return removeClientSetsFromDocument(document);
    };
    LocalState.prototype.prepareContext = function (context) {
        var cache = this.cache;
        return __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {
                return cache.identify(obj);
            } });
    };
    LocalState.prototype.addExportedVariables = function (document, variables, context) {
        if (variables === void 0) { variables = {}; }
        if (context === void 0) { context = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (document) {
                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];
                }
                return [2, __assign({}, variables)];
            });
        });
    };
    LocalState.prototype.shouldForceResolvers = function (document) {
        var forceResolvers = false;
        visit(document, {
            Directive: {
                enter: function (node) {
                    if (node.name.value === 'client' && node.arguments) {
                        forceResolvers = node.arguments.some(function (arg) {
                            return arg.name.value === 'always' &&
                                arg.value.kind === 'BooleanValue' &&
                                arg.value.value === true;
                        });
                        if (forceResolvers) {
                            return BREAK;
                        }
                    }
                },
            },
        });
        return forceResolvers;
    };
    LocalState.prototype.buildRootValueFromCache = function (document, variables) {
        return this.cache.diff({
            query: buildQueryFromSelectionSet(document),
            variables: variables,
            returnPartialData: true,
            optimistic: false,
        }).result;
    };
    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
        if (context === void 0) { context = {}; }
        if (variables === void 0) { variables = {}; }
        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }
        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }
        return __awaiter(this, void 0, void 0, function () {
            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;
            return __generator(this, function (_b) {
                mainDefinition = getMainDefinition(document);
                fragments = getFragmentDefinitions(document);
                fragmentMap = createFragmentMap(fragments);
                definitionOperation = mainDefinition
                    .operation;
                defaultOperationType = definitionOperation
                    ? definitionOperation.charAt(0).toUpperCase() +
                        definitionOperation.slice(1)
                    : 'Query';
                _a = this, cache = _a.cache, client = _a.client;
                execContext = {
                    fragmentMap: fragmentMap,
                    context: __assign(__assign({}, context), { cache: cache, client: client }),
                    variables: variables,
                    fragmentMatcher: fragmentMatcher,
                    defaultOperationType: defaultOperationType,
                    exportedVariables: {},
                    onlyRunForcedResolvers: onlyRunForcedResolvers,
                };
                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({
                        result: result,
                        exportedVariables: execContext.exportedVariables,
                    }); })];
            });
        });
    };
    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function () {
            var fragmentMap, context, variables, resultsToMerge, execute;
            var _this = this;
            return __generator(this, function (_a) {
                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
                resultsToMerge = [rootValue];
                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {
                    var fragment, typeCondition;
                    return __generator(this, function (_a) {
                        if (!shouldInclude(selection, variables)) {
                            return [2];
                        }
                        if (isField(selection)) {
                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {
                                    var _a;
                                    if (typeof fieldResult !== 'undefined') {
                                        resultsToMerge.push((_a = {},
                                            _a[resultKeyNameFromField(selection)] = fieldResult,
                                            _a));
                                    }
                                })];
                        }
                        if (isInlineFragment(selection)) {
                            fragment = selection;
                        }
                        else {
                            fragment = fragmentMap[selection.name.value];
                            __DEV__ ? invariant(fragment, "No fragment named ".concat(selection.name.value)) : invariant(fragment, 9);
                        }
                        if (fragment && fragment.typeCondition) {
                            typeCondition = fragment.typeCondition.name.value;
                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {
                                        resultsToMerge.push(fragmentResult);
                                    })];
                            }
                        }
                        return [2];
                    });
                }); };
                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {
                        return mergeDeepArray(resultsToMerge);
                    })];
            });
        });
    };
    LocalState.prototype.resolveField = function (field, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function () {
            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
            var _this = this;
            return __generator(this, function (_a) {
                variables = execContext.variables;
                fieldName = field.name.value;
                aliasedFieldName = resultKeyNameFromField(field);
                aliasUsed = fieldName !== aliasedFieldName;
                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
                resultPromise = Promise.resolve(defaultResult);
                if (!execContext.onlyRunForcedResolvers ||
                    this.shouldForceResolvers(field)) {
                    resolverType = rootValue.__typename || execContext.defaultOperationType;
                    resolverMap = this.resolvers && this.resolvers[resolverType];
                    if (resolverMap) {
                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
                        if (resolve) {
                            resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [
                                rootValue,
                                argumentsObjectFromField(field, variables),
                                execContext.context,
                                { field: field, fragmentMap: execContext.fragmentMap },
                            ]));
                        }
                    }
                }
                return [2, resultPromise.then(function (result) {
                        if (result === void 0) { result = defaultResult; }
                        if (field.directives) {
                            field.directives.forEach(function (directive) {
                                if (directive.name.value === 'export' && directive.arguments) {
                                    directive.arguments.forEach(function (arg) {
                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {
                                            execContext.exportedVariables[arg.value.value] = result;
                                        }
                                    });
                                }
                            });
                        }
                        if (!field.selectionSet) {
                            return result;
                        }
                        if (result == null) {
                            return result;
                        }
                        if (Array.isArray(result)) {
                            return _this.resolveSubSelectedArray(field, result, execContext);
                        }
                        if (field.selectionSet) {
                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);
                        }
                    })];
            });
        });
    };
    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {
        var _this = this;
        return Promise.all(result.map(function (item) {
            if (item === null) {
                return null;
            }
            if (Array.isArray(item)) {
                return _this.resolveSubSelectedArray(field, item, execContext);
            }
            if (field.selectionSet) {
                return _this.resolveSelectionSet(field.selectionSet, item, execContext);
            }
        }));
    };
    return LocalState;
}());

var destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();
function wrapDestructiveCacheMethod(cache, methodName) {
    var original = cache[methodName];
    if (typeof original === "function") {
        cache[methodName] = function () {
            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);
            return original.apply(this, arguments);
        };
    }
}
function cancelNotifyTimeout(info) {
    if (info["notifyTimeout"]) {
        clearTimeout(info["notifyTimeout"]);
        info["notifyTimeout"] = void 0;
    }
}
var QueryInfo = (function () {
    function QueryInfo(queryManager, queryId) {
        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }
        this.queryId = queryId;
        this.listeners = new Set();
        this.document = null;
        this.lastRequestId = 1;
        this.subscriptions = new Set();
        this.stopped = false;
        this.dirty = false;
        this.observableQuery = null;
        var cache = this.cache = queryManager.cache;
        if (!destructiveMethodCounts.has(cache)) {
            destructiveMethodCounts.set(cache, 0);
            wrapDestructiveCacheMethod(cache, "evict");
            wrapDestructiveCacheMethod(cache, "modify");
            wrapDestructiveCacheMethod(cache, "reset");
        }
    }
    QueryInfo.prototype.init = function (query) {
        var networkStatus = query.networkStatus || NetworkStatus.loading;
        if (this.variables &&
            this.networkStatus !== NetworkStatus.loading &&
            !equal(this.variables, query.variables)) {
            networkStatus = NetworkStatus.setVariables;
        }
        if (!equal(query.variables, this.variables)) {
            this.lastDiff = void 0;
        }
        Object.assign(this, {
            document: query.document,
            variables: query.variables,
            networkError: null,
            graphQLErrors: this.graphQLErrors || [],
            networkStatus: networkStatus,
        });
        if (query.observableQuery) {
            this.setObservableQuery(query.observableQuery);
        }
        if (query.lastRequestId) {
            this.lastRequestId = query.lastRequestId;
        }
        return this;
    };
    QueryInfo.prototype.reset = function () {
        cancelNotifyTimeout(this);
        this.lastDiff = void 0;
        this.dirty = false;
    };
    QueryInfo.prototype.getDiff = function (variables) {
        if (variables === void 0) { variables = this.variables; }
        var options = this.getDiffOptions(variables);
        if (this.lastDiff && equal(options, this.lastDiff.options)) {
            return this.lastDiff.diff;
        }
        this.updateWatch(this.variables = variables);
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") {
            return { complete: false };
        }
        var diff = this.cache.diff(options);
        this.updateLastDiff(diff, options);
        return diff;
    };
    QueryInfo.prototype.updateLastDiff = function (diff, options) {
        this.lastDiff = diff ? {
            diff: diff,
            options: options || this.getDiffOptions(),
        } : void 0;
    };
    QueryInfo.prototype.getDiffOptions = function (variables) {
        var _a;
        if (variables === void 0) { variables = this.variables; }
        return {
            query: this.document,
            variables: variables,
            returnPartialData: true,
            optimistic: true,
            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,
        };
    };
    QueryInfo.prototype.setDiff = function (diff) {
        var _this = this;
        var oldDiff = this.lastDiff && this.lastDiff.diff;
        this.updateLastDiff(diff);
        if (!this.dirty &&
            !equal(oldDiff && oldDiff.result, diff && diff.result)) {
            this.dirty = true;
            if (!this.notifyTimeout) {
                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);
            }
        }
    };
    QueryInfo.prototype.setObservableQuery = function (oq) {
        var _this = this;
        if (oq === this.observableQuery)
            return;
        if (this.oqListener) {
            this.listeners.delete(this.oqListener);
        }
        this.observableQuery = oq;
        if (oq) {
            oq["queryInfo"] = this;
            this.listeners.add(this.oqListener = function () {
                var diff = _this.getDiff();
                if (diff.fromOptimisticTransaction) {
                    oq["observe"]();
                }
                else {
                    reobserveCacheFirst(oq);
                }
            });
        }
        else {
            delete this.oqListener;
        }
    };
    QueryInfo.prototype.notify = function () {
        var _this = this;
        cancelNotifyTimeout(this);
        if (this.shouldNotify()) {
            this.listeners.forEach(function (listener) { return listener(_this); });
        }
        this.dirty = false;
    };
    QueryInfo.prototype.shouldNotify = function () {
        if (!this.dirty || !this.listeners.size) {
            return false;
        }
        if (isNetworkRequestInFlight(this.networkStatus) &&
            this.observableQuery) {
            var fetchPolicy = this.observableQuery.options.fetchPolicy;
            if (fetchPolicy !== "cache-only" &&
                fetchPolicy !== "cache-and-network") {
                return false;
            }
        }
        return true;
    };
    QueryInfo.prototype.stop = function () {
        if (!this.stopped) {
            this.stopped = true;
            this.reset();
            this.cancel();
            this.cancel = QueryInfo.prototype.cancel;
            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
            var oq = this.observableQuery;
            if (oq)
                oq.stopPolling();
        }
    };
    QueryInfo.prototype.cancel = function () { };
    QueryInfo.prototype.updateWatch = function (variables) {
        var _this = this;
        if (variables === void 0) { variables = this.variables; }
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") {
            return;
        }
        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });
        if (!this.lastWatch ||
            !equal(watchOptions, this.lastWatch)) {
            this.cancel();
            this.cancel = this.cache.watch(this.lastWatch = watchOptions);
        }
    };
    QueryInfo.prototype.resetLastWrite = function () {
        this.lastWrite = void 0;
    };
    QueryInfo.prototype.shouldWrite = function (result, variables) {
        var lastWrite = this.lastWrite;
        return !(lastWrite &&
            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&
            equal(variables, lastWrite.variables) &&
            equal(result.data, lastWrite.result.data));
    };
    QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {
        var _this = this;
        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];
        this.reset();
        if (options.fetchPolicy === 'no-cache') {
            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));
        }
        else if (cacheWriteBehavior !== 0) {
            if (shouldWriteResult(result, options.errorPolicy)) {
                this.cache.performTransaction(function (cache) {
                    if (_this.shouldWrite(result, options.variables)) {
                        cache.writeQuery({
                            query: _this.document,
                            data: result.data,
                            variables: options.variables,
                            overwrite: cacheWriteBehavior === 1,
                        });
                        _this.lastWrite = {
                            result: result,
                            variables: options.variables,
                            dmCount: destructiveMethodCounts.get(_this.cache),
                        };
                    }
                    else {
                        if (_this.lastDiff &&
                            _this.lastDiff.diff.complete) {
                            result.data = _this.lastDiff.diff.result;
                            return;
                        }
                    }
                    var diffOptions = _this.getDiffOptions(options.variables);
                    var diff = cache.diff(diffOptions);
                    if (!_this.stopped) {
                        _this.updateWatch(options.variables);
                    }
                    _this.updateLastDiff(diff, diffOptions);
                    if (diff.complete) {
                        result.data = diff.result;
                    }
                });
            }
            else {
                this.lastWrite = void 0;
            }
        }
    };
    QueryInfo.prototype.markReady = function () {
        this.networkError = null;
        return this.networkStatus = NetworkStatus.ready;
    };
    QueryInfo.prototype.markError = function (error) {
        this.networkStatus = NetworkStatus.error;
        this.lastWrite = void 0;
        this.reset();
        if (error.graphQLErrors) {
            this.graphQLErrors = error.graphQLErrors;
        }
        if (error.networkError) {
            this.networkError = error.networkError;
        }
        return error;
    };
    return QueryInfo;
}());
function shouldWriteResult(result, errorPolicy) {
    if (errorPolicy === void 0) { errorPolicy = "none"; }
    var ignoreErrors = errorPolicy === "ignore" ||
        errorPolicy === "all";
    var writeWithErrors = !graphQLResultHasError(result);
    if (!writeWithErrors && ignoreErrors && result.data) {
        writeWithErrors = true;
    }
    return writeWithErrors;
}

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
var QueryManager = (function () {
    function QueryManager(_a) {
        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;
        this.clientAwareness = {};
        this.queries = new Map();
        this.fetchCancelFns = new Map();
        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
        this.queryIdCounter = 1;
        this.requestIdCounter = 1;
        this.mutationIdCounter = 1;
        this.inFlightLinkObservables = new Map();
        this.cache = cache;
        this.link = link;
        this.defaultOptions = defaultOptions || Object.create(null);
        this.queryDeduplication = queryDeduplication;
        this.clientAwareness = clientAwareness;
        this.localState = localState || new LocalState({ cache: cache });
        this.ssrMode = ssrMode;
        this.assumeImmutableResults = !!assumeImmutableResults;
        if ((this.onBroadcast = onBroadcast)) {
            this.mutationStore = Object.create(null);
        }
    }
    QueryManager.prototype.stop = function () {
        var _this = this;
        this.queries.forEach(function (_info, queryId) {
            _this.stopQueryNoBroadcast(queryId);
        });
        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));
    };
    QueryManager.prototype.cancelPendingFetches = function (error) {
        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });
        this.fetchCancelFns.clear();
    };
    QueryManager.prototype.mutate = function (_a) {
        var _b, _c;
        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || "network-only" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || "none" : _g, keepRootFields = _a.keepRootFields, context = _a.context;
        return __awaiter(this, void 0, void 0, function () {
            var mutationId, mutationStoreValue, self;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);
                        __DEV__ ? invariant(fetchPolicy === 'network-only' ||
                            fetchPolicy === 'no-cache', "Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.") : invariant(fetchPolicy === 'network-only' ||
                            fetchPolicy === 'no-cache', 13);
                        mutationId = this.generateMutationId();
                        mutation = this.transform(mutation).document;
                        variables = this.getVariables(mutation, variables);
                        if (!this.transform(mutation).hasClientExports) return [3, 2];
                        return [4, this.localState.addExportedVariables(mutation, variables, context)];
                    case 1:
                        variables = (_h.sent());
                        _h.label = 2;
                    case 2:
                        mutationStoreValue = this.mutationStore &&
                            (this.mutationStore[mutationId] = {
                                mutation: mutation,
                                variables: variables,
                                loading: true,
                                error: null,
                            });
                        if (optimisticResponse) {
                            this.markMutationOptimistic(optimisticResponse, {
                                mutationId: mutationId,
                                document: mutation,
                                variables: variables,
                                fetchPolicy: fetchPolicy,
                                errorPolicy: errorPolicy,
                                context: context,
                                updateQueries: updateQueries,
                                update: updateWithProxyFn,
                                keepRootFields: keepRootFields,
                            });
                        }
                        this.broadcastQueries();
                        self = this;
                        return [2, new Promise(function (resolve, reject) {
                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {
                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {
                                        throw new ApolloError({
                                            graphQLErrors: result.errors,
                                        });
                                    }
                                    if (mutationStoreValue) {
                                        mutationStoreValue.loading = false;
                                        mutationStoreValue.error = null;
                                    }
                                    var storeResult = __assign({}, result);
                                    if (typeof refetchQueries === "function") {
                                        refetchQueries = refetchQueries(storeResult);
                                    }
                                    if (errorPolicy === 'ignore' &&
                                        graphQLResultHasError(storeResult)) {
                                        delete storeResult.errors;
                                    }
                                    return self.markMutationResult({
                                        mutationId: mutationId,
                                        result: storeResult,
                                        document: mutation,
                                        variables: variables,
                                        fetchPolicy: fetchPolicy,
                                        errorPolicy: errorPolicy,
                                        context: context,
                                        update: updateWithProxyFn,
                                        updateQueries: updateQueries,
                                        awaitRefetchQueries: awaitRefetchQueries,
                                        refetchQueries: refetchQueries,
                                        removeOptimistic: optimisticResponse ? mutationId : void 0,
                                        onQueryUpdated: onQueryUpdated,
                                        keepRootFields: keepRootFields,
                                    });
                                }).subscribe({
                                    next: function (storeResult) {
                                        self.broadcastQueries();
                                        resolve(storeResult);
                                    },
                                    error: function (err) {
                                        if (mutationStoreValue) {
                                            mutationStoreValue.loading = false;
                                            mutationStoreValue.error = err;
                                        }
                                        if (optimisticResponse) {
                                            self.cache.removeOptimistic(mutationId);
                                        }
                                        self.broadcastQueries();
                                        reject(err instanceof ApolloError ? err : new ApolloError({
                                            networkError: err,
                                        }));
                                    },
                                });
                            })];
                }
            });
        });
    };
    QueryManager.prototype.markMutationResult = function (mutation, cache) {
        var _this = this;
        if (cache === void 0) { cache = this.cache; }
        var result = mutation.result;
        var cacheWrites = [];
        var skipCache = mutation.fetchPolicy === "no-cache";
        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {
            cacheWrites.push({
                result: result.data,
                dataId: 'ROOT_MUTATION',
                query: mutation.document,
                variables: mutation.variables,
            });
            var updateQueries_1 = mutation.updateQueries;
            if (updateQueries_1) {
                this.queries.forEach(function (_a, queryId) {
                    var observableQuery = _a.observableQuery;
                    var queryName = observableQuery && observableQuery.queryName;
                    if (!queryName || !hasOwnProperty$2.call(updateQueries_1, queryName)) {
                        return;
                    }
                    var updater = updateQueries_1[queryName];
                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;
                    var _c = cache.diff({
                        query: document,
                        variables: variables,
                        returnPartialData: true,
                        optimistic: false,
                    }), currentQueryResult = _c.result, complete = _c.complete;
                    if (complete && currentQueryResult) {
                        var nextQueryResult = updater(currentQueryResult, {
                            mutationResult: result,
                            queryName: document && getOperationName(document) || void 0,
                            queryVariables: variables,
                        });
                        if (nextQueryResult) {
                            cacheWrites.push({
                                result: nextQueryResult,
                                dataId: 'ROOT_QUERY',
                                query: document,
                                variables: variables,
                            });
                        }
                    }
                });
            }
        }
        if (cacheWrites.length > 0 ||
            mutation.refetchQueries ||
            mutation.update ||
            mutation.onQueryUpdated ||
            mutation.removeOptimistic) {
            var results_1 = [];
            this.refetchQueries({
                updateCache: function (cache) {
                    if (!skipCache) {
                        cacheWrites.forEach(function (write) { return cache.write(write); });
                    }
                    var update = mutation.update;
                    if (update) {
                        if (!skipCache) {
                            var diff = cache.diff({
                                id: "ROOT_MUTATION",
                                query: _this.transform(mutation.document).asQuery,
                                variables: mutation.variables,
                                optimistic: false,
                                returnPartialData: true,
                            });
                            if (diff.complete) {
                                result = __assign(__assign({}, result), { data: diff.result });
                            }
                        }
                        update(cache, result, {
                            context: mutation.context,
                            variables: mutation.variables,
                        });
                    }
                    if (!skipCache && !mutation.keepRootFields) {
                        cache.modify({
                            id: 'ROOT_MUTATION',
                            fields: function (value, _a) {
                                var fieldName = _a.fieldName, DELETE = _a.DELETE;
                                return fieldName === "__typename" ? value : DELETE;
                            },
                        });
                    }
                },
                include: mutation.refetchQueries,
                optimistic: false,
                removeOptimistic: mutation.removeOptimistic,
                onQueryUpdated: mutation.onQueryUpdated || null,
            }).forEach(function (result) { return results_1.push(result); });
            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {
                return Promise.all(results_1).then(function () { return result; });
            }
        }
        return Promise.resolve(result);
    };
    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {
        var _this = this;
        var data = typeof optimisticResponse === "function"
            ? optimisticResponse(mutation.variables)
            : optimisticResponse;
        return this.cache.recordOptimisticTransaction(function (cache) {
            try {
                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);
            }
            catch (error) {
                __DEV__ && invariant.error(error);
            }
        }, mutation.mutationId);
    };
    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {
        return this.fetchQueryObservable(queryId, options, networkStatus).promise;
    };
    QueryManager.prototype.getQueryStore = function () {
        var store = Object.create(null);
        this.queries.forEach(function (info, queryId) {
            store[queryId] = {
                variables: info.variables,
                networkStatus: info.networkStatus,
                networkError: info.networkError,
                graphQLErrors: info.graphQLErrors,
            };
        });
        return store;
    };
    QueryManager.prototype.resetErrors = function (queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo) {
            queryInfo.networkError = undefined;
            queryInfo.graphQLErrors = [];
        }
    };
    QueryManager.prototype.transform = function (document) {
        var transformCache = this.transformCache;
        if (!transformCache.has(document)) {
            var transformed = this.cache.transformDocument(document);
            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));
            var clientQuery = this.localState.clientQuery(transformed);
            var serverQuery = forLink && this.localState.serverQuery(forLink);
            var cacheEntry_1 = {
                document: transformed,
                hasClientExports: hasClientExports(transformed),
                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
                clientQuery: clientQuery,
                serverQuery: serverQuery,
                defaultVars: getDefaultValues(getOperationDefinition(transformed)),
                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {
                        if (def.kind === "OperationDefinition" &&
                            def.operation !== "query") {
                            return __assign(__assign({}, def), { operation: "query" });
                        }
                        return def;
                    }) })
            };
            var add = function (doc) {
                if (doc && !transformCache.has(doc)) {
                    transformCache.set(doc, cacheEntry_1);
                }
            };
            add(document);
            add(transformed);
            add(clientQuery);
            add(serverQuery);
        }
        return transformCache.get(document);
    };
    QueryManager.prototype.getVariables = function (document, variables) {
        return __assign(__assign({}, this.transform(document).defaultVars), variables);
    };
    QueryManager.prototype.watchQuery = function (options) {
        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });
        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {
            options.notifyOnNetworkStatusChange = false;
        }
        var queryInfo = new QueryInfo(this);
        var observable = new ObservableQuery({
            queryManager: this,
            queryInfo: queryInfo,
            options: options,
        });
        this.queries.set(observable.queryId, queryInfo);
        queryInfo.init({
            document: observable.query,
            observableQuery: observable,
            variables: observable.variables,
        });
        return observable;
    };
    QueryManager.prototype.query = function (options, queryId) {
        var _this = this;
        if (queryId === void 0) { queryId = this.generateQueryId(); }
        __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' +
            'in the query option.') : invariant(options.query, 14);
        __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a "gql" tag.') : invariant(options.query.kind === 'Document', 15);
        __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);
        __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);
        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });
    };
    QueryManager.prototype.generateQueryId = function () {
        return String(this.queryIdCounter++);
    };
    QueryManager.prototype.generateRequestId = function () {
        return this.requestIdCounter++;
    };
    QueryManager.prototype.generateMutationId = function () {
        return String(this.mutationIdCounter++);
    };
    QueryManager.prototype.stopQueryInStore = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo)
            queryInfo.stop();
    };
    QueryManager.prototype.clearStore = function (options) {
        if (options === void 0) { options = {
            discardWatches: true,
        }; }
        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));
        this.queries.forEach(function (queryInfo) {
            if (queryInfo.observableQuery) {
                queryInfo.networkStatus = NetworkStatus.loading;
            }
            else {
                queryInfo.stop();
            }
        });
        if (this.mutationStore) {
            this.mutationStore = Object.create(null);
        }
        return this.cache.reset(options);
    };
    QueryManager.prototype.getObservableQueries = function (include) {
        var _this = this;
        if (include === void 0) { include = "active"; }
        var queries = new Map();
        var queryNamesAndDocs = new Map();
        var legacyQueryOptions = new Set();
        if (Array.isArray(include)) {
            include.forEach(function (desc) {
                if (typeof desc === "string") {
                    queryNamesAndDocs.set(desc, false);
                }
                else if (isDocumentNode(desc)) {
                    queryNamesAndDocs.set(_this.transform(desc).document, false);
                }
                else if (isNonNullObject(desc) && desc.query) {
                    legacyQueryOptions.add(desc);
                }
            });
        }
        this.queries.forEach(function (_a, queryId) {
            var oq = _a.observableQuery, document = _a.document;
            if (oq) {
                if (include === "all") {
                    queries.set(queryId, oq);
                    return;
                }
                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;
                if (fetchPolicy === "standby" ||
                    (include === "active" && !oq.hasObservers())) {
                    return;
                }
                if (include === "active" ||
                    (queryName && queryNamesAndDocs.has(queryName)) ||
                    (document && queryNamesAndDocs.has(document))) {
                    queries.set(queryId, oq);
                    if (queryName)
                        queryNamesAndDocs.set(queryName, true);
                    if (document)
                        queryNamesAndDocs.set(document, true);
                }
            }
        });
        if (legacyQueryOptions.size) {
            legacyQueryOptions.forEach(function (options) {
                var queryId = makeUniqueId("legacyOneTimeQuery");
                var queryInfo = _this.getQuery(queryId).init({
                    document: options.query,
                    variables: options.variables,
                });
                var oq = new ObservableQuery({
                    queryManager: _this,
                    queryInfo: queryInfo,
                    options: __assign(__assign({}, options), { fetchPolicy: "network-only" }),
                });
                invariant(oq.queryId === queryId);
                queryInfo.setObservableQuery(oq);
                queries.set(queryId, oq);
            });
        }
        if (__DEV__ && queryNamesAndDocs.size) {
            queryNamesAndDocs.forEach(function (included, nameOrDoc) {
                if (!included) {
                    __DEV__ && invariant.warn("Unknown query ".concat(typeof nameOrDoc === "string" ? "named " : "").concat(JSON.stringify(nameOrDoc, null, 2), " requested in refetchQueries options.include array"));
                }
            });
        }
        return queries;
    };
    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
        var _this = this;
        if (includeStandby === void 0) { includeStandby = false; }
        var observableQueryPromises = [];
        this.getObservableQueries(includeStandby ? "all" : "active").forEach(function (observableQuery, queryId) {
            var fetchPolicy = observableQuery.options.fetchPolicy;
            observableQuery.resetLastResults();
            if (includeStandby ||
                (fetchPolicy !== "standby" &&
                    fetchPolicy !== "cache-only")) {
                observableQueryPromises.push(observableQuery.refetch());
            }
            _this.getQuery(queryId).setDiff(null);
        });
        this.broadcastQueries();
        return Promise.all(observableQueryPromises);
    };
    QueryManager.prototype.setObservableQuery = function (observableQuery) {
        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
    };
    QueryManager.prototype.startGraphQLSubscription = function (_a) {
        var _this = this;
        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;
        query = this.transform(query).document;
        variables = this.getVariables(query, variables);
        var makeObservable = function (variables) {
            return _this.getObservableFromLink(query, context, variables).map(function (result) {
                if (fetchPolicy !== 'no-cache') {
                    if (shouldWriteResult(result, errorPolicy)) {
                        _this.cache.write({
                            query: query,
                            result: result.data,
                            dataId: 'ROOT_SUBSCRIPTION',
                            variables: variables,
                        });
                    }
                    _this.broadcastQueries();
                }
                if (graphQLResultHasError(result)) {
                    throw new ApolloError({
                        graphQLErrors: result.errors,
                    });
                }
                return result;
            });
        };
        if (this.transform(query).hasClientExports) {
            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
            return new Observable(function (observer) {
                var sub = null;
                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);
                return function () { return sub && sub.unsubscribe(); };
            });
        }
        return makeObservable(variables);
    };
    QueryManager.prototype.stopQuery = function (queryId) {
        this.stopQueryNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.removeQuery(queryId);
    };
    QueryManager.prototype.removeQuery = function (queryId) {
        this.fetchCancelFns.delete(queryId);
        if (this.queries.has(queryId)) {
            this.getQuery(queryId).stop();
            this.queries.delete(queryId);
        }
    };
    QueryManager.prototype.broadcastQueries = function () {
        if (this.onBroadcast)
            this.onBroadcast();
        this.queries.forEach(function (info) { return info.notify(); });
    };
    QueryManager.prototype.getLocalState = function () {
        return this.localState;
    };
    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {
        var _this = this;
        var _a;
        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }
        var observable;
        var serverQuery = this.transform(query).serverQuery;
        if (serverQuery) {
            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;
            var operation = {
                query: serverQuery,
                variables: variables,
                operationName: getOperationName(serverQuery) || void 0,
                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),
            };
            context = operation.context;
            if (deduplication) {
                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
                inFlightLinkObservables_1.set(serverQuery, byVariables_1);
                var varJson_1 = canonicalStringify(variables);
                observable = byVariables_1.get(varJson_1);
                if (!observable) {
                    var concast = new Concast([
                        execute(link, operation)
                    ]);
                    byVariables_1.set(varJson_1, observable = concast);
                    concast.cleanup(function () {
                        if (byVariables_1.delete(varJson_1) &&
                            byVariables_1.size < 1) {
                            inFlightLinkObservables_1.delete(serverQuery);
                        }
                    });
                }
            }
            else {
                observable = new Concast([
                    execute(link, operation)
                ]);
            }
        }
        else {
            observable = new Concast([
                Observable.of({ data: {} })
            ]);
            context = this.prepareContext(context);
        }
        var clientQuery = this.transform(query).clientQuery;
        if (clientQuery) {
            observable = asyncMap(observable, function (result) {
                return _this.localState.runResolvers({
                    document: clientQuery,
                    remoteResult: result,
                    context: context,
                    variables: variables,
                });
            });
        }
        return observable;
    };
    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {
        var requestId = queryInfo.lastRequestId = this.generateRequestId();
        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {
            var hasErrors = isNonEmptyArray(result.errors);
            if (requestId >= queryInfo.lastRequestId) {
                if (hasErrors && options.errorPolicy === "none") {
                    throw queryInfo.markError(new ApolloError({
                        graphQLErrors: result.errors,
                    }));
                }
                queryInfo.markResult(result, options, cacheWriteBehavior);
                queryInfo.markReady();
            }
            var aqr = {
                data: result.data,
                loading: false,
                networkStatus: NetworkStatus.ready,
            };
            if (hasErrors && options.errorPolicy !== "ignore") {
                aqr.errors = result.errors;
                aqr.networkStatus = NetworkStatus.error;
            }
            return aqr;
        }, function (networkError) {
            var error = isApolloError(networkError)
                ? networkError
                : new ApolloError({ networkError: networkError });
            if (requestId >= queryInfo.lastRequestId) {
                queryInfo.markError(error);
            }
            throw error;
        });
    };
    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {
        var _this = this;
        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }
        var query = this.transform(options.query).document;
        var variables = this.getVariables(query, options.variables);
        var queryInfo = this.getQuery(queryId);
        var defaults = this.defaultOptions.watchQuery;
        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || "cache-first" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || "none" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;
        var normalized = Object.assign({}, options, {
            query: query,
            variables: variables,
            fetchPolicy: fetchPolicy,
            errorPolicy: errorPolicy,
            returnPartialData: returnPartialData,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            context: context,
        });
        var fromVariables = function (variables) {
            normalized.variables = variables;
            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
        };
        this.fetchCancelFns.set(queryId, function (reason) {
            setTimeout(function () { return concast.cancel(reason); });
        });
        var concast = new Concast(this.transform(normalized.query).hasClientExports
            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)
            : fromVariables(normalized.variables));
        concast.cleanup(function () {
            _this.fetchCancelFns.delete(queryId);
            if (queryInfo.observableQuery) {
                queryInfo.observableQuery["applyNextFetchPolicy"]("after-fetch", options);
            }
        });
        return concast;
    };
    QueryManager.prototype.refetchQueries = function (_a) {
        var _this = this;
        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId("refetchQueries") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;
        var includedQueriesById = new Map();
        if (include) {
            this.getObservableQueries(include).forEach(function (oq, queryId) {
                includedQueriesById.set(queryId, {
                    oq: oq,
                    lastDiff: _this.getQuery(queryId).getDiff(),
                });
            });
        }
        var results = new Map;
        if (updateCache) {
            this.cache.batch({
                update: updateCache,
                optimistic: optimistic && removeOptimistic || false,
                removeOptimistic: removeOptimistic,
                onWatchUpdated: function (watch, diff, lastDiff) {
                    var oq = watch.watcher instanceof QueryInfo &&
                        watch.watcher.observableQuery;
                    if (oq) {
                        if (onQueryUpdated) {
                            includedQueriesById.delete(oq.queryId);
                            var result = onQueryUpdated(oq, diff, lastDiff);
                            if (result === true) {
                                result = oq.refetch();
                            }
                            if (result !== false) {
                                results.set(oq, result);
                            }
                            return result;
                        }
                        if (onQueryUpdated !== null) {
                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });
                        }
                    }
                },
            });
        }
        if (includedQueriesById.size) {
            includedQueriesById.forEach(function (_a, queryId) {
                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;
                var result;
                if (onQueryUpdated) {
                    if (!diff) {
                        var info = oq["queryInfo"];
                        info.reset();
                        diff = info.getDiff();
                    }
                    result = onQueryUpdated(oq, diff, lastDiff);
                }
                if (!onQueryUpdated || result === true) {
                    result = oq.refetch();
                }
                if (result !== false) {
                    results.set(oq, result);
                }
                if (queryId.indexOf("legacyOneTimeQuery") >= 0) {
                    _this.stopQueryNoBroadcast(queryId);
                }
            });
        }
        if (removeOptimistic) {
            this.cache.removeOptimistic(removeOptimistic);
        }
        return results;
    };
    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {
        var _this = this;
        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;
        var oldNetworkStatus = queryInfo.networkStatus;
        queryInfo.init({
            document: this.transform(query).document,
            variables: variables,
            networkStatus: networkStatus,
        });
        var readCache = function () { return queryInfo.getDiff(variables); };
        var resultsFromCache = function (diff, networkStatus) {
            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }
            var data = diff.result;
            if (__DEV__ &&
                !returnPartialData &&
                !equal(data, {})) {
                logMissingFieldErrors(diff.missing);
            }
            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };
            if (data && _this.transform(query).hasForcedResolvers) {
                return _this.localState.runResolvers({
                    document: query,
                    remoteResult: { data: data },
                    context: context,
                    variables: variables,
                    onlyRunForcedResolvers: true,
                }).then(function (resolved) { return fromData(resolved.data || void 0); });
            }
            return fromData(data);
        };
        var cacheWriteBehavior = fetchPolicy === "no-cache" ? 0 :
            (networkStatus === NetworkStatus.refetch &&
                refetchWritePolicy !== "merge") ? 1
                : 2;
        var resultsFromLink = function () { return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {
            variables: variables,
            context: context,
            fetchPolicy: fetchPolicy,
            errorPolicy: errorPolicy,
        }); };
        var shouldNotify = notifyOnNetworkStatusChange &&
            typeof oldNetworkStatus === "number" &&
            oldNetworkStatus !== networkStatus &&
            isNetworkRequestInFlight(networkStatus);
        switch (fetchPolicy) {
            default:
            case "cache-first": {
                var diff = readCache();
                if (diff.complete) {
                    return [
                        resultsFromCache(diff, queryInfo.markReady()),
                    ];
                }
                if (returnPartialData || shouldNotify) {
                    return [
                        resultsFromCache(diff),
                        resultsFromLink(),
                    ];
                }
                return [
                    resultsFromLink(),
                ];
            }
            case "cache-and-network": {
                var diff = readCache();
                if (diff.complete || returnPartialData || shouldNotify) {
                    return [
                        resultsFromCache(diff),
                        resultsFromLink(),
                    ];
                }
                return [
                    resultsFromLink(),
                ];
            }
            case "cache-only":
                return [
                    resultsFromCache(readCache(), queryInfo.markReady()),
                ];
            case "network-only":
                if (shouldNotify) {
                    return [
                        resultsFromCache(readCache()),
                        resultsFromLink(),
                    ];
                }
                return [resultsFromLink()];
            case "no-cache":
                if (shouldNotify) {
                    return [
                        resultsFromCache(queryInfo.getDiff()),
                        resultsFromLink(),
                    ];
                }
                return [resultsFromLink()];
            case "standby":
                return [];
        }
    };
    QueryManager.prototype.getQuery = function (queryId) {
        if (queryId && !this.queries.has(queryId)) {
            this.queries.set(queryId, new QueryInfo(this, queryId));
        }
        return this.queries.get(queryId);
    };
    QueryManager.prototype.prepareContext = function (context) {
        if (context === void 0) { context = {}; }
        var newContext = this.localState.prepareContext(context);
        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });
    };
    return QueryManager;
}());

var hasSuggestedDevtools = false;
var ApolloClient = (function () {
    function ApolloClient(options) {
        var _this = this;
        this.resetStoreCallbacks = [];
        this.clearStoreCallbacks = [];
        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === 'object' &&
            !window.__APOLLO_CLIENT__ &&
            __DEV__ : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
        var link = options.link;
        if (!link) {
            link = uri
                ? new HttpLink({ uri: uri, credentials: credentials, headers: headers })
                : ApolloLink.empty();
        }
        if (!cache) {
            throw __DEV__ ? new InvariantError("To initialize Apollo Client, you must specify a 'cache' property " +
                "in the options object. \n" +
                "For more information, please visit: https://go.apollo.dev/c/docs") : new InvariantError(7);
        }
        this.link = link;
        this.cache = cache;
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.defaultOptions = defaultOptions || Object.create(null);
        this.typeDefs = typeDefs;
        if (ssrForceFetchDelay) {
            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);
        }
        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
        if (connectToDevTools && typeof window === 'object') {
            window.__APOLLO_CLIENT__ = this;
        }
        if (!hasSuggestedDevtools && __DEV__) {
            hasSuggestedDevtools = true;
            if (typeof window !== 'undefined' &&
                window.document &&
                window.top === window.self &&
                !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
                var nav = window.navigator;
                var ua = nav && nav.userAgent;
                var url = void 0;
                if (typeof ua === "string") {
                    if (ua.indexOf("Chrome/") > -1) {
                        url = "https://chrome.google.com/webstore/detail/" +
                            "apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
                    }
                    else if (ua.indexOf("Firefox/") > -1) {
                        url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
                    }
                }
                if (url) {
                    __DEV__ && invariant.log("Download the Apollo DevTools for a better development " +
                        "experience: " + url);
                }
            }
        }
        this.version = version;
        this.localState = new LocalState({
            cache: cache,
            client: this,
            resolvers: resolvers,
            fragmentMatcher: fragmentMatcher,
        });
        this.queryManager = new QueryManager({
            cache: this.cache,
            link: this.link,
            defaultOptions: this.defaultOptions,
            queryDeduplication: queryDeduplication,
            ssrMode: ssrMode,
            clientAwareness: {
                name: clientAwarenessName,
                version: clientAwarenessVersion,
            },
            localState: this.localState,
            assumeImmutableResults: assumeImmutableResults,
            onBroadcast: connectToDevTools ? function () {
                if (_this.devToolsHookCb) {
                    _this.devToolsHookCb({
                        action: {},
                        state: {
                            queries: _this.queryManager.getQueryStore(),
                            mutations: _this.queryManager.mutationStore || {},
                        },
                        dataWithOptimisticResults: _this.cache.extract(true),
                    });
                }
            } : void 0,
        });
    }
    ApolloClient.prototype.stop = function () {
        this.queryManager.stop();
    };
    ApolloClient.prototype.watchQuery = function (options) {
        if (this.defaultOptions.watchQuery) {
            options = mergeOptions(this.defaultOptions.watchQuery, options);
        }
        if (this.disableNetworkFetches &&
            (options.fetchPolicy === 'network-only' ||
                options.fetchPolicy === 'cache-and-network')) {
            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });
        }
        return this.queryManager.watchQuery(options);
    };
    ApolloClient.prototype.query = function (options) {
        if (this.defaultOptions.query) {
            options = mergeOptions(this.defaultOptions.query, options);
        }
        __DEV__ ? invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +
            'client.query can only return a single result. Please use client.watchQuery ' +
            'to receive multiple results from the cache and the network, or consider ' +
            'using a different fetchPolicy, such as cache-first or network-only.') : invariant(options.fetchPolicy !== 'cache-and-network', 8);
        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });
        }
        return this.queryManager.query(options);
    };
    ApolloClient.prototype.mutate = function (options) {
        if (this.defaultOptions.mutate) {
            options = mergeOptions(this.defaultOptions.mutate, options);
        }
        return this.queryManager.mutate(options);
    };
    ApolloClient.prototype.subscribe = function (options) {
        return this.queryManager.startGraphQLSubscription(options);
    };
    ApolloClient.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.cache.readQuery(options, optimistic);
    };
    ApolloClient.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.cache.readFragment(options, optimistic);
    };
    ApolloClient.prototype.writeQuery = function (options) {
        this.cache.writeQuery(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient.prototype.writeFragment = function (options) {
        this.cache.writeFragment(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient.prototype.__actionHookForDevTools = function (cb) {
        this.devToolsHookCb = cb;
    };
    ApolloClient.prototype.__requestRaw = function (payload) {
        return execute(this.link, payload);
    };
    ApolloClient.prototype.resetStore = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () { return _this.queryManager.clearStore({
            discardWatches: false,
        }); })
            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })
            .then(function () { return _this.reFetchObservableQueries(); });
    };
    ApolloClient.prototype.clearStore = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () { return _this.queryManager.clearStore({
            discardWatches: true,
        }); })
            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });
    };
    ApolloClient.prototype.onResetStore = function (cb) {
        var _this = this;
        this.resetStoreCallbacks.push(cb);
        return function () {
            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
    ApolloClient.prototype.onClearStore = function (cb) {
        var _this = this;
        this.clearStoreCallbacks.push(cb);
        return function () {
            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
        return this.queryManager.reFetchObservableQueries(includeStandby);
    };
    ApolloClient.prototype.refetchQueries = function (options) {
        var map = this.queryManager.refetchQueries(options);
        var queries = [];
        var results = [];
        map.forEach(function (result, obsQuery) {
            queries.push(obsQuery);
            results.push(result);
        });
        var result = Promise.all(results);
        result.queries = queries;
        result.results = results;
        result.catch(function (error) {
            __DEV__ && invariant.debug("In client.refetchQueries, Promise.all promise rejected with error ".concat(error));
        });
        return result;
    };
    ApolloClient.prototype.getObservableQueries = function (include) {
        if (include === void 0) { include = "active"; }
        return this.queryManager.getObservableQueries(include);
    };
    ApolloClient.prototype.extract = function (optimistic) {
        return this.cache.extract(optimistic);
    };
    ApolloClient.prototype.restore = function (serializedState) {
        return this.cache.restore(serializedState);
    };
    ApolloClient.prototype.addResolvers = function (resolvers) {
        this.localState.addResolvers(resolvers);
    };
    ApolloClient.prototype.setResolvers = function (resolvers) {
        this.localState.setResolvers(resolvers);
    };
    ApolloClient.prototype.getResolvers = function () {
        return this.localState.getResolvers();
    };
    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
    };
    ApolloClient.prototype.setLink = function (newLink) {
        this.link = this.queryManager.link = newLink;
    };
    return ApolloClient;
}());

var docCache = new Map();
var fragmentSourceMap = new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
    return string.replace(/[\s,]+/g, ' ').trim();
}
function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
    var seenKeys = new Set();
    var definitions = [];
    ast.definitions.forEach(function (fragmentDefinition) {
        if (fragmentDefinition.kind === 'FragmentDefinition') {
            var fragmentName = fragmentDefinition.name.value;
            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
            var sourceKeySet = fragmentSourceMap.get(fragmentName);
            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
                if (printFragmentWarnings) {
                    console.warn("Warning: fragment with name " + fragmentName + " already exists.\n"
                        + "graphql-tag enforces all fragment names across your application to be unique; read more about\n"
                        + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
                }
            }
            else if (!sourceKeySet) {
                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);
            }
            sourceKeySet.add(sourceKey);
            if (!seenKeys.has(sourceKey)) {
                seenKeys.add(sourceKey);
                definitions.push(fragmentDefinition);
            }
        }
        else {
            definitions.push(fragmentDefinition);
        }
    });
    return __assign(__assign({}, ast), { definitions: definitions });
}
function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function (node) {
        if (node.loc)
            delete node.loc;
        Object.keys(node).forEach(function (key) {
            var value = node[key];
            if (value && typeof value === 'object') {
                workSet.add(value);
            }
        });
    });
    var loc = doc.loc;
    if (loc) {
        delete loc.startToken;
        delete loc.endToken;
    }
    return doc;
}
function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
        var parsed = parse$1(source, {
            experimentalFragmentVariables: experimentalFragmentVariables,
            allowLegacyFragmentVariables: experimentalFragmentVariables
        });
        if (!parsed || parsed.kind !== 'Document') {
            throw new Error('Not a valid GraphQL document.');
        }
        docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
}
function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof literals === 'string') {
        literals = [literals];
    }
    var result = literals[0];
    args.forEach(function (arg, i) {
        if (arg && arg.kind === 'Document') {
            result += arg.loc.source.body;
        }
        else {
            result += arg;
        }
        result += literals[i + 1];
    });
    return parseDocument(result);
}
function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
    printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
}
var extras = {
    gql: gql,
    resetCaches: resetCaches,
    disableFragmentWarnings: disableFragmentWarnings,
    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
};
(function (gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {}));
gql["default"] = gql;

setVerbosity(DEV ? "log" : "silent");

var contextKey = canUseSymbol
    ? Symbol.for('__APOLLO_CONTEXT__')
    : '__APOLLO_CONTEXT__';
function getApolloContext() {
    var context = react.exports.createContext[contextKey];
    if (!context) {
        Object.defineProperty(react.exports.createContext, contextKey, {
            value: context = react.exports.createContext({}),
            enumerable: false,
            writable: false,
            configurable: true,
        });
        context.displayName = 'ApolloContext';
    }
    return context;
}

function useApolloClient(override) {
    var context = react.exports.useContext(getApolloContext());
    var client = override || context.client;
    __DEV__ ? invariant(!!client, 'Could not find "client" in the context or passed in as an option. ' +
        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +
        'instance in via options.') : invariant(!!client, 29);
    return client;
}

var didWarnUncachedGetSnapshot = false;
var uSESKey = "useSyncExternalStore";
var realHook = React$1[uSESKey];
var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {
    var value = getSnapshot();
    if (__DEV__ &&
        !didWarnUncachedGetSnapshot &&
        value !== getSnapshot()) {
        didWarnUncachedGetSnapshot = true;
        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');
    }
    var _a = react.exports.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];
    if (canUseLayoutEffect) {
        react.exports.useLayoutEffect(function () {
            Object.assign(inst, { value: value, getSnapshot: getSnapshot });
            if (checkIfSnapshotChanged(inst)) {
                forceUpdate({ inst: inst });
            }
        }, [subscribe, value, getSnapshot]);
    }
    else {
        Object.assign(inst, { value: value, getSnapshot: getSnapshot });
    }
    react.exports.useEffect(function () {
        if (checkIfSnapshotChanged(inst)) {
            forceUpdate({ inst: inst });
        }
        return subscribe(function handleStoreChange() {
            if (checkIfSnapshotChanged(inst)) {
                forceUpdate({ inst: inst });
            }
        });
    }, [subscribe]);
    return value;
});
function checkIfSnapshotChanged(_a) {
    var value = _a.value, getSnapshot = _a.getSnapshot;
    try {
        return value !== getSnapshot();
    }
    catch (_b) {
        return true;
    }
}

var DocumentType;
(function (DocumentType) {
    DocumentType[DocumentType["Query"] = 0] = "Query";
    DocumentType[DocumentType["Mutation"] = 1] = "Mutation";
    DocumentType[DocumentType["Subscription"] = 2] = "Subscription";
})(DocumentType || (DocumentType = {}));
var cache = new Map();
function operationName(type) {
    var name;
    switch (type) {
        case DocumentType.Query:
            name = 'Query';
            break;
        case DocumentType.Mutation:
            name = 'Mutation';
            break;
        case DocumentType.Subscription:
            name = 'Subscription';
            break;
    }
    return name;
}
function parser(document) {
    var cached = cache.get(document);
    if (cached)
        return cached;
    var variables, type, name;
    __DEV__ ? invariant(!!document && !!document.kind, "Argument of ".concat(document, " passed to parser was not a valid GraphQL ") +
        "DocumentNode. You may need to use 'graphql-tag' or another method " +
        "to convert your operation into a document") : invariant(!!document && !!document.kind, 30);
    var fragments = [];
    var queries = [];
    var mutations = [];
    var subscriptions = [];
    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {
        var x = _a[_i];
        if (x.kind === 'FragmentDefinition') {
            fragments.push(x);
            continue;
        }
        if (x.kind === 'OperationDefinition') {
            switch (x.operation) {
                case 'query':
                    queries.push(x);
                    break;
                case 'mutation':
                    mutations.push(x);
                    break;
                case 'subscription':
                    subscriptions.push(x);
                    break;
            }
        }
    }
    __DEV__ ? invariant(!fragments.length ||
        (queries.length || mutations.length || subscriptions.length), "Passing only a fragment to 'graphql' is not yet supported. " +
        "You must include a query, subscription or mutation as well") : invariant(!fragments.length ||
        (queries.length || mutations.length || subscriptions.length), 31);
    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, "react-apollo only supports a query, subscription, or a mutation per HOC. " +
        "".concat(document, " had ").concat(queries.length, " queries, ").concat(subscriptions.length, " ") +
        "subscriptions and ".concat(mutations.length, " mutations. ") +
        "You can use 'compose' to join multiple operation types to a component") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 32);
    type = queries.length ? DocumentType.Query : DocumentType.Mutation;
    if (!queries.length && !mutations.length)
        type = DocumentType.Subscription;
    var definitions = queries.length
        ? queries
        : mutations.length
            ? mutations
            : subscriptions;
    __DEV__ ? invariant(definitions.length === 1, "react-apollo only supports one definition per HOC. ".concat(document, " had ") +
        "".concat(definitions.length, " definitions. ") +
        "You can use 'compose' to join multiple operation types to a component") : invariant(definitions.length === 1, 33);
    var definition = definitions[0];
    variables = definition.variableDefinitions || [];
    if (definition.name && definition.name.kind === 'Name') {
        name = definition.name.value;
    }
    else {
        name = 'data';
    }
    var payload = { name: name, type: type, variables: variables };
    cache.set(document, payload);
    return payload;
}
function verifyDocumentType(document, type) {
    var operation = parser(document);
    var requiredOperationName = operationName(type);
    var usedOperationName = operationName(operation.type);
    __DEV__ ? invariant(operation.type === type, "Running a ".concat(requiredOperationName, " requires a graphql ") +
        "".concat(requiredOperationName, ", but a ").concat(usedOperationName, " was used instead.")) : invariant(operation.type === type, 34);
}

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function useQuery(query, options) {
    if (options === void 0) { options = Object.create(null); }
    return useInternalState(useApolloClient(options.client), query).useQuery(options);
}
function useInternalState(client, query) {
    var stateRef = react.exports.useRef();
    if (!stateRef.current ||
        client !== stateRef.current.client ||
        query !== stateRef.current.query) {
        stateRef.current = new InternalState(client, query);
    }
    var state = stateRef.current;
    var _a = react.exports.useState(0); _a[0]; var setTick = _a[1];
    state.forceUpdate = function () {
        setTick(function (tick) { return tick + 1; });
    };
    return state;
}
var InternalState = (function () {
    function InternalState(client, query) {
        this.client = client;
        this.query = query;
        this.asyncResolveFns = new Set();
        this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();
        this.ssrDisabledResult = maybeDeepFreeze({
            loading: true,
            data: void 0,
            error: void 0,
            networkStatus: NetworkStatus.loading,
        });
        this.skipStandbyResult = maybeDeepFreeze({
            loading: false,
            data: void 0,
            error: void 0,
            networkStatus: NetworkStatus.ready,
        });
        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();
        verifyDocumentType(query, DocumentType.Query);
    }
    InternalState.prototype.forceUpdate = function () {
        __DEV__ && invariant.warn("Calling default no-op implementation of InternalState#forceUpdate");
    };
    InternalState.prototype.asyncUpdate = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.asyncResolveFns.add(resolve);
            _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);
            _this.forceUpdate();
        });
    };
    InternalState.prototype.useQuery = function (options) {
        var _this = this;
        this.renderPromises = react.exports.useContext(getApolloContext()).renderPromises;
        this.useOptions(options);
        var obsQuery = this.useObservableQuery();
        var result = useSyncExternalStore(react.exports.useCallback(function () {
            if (_this.renderPromises) {
                return function () { };
            }
            var onNext = function () {
                var previousResult = _this.result;
                var result = obsQuery.getCurrentResult();
                if (previousResult &&
                    previousResult.loading === result.loading &&
                    previousResult.networkStatus === result.networkStatus &&
                    equal(previousResult.data, result.data)) {
                    return;
                }
                _this.setResult(result);
            };
            var onError = function (error) {
                var last = obsQuery["last"];
                subscription.unsubscribe();
                try {
                    obsQuery.resetLastResults();
                    subscription = obsQuery.subscribe(onNext, onError);
                }
                finally {
                    obsQuery["last"] = last;
                }
                if (!hasOwnProperty$1.call(error, 'graphQLErrors')) {
                    throw error;
                }
                var previousResult = _this.result;
                if (!previousResult ||
                    (previousResult && previousResult.loading) ||
                    !equal(error, previousResult.error)) {
                    _this.setResult({
                        data: (previousResult && previousResult.data),
                        error: error,
                        loading: false,
                        networkStatus: NetworkStatus.error,
                    });
                }
            };
            var subscription = obsQuery.subscribe(onNext, onError);
            return function () { return subscription.unsubscribe(); };
        }, [
            obsQuery,
            this.renderPromises,
            this.client.disableNetworkFetches,
        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });
        this.unsafeHandlePartialRefetch(result);
        var queryResult = this.toQueryResult(result);
        if (!queryResult.loading && this.asyncResolveFns.size) {
            this.asyncResolveFns.forEach(function (resolve) { return resolve(queryResult); });
            this.asyncResolveFns.clear();
        }
        return queryResult;
    };
    InternalState.prototype.useOptions = function (options) {
        var _a;
        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);
        var currentWatchQueryOptions = this.watchQueryOptions;
        if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||
            !equal(watchQueryOptions, currentWatchQueryOptions)) {
            this.watchQueryOptions = watchQueryOptions;
            if (currentWatchQueryOptions && this.observable) {
                this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);
                this.observable.reobserve(watchQueryOptions);
                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;
                this.result = void 0;
            }
        }
        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;
        this.onError = options.onError || InternalState.prototype.onError;
        if ((this.renderPromises || this.client.disableNetworkFetches) &&
            this.queryHookOptions.ssr === false &&
            !this.queryHookOptions.skip) {
            this.result = this.ssrDisabledResult;
        }
        else if (this.queryHookOptions.skip ||
            this.watchQueryOptions.fetchPolicy === 'standby') {
            this.result = this.skipStandbyResult;
        }
        else if (this.result === this.ssrDisabledResult ||
            this.result === this.skipStandbyResult) {
            this.result = void 0;
        }
    };
    InternalState.prototype.createWatchQueryOptions = function (_a) {
        var _b;
        if (_a === void 0) { _a = {}; }
        var skip = _a.skip; _a.ssr; _a.onCompleted; _a.onError; _a.displayName; _a.defaultOptions; var otherOptions = __rest$1(_a, ["skip", "ssr", "onCompleted", "onError", "displayName", "defaultOptions"]);
        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });
        if (this.renderPromises &&
            (watchQueryOptions.fetchPolicy === 'network-only' ||
                watchQueryOptions.fetchPolicy === 'cache-and-network')) {
            watchQueryOptions.fetchPolicy = 'cache-first';
        }
        if (!watchQueryOptions.variables) {
            watchQueryOptions.variables = {};
        }
        if (skip) {
            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;
            Object.assign(watchQueryOptions, {
                initialFetchPolicy: initialFetchPolicy,
                fetchPolicy: 'standby',
            });
        }
        else if (!watchQueryOptions.fetchPolicy) {
            watchQueryOptions.fetchPolicy =
                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||
                    this.getDefaultFetchPolicy();
        }
        return watchQueryOptions;
    };
    InternalState.prototype.getDefaultFetchPolicy = function () {
        var _a, _b;
        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||
            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||
            "cache-first");
    };
    InternalState.prototype.onCompleted = function (data) { };
    InternalState.prototype.onError = function (error) { };
    InternalState.prototype.useObservableQuery = function () {
        var obsQuery = this.observable =
            this.renderPromises
                && this.renderPromises.getSSRObservable(this.watchQueryOptions)
                || this.observable
                || this.client.watchQuery(mergeOptions(this.queryHookOptions.defaultOptions, this.watchQueryOptions));
        this.obsQueryFields = react.exports.useMemo(function () { return ({
            refetch: obsQuery.refetch.bind(obsQuery),
            reobserve: obsQuery.reobserve.bind(obsQuery),
            fetchMore: obsQuery.fetchMore.bind(obsQuery),
            updateQuery: obsQuery.updateQuery.bind(obsQuery),
            startPolling: obsQuery.startPolling.bind(obsQuery),
            stopPolling: obsQuery.stopPolling.bind(obsQuery),
            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),
        }); }, [obsQuery]);
        var ssrAllowed = !(this.queryHookOptions.ssr === false ||
            this.queryHookOptions.skip);
        if (this.renderPromises && ssrAllowed) {
            this.renderPromises.registerSSRObservable(obsQuery);
            if (obsQuery.getCurrentResult().loading) {
                this.renderPromises.addObservableQueryPromise(obsQuery);
            }
        }
        return obsQuery;
    };
    InternalState.prototype.setResult = function (nextResult) {
        var previousResult = this.result;
        if (previousResult && previousResult.data) {
            this.previousData = previousResult.data;
        }
        this.result = nextResult;
        this.forceUpdate();
        this.handleErrorOrCompleted(nextResult);
    };
    InternalState.prototype.handleErrorOrCompleted = function (result) {
        if (!result.loading) {
            if (result.error) {
                this.onError(result.error);
            }
            else if (result.data) {
                this.onCompleted(result.data);
            }
        }
    };
    InternalState.prototype.getCurrentResult = function () {
        if (!this.result) {
            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());
        }
        return this.result;
    };
    InternalState.prototype.toQueryResult = function (result) {
        var queryResult = this.toQueryResultCache.get(result);
        if (queryResult)
            return queryResult;
        var data = result.data; result.partial; var resultWithoutPartial = __rest$1(result, ["data", "partial"]);
        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: true, previousData: this.previousData }));
        if (!queryResult.error && isNonEmptyArray(result.errors)) {
            queryResult.error = new ApolloError({ graphQLErrors: result.errors });
        }
        return queryResult;
    };
    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {
        if (result.partial &&
            this.queryHookOptions.partialRefetch &&
            !result.loading &&
            (!result.data || Object.keys(result.data).length === 0) &&
            this.observable.options.fetchPolicy !== 'cache-only') {
            Object.assign(result, {
                loading: true,
                networkStatus: NetworkStatus.refetch,
            });
            this.observable.refetch();
        }
    };
    return InternalState;
}());

const defaultOptions = {};
/** The actor's type. */
var ActorType;
(function (ActorType) {
    /** Indicates a team actor. */
    ActorType["Team"] = "TEAM";
    /** Indicates a user actor. */
    ActorType["User"] = "USER";
})(ActorType || (ActorType = {}));
/** Properties by which Audit Log connections can be ordered. */
var AuditLogOrderField;
(function (AuditLogOrderField) {
    /** Order audit log entries by timestamp */
    AuditLogOrderField["CreatedAt"] = "CREATED_AT";
})(AuditLogOrderField || (AuditLogOrderField = {}));
/** Represents an annotation's information level. */
var CheckAnnotationLevel;
(function (CheckAnnotationLevel) {
    /** An annotation indicating an inescapable error. */
    CheckAnnotationLevel["Failure"] = "FAILURE";
    /** An annotation indicating some information. */
    CheckAnnotationLevel["Notice"] = "NOTICE";
    /** An annotation indicating an ignorable error. */
    CheckAnnotationLevel["Warning"] = "WARNING";
})(CheckAnnotationLevel || (CheckAnnotationLevel = {}));
/** The possible states for a check suite or run conclusion. */
var CheckConclusionState;
(function (CheckConclusionState) {
    /** The check suite or run requires action. */
    CheckConclusionState["ActionRequired"] = "ACTION_REQUIRED";
    /** The check suite or run has been cancelled. */
    CheckConclusionState["Cancelled"] = "CANCELLED";
    /** The check suite or run has failed. */
    CheckConclusionState["Failure"] = "FAILURE";
    /** The check suite or run was neutral. */
    CheckConclusionState["Neutral"] = "NEUTRAL";
    /** The check suite or run was skipped. */
    CheckConclusionState["Skipped"] = "SKIPPED";
    /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
    CheckConclusionState["Stale"] = "STALE";
    /** The check suite or run has failed at startup. */
    CheckConclusionState["StartupFailure"] = "STARTUP_FAILURE";
    /** The check suite or run has succeeded. */
    CheckConclusionState["Success"] = "SUCCESS";
    /** The check suite or run has timed out. */
    CheckConclusionState["TimedOut"] = "TIMED_OUT";
})(CheckConclusionState || (CheckConclusionState = {}));
/** The possible types of check runs. */
var CheckRunType;
(function (CheckRunType) {
    /** Every check run available. */
    CheckRunType["All"] = "ALL";
    /** The latest check run. */
    CheckRunType["Latest"] = "LATEST";
})(CheckRunType || (CheckRunType = {}));
/** The possible states for a check suite or run status. */
var CheckStatusState;
(function (CheckStatusState) {
    /** The check suite or run has been completed. */
    CheckStatusState["Completed"] = "COMPLETED";
    /** The check suite or run is in progress. */
    CheckStatusState["InProgress"] = "IN_PROGRESS";
    /** The check suite or run is in pending state. */
    CheckStatusState["Pending"] = "PENDING";
    /** The check suite or run has been queued. */
    CheckStatusState["Queued"] = "QUEUED";
    /** The check suite or run has been requested. */
    CheckStatusState["Requested"] = "REQUESTED";
    /** The check suite or run is in waiting state. */
    CheckStatusState["Waiting"] = "WAITING";
})(CheckStatusState || (CheckStatusState = {}));
/** Collaborators affiliation level with a subject. */
var CollaboratorAffiliation;
(function (CollaboratorAffiliation) {
    /** All collaborators the authenticated user can see. */
    CollaboratorAffiliation["All"] = "ALL";
    /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
    CollaboratorAffiliation["Direct"] = "DIRECT";
    /** All outside collaborators of an organization-owned subject. */
    CollaboratorAffiliation["Outside"] = "OUTSIDE";
})(CollaboratorAffiliation || (CollaboratorAffiliation = {}));
/** A comment author association with repository. */
var CommentAuthorAssociation;
(function (CommentAuthorAssociation) {
    /** Author has been invited to collaborate on the repository. */
    CommentAuthorAssociation["Collaborator"] = "COLLABORATOR";
    /** Author has previously committed to the repository. */
    CommentAuthorAssociation["Contributor"] = "CONTRIBUTOR";
    /** Author has not previously committed to GitHub. */
    CommentAuthorAssociation["FirstTimer"] = "FIRST_TIMER";
    /** Author has not previously committed to the repository. */
    CommentAuthorAssociation["FirstTimeContributor"] = "FIRST_TIME_CONTRIBUTOR";
    /** Author is a placeholder for an unclaimed user. */
    CommentAuthorAssociation["Mannequin"] = "MANNEQUIN";
    /** Author is a member of the organization that owns the repository. */
    CommentAuthorAssociation["Member"] = "MEMBER";
    /** Author has no association with the repository. */
    CommentAuthorAssociation["None"] = "NONE";
    /** Author is the owner of the repository. */
    CommentAuthorAssociation["Owner"] = "OWNER";
})(CommentAuthorAssociation || (CommentAuthorAssociation = {}));
/** The possible errors that will prevent a user from updating a comment. */
var CommentCannotUpdateReason;
(function (CommentCannotUpdateReason) {
    /** Unable to create comment because repository is archived. */
    CommentCannotUpdateReason["Archived"] = "ARCHIVED";
    /** You cannot update this comment */
    CommentCannotUpdateReason["Denied"] = "DENIED";
    /** You must be the author or have write access to this repository to update this comment. */
    CommentCannotUpdateReason["InsufficientAccess"] = "INSUFFICIENT_ACCESS";
    /** Unable to create comment because issue is locked. */
    CommentCannotUpdateReason["Locked"] = "LOCKED";
    /** You must be logged in to update this comment. */
    CommentCannotUpdateReason["LoginRequired"] = "LOGIN_REQUIRED";
    /** Repository is under maintenance. */
    CommentCannotUpdateReason["Maintenance"] = "MAINTENANCE";
    /** At least one email address must be verified to update this comment. */
    CommentCannotUpdateReason["VerifiedEmailRequired"] = "VERIFIED_EMAIL_REQUIRED";
})(CommentCannotUpdateReason || (CommentCannotUpdateReason = {}));
/** Properties by which commit contribution connections can be ordered. */
var CommitContributionOrderField;
(function (CommitContributionOrderField) {
    /** Order commit contributions by how many commits they represent. */
    CommitContributionOrderField["CommitCount"] = "COMMIT_COUNT";
    /** Order commit contributions by when they were made. */
    CommitContributionOrderField["OccurredAt"] = "OCCURRED_AT";
})(CommitContributionOrderField || (CommitContributionOrderField = {}));
/** Varying levels of contributions from none to many. */
var ContributionLevel;
(function (ContributionLevel) {
    /** Lowest 25% of days of contributions. */
    ContributionLevel["FirstQuartile"] = "FIRST_QUARTILE";
    /** Highest 25% of days of contributions. More contributions than the third quartile. */
    ContributionLevel["FourthQuartile"] = "FOURTH_QUARTILE";
    /** No contributions occurred. */
    ContributionLevel["None"] = "NONE";
    /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
    ContributionLevel["SecondQuartile"] = "SECOND_QUARTILE";
    /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
    ContributionLevel["ThirdQuartile"] = "THIRD_QUARTILE";
})(ContributionLevel || (ContributionLevel = {}));
/** The possible base permissions for repositories. */
var DefaultRepositoryPermissionField;
(function (DefaultRepositoryPermissionField) {
    /** Can read, write, and administrate repos by default */
    DefaultRepositoryPermissionField["Admin"] = "ADMIN";
    /** No access */
    DefaultRepositoryPermissionField["None"] = "NONE";
    /** Can read repos by default */
    DefaultRepositoryPermissionField["Read"] = "READ";
    /** Can read and write repos by default */
    DefaultRepositoryPermissionField["Write"] = "WRITE";
})(DefaultRepositoryPermissionField || (DefaultRepositoryPermissionField = {}));
/** The possible ecosystems of a dependency graph package. */
var DependencyGraphEcosystem;
(function (DependencyGraphEcosystem) {
    /** GitHub Actions */
    DependencyGraphEcosystem["Actions"] = "ACTIONS";
    /** PHP packages hosted at packagist.org */
    DependencyGraphEcosystem["Composer"] = "COMPOSER";
    /** Go modules */
    DependencyGraphEcosystem["Go"] = "GO";
    /** Java artifacts hosted at the Maven central repository */
    DependencyGraphEcosystem["Maven"] = "MAVEN";
    /** JavaScript packages hosted at npmjs.com */
    DependencyGraphEcosystem["Npm"] = "NPM";
    /** .NET packages hosted at the NuGet Gallery */
    DependencyGraphEcosystem["Nuget"] = "NUGET";
    /** Python packages hosted at PyPI.org */
    DependencyGraphEcosystem["Pip"] = "PIP";
    /** Ruby gems hosted at RubyGems.org */
    DependencyGraphEcosystem["Rubygems"] = "RUBYGEMS";
})(DependencyGraphEcosystem || (DependencyGraphEcosystem = {}));
/** Properties by which deployment connections can be ordered. */
var DeploymentOrderField;
(function (DeploymentOrderField) {
    /** Order collection by creation time */
    DeploymentOrderField["CreatedAt"] = "CREATED_AT";
})(DeploymentOrderField || (DeploymentOrderField = {}));
/** The possible protection rule types. */
var DeploymentProtectionRuleType;
(function (DeploymentProtectionRuleType) {
    /** Required reviewers */
    DeploymentProtectionRuleType["RequiredReviewers"] = "REQUIRED_REVIEWERS";
    /** Wait timer */
    DeploymentProtectionRuleType["WaitTimer"] = "WAIT_TIMER";
})(DeploymentProtectionRuleType || (DeploymentProtectionRuleType = {}));
/** The possible states for a deployment review. */
var DeploymentReviewState;
(function (DeploymentReviewState) {
    /** The deployment was approved. */
    DeploymentReviewState["Approved"] = "APPROVED";
    /** The deployment was rejected. */
    DeploymentReviewState["Rejected"] = "REJECTED";
})(DeploymentReviewState || (DeploymentReviewState = {}));
/** The possible states in which a deployment can be. */
var DeploymentState;
(function (DeploymentState) {
    /** The pending deployment was not updated after 30 minutes. */
    DeploymentState["Abandoned"] = "ABANDONED";
    /** The deployment is currently active. */
    DeploymentState["Active"] = "ACTIVE";
    /** An inactive transient deployment. */
    DeploymentState["Destroyed"] = "DESTROYED";
    /** The deployment experienced an error. */
    DeploymentState["Error"] = "ERROR";
    /** The deployment has failed. */
    DeploymentState["Failure"] = "FAILURE";
    /** The deployment is inactive. */
    DeploymentState["Inactive"] = "INACTIVE";
    /** The deployment is in progress. */
    DeploymentState["InProgress"] = "IN_PROGRESS";
    /** The deployment is pending. */
    DeploymentState["Pending"] = "PENDING";
    /** The deployment has queued */
    DeploymentState["Queued"] = "QUEUED";
    /** The deployment is waiting. */
    DeploymentState["Waiting"] = "WAITING";
})(DeploymentState || (DeploymentState = {}));
/** The possible states for a deployment status. */
var DeploymentStatusState;
(function (DeploymentStatusState) {
    /** The deployment experienced an error. */
    DeploymentStatusState["Error"] = "ERROR";
    /** The deployment has failed. */
    DeploymentStatusState["Failure"] = "FAILURE";
    /** The deployment is inactive. */
    DeploymentStatusState["Inactive"] = "INACTIVE";
    /** The deployment is in progress. */
    DeploymentStatusState["InProgress"] = "IN_PROGRESS";
    /** The deployment is pending. */
    DeploymentStatusState["Pending"] = "PENDING";
    /** The deployment is queued */
    DeploymentStatusState["Queued"] = "QUEUED";
    /** The deployment was successful. */
    DeploymentStatusState["Success"] = "SUCCESS";
    /** The deployment is waiting. */
    DeploymentStatusState["Waiting"] = "WAITING";
})(DeploymentStatusState || (DeploymentStatusState = {}));
/** The possible sides of a diff. */
var DiffSide;
(function (DiffSide) {
    /** The left side of the diff. */
    DiffSide["Left"] = "LEFT";
    /** The right side of the diff. */
    DiffSide["Right"] = "RIGHT";
})(DiffSide || (DiffSide = {}));
/** Properties by which discussion connections can be ordered. */
var DiscussionOrderField;
(function (DiscussionOrderField) {
    /** Order discussions by creation time. */
    DiscussionOrderField["CreatedAt"] = "CREATED_AT";
    /** Order discussions by most recent modification time. */
    DiscussionOrderField["UpdatedAt"] = "UPDATED_AT";
})(DiscussionOrderField || (DiscussionOrderField = {}));
/** The possible reasons that a Dependabot alert was dismissed. */
var DismissReason;
(function (DismissReason) {
    /** A fix has already been started */
    DismissReason["FixStarted"] = "FIX_STARTED";
    /** This alert is inaccurate or incorrect */
    DismissReason["Inaccurate"] = "INACCURATE";
    /** Vulnerable code is not actually used */
    DismissReason["NotUsed"] = "NOT_USED";
    /** No bandwidth to fix this */
    DismissReason["NoBandwidth"] = "NO_BANDWIDTH";
    /** Risk is tolerable to this project */
    DismissReason["TolerableRisk"] = "TOLERABLE_RISK";
})(DismissReason || (DismissReason = {}));
/** Properties by which enterprise administrator invitation connections can be ordered. */
var EnterpriseAdministratorInvitationOrderField;
(function (EnterpriseAdministratorInvitationOrderField) {
    /** Order enterprise administrator member invitations by creation time */
    EnterpriseAdministratorInvitationOrderField["CreatedAt"] = "CREATED_AT";
})(EnterpriseAdministratorInvitationOrderField || (EnterpriseAdministratorInvitationOrderField = {}));
/** The possible administrator roles in an enterprise account. */
var EnterpriseAdministratorRole;
(function (EnterpriseAdministratorRole) {
    /** Represents a billing manager of the enterprise account. */
    EnterpriseAdministratorRole["BillingManager"] = "BILLING_MANAGER";
    /** Represents an owner of the enterprise account. */
    EnterpriseAdministratorRole["Owner"] = "OWNER";
})(EnterpriseAdministratorRole || (EnterpriseAdministratorRole = {}));
/** The possible values for the enterprise base repository permission setting. */
var EnterpriseDefaultRepositoryPermissionSettingValue;
(function (EnterpriseDefaultRepositoryPermissionSettingValue) {
    /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
    EnterpriseDefaultRepositoryPermissionSettingValue["Admin"] = "ADMIN";
    /** Organization members will only be able to clone and pull public repositories. */
    EnterpriseDefaultRepositoryPermissionSettingValue["None"] = "NONE";
    /** Organizations in the enterprise choose base repository permissions for their members. */
    EnterpriseDefaultRepositoryPermissionSettingValue["NoPolicy"] = "NO_POLICY";
    /** Organization members will be able to clone and pull all organization repositories. */
    EnterpriseDefaultRepositoryPermissionSettingValue["Read"] = "READ";
    /** Organization members will be able to clone, pull, and push all organization repositories. */
    EnterpriseDefaultRepositoryPermissionSettingValue["Write"] = "WRITE";
})(EnterpriseDefaultRepositoryPermissionSettingValue || (EnterpriseDefaultRepositoryPermissionSettingValue = {}));
/** The possible values for an enabled/disabled enterprise setting. */
var EnterpriseEnabledDisabledSettingValue;
(function (EnterpriseEnabledDisabledSettingValue) {
    /** The setting is disabled for organizations in the enterprise. */
    EnterpriseEnabledDisabledSettingValue["Disabled"] = "DISABLED";
    /** The setting is enabled for organizations in the enterprise. */
    EnterpriseEnabledDisabledSettingValue["Enabled"] = "ENABLED";
    /** There is no policy set for organizations in the enterprise. */
    EnterpriseEnabledDisabledSettingValue["NoPolicy"] = "NO_POLICY";
})(EnterpriseEnabledDisabledSettingValue || (EnterpriseEnabledDisabledSettingValue = {}));
/** The possible values for an enabled/no policy enterprise setting. */
var EnterpriseEnabledSettingValue;
(function (EnterpriseEnabledSettingValue) {
    /** The setting is enabled for organizations in the enterprise. */
    EnterpriseEnabledSettingValue["Enabled"] = "ENABLED";
    /** There is no policy set for organizations in the enterprise. */
    EnterpriseEnabledSettingValue["NoPolicy"] = "NO_POLICY";
})(EnterpriseEnabledSettingValue || (EnterpriseEnabledSettingValue = {}));
/** Properties by which enterprise member connections can be ordered. */
var EnterpriseMemberOrderField;
(function (EnterpriseMemberOrderField) {
    /** Order enterprise members by creation time */
    EnterpriseMemberOrderField["CreatedAt"] = "CREATED_AT";
    /** Order enterprise members by login */
    EnterpriseMemberOrderField["Login"] = "LOGIN";
})(EnterpriseMemberOrderField || (EnterpriseMemberOrderField = {}));
/** The possible values for the enterprise members can create repositories setting. */
var EnterpriseMembersCanCreateRepositoriesSettingValue;
(function (EnterpriseMembersCanCreateRepositoriesSettingValue) {
    /** Members will be able to create public and private repositories. */
    EnterpriseMembersCanCreateRepositoriesSettingValue["All"] = "ALL";
    /** Members will not be able to create public or private repositories. */
    EnterpriseMembersCanCreateRepositoriesSettingValue["Disabled"] = "DISABLED";
    /** Organization administrators choose whether to allow members to create repositories. */
    EnterpriseMembersCanCreateRepositoriesSettingValue["NoPolicy"] = "NO_POLICY";
    /** Members will be able to create only private repositories. */
    EnterpriseMembersCanCreateRepositoriesSettingValue["Private"] = "PRIVATE";
    /** Members will be able to create only public repositories. */
    EnterpriseMembersCanCreateRepositoriesSettingValue["Public"] = "PUBLIC";
})(EnterpriseMembersCanCreateRepositoriesSettingValue || (EnterpriseMembersCanCreateRepositoriesSettingValue = {}));
/** The possible values for the members can make purchases setting. */
var EnterpriseMembersCanMakePurchasesSettingValue;
(function (EnterpriseMembersCanMakePurchasesSettingValue) {
    /** The setting is disabled for organizations in the enterprise. */
    EnterpriseMembersCanMakePurchasesSettingValue["Disabled"] = "DISABLED";
    /** The setting is enabled for organizations in the enterprise. */
    EnterpriseMembersCanMakePurchasesSettingValue["Enabled"] = "ENABLED";
})(EnterpriseMembersCanMakePurchasesSettingValue || (EnterpriseMembersCanMakePurchasesSettingValue = {}));
/** Properties by which Enterprise Server installation connections can be ordered. */
var EnterpriseServerInstallationOrderField;
(function (EnterpriseServerInstallationOrderField) {
    /** Order Enterprise Server installations by creation time */
    EnterpriseServerInstallationOrderField["CreatedAt"] = "CREATED_AT";
    /** Order Enterprise Server installations by customer name */
    EnterpriseServerInstallationOrderField["CustomerName"] = "CUSTOMER_NAME";
    /** Order Enterprise Server installations by host name */
    EnterpriseServerInstallationOrderField["HostName"] = "HOST_NAME";
})(EnterpriseServerInstallationOrderField || (EnterpriseServerInstallationOrderField = {}));
/** Properties by which Enterprise Server user account email connections can be ordered. */
var EnterpriseServerUserAccountEmailOrderField;
(function (EnterpriseServerUserAccountEmailOrderField) {
    /** Order emails by email */
    EnterpriseServerUserAccountEmailOrderField["Email"] = "EMAIL";
})(EnterpriseServerUserAccountEmailOrderField || (EnterpriseServerUserAccountEmailOrderField = {}));
/** Properties by which Enterprise Server user account connections can be ordered. */
var EnterpriseServerUserAccountOrderField;
(function (EnterpriseServerUserAccountOrderField) {
    /** Order user accounts by login */
    EnterpriseServerUserAccountOrderField["Login"] = "LOGIN";
    /** Order user accounts by creation time on the Enterprise Server installation */
    EnterpriseServerUserAccountOrderField["RemoteCreatedAt"] = "REMOTE_CREATED_AT";
})(EnterpriseServerUserAccountOrderField || (EnterpriseServerUserAccountOrderField = {}));
/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
var EnterpriseServerUserAccountsUploadOrderField;
(function (EnterpriseServerUserAccountsUploadOrderField) {
    /** Order user accounts uploads by creation time */
    EnterpriseServerUserAccountsUploadOrderField["CreatedAt"] = "CREATED_AT";
})(EnterpriseServerUserAccountsUploadOrderField || (EnterpriseServerUserAccountsUploadOrderField = {}));
/** Synchronization state of the Enterprise Server user accounts upload */
var EnterpriseServerUserAccountsUploadSyncState;
(function (EnterpriseServerUserAccountsUploadSyncState) {
    /** The synchronization of the upload failed. */
    EnterpriseServerUserAccountsUploadSyncState["Failure"] = "FAILURE";
    /** The synchronization of the upload is pending. */
    EnterpriseServerUserAccountsUploadSyncState["Pending"] = "PENDING";
    /** The synchronization of the upload succeeded. */
    EnterpriseServerUserAccountsUploadSyncState["Success"] = "SUCCESS";
})(EnterpriseServerUserAccountsUploadSyncState || (EnterpriseServerUserAccountsUploadSyncState = {}));
/** The possible roles for enterprise membership. */
var EnterpriseUserAccountMembershipRole;
(function (EnterpriseUserAccountMembershipRole) {
    /** The user is a member of the enterprise membership. */
    EnterpriseUserAccountMembershipRole["Member"] = "MEMBER";
    /** The user is an owner of the enterprise membership. */
    EnterpriseUserAccountMembershipRole["Owner"] = "OWNER";
})(EnterpriseUserAccountMembershipRole || (EnterpriseUserAccountMembershipRole = {}));
/** The possible GitHub Enterprise deployments where this user can exist. */
var EnterpriseUserDeployment;
(function (EnterpriseUserDeployment) {
    /** The user is part of a GitHub Enterprise Cloud deployment. */
    EnterpriseUserDeployment["Cloud"] = "CLOUD";
    /** The user is part of a GitHub Enterprise Server deployment. */
    EnterpriseUserDeployment["Server"] = "SERVER";
})(EnterpriseUserDeployment || (EnterpriseUserDeployment = {}));
/** The possible viewed states of a file . */
var FileViewedState;
(function (FileViewedState) {
    /** The file has new changes since last viewed. */
    FileViewedState["Dismissed"] = "DISMISSED";
    /** The file has not been marked as viewed. */
    FileViewedState["Unviewed"] = "UNVIEWED";
    /** The file has been marked as viewed. */
    FileViewedState["Viewed"] = "VIEWED";
})(FileViewedState || (FileViewedState = {}));
/** The possible funding platforms for repository funding links. */
var FundingPlatform;
(function (FundingPlatform) {
    /** Community Bridge funding platform. */
    FundingPlatform["CommunityBridge"] = "COMMUNITY_BRIDGE";
    /** Custom funding platform. */
    FundingPlatform["Custom"] = "CUSTOM";
    /** GitHub funding platform. */
    FundingPlatform["Github"] = "GITHUB";
    /** IssueHunt funding platform. */
    FundingPlatform["Issuehunt"] = "ISSUEHUNT";
    /** Ko-fi funding platform. */
    FundingPlatform["KoFi"] = "KO_FI";
    /** LFX Crowdfunding funding platform. */
    FundingPlatform["LfxCrowdfunding"] = "LFX_CROWDFUNDING";
    /** Liberapay funding platform. */
    FundingPlatform["Liberapay"] = "LIBERAPAY";
    /** Open Collective funding platform. */
    FundingPlatform["OpenCollective"] = "OPEN_COLLECTIVE";
    /** Otechie funding platform. */
    FundingPlatform["Otechie"] = "OTECHIE";
    /** Patreon funding platform. */
    FundingPlatform["Patreon"] = "PATREON";
    /** Tidelift funding platform. */
    FundingPlatform["Tidelift"] = "TIDELIFT";
})(FundingPlatform || (FundingPlatform = {}));
/** Properties by which gist connections can be ordered. */
var GistOrderField;
(function (GistOrderField) {
    /** Order gists by creation time */
    GistOrderField["CreatedAt"] = "CREATED_AT";
    /** Order gists by push time */
    GistOrderField["PushedAt"] = "PUSHED_AT";
    /** Order gists by update time */
    GistOrderField["UpdatedAt"] = "UPDATED_AT";
})(GistOrderField || (GistOrderField = {}));
/** The privacy of a Gist */
var GistPrivacy;
(function (GistPrivacy) {
    /** Gists that are public and secret */
    GistPrivacy["All"] = "ALL";
    /** Public */
    GistPrivacy["Public"] = "PUBLIC";
    /** Secret */
    GistPrivacy["Secret"] = "SECRET";
})(GistPrivacy || (GistPrivacy = {}));
/** The state of a Git signature. */
var GitSignatureState;
(function (GitSignatureState) {
    /** The signing certificate or its chain could not be verified */
    GitSignatureState["BadCert"] = "BAD_CERT";
    /** Invalid email used for signing */
    GitSignatureState["BadEmail"] = "BAD_EMAIL";
    /** Signing key expired */
    GitSignatureState["ExpiredKey"] = "EXPIRED_KEY";
    /** Internal error - the GPG verification service misbehaved */
    GitSignatureState["GpgverifyError"] = "GPGVERIFY_ERROR";
    /** Internal error - the GPG verification service is unavailable at the moment */
    GitSignatureState["GpgverifyUnavailable"] = "GPGVERIFY_UNAVAILABLE";
    /** Invalid signature */
    GitSignatureState["Invalid"] = "INVALID";
    /** Malformed signature */
    GitSignatureState["MalformedSig"] = "MALFORMED_SIG";
    /** The usage flags for the key that signed this don't allow signing */
    GitSignatureState["NotSigningKey"] = "NOT_SIGNING_KEY";
    /** Email used for signing not known to GitHub */
    GitSignatureState["NoUser"] = "NO_USER";
    /** Valid signature, though certificate revocation check failed */
    GitSignatureState["OcspError"] = "OCSP_ERROR";
    /** Valid signature, pending certificate revocation checking */
    GitSignatureState["OcspPending"] = "OCSP_PENDING";
    /** One or more certificates in chain has been revoked */
    GitSignatureState["OcspRevoked"] = "OCSP_REVOKED";
    /** Key used for signing not known to GitHub */
    GitSignatureState["UnknownKey"] = "UNKNOWN_KEY";
    /** Unknown signature type */
    GitSignatureState["UnknownSigType"] = "UNKNOWN_SIG_TYPE";
    /** Unsigned */
    GitSignatureState["Unsigned"] = "UNSIGNED";
    /** Email used for signing unverified on GitHub */
    GitSignatureState["UnverifiedEmail"] = "UNVERIFIED_EMAIL";
    /** Valid signature and verified by GitHub */
    GitSignatureState["Valid"] = "VALID";
})(GitSignatureState || (GitSignatureState = {}));
/** The possible states in which authentication can be configured with an identity provider. */
var IdentityProviderConfigurationState;
(function (IdentityProviderConfigurationState) {
    /** Authentication with an identity provider is configured but not enforced. */
    IdentityProviderConfigurationState["Configured"] = "CONFIGURED";
    /** Authentication with an identity provider is configured and enforced. */
    IdentityProviderConfigurationState["Enforced"] = "ENFORCED";
    /** Authentication with an identity provider is not configured. */
    IdentityProviderConfigurationState["Unconfigured"] = "UNCONFIGURED";
})(IdentityProviderConfigurationState || (IdentityProviderConfigurationState = {}));
/** The possible values for the IP allow list enabled setting. */
var IpAllowListEnabledSettingValue;
(function (IpAllowListEnabledSettingValue) {
    /** The setting is disabled for the owner. */
    IpAllowListEnabledSettingValue["Disabled"] = "DISABLED";
    /** The setting is enabled for the owner. */
    IpAllowListEnabledSettingValue["Enabled"] = "ENABLED";
})(IpAllowListEnabledSettingValue || (IpAllowListEnabledSettingValue = {}));
/** Properties by which IP allow list entry connections can be ordered. */
var IpAllowListEntryOrderField;
(function (IpAllowListEntryOrderField) {
    /** Order IP allow list entries by the allow list value. */
    IpAllowListEntryOrderField["AllowListValue"] = "ALLOW_LIST_VALUE";
    /** Order IP allow list entries by creation time. */
    IpAllowListEntryOrderField["CreatedAt"] = "CREATED_AT";
})(IpAllowListEntryOrderField || (IpAllowListEntryOrderField = {}));
/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
var IpAllowListForInstalledAppsEnabledSettingValue;
(function (IpAllowListForInstalledAppsEnabledSettingValue) {
    /** The setting is disabled for the owner. */
    IpAllowListForInstalledAppsEnabledSettingValue["Disabled"] = "DISABLED";
    /** The setting is enabled for the owner. */
    IpAllowListForInstalledAppsEnabledSettingValue["Enabled"] = "ENABLED";
})(IpAllowListForInstalledAppsEnabledSettingValue || (IpAllowListForInstalledAppsEnabledSettingValue = {}));
/** Properties by which issue comment connections can be ordered. */
var IssueCommentOrderField;
(function (IssueCommentOrderField) {
    /** Order issue comments by update time */
    IssueCommentOrderField["UpdatedAt"] = "UPDATED_AT";
})(IssueCommentOrderField || (IssueCommentOrderField = {}));
/** Properties by which issue connections can be ordered. */
var IssueOrderField;
(function (IssueOrderField) {
    /** Order issues by comment count */
    IssueOrderField["Comments"] = "COMMENTS";
    /** Order issues by creation time */
    IssueOrderField["CreatedAt"] = "CREATED_AT";
    /** Order issues by update time */
    IssueOrderField["UpdatedAt"] = "UPDATED_AT";
})(IssueOrderField || (IssueOrderField = {}));
/** The possible states of an issue. */
var IssueState;
(function (IssueState) {
    /** An issue that has been closed */
    IssueState["Closed"] = "CLOSED";
    /** An issue that is still open */
    IssueState["Open"] = "OPEN";
})(IssueState || (IssueState = {}));
/** The possible item types found in a timeline. */
var IssueTimelineItemsItemType;
(function (IssueTimelineItemsItemType) {
    /** Represents a 'added_to_project' event on a given issue or pull request. */
    IssueTimelineItemsItemType["AddedToProjectEvent"] = "ADDED_TO_PROJECT_EVENT";
    /** Represents an 'assigned' event on any assignable object. */
    IssueTimelineItemsItemType["AssignedEvent"] = "ASSIGNED_EVENT";
    /** Represents a 'closed' event on any `Closable`. */
    IssueTimelineItemsItemType["ClosedEvent"] = "CLOSED_EVENT";
    /** Represents a 'comment_deleted' event on a given issue or pull request. */
    IssueTimelineItemsItemType["CommentDeletedEvent"] = "COMMENT_DELETED_EVENT";
    /** Represents a 'connected' event on a given issue or pull request. */
    IssueTimelineItemsItemType["ConnectedEvent"] = "CONNECTED_EVENT";
    /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
    IssueTimelineItemsItemType["ConvertedNoteToIssueEvent"] = "CONVERTED_NOTE_TO_ISSUE_EVENT";
    /** Represents a 'converted_to_discussion' event on a given issue. */
    IssueTimelineItemsItemType["ConvertedToDiscussionEvent"] = "CONVERTED_TO_DISCUSSION_EVENT";
    /** Represents a mention made by one issue or pull request to another. */
    IssueTimelineItemsItemType["CrossReferencedEvent"] = "CROSS_REFERENCED_EVENT";
    /** Represents a 'demilestoned' event on a given issue or pull request. */
    IssueTimelineItemsItemType["DemilestonedEvent"] = "DEMILESTONED_EVENT";
    /** Represents a 'disconnected' event on a given issue or pull request. */
    IssueTimelineItemsItemType["DisconnectedEvent"] = "DISCONNECTED_EVENT";
    /** Represents a comment on an Issue. */
    IssueTimelineItemsItemType["IssueComment"] = "ISSUE_COMMENT";
    /** Represents a 'labeled' event on a given issue or pull request. */
    IssueTimelineItemsItemType["LabeledEvent"] = "LABELED_EVENT";
    /** Represents a 'locked' event on a given issue or pull request. */
    IssueTimelineItemsItemType["LockedEvent"] = "LOCKED_EVENT";
    /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
    IssueTimelineItemsItemType["MarkedAsDuplicateEvent"] = "MARKED_AS_DUPLICATE_EVENT";
    /** Represents a 'mentioned' event on a given issue or pull request. */
    IssueTimelineItemsItemType["MentionedEvent"] = "MENTIONED_EVENT";
    /** Represents a 'milestoned' event on a given issue or pull request. */
    IssueTimelineItemsItemType["MilestonedEvent"] = "MILESTONED_EVENT";
    /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
    IssueTimelineItemsItemType["MovedColumnsInProjectEvent"] = "MOVED_COLUMNS_IN_PROJECT_EVENT";
    /** Represents a 'pinned' event on a given issue or pull request. */
    IssueTimelineItemsItemType["PinnedEvent"] = "PINNED_EVENT";
    /** Represents a 'referenced' event on a given `ReferencedSubject`. */
    IssueTimelineItemsItemType["ReferencedEvent"] = "REFERENCED_EVENT";
    /** Represents a 'removed_from_project' event on a given issue or pull request. */
    IssueTimelineItemsItemType["RemovedFromProjectEvent"] = "REMOVED_FROM_PROJECT_EVENT";
    /** Represents a 'renamed' event on a given issue or pull request */
    IssueTimelineItemsItemType["RenamedTitleEvent"] = "RENAMED_TITLE_EVENT";
    /** Represents a 'reopened' event on any `Closable`. */
    IssueTimelineItemsItemType["ReopenedEvent"] = "REOPENED_EVENT";
    /** Represents a 'subscribed' event on a given `Subscribable`. */
    IssueTimelineItemsItemType["SubscribedEvent"] = "SUBSCRIBED_EVENT";
    /** Represents a 'transferred' event on a given issue or pull request. */
    IssueTimelineItemsItemType["TransferredEvent"] = "TRANSFERRED_EVENT";
    /** Represents an 'unassigned' event on any assignable object. */
    IssueTimelineItemsItemType["UnassignedEvent"] = "UNASSIGNED_EVENT";
    /** Represents an 'unlabeled' event on a given issue or pull request. */
    IssueTimelineItemsItemType["UnlabeledEvent"] = "UNLABELED_EVENT";
    /** Represents an 'unlocked' event on a given issue or pull request. */
    IssueTimelineItemsItemType["UnlockedEvent"] = "UNLOCKED_EVENT";
    /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
    IssueTimelineItemsItemType["UnmarkedAsDuplicateEvent"] = "UNMARKED_AS_DUPLICATE_EVENT";
    /** Represents an 'unpinned' event on a given issue or pull request. */
    IssueTimelineItemsItemType["UnpinnedEvent"] = "UNPINNED_EVENT";
    /** Represents an 'unsubscribed' event on a given `Subscribable`. */
    IssueTimelineItemsItemType["UnsubscribedEvent"] = "UNSUBSCRIBED_EVENT";
    /** Represents a 'user_blocked' event on a given user. */
    IssueTimelineItemsItemType["UserBlockedEvent"] = "USER_BLOCKED_EVENT";
})(IssueTimelineItemsItemType || (IssueTimelineItemsItemType = {}));
/** Properties by which label connections can be ordered. */
var LabelOrderField;
(function (LabelOrderField) {
    /** Order labels by creation time */
    LabelOrderField["CreatedAt"] = "CREATED_AT";
    /** Order labels by name  */
    LabelOrderField["Name"] = "NAME";
})(LabelOrderField || (LabelOrderField = {}));
/** Properties by which language connections can be ordered. */
var LanguageOrderField;
(function (LanguageOrderField) {
    /** Order languages by the size of all files containing the language */
    LanguageOrderField["Size"] = "SIZE";
})(LanguageOrderField || (LanguageOrderField = {}));
/** The possible reasons that an issue or pull request was locked. */
var LockReason;
(function (LockReason) {
    /** The issue or pull request was locked because the conversation was off-topic. */
    LockReason["OffTopic"] = "OFF_TOPIC";
    /** The issue or pull request was locked because the conversation was resolved. */
    LockReason["Resolved"] = "RESOLVED";
    /** The issue or pull request was locked because the conversation was spam. */
    LockReason["Spam"] = "SPAM";
    /** The issue or pull request was locked because the conversation was too heated. */
    LockReason["TooHeated"] = "TOO_HEATED";
})(LockReason || (LockReason = {}));
/** Whether or not a PullRequest can be merged. */
var MergeableState;
(function (MergeableState) {
    /** The pull request cannot be merged due to merge conflicts. */
    MergeableState["Conflicting"] = "CONFLICTING";
    /** The pull request can be merged. */
    MergeableState["Mergeable"] = "MERGEABLE";
    /** The mergeability of the pull request is still being calculated. */
    MergeableState["Unknown"] = "UNKNOWN";
})(MergeableState || (MergeableState = {}));
/** Represents the different Octoshift migration sources. */
var MigrationSourceType;
(function (MigrationSourceType) {
    /** An Azure DevOps migration source. */
    MigrationSourceType["AzureDevops"] = "AZURE_DEVOPS";
    /** A Bitbucket Server migration source. */
    MigrationSourceType["BitbucketServer"] = "BITBUCKET_SERVER";
    /** A GitHub migration source. */
    MigrationSourceType["Github"] = "GITHUB";
    /** A GitHub Migration API source. */
    MigrationSourceType["GithubArchive"] = "GITHUB_ARCHIVE";
    /** A GitLab migration source. */
    MigrationSourceType["Gitlab"] = "GITLAB";
})(MigrationSourceType || (MigrationSourceType = {}));
/** The Octoshift migration state. */
var MigrationState;
(function (MigrationState) {
    /** The Octoshift migration has failed. */
    MigrationState["Failed"] = "FAILED";
    /** The Octoshift migration is in progress. */
    MigrationState["InProgress"] = "IN_PROGRESS";
    /** The Octoshift migration has not started. */
    MigrationState["NotStarted"] = "NOT_STARTED";
    /** The Octoshift migration has been queued. */
    MigrationState["Queued"] = "QUEUED";
    /** The Octoshift migration has succeeded. */
    MigrationState["Succeeded"] = "SUCCEEDED";
})(MigrationState || (MigrationState = {}));
/** Properties by which milestone connections can be ordered. */
var MilestoneOrderField;
(function (MilestoneOrderField) {
    /** Order milestones by when they were created. */
    MilestoneOrderField["CreatedAt"] = "CREATED_AT";
    /** Order milestones by when they are due. */
    MilestoneOrderField["DueDate"] = "DUE_DATE";
    /** Order milestones by their number. */
    MilestoneOrderField["Number"] = "NUMBER";
    /** Order milestones by when they were last updated. */
    MilestoneOrderField["UpdatedAt"] = "UPDATED_AT";
})(MilestoneOrderField || (MilestoneOrderField = {}));
/** The possible states of a milestone. */
var MilestoneState;
(function (MilestoneState) {
    /** A milestone that has been closed. */
    MilestoneState["Closed"] = "CLOSED";
    /** A milestone that is still open. */
    MilestoneState["Open"] = "OPEN";
})(MilestoneState || (MilestoneState = {}));
/** The possible values for the notification restriction setting. */
var NotificationRestrictionSettingValue;
(function (NotificationRestrictionSettingValue) {
    /** The setting is disabled for the owner. */
    NotificationRestrictionSettingValue["Disabled"] = "DISABLED";
    /** The setting is enabled for the owner. */
    NotificationRestrictionSettingValue["Enabled"] = "ENABLED";
})(NotificationRestrictionSettingValue || (NotificationRestrictionSettingValue = {}));
/** The OIDC identity provider type */
var OidcProviderType;
(function (OidcProviderType) {
    /** Azure Active Directory */
    OidcProviderType["Aad"] = "AAD";
})(OidcProviderType || (OidcProviderType = {}));
/** The state of an OAuth Application when it was created. */
var OauthApplicationCreateAuditEntryState;
(function (OauthApplicationCreateAuditEntryState) {
    /** The OAuth Application was active and allowed to have OAuth Accesses. */
    OauthApplicationCreateAuditEntryState["Active"] = "ACTIVE";
    /** The OAuth Application was in the process of being deleted. */
    OauthApplicationCreateAuditEntryState["PendingDeletion"] = "PENDING_DELETION";
    /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */
    OauthApplicationCreateAuditEntryState["Suspended"] = "SUSPENDED";
})(OauthApplicationCreateAuditEntryState || (OauthApplicationCreateAuditEntryState = {}));
/** The corresponding operation type for the action */
var OperationType;
(function (OperationType) {
    /** An existing resource was accessed */
    OperationType["Access"] = "ACCESS";
    /** A resource performed an authentication event */
    OperationType["Authentication"] = "AUTHENTICATION";
    /** A new resource was created */
    OperationType["Create"] = "CREATE";
    /** An existing resource was modified */
    OperationType["Modify"] = "MODIFY";
    /** An existing resource was removed */
    OperationType["Remove"] = "REMOVE";
    /** An existing resource was restored */
    OperationType["Restore"] = "RESTORE";
    /** An existing resource was transferred between multiple resources */
    OperationType["Transfer"] = "TRANSFER";
})(OperationType || (OperationType = {}));
/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
var OrderDirection;
(function (OrderDirection) {
    /** Specifies an ascending order for a given `orderBy` argument. */
    OrderDirection["Asc"] = "ASC";
    /** Specifies a descending order for a given `orderBy` argument. */
    OrderDirection["Desc"] = "DESC";
})(OrderDirection || (OrderDirection = {}));
/** The permissions available to members on an Organization. */
var OrgAddMemberAuditEntryPermission;
(function (OrgAddMemberAuditEntryPermission) {
    /** Can read, clone, push, and add collaborators to repositories. */
    OrgAddMemberAuditEntryPermission["Admin"] = "ADMIN";
    /** Can read and clone repositories. */
    OrgAddMemberAuditEntryPermission["Read"] = "READ";
})(OrgAddMemberAuditEntryPermission || (OrgAddMemberAuditEntryPermission = {}));
/** The billing plans available for organizations. */
var OrgCreateAuditEntryBillingPlan;
(function (OrgCreateAuditEntryBillingPlan) {
    /** Team Plan */
    OrgCreateAuditEntryBillingPlan["Business"] = "BUSINESS";
    /** Enterprise Cloud Plan */
    OrgCreateAuditEntryBillingPlan["BusinessPlus"] = "BUSINESS_PLUS";
    /** Free Plan */
    OrgCreateAuditEntryBillingPlan["Free"] = "FREE";
    /** Tiered Per Seat Plan */
    OrgCreateAuditEntryBillingPlan["TieredPerSeat"] = "TIERED_PER_SEAT";
    /** Legacy Unlimited Plan */
    OrgCreateAuditEntryBillingPlan["Unlimited"] = "UNLIMITED";
})(OrgCreateAuditEntryBillingPlan || (OrgCreateAuditEntryBillingPlan = {}));
/** Properties by which enterprise owners can be ordered. */
var OrgEnterpriseOwnerOrderField;
(function (OrgEnterpriseOwnerOrderField) {
    /** Order enterprise owners by login. */
    OrgEnterpriseOwnerOrderField["Login"] = "LOGIN";
})(OrgEnterpriseOwnerOrderField || (OrgEnterpriseOwnerOrderField = {}));
/** The reason a billing manager was removed from an Organization. */
var OrgRemoveBillingManagerAuditEntryReason;
(function (OrgRemoveBillingManagerAuditEntryReason) {
    /** SAML external identity missing */
    OrgRemoveBillingManagerAuditEntryReason["SamlExternalIdentityMissing"] = "SAML_EXTERNAL_IDENTITY_MISSING";
    /** SAML SSO enforcement requires an external identity */
    OrgRemoveBillingManagerAuditEntryReason["SamlSsoEnforcementRequiresExternalIdentity"] = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY";
    /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
    OrgRemoveBillingManagerAuditEntryReason["TwoFactorRequirementNonCompliance"] = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE";
})(OrgRemoveBillingManagerAuditEntryReason || (OrgRemoveBillingManagerAuditEntryReason = {}));
/** The type of membership a user has with an Organization. */
var OrgRemoveMemberAuditEntryMembershipType;
(function (OrgRemoveMemberAuditEntryMembershipType) {
    /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
    OrgRemoveMemberAuditEntryMembershipType["Admin"] = "ADMIN";
    /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
    OrgRemoveMemberAuditEntryMembershipType["BillingManager"] = "BILLING_MANAGER";
    /** A direct member is a user that is a member of the Organization. */
    OrgRemoveMemberAuditEntryMembershipType["DirectMember"] = "DIRECT_MEMBER";
    /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
    OrgRemoveMemberAuditEntryMembershipType["OutsideCollaborator"] = "OUTSIDE_COLLABORATOR";
    /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
    OrgRemoveMemberAuditEntryMembershipType["Unaffiliated"] = "UNAFFILIATED";
})(OrgRemoveMemberAuditEntryMembershipType || (OrgRemoveMemberAuditEntryMembershipType = {}));
/** The reason a member was removed from an Organization. */
var OrgRemoveMemberAuditEntryReason;
(function (OrgRemoveMemberAuditEntryReason) {
    /** SAML external identity missing */
    OrgRemoveMemberAuditEntryReason["SamlExternalIdentityMissing"] = "SAML_EXTERNAL_IDENTITY_MISSING";
    /** SAML SSO enforcement requires an external identity */
    OrgRemoveMemberAuditEntryReason["SamlSsoEnforcementRequiresExternalIdentity"] = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY";
    /** User was removed from organization during account recovery */
    OrgRemoveMemberAuditEntryReason["TwoFactorAccountRecovery"] = "TWO_FACTOR_ACCOUNT_RECOVERY";
    /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
    OrgRemoveMemberAuditEntryReason["TwoFactorRequirementNonCompliance"] = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE";
    /** User account has been deleted */
    OrgRemoveMemberAuditEntryReason["UserAccountDeleted"] = "USER_ACCOUNT_DELETED";
})(OrgRemoveMemberAuditEntryReason || (OrgRemoveMemberAuditEntryReason = {}));
/** The type of membership a user has with an Organization. */
var OrgRemoveOutsideCollaboratorAuditEntryMembershipType;
(function (OrgRemoveOutsideCollaboratorAuditEntryMembershipType) {
    /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
    OrgRemoveOutsideCollaboratorAuditEntryMembershipType["BillingManager"] = "BILLING_MANAGER";
    /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
    OrgRemoveOutsideCollaboratorAuditEntryMembershipType["OutsideCollaborator"] = "OUTSIDE_COLLABORATOR";
    /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
    OrgRemoveOutsideCollaboratorAuditEntryMembershipType["Unaffiliated"] = "UNAFFILIATED";
})(OrgRemoveOutsideCollaboratorAuditEntryMembershipType || (OrgRemoveOutsideCollaboratorAuditEntryMembershipType = {}));
/** The reason an outside collaborator was removed from an Organization. */
var OrgRemoveOutsideCollaboratorAuditEntryReason;
(function (OrgRemoveOutsideCollaboratorAuditEntryReason) {
    /** SAML external identity missing */
    OrgRemoveOutsideCollaboratorAuditEntryReason["SamlExternalIdentityMissing"] = "SAML_EXTERNAL_IDENTITY_MISSING";
    /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
    OrgRemoveOutsideCollaboratorAuditEntryReason["TwoFactorRequirementNonCompliance"] = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE";
})(OrgRemoveOutsideCollaboratorAuditEntryReason || (OrgRemoveOutsideCollaboratorAuditEntryReason = {}));
/** The default permission a repository can have in an Organization. */
var OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
(function (OrgUpdateDefaultRepositoryPermissionAuditEntryPermission) {
    /** Can read, clone, push, and add collaborators to repositories. */
    OrgUpdateDefaultRepositoryPermissionAuditEntryPermission["Admin"] = "ADMIN";
    /** No default permission value. */
    OrgUpdateDefaultRepositoryPermissionAuditEntryPermission["None"] = "NONE";
    /** Can read and clone repositories. */
    OrgUpdateDefaultRepositoryPermissionAuditEntryPermission["Read"] = "READ";
    /** Can read, clone and push to repositories. */
    OrgUpdateDefaultRepositoryPermissionAuditEntryPermission["Write"] = "WRITE";
})(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission || (OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = {}));
/** The permissions available to members on an Organization. */
var OrgUpdateMemberAuditEntryPermission;
(function (OrgUpdateMemberAuditEntryPermission) {
    /** Can read, clone, push, and add collaborators to repositories. */
    OrgUpdateMemberAuditEntryPermission["Admin"] = "ADMIN";
    /** Can read and clone repositories. */
    OrgUpdateMemberAuditEntryPermission["Read"] = "READ";
})(OrgUpdateMemberAuditEntryPermission || (OrgUpdateMemberAuditEntryPermission = {}));
/** The permissions available for repository creation on an Organization. */
var OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
(function (OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility) {
    /** All organization members are restricted from creating any repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["All"] = "ALL";
    /** All organization members are restricted from creating internal repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["Internal"] = "INTERNAL";
    /** All organization members are allowed to create any repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["None"] = "NONE";
    /** All organization members are restricted from creating private repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["Private"] = "PRIVATE";
    /** All organization members are restricted from creating private or internal repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["PrivateInternal"] = "PRIVATE_INTERNAL";
    /** All organization members are restricted from creating public repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["Public"] = "PUBLIC";
    /** All organization members are restricted from creating public or internal repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["PublicInternal"] = "PUBLIC_INTERNAL";
    /** All organization members are restricted from creating public or private repositories. */
    OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility["PublicPrivate"] = "PUBLIC_PRIVATE";
})(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility || (OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = {}));
/** The possible organization invitation roles. */
var OrganizationInvitationRole;
(function (OrganizationInvitationRole) {
    /** The user is invited to be an admin of the organization. */
    OrganizationInvitationRole["Admin"] = "ADMIN";
    /** The user is invited to be a billing manager of the organization. */
    OrganizationInvitationRole["BillingManager"] = "BILLING_MANAGER";
    /** The user is invited to be a direct member of the organization. */
    OrganizationInvitationRole["DirectMember"] = "DIRECT_MEMBER";
    /** The user's previous role will be reinstated. */
    OrganizationInvitationRole["Reinstate"] = "REINSTATE";
})(OrganizationInvitationRole || (OrganizationInvitationRole = {}));
/** The possible organization invitation types. */
var OrganizationInvitationType;
(function (OrganizationInvitationType) {
    /** The invitation was to an email address. */
    OrganizationInvitationType["Email"] = "EMAIL";
    /** The invitation was to an existing user. */
    OrganizationInvitationType["User"] = "USER";
})(OrganizationInvitationType || (OrganizationInvitationType = {}));
/** The possible roles within an organization for its members. */
var OrganizationMemberRole;
(function (OrganizationMemberRole) {
    /** The user is an administrator of the organization. */
    OrganizationMemberRole["Admin"] = "ADMIN";
    /** The user is a member of the organization. */
    OrganizationMemberRole["Member"] = "MEMBER";
})(OrganizationMemberRole || (OrganizationMemberRole = {}));
/** The possible values for the members can create repositories setting on an organization. */
var OrganizationMembersCanCreateRepositoriesSettingValue;
(function (OrganizationMembersCanCreateRepositoriesSettingValue) {
    /** Members will be able to create public and private repositories. */
    OrganizationMembersCanCreateRepositoriesSettingValue["All"] = "ALL";
    /** Members will not be able to create public or private repositories. */
    OrganizationMembersCanCreateRepositoriesSettingValue["Disabled"] = "DISABLED";
    /** Members will be able to create only internal repositories. */
    OrganizationMembersCanCreateRepositoriesSettingValue["Internal"] = "INTERNAL";
    /** Members will be able to create only private repositories. */
    OrganizationMembersCanCreateRepositoriesSettingValue["Private"] = "PRIVATE";
})(OrganizationMembersCanCreateRepositoriesSettingValue || (OrganizationMembersCanCreateRepositoriesSettingValue = {}));
/** Properties by which organization connections can be ordered. */
var OrganizationOrderField;
(function (OrganizationOrderField) {
    /** Order organizations by creation time */
    OrganizationOrderField["CreatedAt"] = "CREATED_AT";
    /** Order organizations by login */
    OrganizationOrderField["Login"] = "LOGIN";
})(OrganizationOrderField || (OrganizationOrderField = {}));
/** Properties by which package file connections can be ordered. */
var PackageFileOrderField;
(function (PackageFileOrderField) {
    /** Order package files by creation time */
    PackageFileOrderField["CreatedAt"] = "CREATED_AT";
})(PackageFileOrderField || (PackageFileOrderField = {}));
/** Properties by which package connections can be ordered. */
var PackageOrderField;
(function (PackageOrderField) {
    /** Order packages by creation time */
    PackageOrderField["CreatedAt"] = "CREATED_AT";
})(PackageOrderField || (PackageOrderField = {}));
/** The possible types of a package. */
var PackageType;
(function (PackageType) {
    /** A debian package. */
    PackageType["Debian"] = "DEBIAN";
    /** A docker image. */
    PackageType["Docker"] = "DOCKER";
    /** A maven package. */
    PackageType["Maven"] = "MAVEN";
    /** An npm package. */
    PackageType["Npm"] = "NPM";
    /** A nuget package. */
    PackageType["Nuget"] = "NUGET";
    /** A python package. */
    PackageType["Pypi"] = "PYPI";
    /** A rubygems package. */
    PackageType["Rubygems"] = "RUBYGEMS";
})(PackageType || (PackageType = {}));
/** Properties by which package version connections can be ordered. */
var PackageVersionOrderField;
(function (PackageVersionOrderField) {
    /** Order package versions by creation time */
    PackageVersionOrderField["CreatedAt"] = "CREATED_AT";
})(PackageVersionOrderField || (PackageVersionOrderField = {}));
/** Represents items that can be pinned to a profile page or dashboard. */
var PinnableItemType;
(function (PinnableItemType) {
    /** A gist. */
    PinnableItemType["Gist"] = "GIST";
    /** An issue. */
    PinnableItemType["Issue"] = "ISSUE";
    /** An organization. */
    PinnableItemType["Organization"] = "ORGANIZATION";
    /** A project. */
    PinnableItemType["Project"] = "PROJECT";
    /** A pull request. */
    PinnableItemType["PullRequest"] = "PULL_REQUEST";
    /** A repository. */
    PinnableItemType["Repository"] = "REPOSITORY";
    /** A team. */
    PinnableItemType["Team"] = "TEAM";
    /** A user. */
    PinnableItemType["User"] = "USER";
})(PinnableItemType || (PinnableItemType = {}));
/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
var PinnedDiscussionGradient;
(function (PinnedDiscussionGradient) {
    /** A gradient of blue to mint */
    PinnedDiscussionGradient["BlueMint"] = "BLUE_MINT";
    /** A gradient of blue to purple */
    PinnedDiscussionGradient["BluePurple"] = "BLUE_PURPLE";
    /** A gradient of pink to blue */
    PinnedDiscussionGradient["PinkBlue"] = "PINK_BLUE";
    /** A gradient of purple to coral */
    PinnedDiscussionGradient["PurpleCoral"] = "PURPLE_CORAL";
    /** A gradient of red to orange */
    PinnedDiscussionGradient["RedOrange"] = "RED_ORANGE";
})(PinnedDiscussionGradient || (PinnedDiscussionGradient = {}));
/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
var PinnedDiscussionPattern;
(function (PinnedDiscussionPattern) {
    /** An upward-facing chevron pattern */
    PinnedDiscussionPattern["ChevronUp"] = "CHEVRON_UP";
    /** A hollow dot pattern */
    PinnedDiscussionPattern["Dot"] = "DOT";
    /** A solid dot pattern */
    PinnedDiscussionPattern["DotFill"] = "DOT_FILL";
    /** A heart pattern */
    PinnedDiscussionPattern["HeartFill"] = "HEART_FILL";
    /** A plus sign pattern */
    PinnedDiscussionPattern["Plus"] = "PLUS";
    /** A lightning bolt pattern */
    PinnedDiscussionPattern["Zap"] = "ZAP";
})(PinnedDiscussionPattern || (PinnedDiscussionPattern = {}));
/** The possible archived states of a project card. */
var ProjectCardArchivedState;
(function (ProjectCardArchivedState) {
    /** A project card that is archived */
    ProjectCardArchivedState["Archived"] = "ARCHIVED";
    /** A project card that is not archived */
    ProjectCardArchivedState["NotArchived"] = "NOT_ARCHIVED";
})(ProjectCardArchivedState || (ProjectCardArchivedState = {}));
/** Various content states of a ProjectCard */
var ProjectCardState;
(function (ProjectCardState) {
    /** The card has content only. */
    ProjectCardState["ContentOnly"] = "CONTENT_ONLY";
    /** The card has a note only. */
    ProjectCardState["NoteOnly"] = "NOTE_ONLY";
    /** The card is redacted. */
    ProjectCardState["Redacted"] = "REDACTED";
})(ProjectCardState || (ProjectCardState = {}));
/** The semantic purpose of the column - todo, in progress, or done. */
var ProjectColumnPurpose;
(function (ProjectColumnPurpose) {
    /** The column contains cards which are complete */
    ProjectColumnPurpose["Done"] = "DONE";
    /** The column contains cards which are currently being worked on */
    ProjectColumnPurpose["InProgress"] = "IN_PROGRESS";
    /** The column contains cards still to be worked on */
    ProjectColumnPurpose["Todo"] = "TODO";
})(ProjectColumnPurpose || (ProjectColumnPurpose = {}));
/** The type of a project item. */
var ProjectItemType;
(function (ProjectItemType) {
    /** Draft Issue */
    ProjectItemType["DraftIssue"] = "DRAFT_ISSUE";
    /** Issue */
    ProjectItemType["Issue"] = "ISSUE";
    /** Pull Request */
    ProjectItemType["PullRequest"] = "PULL_REQUEST";
    /** Redacted Item */
    ProjectItemType["Redacted"] = "REDACTED";
})(ProjectItemType || (ProjectItemType = {}));
/** The type of a project next field. */
var ProjectNextFieldType;
(function (ProjectNextFieldType) {
    /** Assignees */
    ProjectNextFieldType["Assignees"] = "ASSIGNEES";
    /** Date */
    ProjectNextFieldType["Date"] = "DATE";
    /** Iteration */
    ProjectNextFieldType["Iteration"] = "ITERATION";
    /** Labels */
    ProjectNextFieldType["Labels"] = "LABELS";
    /** Linked Pull Requests */
    ProjectNextFieldType["LinkedPullRequests"] = "LINKED_PULL_REQUESTS";
    /** Milestone */
    ProjectNextFieldType["Milestone"] = "MILESTONE";
    /** Number */
    ProjectNextFieldType["Number"] = "NUMBER";
    /** Repository */
    ProjectNextFieldType["Repository"] = "REPOSITORY";
    /** Reviewers */
    ProjectNextFieldType["Reviewers"] = "REVIEWERS";
    /** Single Select */
    ProjectNextFieldType["SingleSelect"] = "SINGLE_SELECT";
    /** Text */
    ProjectNextFieldType["Text"] = "TEXT";
    /** Title */
    ProjectNextFieldType["Title"] = "TITLE";
    /** Tracks */
    ProjectNextFieldType["Tracks"] = "TRACKS";
})(ProjectNextFieldType || (ProjectNextFieldType = {}));
/** Properties by which the return project can be ordered. */
var ProjectNextOrderField;
(function (ProjectNextOrderField) {
    /** The project's date and time of creation */
    ProjectNextOrderField["CreatedAt"] = "CREATED_AT";
    /** The project's number */
    ProjectNextOrderField["Number"] = "NUMBER";
    /** The project's title */
    ProjectNextOrderField["Title"] = "TITLE";
    /** The project's date and time of update */
    ProjectNextOrderField["UpdatedAt"] = "UPDATED_AT";
})(ProjectNextOrderField || (ProjectNextOrderField = {}));
/** Properties by which project connections can be ordered. */
var ProjectOrderField;
(function (ProjectOrderField) {
    /** Order projects by creation time */
    ProjectOrderField["CreatedAt"] = "CREATED_AT";
    /** Order projects by name */
    ProjectOrderField["Name"] = "NAME";
    /** Order projects by update time */
    ProjectOrderField["UpdatedAt"] = "UPDATED_AT";
})(ProjectOrderField || (ProjectOrderField = {}));
/** State of the project; either 'open' or 'closed' */
var ProjectState;
(function (ProjectState) {
    /** The project is closed. */
    ProjectState["Closed"] = "CLOSED";
    /** The project is open. */
    ProjectState["Open"] = "OPEN";
})(ProjectState || (ProjectState = {}));
/** GitHub-provided templates for Projects */
var ProjectTemplate;
(function (ProjectTemplate) {
    /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
    ProjectTemplate["AutomatedKanbanV2"] = "AUTOMATED_KANBAN_V2";
    /** Create a board with triggers to automatically move cards across columns with review automation. */
    ProjectTemplate["AutomatedReviewsKanban"] = "AUTOMATED_REVIEWS_KANBAN";
    /** Create a board with columns for To do, In progress and Done. */
    ProjectTemplate["BasicKanban"] = "BASIC_KANBAN";
    /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
    ProjectTemplate["BugTriage"] = "BUG_TRIAGE";
})(ProjectTemplate || (ProjectTemplate = {}));
/** The layout of a project view. */
var ProjectViewLayout;
(function (ProjectViewLayout) {
    /** Board layout */
    ProjectViewLayout["BoardLayout"] = "BOARD_LAYOUT";
    /** Table layout */
    ProjectViewLayout["TableLayout"] = "TABLE_LAYOUT";
})(ProjectViewLayout || (ProjectViewLayout = {}));
/** Represents available types of methods to use when merging a pull request. */
var PullRequestMergeMethod;
(function (PullRequestMergeMethod) {
    /** Add all commits from the head branch to the base branch with a merge commit. */
    PullRequestMergeMethod["Merge"] = "MERGE";
    /** Add all commits from the head branch onto the base branch individually. */
    PullRequestMergeMethod["Rebase"] = "REBASE";
    /** Combine all commits from the head branch into a single commit in the base branch. */
    PullRequestMergeMethod["Squash"] = "SQUASH";
})(PullRequestMergeMethod || (PullRequestMergeMethod = {}));
/** Properties by which pull_requests connections can be ordered. */
var PullRequestOrderField;
(function (PullRequestOrderField) {
    /** Order pull_requests by creation time */
    PullRequestOrderField["CreatedAt"] = "CREATED_AT";
    /** Order pull_requests by update time */
    PullRequestOrderField["UpdatedAt"] = "UPDATED_AT";
})(PullRequestOrderField || (PullRequestOrderField = {}));
/** The possible states of a pull request review comment. */
var PullRequestReviewCommentState;
(function (PullRequestReviewCommentState) {
    /** A comment that is part of a pending review */
    PullRequestReviewCommentState["Pending"] = "PENDING";
    /** A comment that is part of a submitted review */
    PullRequestReviewCommentState["Submitted"] = "SUBMITTED";
})(PullRequestReviewCommentState || (PullRequestReviewCommentState = {}));
/** The review status of a pull request. */
var PullRequestReviewDecision;
(function (PullRequestReviewDecision) {
    /** The pull request has received an approving review. */
    PullRequestReviewDecision["Approved"] = "APPROVED";
    /** Changes have been requested on the pull request. */
    PullRequestReviewDecision["ChangesRequested"] = "CHANGES_REQUESTED";
    /** A review is required before the pull request can be merged. */
    PullRequestReviewDecision["ReviewRequired"] = "REVIEW_REQUIRED";
})(PullRequestReviewDecision || (PullRequestReviewDecision = {}));
/** The possible events to perform on a pull request review. */
var PullRequestReviewEvent;
(function (PullRequestReviewEvent) {
    /** Submit feedback and approve merging these changes. */
    PullRequestReviewEvent["Approve"] = "APPROVE";
    /** Submit general feedback without explicit approval. */
    PullRequestReviewEvent["Comment"] = "COMMENT";
    /** Dismiss review so it now longer effects merging. */
    PullRequestReviewEvent["Dismiss"] = "DISMISS";
    /** Submit feedback that must be addressed before merging. */
    PullRequestReviewEvent["RequestChanges"] = "REQUEST_CHANGES";
})(PullRequestReviewEvent || (PullRequestReviewEvent = {}));
/** The possible states of a pull request review. */
var PullRequestReviewState;
(function (PullRequestReviewState) {
    /** A review allowing the pull request to merge. */
    PullRequestReviewState["Approved"] = "APPROVED";
    /** A review blocking the pull request from merging. */
    PullRequestReviewState["ChangesRequested"] = "CHANGES_REQUESTED";
    /** An informational review. */
    PullRequestReviewState["Commented"] = "COMMENTED";
    /** A review that has been dismissed. */
    PullRequestReviewState["Dismissed"] = "DISMISSED";
    /** A review that has not yet been submitted. */
    PullRequestReviewState["Pending"] = "PENDING";
})(PullRequestReviewState || (PullRequestReviewState = {}));
/** The possible states of a pull request. */
var PullRequestState;
(function (PullRequestState) {
    /** A pull request that has been closed without being merged. */
    PullRequestState["Closed"] = "CLOSED";
    /** A pull request that has been closed by being merged. */
    PullRequestState["Merged"] = "MERGED";
    /** A pull request that is still open. */
    PullRequestState["Open"] = "OPEN";
})(PullRequestState || (PullRequestState = {}));
/** The possible item types found in a timeline. */
var PullRequestTimelineItemsItemType;
(function (PullRequestTimelineItemsItemType) {
    /** Represents an 'added_to_merge_queue' event on a given pull request. */
    PullRequestTimelineItemsItemType["AddedToMergeQueueEvent"] = "ADDED_TO_MERGE_QUEUE_EVENT";
    /** Represents a 'added_to_project' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["AddedToProjectEvent"] = "ADDED_TO_PROJECT_EVENT";
    /** Represents an 'assigned' event on any assignable object. */
    PullRequestTimelineItemsItemType["AssignedEvent"] = "ASSIGNED_EVENT";
    /** Represents a 'automatic_base_change_failed' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutomaticBaseChangeFailedEvent"] = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT";
    /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutomaticBaseChangeSucceededEvent"] = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT";
    /** Represents a 'auto_merge_disabled' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutoMergeDisabledEvent"] = "AUTO_MERGE_DISABLED_EVENT";
    /** Represents a 'auto_merge_enabled' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutoMergeEnabledEvent"] = "AUTO_MERGE_ENABLED_EVENT";
    /** Represents a 'auto_rebase_enabled' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutoRebaseEnabledEvent"] = "AUTO_REBASE_ENABLED_EVENT";
    /** Represents a 'auto_squash_enabled' event on a given pull request. */
    PullRequestTimelineItemsItemType["AutoSquashEnabledEvent"] = "AUTO_SQUASH_ENABLED_EVENT";
    /** Represents a 'base_ref_changed' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["BaseRefChangedEvent"] = "BASE_REF_CHANGED_EVENT";
    /** Represents a 'base_ref_deleted' event on a given pull request. */
    PullRequestTimelineItemsItemType["BaseRefDeletedEvent"] = "BASE_REF_DELETED_EVENT";
    /** Represents a 'base_ref_force_pushed' event on a given pull request. */
    PullRequestTimelineItemsItemType["BaseRefForcePushedEvent"] = "BASE_REF_FORCE_PUSHED_EVENT";
    /** Represents a 'closed' event on any `Closable`. */
    PullRequestTimelineItemsItemType["ClosedEvent"] = "CLOSED_EVENT";
    /** Represents a 'comment_deleted' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["CommentDeletedEvent"] = "COMMENT_DELETED_EVENT";
    /** Represents a 'connected' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["ConnectedEvent"] = "CONNECTED_EVENT";
    /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["ConvertedNoteToIssueEvent"] = "CONVERTED_NOTE_TO_ISSUE_EVENT";
    /** Represents a 'converted_to_discussion' event on a given issue. */
    PullRequestTimelineItemsItemType["ConvertedToDiscussionEvent"] = "CONVERTED_TO_DISCUSSION_EVENT";
    /** Represents a 'convert_to_draft' event on a given pull request. */
    PullRequestTimelineItemsItemType["ConvertToDraftEvent"] = "CONVERT_TO_DRAFT_EVENT";
    /** Represents a mention made by one issue or pull request to another. */
    PullRequestTimelineItemsItemType["CrossReferencedEvent"] = "CROSS_REFERENCED_EVENT";
    /** Represents a 'demilestoned' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["DemilestonedEvent"] = "DEMILESTONED_EVENT";
    /** Represents a 'deployed' event on a given pull request. */
    PullRequestTimelineItemsItemType["DeployedEvent"] = "DEPLOYED_EVENT";
    /** Represents a 'deployment_environment_changed' event on a given pull request. */
    PullRequestTimelineItemsItemType["DeploymentEnvironmentChangedEvent"] = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT";
    /** Represents a 'disconnected' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["DisconnectedEvent"] = "DISCONNECTED_EVENT";
    /** Represents a 'head_ref_deleted' event on a given pull request. */
    PullRequestTimelineItemsItemType["HeadRefDeletedEvent"] = "HEAD_REF_DELETED_EVENT";
    /** Represents a 'head_ref_force_pushed' event on a given pull request. */
    PullRequestTimelineItemsItemType["HeadRefForcePushedEvent"] = "HEAD_REF_FORCE_PUSHED_EVENT";
    /** Represents a 'head_ref_restored' event on a given pull request. */
    PullRequestTimelineItemsItemType["HeadRefRestoredEvent"] = "HEAD_REF_RESTORED_EVENT";
    /** Represents a comment on an Issue. */
    PullRequestTimelineItemsItemType["IssueComment"] = "ISSUE_COMMENT";
    /** Represents a 'labeled' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["LabeledEvent"] = "LABELED_EVENT";
    /** Represents a 'locked' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["LockedEvent"] = "LOCKED_EVENT";
    /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["MarkedAsDuplicateEvent"] = "MARKED_AS_DUPLICATE_EVENT";
    /** Represents a 'mentioned' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["MentionedEvent"] = "MENTIONED_EVENT";
    /** Represents a 'merged' event on a given pull request. */
    PullRequestTimelineItemsItemType["MergedEvent"] = "MERGED_EVENT";
    /** Represents a 'milestoned' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["MilestonedEvent"] = "MILESTONED_EVENT";
    /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["MovedColumnsInProjectEvent"] = "MOVED_COLUMNS_IN_PROJECT_EVENT";
    /** Represents a 'pinned' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["PinnedEvent"] = "PINNED_EVENT";
    /** Represents a Git commit part of a pull request. */
    PullRequestTimelineItemsItemType["PullRequestCommit"] = "PULL_REQUEST_COMMIT";
    /** Represents a commit comment thread part of a pull request. */
    PullRequestTimelineItemsItemType["PullRequestCommitCommentThread"] = "PULL_REQUEST_COMMIT_COMMENT_THREAD";
    /** A review object for a given pull request. */
    PullRequestTimelineItemsItemType["PullRequestReview"] = "PULL_REQUEST_REVIEW";
    /** A threaded list of comments for a given pull request. */
    PullRequestTimelineItemsItemType["PullRequestReviewThread"] = "PULL_REQUEST_REVIEW_THREAD";
    /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
    PullRequestTimelineItemsItemType["PullRequestRevisionMarker"] = "PULL_REQUEST_REVISION_MARKER";
    /** Represents a 'ready_for_review' event on a given pull request. */
    PullRequestTimelineItemsItemType["ReadyForReviewEvent"] = "READY_FOR_REVIEW_EVENT";
    /** Represents a 'referenced' event on a given `ReferencedSubject`. */
    PullRequestTimelineItemsItemType["ReferencedEvent"] = "REFERENCED_EVENT";
    /** Represents a 'removed_from_merge_queue' event on a given pull request. */
    PullRequestTimelineItemsItemType["RemovedFromMergeQueueEvent"] = "REMOVED_FROM_MERGE_QUEUE_EVENT";
    /** Represents a 'removed_from_project' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["RemovedFromProjectEvent"] = "REMOVED_FROM_PROJECT_EVENT";
    /** Represents a 'renamed' event on a given issue or pull request */
    PullRequestTimelineItemsItemType["RenamedTitleEvent"] = "RENAMED_TITLE_EVENT";
    /** Represents a 'reopened' event on any `Closable`. */
    PullRequestTimelineItemsItemType["ReopenedEvent"] = "REOPENED_EVENT";
    /** Represents a 'review_dismissed' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["ReviewDismissedEvent"] = "REVIEW_DISMISSED_EVENT";
    /** Represents an 'review_requested' event on a given pull request. */
    PullRequestTimelineItemsItemType["ReviewRequestedEvent"] = "REVIEW_REQUESTED_EVENT";
    /** Represents an 'review_request_removed' event on a given pull request. */
    PullRequestTimelineItemsItemType["ReviewRequestRemovedEvent"] = "REVIEW_REQUEST_REMOVED_EVENT";
    /** Represents a 'subscribed' event on a given `Subscribable`. */
    PullRequestTimelineItemsItemType["SubscribedEvent"] = "SUBSCRIBED_EVENT";
    /** Represents a 'transferred' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["TransferredEvent"] = "TRANSFERRED_EVENT";
    /** Represents an 'unassigned' event on any assignable object. */
    PullRequestTimelineItemsItemType["UnassignedEvent"] = "UNASSIGNED_EVENT";
    /** Represents an 'unlabeled' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["UnlabeledEvent"] = "UNLABELED_EVENT";
    /** Represents an 'unlocked' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["UnlockedEvent"] = "UNLOCKED_EVENT";
    /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["UnmarkedAsDuplicateEvent"] = "UNMARKED_AS_DUPLICATE_EVENT";
    /** Represents an 'unpinned' event on a given issue or pull request. */
    PullRequestTimelineItemsItemType["UnpinnedEvent"] = "UNPINNED_EVENT";
    /** Represents an 'unsubscribed' event on a given `Subscribable`. */
    PullRequestTimelineItemsItemType["UnsubscribedEvent"] = "UNSUBSCRIBED_EVENT";
    /** Represents a 'user_blocked' event on a given user. */
    PullRequestTimelineItemsItemType["UserBlockedEvent"] = "USER_BLOCKED_EVENT";
})(PullRequestTimelineItemsItemType || (PullRequestTimelineItemsItemType = {}));
/** The possible target states when updating a pull request. */
var PullRequestUpdateState;
(function (PullRequestUpdateState) {
    /** A pull request that has been closed without being merged. */
    PullRequestUpdateState["Closed"] = "CLOSED";
    /** A pull request that is still open. */
    PullRequestUpdateState["Open"] = "OPEN";
})(PullRequestUpdateState || (PullRequestUpdateState = {}));
/** Emojis that can be attached to Issues, Pull Requests and Comments. */
var ReactionContent;
(function (ReactionContent) {
    /** Represents the `:confused:` emoji. */
    ReactionContent["Confused"] = "CONFUSED";
    /** Represents the `:eyes:` emoji. */
    ReactionContent["Eyes"] = "EYES";
    /** Represents the `:heart:` emoji. */
    ReactionContent["Heart"] = "HEART";
    /** Represents the `:hooray:` emoji. */
    ReactionContent["Hooray"] = "HOORAY";
    /** Represents the `:laugh:` emoji. */
    ReactionContent["Laugh"] = "LAUGH";
    /** Represents the `:rocket:` emoji. */
    ReactionContent["Rocket"] = "ROCKET";
    /** Represents the `:-1:` emoji. */
    ReactionContent["ThumbsDown"] = "THUMBS_DOWN";
    /** Represents the `:+1:` emoji. */
    ReactionContent["ThumbsUp"] = "THUMBS_UP";
})(ReactionContent || (ReactionContent = {}));
/** A list of fields that reactions can be ordered by. */
var ReactionOrderField;
(function (ReactionOrderField) {
    /** Allows ordering a list of reactions by when they were created. */
    ReactionOrderField["CreatedAt"] = "CREATED_AT";
})(ReactionOrderField || (ReactionOrderField = {}));
/** Properties by which ref connections can be ordered. */
var RefOrderField;
(function (RefOrderField) {
    /** Order refs by their alphanumeric name */
    RefOrderField["Alphabetical"] = "ALPHABETICAL";
    /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
    RefOrderField["TagCommitDate"] = "TAG_COMMIT_DATE";
})(RefOrderField || (RefOrderField = {}));
/** Properties by which release connections can be ordered. */
var ReleaseOrderField;
(function (ReleaseOrderField) {
    /** Order releases by creation time */
    ReleaseOrderField["CreatedAt"] = "CREATED_AT";
    /** Order releases alphabetically by name */
    ReleaseOrderField["Name"] = "NAME";
})(ReleaseOrderField || (ReleaseOrderField = {}));
/** The privacy of a repository */
var RepoAccessAuditEntryVisibility;
(function (RepoAccessAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoAccessAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoAccessAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoAccessAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoAccessAuditEntryVisibility || (RepoAccessAuditEntryVisibility = {}));
/** The privacy of a repository */
var RepoAddMemberAuditEntryVisibility;
(function (RepoAddMemberAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoAddMemberAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoAddMemberAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoAddMemberAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoAddMemberAuditEntryVisibility || (RepoAddMemberAuditEntryVisibility = {}));
/** The privacy of a repository */
var RepoArchivedAuditEntryVisibility;
(function (RepoArchivedAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoArchivedAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoArchivedAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoArchivedAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoArchivedAuditEntryVisibility || (RepoArchivedAuditEntryVisibility = {}));
/** The merge options available for pull requests to this repository. */
var RepoChangeMergeSettingAuditEntryMergeType;
(function (RepoChangeMergeSettingAuditEntryMergeType) {
    /** The pull request is added to the base branch in a merge commit. */
    RepoChangeMergeSettingAuditEntryMergeType["Merge"] = "MERGE";
    /** Commits from the pull request are added onto the base branch individually without a merge commit. */
    RepoChangeMergeSettingAuditEntryMergeType["Rebase"] = "REBASE";
    /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
    RepoChangeMergeSettingAuditEntryMergeType["Squash"] = "SQUASH";
})(RepoChangeMergeSettingAuditEntryMergeType || (RepoChangeMergeSettingAuditEntryMergeType = {}));
/** The privacy of a repository */
var RepoCreateAuditEntryVisibility;
(function (RepoCreateAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoCreateAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoCreateAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoCreateAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoCreateAuditEntryVisibility || (RepoCreateAuditEntryVisibility = {}));
/** The privacy of a repository */
var RepoDestroyAuditEntryVisibility;
(function (RepoDestroyAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoDestroyAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoDestroyAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoDestroyAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoDestroyAuditEntryVisibility || (RepoDestroyAuditEntryVisibility = {}));
/** The privacy of a repository */
var RepoRemoveMemberAuditEntryVisibility;
(function (RepoRemoveMemberAuditEntryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepoRemoveMemberAuditEntryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepoRemoveMemberAuditEntryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepoRemoveMemberAuditEntryVisibility["Public"] = "PUBLIC";
})(RepoRemoveMemberAuditEntryVisibility || (RepoRemoveMemberAuditEntryVisibility = {}));
/** The reasons a piece of content can be reported or minimized. */
var ReportedContentClassifiers;
(function (ReportedContentClassifiers) {
    /** An abusive or harassing piece of content */
    ReportedContentClassifiers["Abuse"] = "ABUSE";
    /** A duplicated piece of content */
    ReportedContentClassifiers["Duplicate"] = "DUPLICATE";
    /** An irrelevant piece of content */
    ReportedContentClassifiers["OffTopic"] = "OFF_TOPIC";
    /** An outdated piece of content */
    ReportedContentClassifiers["Outdated"] = "OUTDATED";
    /** The content has been resolved */
    ReportedContentClassifiers["Resolved"] = "RESOLVED";
    /** A spammy piece of content */
    ReportedContentClassifiers["Spam"] = "SPAM";
})(ReportedContentClassifiers || (ReportedContentClassifiers = {}));
/** The affiliation of a user to a repository */
var RepositoryAffiliation;
(function (RepositoryAffiliation) {
    /** Repositories that the user has been added to as a collaborator. */
    RepositoryAffiliation["Collaborator"] = "COLLABORATOR";
    /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
    RepositoryAffiliation["OrganizationMember"] = "ORGANIZATION_MEMBER";
    /** Repositories that are owned by the authenticated user. */
    RepositoryAffiliation["Owner"] = "OWNER";
})(RepositoryAffiliation || (RepositoryAffiliation = {}));
/** The reason a repository is listed as 'contributed'. */
var RepositoryContributionType;
(function (RepositoryContributionType) {
    /** Created a commit */
    RepositoryContributionType["Commit"] = "COMMIT";
    /** Created an issue */
    RepositoryContributionType["Issue"] = "ISSUE";
    /** Created a pull request */
    RepositoryContributionType["PullRequest"] = "PULL_REQUEST";
    /** Reviewed a pull request */
    RepositoryContributionType["PullRequestReview"] = "PULL_REQUEST_REVIEW";
    /** Created the repository */
    RepositoryContributionType["Repository"] = "REPOSITORY";
})(RepositoryContributionType || (RepositoryContributionType = {}));
/** A repository interaction limit. */
var RepositoryInteractionLimit;
(function (RepositoryInteractionLimit) {
    /** Users that are not collaborators will not be able to interact with the repository. */
    RepositoryInteractionLimit["CollaboratorsOnly"] = "COLLABORATORS_ONLY";
    /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
    RepositoryInteractionLimit["ContributorsOnly"] = "CONTRIBUTORS_ONLY";
    /** Users that have recently created their account will be unable to interact with the repository. */
    RepositoryInteractionLimit["ExistingUsers"] = "EXISTING_USERS";
    /** No interaction limits are enabled. */
    RepositoryInteractionLimit["NoLimit"] = "NO_LIMIT";
})(RepositoryInteractionLimit || (RepositoryInteractionLimit = {}));
/** The length for a repository interaction limit to be enabled for. */
var RepositoryInteractionLimitExpiry;
(function (RepositoryInteractionLimitExpiry) {
    /** The interaction limit will expire after 1 day. */
    RepositoryInteractionLimitExpiry["OneDay"] = "ONE_DAY";
    /** The interaction limit will expire after 1 month. */
    RepositoryInteractionLimitExpiry["OneMonth"] = "ONE_MONTH";
    /** The interaction limit will expire after 1 week. */
    RepositoryInteractionLimitExpiry["OneWeek"] = "ONE_WEEK";
    /** The interaction limit will expire after 6 months. */
    RepositoryInteractionLimitExpiry["SixMonths"] = "SIX_MONTHS";
    /** The interaction limit will expire after 3 days. */
    RepositoryInteractionLimitExpiry["ThreeDays"] = "THREE_DAYS";
})(RepositoryInteractionLimitExpiry || (RepositoryInteractionLimitExpiry = {}));
/** Indicates where an interaction limit is configured. */
var RepositoryInteractionLimitOrigin;
(function (RepositoryInteractionLimitOrigin) {
    /** A limit that is configured at the organization level. */
    RepositoryInteractionLimitOrigin["Organization"] = "ORGANIZATION";
    /** A limit that is configured at the repository level. */
    RepositoryInteractionLimitOrigin["Repository"] = "REPOSITORY";
    /** A limit that is configured at the user-wide level. */
    RepositoryInteractionLimitOrigin["User"] = "USER";
})(RepositoryInteractionLimitOrigin || (RepositoryInteractionLimitOrigin = {}));
/** Properties by which repository invitation connections can be ordered. */
var RepositoryInvitationOrderField;
(function (RepositoryInvitationOrderField) {
    /** Order repository invitations by creation time */
    RepositoryInvitationOrderField["CreatedAt"] = "CREATED_AT";
})(RepositoryInvitationOrderField || (RepositoryInvitationOrderField = {}));
/** The possible reasons a given repository could be in a locked state. */
var RepositoryLockReason;
(function (RepositoryLockReason) {
    /** The repository is locked due to a billing related reason. */
    RepositoryLockReason["Billing"] = "BILLING";
    /** The repository is locked due to a migration. */
    RepositoryLockReason["Migrating"] = "MIGRATING";
    /** The repository is locked due to a move. */
    RepositoryLockReason["Moving"] = "MOVING";
    /** The repository is locked due to a rename. */
    RepositoryLockReason["Rename"] = "RENAME";
})(RepositoryLockReason || (RepositoryLockReason = {}));
/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
var RepositoryMigrationOrderDirection;
(function (RepositoryMigrationOrderDirection) {
    /** Specifies an ascending order for a given `orderBy` argument. */
    RepositoryMigrationOrderDirection["Asc"] = "ASC";
    /** Specifies a descending order for a given `orderBy` argument. */
    RepositoryMigrationOrderDirection["Desc"] = "DESC";
})(RepositoryMigrationOrderDirection || (RepositoryMigrationOrderDirection = {}));
/** Properties by which repository migrations can be ordered. */
var RepositoryMigrationOrderField;
(function (RepositoryMigrationOrderField) {
    /** Order mannequins why when they were created. */
    RepositoryMigrationOrderField["CreatedAt"] = "CREATED_AT";
})(RepositoryMigrationOrderField || (RepositoryMigrationOrderField = {}));
/** Properties by which repository connections can be ordered. */
var RepositoryOrderField;
(function (RepositoryOrderField) {
    /** Order repositories by creation time */
    RepositoryOrderField["CreatedAt"] = "CREATED_AT";
    /** Order repositories by name */
    RepositoryOrderField["Name"] = "NAME";
    /** Order repositories by push time */
    RepositoryOrderField["PushedAt"] = "PUSHED_AT";
    /** Order repositories by number of stargazers */
    RepositoryOrderField["Stargazers"] = "STARGAZERS";
    /** Order repositories by update time */
    RepositoryOrderField["UpdatedAt"] = "UPDATED_AT";
})(RepositoryOrderField || (RepositoryOrderField = {}));
/** The access level to a repository */
var RepositoryPermission;
(function (RepositoryPermission) {
    /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
    RepositoryPermission["Admin"] = "ADMIN";
    /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
    RepositoryPermission["Maintain"] = "MAINTAIN";
    /** Can read and clone this repository. Can also open and comment on issues and pull requests */
    RepositoryPermission["Read"] = "READ";
    /** Can read and clone this repository. Can also manage issues and pull requests */
    RepositoryPermission["Triage"] = "TRIAGE";
    /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
    RepositoryPermission["Write"] = "WRITE";
})(RepositoryPermission || (RepositoryPermission = {}));
/** The privacy of a repository */
var RepositoryPrivacy;
(function (RepositoryPrivacy) {
    /** Private */
    RepositoryPrivacy["Private"] = "PRIVATE";
    /** Public */
    RepositoryPrivacy["Public"] = "PUBLIC";
})(RepositoryPrivacy || (RepositoryPrivacy = {}));
/** The repository's visibility level. */
var RepositoryVisibility;
(function (RepositoryVisibility) {
    /** The repository is visible only to users in the same business. */
    RepositoryVisibility["Internal"] = "INTERNAL";
    /** The repository is visible only to those with explicit access. */
    RepositoryVisibility["Private"] = "PRIVATE";
    /** The repository is visible to everyone. */
    RepositoryVisibility["Public"] = "PUBLIC";
})(RepositoryVisibility || (RepositoryVisibility = {}));
/** The possible states of an alert */
var RepositoryVulnerabilityAlertState;
(function (RepositoryVulnerabilityAlertState) {
    /** An alert that has been manually closed by a user. */
    RepositoryVulnerabilityAlertState["Dismissed"] = "DISMISSED";
    /** An alert that has been resolved by a code change. */
    RepositoryVulnerabilityAlertState["Fixed"] = "FIXED";
    /** An alert that is still open. */
    RepositoryVulnerabilityAlertState["Open"] = "OPEN";
})(RepositoryVulnerabilityAlertState || (RepositoryVulnerabilityAlertState = {}));
/** The possible states that can be requested when creating a check run. */
var RequestableCheckStatusState;
(function (RequestableCheckStatusState) {
    /** The check suite or run has been completed. */
    RequestableCheckStatusState["Completed"] = "COMPLETED";
    /** The check suite or run is in progress. */
    RequestableCheckStatusState["InProgress"] = "IN_PROGRESS";
    /** The check suite or run is in pending state. */
    RequestableCheckStatusState["Pending"] = "PENDING";
    /** The check suite or run has been queued. */
    RequestableCheckStatusState["Queued"] = "QUEUED";
    /** The check suite or run is in waiting state. */
    RequestableCheckStatusState["Waiting"] = "WAITING";
})(RequestableCheckStatusState || (RequestableCheckStatusState = {}));
/** Possible roles a user may have in relation to an organization. */
var RoleInOrganization;
(function (RoleInOrganization) {
    /** A user who is a direct member of the organization. */
    RoleInOrganization["DirectMember"] = "DIRECT_MEMBER";
    /** A user with full administrative access to the organization. */
    RoleInOrganization["Owner"] = "OWNER";
    /** A user who is unaffiliated with the organization. */
    RoleInOrganization["Unaffiliated"] = "UNAFFILIATED";
})(RoleInOrganization || (RoleInOrganization = {}));
/** The possible digest algorithms used to sign SAML requests for an identity provider. */
var SamlDigestAlgorithm;
(function (SamlDigestAlgorithm) {
    /** SHA1 */
    SamlDigestAlgorithm["Sha1"] = "SHA1";
    /** SHA256 */
    SamlDigestAlgorithm["Sha256"] = "SHA256";
    /** SHA384 */
    SamlDigestAlgorithm["Sha384"] = "SHA384";
    /** SHA512 */
    SamlDigestAlgorithm["Sha512"] = "SHA512";
})(SamlDigestAlgorithm || (SamlDigestAlgorithm = {}));
/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
var SamlSignatureAlgorithm;
(function (SamlSignatureAlgorithm) {
    /** RSA-SHA1 */
    SamlSignatureAlgorithm["RsaSha1"] = "RSA_SHA1";
    /** RSA-SHA256 */
    SamlSignatureAlgorithm["RsaSha256"] = "RSA_SHA256";
    /** RSA-SHA384 */
    SamlSignatureAlgorithm["RsaSha384"] = "RSA_SHA384";
    /** RSA-SHA512 */
    SamlSignatureAlgorithm["RsaSha512"] = "RSA_SHA512";
})(SamlSignatureAlgorithm || (SamlSignatureAlgorithm = {}));
/** Properties by which saved reply connections can be ordered. */
var SavedReplyOrderField;
(function (SavedReplyOrderField) {
    /** Order saved reply by when they were updated. */
    SavedReplyOrderField["UpdatedAt"] = "UPDATED_AT";
})(SavedReplyOrderField || (SavedReplyOrderField = {}));
/** Represents the individual results of a search. */
var SearchType;
(function (SearchType) {
    /** Returns matching discussions in repositories. */
    SearchType["Discussion"] = "DISCUSSION";
    /** Returns results matching issues in repositories. */
    SearchType["Issue"] = "ISSUE";
    /** Returns results matching repositories. */
    SearchType["Repository"] = "REPOSITORY";
    /** Returns results matching users and organizations on GitHub. */
    SearchType["User"] = "USER";
})(SearchType || (SearchType = {}));
/** The possible ecosystems of a security vulnerability's package. */
var SecurityAdvisoryEcosystem;
(function (SecurityAdvisoryEcosystem) {
    /** PHP packages hosted at packagist.org */
    SecurityAdvisoryEcosystem["Composer"] = "COMPOSER";
    /** Go modules */
    SecurityAdvisoryEcosystem["Go"] = "GO";
    /** Java artifacts hosted at the Maven central repository */
    SecurityAdvisoryEcosystem["Maven"] = "MAVEN";
    /** JavaScript packages hosted at npmjs.com */
    SecurityAdvisoryEcosystem["Npm"] = "NPM";
    /** .NET packages hosted at the NuGet Gallery */
    SecurityAdvisoryEcosystem["Nuget"] = "NUGET";
    /** Python packages hosted at PyPI.org */
    SecurityAdvisoryEcosystem["Pip"] = "PIP";
    /** Ruby gems hosted at RubyGems.org */
    SecurityAdvisoryEcosystem["Rubygems"] = "RUBYGEMS";
    /** Rust crates */
    SecurityAdvisoryEcosystem["Rust"] = "RUST";
})(SecurityAdvisoryEcosystem || (SecurityAdvisoryEcosystem = {}));
/** Identifier formats available for advisories. */
var SecurityAdvisoryIdentifierType;
(function (SecurityAdvisoryIdentifierType) {
    /** Common Vulnerabilities and Exposures Identifier. */
    SecurityAdvisoryIdentifierType["Cve"] = "CVE";
    /** GitHub Security Advisory ID. */
    SecurityAdvisoryIdentifierType["Ghsa"] = "GHSA";
})(SecurityAdvisoryIdentifierType || (SecurityAdvisoryIdentifierType = {}));
/** Properties by which security advisory connections can be ordered. */
var SecurityAdvisoryOrderField;
(function (SecurityAdvisoryOrderField) {
    /** Order advisories by publication time */
    SecurityAdvisoryOrderField["PublishedAt"] = "PUBLISHED_AT";
    /** Order advisories by update time */
    SecurityAdvisoryOrderField["UpdatedAt"] = "UPDATED_AT";
})(SecurityAdvisoryOrderField || (SecurityAdvisoryOrderField = {}));
/** Severity of the vulnerability. */
var SecurityAdvisorySeverity;
(function (SecurityAdvisorySeverity) {
    /** Critical. */
    SecurityAdvisorySeverity["Critical"] = "CRITICAL";
    /** High. */
    SecurityAdvisorySeverity["High"] = "HIGH";
    /** Low. */
    SecurityAdvisorySeverity["Low"] = "LOW";
    /** Moderate. */
    SecurityAdvisorySeverity["Moderate"] = "MODERATE";
})(SecurityAdvisorySeverity || (SecurityAdvisorySeverity = {}));
/** Properties by which security vulnerability connections can be ordered. */
var SecurityVulnerabilityOrderField;
(function (SecurityVulnerabilityOrderField) {
    /** Order vulnerability by update time */
    SecurityVulnerabilityOrderField["UpdatedAt"] = "UPDATED_AT";
})(SecurityVulnerabilityOrderField || (SecurityVulnerabilityOrderField = {}));
/** Properties by which sponsor connections can be ordered. */
var SponsorOrderField;
(function (SponsorOrderField) {
    /** Order sponsorable entities by login (username). */
    SponsorOrderField["Login"] = "LOGIN";
    /** Order sponsors by their relevance to the viewer. */
    SponsorOrderField["Relevance"] = "RELEVANCE";
})(SponsorOrderField || (SponsorOrderField = {}));
/** Properties by which sponsorable connections can be ordered. */
var SponsorableOrderField;
(function (SponsorableOrderField) {
    /** Order sponsorable entities by login (username). */
    SponsorableOrderField["Login"] = "LOGIN";
})(SponsorableOrderField || (SponsorableOrderField = {}));
/** The possible actions that GitHub Sponsors activities can represent. */
var SponsorsActivityAction;
(function (SponsorsActivityAction) {
    /** The activity was cancelling a sponsorship. */
    SponsorsActivityAction["CancelledSponsorship"] = "CANCELLED_SPONSORSHIP";
    /** The activity was starting a sponsorship. */
    SponsorsActivityAction["NewSponsorship"] = "NEW_SPONSORSHIP";
    /** The activity was scheduling a downgrade or cancellation. */
    SponsorsActivityAction["PendingChange"] = "PENDING_CHANGE";
    /** The activity was funds being refunded to the sponsor or GitHub. */
    SponsorsActivityAction["Refund"] = "REFUND";
    /** The activity was disabling matching for a previously matched sponsorship. */
    SponsorsActivityAction["SponsorMatchDisabled"] = "SPONSOR_MATCH_DISABLED";
    /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
    SponsorsActivityAction["TierChange"] = "TIER_CHANGE";
})(SponsorsActivityAction || (SponsorsActivityAction = {}));
/** Properties by which GitHub Sponsors activity connections can be ordered. */
var SponsorsActivityOrderField;
(function (SponsorsActivityOrderField) {
    /** Order activities by when they happened. */
    SponsorsActivityOrderField["Timestamp"] = "TIMESTAMP";
})(SponsorsActivityOrderField || (SponsorsActivityOrderField = {}));
/** The possible time periods for which Sponsors activities can be requested. */
var SponsorsActivityPeriod;
(function (SponsorsActivityPeriod) {
    /** Don't restrict the activity to any date range, include all activity. */
    SponsorsActivityPeriod["All"] = "ALL";
    /** The previous calendar day. */
    SponsorsActivityPeriod["Day"] = "DAY";
    /** The previous thirty days. */
    SponsorsActivityPeriod["Month"] = "MONTH";
    /** The previous seven days. */
    SponsorsActivityPeriod["Week"] = "WEEK";
})(SponsorsActivityPeriod || (SponsorsActivityPeriod = {}));
/** The different kinds of goals a GitHub Sponsors member can have. */
var SponsorsGoalKind;
(function (SponsorsGoalKind) {
    /** The goal is about getting a certain amount in USD from sponsorships each month. */
    SponsorsGoalKind["MonthlySponsorshipAmount"] = "MONTHLY_SPONSORSHIP_AMOUNT";
    /** The goal is about reaching a certain number of sponsors. */
    SponsorsGoalKind["TotalSponsorsCount"] = "TOTAL_SPONSORS_COUNT";
})(SponsorsGoalKind || (SponsorsGoalKind = {}));
/** Properties by which Sponsors tiers connections can be ordered. */
var SponsorsTierOrderField;
(function (SponsorsTierOrderField) {
    /** Order tiers by creation time. */
    SponsorsTierOrderField["CreatedAt"] = "CREATED_AT";
    /** Order tiers by their monthly price in cents */
    SponsorsTierOrderField["MonthlyPriceInCents"] = "MONTHLY_PRICE_IN_CENTS";
})(SponsorsTierOrderField || (SponsorsTierOrderField = {}));
/** Properties by which sponsorship update connections can be ordered. */
var SponsorshipNewsletterOrderField;
(function (SponsorshipNewsletterOrderField) {
    /** Order sponsorship newsletters by when they were created. */
    SponsorshipNewsletterOrderField["CreatedAt"] = "CREATED_AT";
})(SponsorshipNewsletterOrderField || (SponsorshipNewsletterOrderField = {}));
/** Properties by which sponsorship connections can be ordered. */
var SponsorshipOrderField;
(function (SponsorshipOrderField) {
    /** Order sponsorship by creation time. */
    SponsorshipOrderField["CreatedAt"] = "CREATED_AT";
})(SponsorshipOrderField || (SponsorshipOrderField = {}));
/** The privacy of a sponsorship */
var SponsorshipPrivacy;
(function (SponsorshipPrivacy) {
    /** Private */
    SponsorshipPrivacy["Private"] = "PRIVATE";
    /** Public */
    SponsorshipPrivacy["Public"] = "PUBLIC";
})(SponsorshipPrivacy || (SponsorshipPrivacy = {}));
/** Properties by which star connections can be ordered. */
var StarOrderField;
(function (StarOrderField) {
    /** Allows ordering a list of stars by when they were created. */
    StarOrderField["StarredAt"] = "STARRED_AT";
})(StarOrderField || (StarOrderField = {}));
/** The possible commit status states. */
var StatusState;
(function (StatusState) {
    /** Status is errored. */
    StatusState["Error"] = "ERROR";
    /** Status is expected. */
    StatusState["Expected"] = "EXPECTED";
    /** Status is failing. */
    StatusState["Failure"] = "FAILURE";
    /** Status is pending. */
    StatusState["Pending"] = "PENDING";
    /** Status is successful. */
    StatusState["Success"] = "SUCCESS";
})(StatusState || (StatusState = {}));
/** The possible states of a subscription. */
var SubscriptionState;
(function (SubscriptionState) {
    /** The User is never notified. */
    SubscriptionState["Ignored"] = "IGNORED";
    /** The User is notified of all conversations. */
    SubscriptionState["Subscribed"] = "SUBSCRIBED";
    /** The User is only notified when participating or @mentioned. */
    SubscriptionState["Unsubscribed"] = "UNSUBSCRIBED";
})(SubscriptionState || (SubscriptionState = {}));
/** Properties by which team discussion comment connections can be ordered. */
var TeamDiscussionCommentOrderField;
(function (TeamDiscussionCommentOrderField) {
    /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
    TeamDiscussionCommentOrderField["Number"] = "NUMBER";
})(TeamDiscussionCommentOrderField || (TeamDiscussionCommentOrderField = {}));
/** Properties by which team discussion connections can be ordered. */
var TeamDiscussionOrderField;
(function (TeamDiscussionOrderField) {
    /** Allows chronological ordering of team discussions. */
    TeamDiscussionOrderField["CreatedAt"] = "CREATED_AT";
})(TeamDiscussionOrderField || (TeamDiscussionOrderField = {}));
/** Properties by which team member connections can be ordered. */
var TeamMemberOrderField;
(function (TeamMemberOrderField) {
    /** Order team members by creation time */
    TeamMemberOrderField["CreatedAt"] = "CREATED_AT";
    /** Order team members by login */
    TeamMemberOrderField["Login"] = "LOGIN";
})(TeamMemberOrderField || (TeamMemberOrderField = {}));
/** The possible team member roles; either 'maintainer' or 'member'. */
var TeamMemberRole;
(function (TeamMemberRole) {
    /** A team maintainer has permission to add and remove team members. */
    TeamMemberRole["Maintainer"] = "MAINTAINER";
    /** A team member has no administrative permissions on the team. */
    TeamMemberRole["Member"] = "MEMBER";
})(TeamMemberRole || (TeamMemberRole = {}));
/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
var TeamMembershipType;
(function (TeamMembershipType) {
    /** Includes immediate and child team members for the team. */
    TeamMembershipType["All"] = "ALL";
    /** Includes only child team members for the team. */
    TeamMembershipType["ChildTeam"] = "CHILD_TEAM";
    /** Includes only immediate members of the team. */
    TeamMembershipType["Immediate"] = "IMMEDIATE";
})(TeamMembershipType || (TeamMembershipType = {}));
/** Properties by which team connections can be ordered. */
var TeamOrderField;
(function (TeamOrderField) {
    /** Allows ordering a list of teams by name. */
    TeamOrderField["Name"] = "NAME";
})(TeamOrderField || (TeamOrderField = {}));
/** The possible team privacy values. */
var TeamPrivacy;
(function (TeamPrivacy) {
    /** A secret team can only be seen by its members. */
    TeamPrivacy["Secret"] = "SECRET";
    /** A visible team can be seen and @mentioned by every member of the organization. */
    TeamPrivacy["Visible"] = "VISIBLE";
})(TeamPrivacy || (TeamPrivacy = {}));
/** Properties by which team repository connections can be ordered. */
var TeamRepositoryOrderField;
(function (TeamRepositoryOrderField) {
    /** Order repositories by creation time */
    TeamRepositoryOrderField["CreatedAt"] = "CREATED_AT";
    /** Order repositories by name */
    TeamRepositoryOrderField["Name"] = "NAME";
    /** Order repositories by permission */
    TeamRepositoryOrderField["Permission"] = "PERMISSION";
    /** Order repositories by push time */
    TeamRepositoryOrderField["PushedAt"] = "PUSHED_AT";
    /** Order repositories by number of stargazers */
    TeamRepositoryOrderField["Stargazers"] = "STARGAZERS";
    /** Order repositories by update time */
    TeamRepositoryOrderField["UpdatedAt"] = "UPDATED_AT";
})(TeamRepositoryOrderField || (TeamRepositoryOrderField = {}));
/** The role of a user on a team. */
var TeamRole;
(function (TeamRole) {
    /** User has admin rights on the team. */
    TeamRole["Admin"] = "ADMIN";
    /** User is a member of the team. */
    TeamRole["Member"] = "MEMBER";
})(TeamRole || (TeamRole = {}));
/** Reason that the suggested topic is declined. */
var TopicSuggestionDeclineReason;
(function (TopicSuggestionDeclineReason) {
    /** The suggested topic is not relevant to the repository. */
    TopicSuggestionDeclineReason["NotRelevant"] = "NOT_RELEVANT";
    /** The viewer does not like the suggested topic. */
    TopicSuggestionDeclineReason["PersonalPreference"] = "PERSONAL_PREFERENCE";
    /** The suggested topic is too general for the repository. */
    TopicSuggestionDeclineReason["TooGeneral"] = "TOO_GENERAL";
    /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
    TopicSuggestionDeclineReason["TooSpecific"] = "TOO_SPECIFIC";
})(TopicSuggestionDeclineReason || (TopicSuggestionDeclineReason = {}));
/** The possible durations that a user can be blocked for. */
var UserBlockDuration;
(function (UserBlockDuration) {
    /** The user was blocked for 1 day */
    UserBlockDuration["OneDay"] = "ONE_DAY";
    /** The user was blocked for 30 days */
    UserBlockDuration["OneMonth"] = "ONE_MONTH";
    /** The user was blocked for 7 days */
    UserBlockDuration["OneWeek"] = "ONE_WEEK";
    /** The user was blocked permanently */
    UserBlockDuration["Permanent"] = "PERMANENT";
    /** The user was blocked for 3 days */
    UserBlockDuration["ThreeDays"] = "THREE_DAYS";
})(UserBlockDuration || (UserBlockDuration = {}));
/** Properties by which user status connections can be ordered. */
var UserStatusOrderField;
(function (UserStatusOrderField) {
    /** Order user statuses by when they were updated. */
    UserStatusOrderField["UpdatedAt"] = "UPDATED_AT";
})(UserStatusOrderField || (UserStatusOrderField = {}));
/** Properties by which verifiable domain connections can be ordered. */
var VerifiableDomainOrderField;
(function (VerifiableDomainOrderField) {
    /** Order verifiable domains by their creation date. */
    VerifiableDomainOrderField["CreatedAt"] = "CREATED_AT";
    /** Order verifiable domains by the domain name. */
    VerifiableDomainOrderField["Domain"] = "DOMAIN";
})(VerifiableDomainOrderField || (VerifiableDomainOrderField = {}));
gql `
  query searchFile(
    $expression: String!
    $repositoryName: String!
    $owner: String!
  ) {
    repository(name: $repositoryName, owner: $owner) {
      object(expression: $expression) {
        ... on Tree {
          entries {
            type
            name
          }
        }
      }
    }
  }
`;
const SearchPullRequestDocument = gql `
  query searchPullRequest($repositoryName: String!, $owner: String!) {
    repository(name: $repositoryName, owner: $owner) {
      defaultBranchRef {
        name
      }
      pullRequests(last: 100, states: OPEN) {
        nodes {
          number
          title
          headRefName
          headRepository {
            owner {
              login
            }
            name
          }
        }
      }
    }
  }
`;
/**
 * __useSearchPullRequestQuery__
 *
 * To run a query within a React component, call `useSearchPullRequestQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPullRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPullRequestQuery({
 *   variables: {
 *      repositoryName: // value for 'repositoryName'
 *      owner: // value for 'owner'
 *   },
 * });
 */
function useSearchPullRequestQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return useQuery(SearchPullRequestDocument, options);
}
const SearchRepositoryDocument = gql `
  query searchRepository($query: String!) {
    search(first: 10, query: $query, type: REPOSITORY) {
      nodes {
        ... on Repository {
          name
        }
      }
    }
  }
`;
/**
 * __useSearchRepositoryQuery__
 *
 * To run a query within a React component, call `useSearchRepositoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchRepositoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchRepositoryQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
function useSearchRepositoryQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return useQuery(SearchRepositoryDocument, options);
}
const SearchUserDocument = gql `
  query searchUser($query: String!) {
    search(first: 10, query: $query, type: USER) {
      nodes {
        ... on User {
          login
        }
      }
    }
  }
`;
/**
 * __useSearchUserQuery__
 *
 * To run a query within a React component, call `useSearchUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchUserQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
function useSearchUserQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return useQuery(SearchUserDocument, options);
}

const Github = ({ onSubmit, token }) => {
    const [state, setState] = React.useState({ step: 1 });
    const apolloClient = React.useMemo(() => new ApolloClient({
        link: new HttpLink({
            uri: "https://api.github.com/graphql",
            headers: token
                ? {
                    Authorization: `Bearer ${token}`,
                }
                : {},
            fetch: fetch$1,
        }),
        cache: new InMemoryCache(),
    }), [token]);
    const { data: users, error: usersError, loading: usersLoading, } = useSearchUserQuery({
        variables: {
            query: state.owner || "",
        },
        skip: !state.owner,
        client: apolloClient,
    });
    const { data: repositories, error: repositoriesError, loading: repositoriesLoading, } = useSearchRepositoryQuery({
        variables: {
            query: (state.step === 2 && `${state.owner}/`) || "",
        },
        skip: state.step !== 2,
        client: apolloClient,
    });
    switch (state.step) {
        case 1:
            return (React.createElement(build$1.Box, { flexDirection: "column" },
                React.createElement(build$1.Box, null,
                    React.createElement(Message, null, "Owner?"),
                    React.createElement(TextInput, { onChange: (owner) => setState({ step: 1, owner }), value: state.owner || "" })),
                usersLoading && React.createElement(build$1.Text, null, "Loading\u2026"),
                usersError && React.createElement(build$1.Box, null, usersError.message),
                users && users.search.nodes && (React.createElement(Select, { choices: users.search.nodes.map((node) => node?.__typename === "User"
                        ? { label: node.login, value: node.login }
                        : { label: "-", value: "-" }), onSubmit: (owner) => setState({ step: 2, owner }) }))));
        case 2:
            return (React.createElement(build$1.Box, { flexDirection: "column" },
                React.createElement(build$1.Box, null,
                    React.createElement(Message, null, "Pick a repository"),
                    React.createElement(build$1.Text, { color: "blackBright" },
                        state.owner,
                        "/ "),
                    React.createElement(TextInput, { onChange: (repository) => setState({ ...state, repository }), value: state.repository || "" })),
                repositoriesLoading && React.createElement(build$1.Text, null, "Loading\u2026"),
                repositoriesError && React.createElement(build$1.Box, null, repositoriesError.message),
                repositories && repositories.search.nodes && (React.createElement(Select, { choices: repositories.search.nodes.map((node) => node?.__typename === "Repository"
                        ? { label: node.name, value: node.name }
                        : {
                            label: "-",
                            value: "-",
                        }), onSubmit: (repository) => setState({ ...state, step: 3, repository }) }))));
    }
    return null;
};

/**
 * Retrieve github token, ask if not already set.
 */
const GithubToken = ({ onSubmit }) => {
    const token = getEnvGithubToken();
    const [hasSubmit, setHasSubmit] = react.exports.useState(false);
    if (hasSubmit)
        return null;
    if (token) {
        onSubmit(token);
        setHasSubmit(true);
    }
    return (React.createElement(build$1.Box, { flexDirection: "column" },
        React.createElement(Input, { message: "Github token", onSubmit: (val) => {
                writeFileSync(githubTokenPath, val);
                onSubmit(val);
                setHasSubmit(true);
            } }),
        React.createElement(build$1.Box, { marginTop: 1, paddingLeft: 2, flexDirection: "column" },
            React.createElement(build$1.Text, null, "Please provide a GitHub token with `repo` rules checked"),
            React.createElement(build$1.Text, { color: "cyan" }, "https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"))));
};
const githubTokenPath = join(homedir(), ".openapi-codegen");
/**
 * Retrieve stored github token
 */
const getEnvGithubToken = () => {
    let accessToken = process.env.GITHUB_TOKEN;
    if (!accessToken && existsSync(githubTokenPath)) {
        accessToken = readFileSync(githubTokenPath, "utf-8");
    }
    return accessToken;
};

const frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"];
/**
 * Spinner
 */
const Spinner = () => {
    const [frame, setFrame] = react.exports.useState(0);
    react.exports.useEffect(() => {
        const timer = setInterval(() => {
            setFrame((previousFrame) => {
                const isLastFrame = previousFrame === frames.length - 1;
                return isLastFrame ? 0 : previousFrame + 1;
            });
        }, 80);
        return () => {
            clearInterval(timer);
        };
    }, []);
    return React.createElement(build$1.Text, { color: "green" },
        frames[frame],
        " ");
};

const GithubPullRequest = ({ token, repository, pullRequestNumber, owner, onSubmit, }) => {
    const [search, setSearch] = react.exports.useState("");
    const apolloClient = React.useMemo(() => new ApolloClient({
        link: new HttpLink({
            uri: "https://api.github.com/graphql",
            headers: token
                ? {
                    Authorization: `Bearer ${token}`,
                }
                : {},
            fetch: fetch$1,
        }),
        cache: new InMemoryCache(),
    }), [token]);
    const { data, error, loading } = useSearchPullRequestQuery({
        variables: {
            owner,
            repositoryName: repository,
        },
        client: apolloClient,
    });
    react.exports.useEffect(() => {
        if (pullRequestNumber && data?.repository?.pullRequests.nodes) {
            const pr = data.repository.pullRequests.nodes.find((node) => node?.number === pullRequestNumber);
            if (pr) {
                onSubmit({
                    ref: pr.headRefName,
                    owner: pr.headRepository?.owner.login ?? owner,
                    repository: pr.headRepository?.name ?? repository,
                });
            }
        }
    }, [data, pullRequestNumber]);
    if (pullRequestNumber) {
        const pr = data?.repository?.pullRequests.nodes?.find((node) => node?.number === pullRequestNumber);
        if (loading)
            return (React.createElement(build$1.Text, null,
                React.createElement(Spinner, null),
                "Resolving pull request"));
        if (!pr)
            return React.createElement(build$1.Text, null,
                "The pull request #",
                pullRequestNumber,
                " is not open");
        return null;
    }
    if (data?.repository?.pullRequests.nodes?.length === 0) {
        return (React.createElement(build$1.Box, { flexDirection: "column" },
            React.createElement(Confirm, { message: `No open pull request found, do you want to fallback on "${data.repository.defaultBranchRef?.name}" branch?`, onSubmit: (answer) => {
                    if (answer === true && data?.repository?.defaultBranchRef?.name) {
                        onSubmit({
                            owner,
                            repository,
                            ref: data.repository.defaultBranchRef?.name,
                        });
                    }
                    else {
                        process.exit(0);
                    }
                } })));
    }
    return (React.createElement(build$1.Box, { flexDirection: "column" },
        React.createElement(build$1.Box, null,
            React.createElement(Message, null, "Pull request title"),
            React.createElement(TextInput, { onChange: setSearch, value: search })),
        loading && (React.createElement(build$1.Text, null,
            React.createElement(Spinner, null),
            "Loading")),
        error && React.createElement(build$1.Box, null, error.message),
        data && data.repository?.pullRequests.nodes && (React.createElement(Select, { choices: data.repository.pullRequests.nodes
                .filter((node) => search === ""
                ? true
                : new RegExp(search, "i").exec(`#${node?.number} ${node?.title}` || ""))
                .slice(-10)
                .map((node) => ({
                label: `#${node?.number} ${node?.title}`,
                value: {
                    owner: node?.headRepository?.owner.login || owner,
                    repository: node?.headRepository?.name || repository,
                    ref: node?.headRefName || "main",
                },
            })), onSubmit: onSubmit }))));
};

function App({ state }) {
    const [prompts, setPrompts] = react.exports.useState([]);
    react.exports.useEffect(() => {
        const sub = state.subscribe((p) => {
            setPrompts((prev) => [...prev, p]);
        });
        return () => sub.unsubscribe();
    }, [state]);
    if (prompts.length > 0) {
        return (React.createElement(build$1.Box, { flexDirection: "column" }, prompts.map((promptProps, index) => {
            switch (promptProps.type) {
                case "input":
                    return React.createElement(Input, { ...promptProps, key: index });
                case "select":
                    return React.createElement(Select, { ...promptProps, key: index });
                case "confirm":
                    return React.createElement(Confirm, { ...promptProps, key: index });
                case "github":
                    return React.createElement(Github, { ...promptProps, key: index });
                case "githubToken":
                    return React.createElement(GithubToken, { ...promptProps, key: index });
                case "githubPullRequest":
                    return React.createElement(GithubPullRequest, { ...promptProps, key: index });
            }
        })));
    }
    return null;
}

class Prompt {
    state = new ReplaySubject();
    /**
     * Ink render instance.
     */
    app = build$1.render(React.createElement(App, { state: this.state }));
    /**
     * Close the prompt session.
     */
    close() {
        this.app.clear();
        this.app.unmount();
    }
    input(options) {
        const props = typeof options === "string" ? { message: options } : options;
        return new Promise((resolve) => {
            this.state.next({
                type: "input",
                onSubmit: resolve,
                ...props,
            });
        });
    }
    /**
     * Show a list of options to the user.
     *
     * @example
     * const gender = await prompt.select({
     *   choices: [
     *    { label: "Male", value: "m" as const },
     *    { label: "Female", value: "f" as const }
     *   ],
     *   message: "What’s your gender?"
     * })
     */
    select(props) {
        return new Promise((resolve) => {
            this.state.next({
                type: "select",
                onSubmit: resolve,
                ...props,
            });
        });
    }
    confirm(options) {
        const props = typeof options === "string" ? { message: options } : options;
        return new Promise((resolve) => {
            this.state.next({
                type: "confirm",
                onSubmit: resolve,
                ...props,
            });
        });
    }
    /**
     * Smart prompt for selecting a github file.
     */
    github(token) {
        return new Promise((resolve) => {
            this.state.next({
                type: "github",
                token,
                onSubmit: resolve,
            });
        });
    }
    /**
     * Retrieve github token. This will ask if the token is not already stored.
     */
    githubToken() {
        return new Promise((resolve) => {
            this.state.next({
                type: "githubToken",
                onSubmit: resolve,
            });
        });
    }
    /**
     * Select a pull-request.
     *
     * @returns The ref of the pull-request
     */
    githubPullRequest(options) {
        return new Promise((resolve) => {
            this.state.next({
                type: "githubPullRequest",
                owner: options.owner,
                repository: options.repository,
                token: options.token,
                pullRequestNumber: options.pullRequestNumber,
                onSubmit: resolve,
            });
        });
    }
}

var Prompt$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Prompt: Prompt
});

const __filename$1 = fileURLToPath(import.meta.url);
// if no config -> tell the user to do `openapi-codegen init`
// if config -> adjust examples/documentation regarding the keys
class GenerateCommand extends Command {
    config = Option.String(`-c,--config`, {
        description: "Configuration file path",
        env: "OPENAPI_CODEGEN_CONFIG",
    });
    namespace = Option.String();
    source = Option.String(`--source`, {
        description: "Source of the spec (file, url or github)",
        env: "OPENAPI_CODEGEN_SOURCE",
        validator: t.isEnum(["file", "url", "github"]),
    });
    // source=file options
    relativePath = Option.String(`--relativePath`, {
        description: "[source=file] Relative path of the spec file",
        env: "OPENAPI_CODEGEN_FILE_PATH",
    });
    // source=url options
    url = Option.String("--url", {
        description: "[source=url] URL of the spec file",
        env: "OPENAPI_CODEGEN_URL",
    });
    method = Option.String("--method", {
        description: "[source=url] HTTP Method",
        env: "OPENAPI_CODEGEN_URL_METHOD",
        validator: t.isEnum(["get", "post"]),
    });
    // source=github options
    owner = Option.String("--owner", {
        description: "[source=github] Owner of the repository",
        env: "OPENAPI_CODEGEN_GITHUB_OWNER",
    });
    repository = Option.String("--repository,--repo", {
        description: "[source=github] Repository name",
        env: "OPENAPI_CODEGEN_GITHUB_REPOSITORY",
    });
    ref = Option.String("--ref", {
        description: "[source=github] Git reference (commit sha, branch or tag)",
        env: "OPENAPI_CODEGEN_GITHUB_REF",
    });
    specPath = Option.String("--specPath", {
        description: "[source=github] OpenAPI specs file path",
        env: "OPENAPI_CODEGEN_GITHUB_SPEC_PATH",
    });
    pullRequest = Option.String("--pr,--pull-request", {
        description: "[source=github] Select a specific pull-request as ref",
        env: "OPENAPI_CODEGEN_GITHUB_PULL_REQUEST",
        validator: t.isNumber(),
        tolerateBoolean: true,
    });
    static paths = [["gen"], ["generate"], Command.Default];
    static usage = Command.Usage({
        description: "Generate types & components from an OpenAPI file",
        examples: [
            [`From a config key`, `$0 gen myapi`],
            [`With some override`, `$0 gen myapi --ref awesome-feature`],
        ],
    });
    async loadConfigs() {
        const userConfigPath = posix.join(process.cwd(), this.config || "openapi-codegen.config.ts");
        const { dir, name, ext } = posix.parse(userConfigPath);
        const isTs = ext.toLowerCase() === ".ts";
        if (isTs) {
            const transpiledPath = `${dir}/${name}.mjs`;
            const { code } = await swc.transformFile(userConfigPath, {
                jsc: {
                    target: "es2022",
                },
                module: {
                    type: "es6",
                },
            });
            // Write the transpiled file (.js)
            await fsExtra.outputFile(transpiledPath, code);
            // Compute the result
            const { default: config } = await import(posix.relative(posix.parse(slash(__filename$1)).dir, slash(transpiledPath)));
            // Delete the transpiled file
            await fsExtra.unlink(transpiledPath);
            // Return the result
            return config;
        }
        else {
            return await import(posix.relative(posix.parse(slash(__filename$1)).dir, slash(userConfigPath)));
        }
    }
    /**
     * Get `from` options consolidated with cli flags.
     *
     * @param config config from openapi-codegen.config.ts
     * @returns consolidated configuration
     */
    getFromOptions(config) {
        const source = this.source || config.from.source;
        switch (source) {
            case "file": {
                if (config.from.source === "file") {
                    return {
                        ...config.from,
                        relativePath: this.relativePath ?? config.from.relativePath,
                    };
                }
                else {
                    if (!this.relativePath) {
                        throw new UsageError("--relativePath argument is missing");
                    }
                    return {
                        source: "file",
                        relativePath: this.relativePath,
                    };
                }
            }
            case "url":
                if (config.from.source === "url") {
                    return {
                        ...config.from,
                        url: this.url ?? config.from.url,
                        method: this.method ?? config.from.method,
                    };
                }
                else {
                    if (!this.url) {
                        throw new UsageError("--url argument is missing");
                    }
                    return {
                        source: "url",
                        url: this.url,
                        method: this.method,
                    };
                }
            case "github":
                if (config.from.source === "github") {
                    return {
                        ...config.from,
                        owner: this.owner ?? config.from.owner,
                        ref: this.ref ?? config.from.ref,
                        repository: this.repository ?? config.from.repository,
                        specPath: this.specPath ?? config.from.specPath,
                    };
                }
                else {
                    if (!this.owner) {
                        throw new UsageError("--owner argument is missing");
                    }
                    if (!this.ref && !this.pullRequest) {
                        throw new UsageError("--ref argument is missing");
                    }
                    if (!this.repository) {
                        throw new UsageError("--repository argument is missing");
                    }
                    if (!this.specPath) {
                        throw new UsageError("--specPath argument is missing");
                    }
                    return {
                        source: "github",
                        ref: this.ref || "main",
                        owner: this.owner,
                        repository: this.repository,
                        specPath: this.specPath,
                    };
                }
            default:
                throw new UsageError("--source argument is invalid");
        }
    }
    async execute() {
        const configs = await this.loadConfigs();
        if (!(this.namespace in configs)) {
            throw new UsageError(`"${this.namespace}" is not defined in your configuration`);
        }
        const config = configs[this.namespace];
        const options = this.getFromOptions(config);
        if (options.source === "github" && this.pullRequest) {
            const prompt = new Prompt();
            const token = await prompt.githubToken();
            const pullRequest = await prompt.githubPullRequest({
                ...options,
                token,
                pullRequestNumber: typeof this.pullRequest === "number" ? this.pullRequest : undefined,
            });
            options.ref = pullRequest.ref;
            options.owner = pullRequest.owner;
            options.repository = pullRequest.repository;
        }
        const sourceFile = await getOpenAPISourceFile(options);
        const openAPIDocument = await parseOpenAPISourceFile(sourceFile);
        const prettierConfig = await prettier.resolveConfig(process.cwd());
        const writeFile = async (file, data) => {
            await fsExtra.outputFile(posix.join(process.cwd(), config.outputDir, file), prettier.format(data, { parser: "babel-ts", ...prettierConfig }));
        };
        const readFile = (file) => {
            return fsExtra.readFile(posix.join(process.cwd(), config.outputDir, file), "utf-8");
        };
        const existsFile = (file) => {
            return fsExtra.existsSync(posix.join(process.cwd(), config.outputDir, file));
        };
        await config.to({
            openAPIDocument,
            outputDir: config.outputDir,
            writeFile,
            existsFile,
            readFile,
        });
    }
}

const { factory } = ts;
/**
 * Generate the configuration `PropertyAssignment` node.
 */
function generateConfigProperty({ namespace, options, }) {
    return factory.createPropertyAssignment(factory.createIdentifier(namespace), factory.createObjectLiteralExpression([
        factory.createPropertyAssignment(factory.createIdentifier("from"), factory.createObjectLiteralExpression(Object.entries(options.from).map(([key, value]) => factory.createPropertyAssignment(factory.createIdentifier(key), typeof value === "string"
            ? factory.createStringLiteral(value)
            : factory.createObjectLiteralExpression(Object.entries(value).map(([k, v]) => factory.createPropertyAssignment(factory.createIdentifier(k), factory.createStringLiteral(v))))), true), true)),
        factory.createPropertyAssignment(factory.createIdentifier("outputDir"), factory.createStringLiteral(options.outputDir)),
        factory.createPropertyAssignment(factory.createIdentifier("to"), factory.createArrowFunction([factory.createModifier(ts.SyntaxKind.AsyncKeyword)], undefined, [
            factory.createParameterDeclaration(undefined, undefined, factory.createIdentifier("context"), undefined, undefined, undefined),
        ], undefined, factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken), factory.createBlock(getToFunctionStatements(options.plugin, namespace), true))),
    ], true));
}
function getToFunctionStatements(plugin, namespace) {
    switch (plugin) {
        case "typescript/types-only":
            return [
                factory.createExpressionStatement(factory.createAwaitExpression(factory.createCallExpression(factory.createIdentifier("generateSchemaTypes"), undefined, [
                    factory.createIdentifier("context"),
                    factory.createObjectLiteralExpression([
                        factory.createPropertyAssignment(factory.createIdentifier("filenamePrefix"), factory.createStringLiteral(namespace)),
                    ], true),
                ]))),
            ];
        case "typescript/fetch":
            return [
                factory.createVariableStatement(undefined, factory.createVariableDeclarationList([
                    factory.createVariableDeclaration(factory.createIdentifier("filenamePrefix"), undefined, undefined, factory.createStringLiteral(namespace)),
                ], ts.NodeFlags.Const |
                    ts.NodeFlags.AwaitContext |
                    ts.NodeFlags.ContextFlags |
                    ts.NodeFlags.TypeExcludesFlags)),
                factory.createVariableStatement(undefined, factory.createVariableDeclarationList([
                    factory.createVariableDeclaration(factory.createObjectBindingPattern([
                        factory.createBindingElement(undefined, undefined, factory.createIdentifier("schemasFiles"), undefined),
                    ]), undefined, undefined, factory.createAwaitExpression(factory.createCallExpression(factory.createIdentifier("generateSchemaTypes"), undefined, [
                        factory.createIdentifier("context"),
                        factory.createObjectLiteralExpression([
                            factory.createShorthandPropertyAssignment(factory.createIdentifier("filenamePrefix"), undefined),
                        ], true),
                    ]))),
                ], ts.NodeFlags.Const |
                    ts.NodeFlags.AwaitContext |
                    ts.NodeFlags.ContextFlags |
                    ts.NodeFlags.TypeExcludesFlags)),
                factory.createExpressionStatement(factory.createAwaitExpression(factory.createCallExpression(factory.createIdentifier("generateFetchers"), undefined, [
                    factory.createIdentifier("context"),
                    factory.createObjectLiteralExpression([
                        factory.createShorthandPropertyAssignment(factory.createIdentifier("filenamePrefix"), undefined),
                        factory.createShorthandPropertyAssignment(factory.createIdentifier("schemasFiles"), undefined),
                    ], true),
                ]))),
            ];
        case "typescript/react-query":
            return [
                factory.createVariableStatement(undefined, factory.createVariableDeclarationList([
                    factory.createVariableDeclaration(factory.createIdentifier("filenamePrefix"), undefined, undefined, factory.createStringLiteral(namespace)),
                ], ts.NodeFlags.Const |
                    ts.NodeFlags.AwaitContext |
                    ts.NodeFlags.ContextFlags |
                    ts.NodeFlags.TypeExcludesFlags)),
                factory.createVariableStatement(undefined, factory.createVariableDeclarationList([
                    factory.createVariableDeclaration(factory.createObjectBindingPattern([
                        factory.createBindingElement(undefined, undefined, factory.createIdentifier("schemasFiles"), undefined),
                    ]), undefined, undefined, factory.createAwaitExpression(factory.createCallExpression(factory.createIdentifier("generateSchemaTypes"), undefined, [
                        factory.createIdentifier("context"),
                        factory.createObjectLiteralExpression([
                            factory.createShorthandPropertyAssignment(factory.createIdentifier("filenamePrefix"), undefined),
                        ], true),
                    ]))),
                ], ts.NodeFlags.Const |
                    ts.NodeFlags.AwaitContext |
                    ts.NodeFlags.ContextFlags |
                    ts.NodeFlags.TypeExcludesFlags)),
                factory.createExpressionStatement(factory.createAwaitExpression(factory.createCallExpression(factory.createIdentifier("generateReactQueryComponents"), undefined, [
                    factory.createIdentifier("context"),
                    factory.createObjectLiteralExpression([
                        factory.createShorthandPropertyAssignment(factory.createIdentifier("filenamePrefix"), undefined),
                        factory.createShorthandPropertyAssignment(factory.createIdentifier("schemasFiles"), undefined),
                    ], true),
                ]))),
            ];
    }
}
/**
 * Get list of required imports regarding the plugin
 *
 * @param plugin
 * @returns
 */
function getImports(plugin) {
    switch (plugin) {
        case "typescript/fetch":
            return [
                {
                    module: "@openapi-codegen/typescript",
                    namedImports: ["generateSchemaTypes", "generateFetchers"],
                },
            ];
        case "typescript/types-only":
            return [
                {
                    module: "@openapi-codegen/typescript",
                    namedImports: ["generateSchemaTypes"],
                },
            ];
        case "typescript/react-query":
            return [
                {
                    module: "@openapi-codegen/typescript",
                    namedImports: ["generateSchemaTypes", "generateReactQueryComponents"],
                },
            ];
    }
}

function getText$1(expression) {
    try {
        // @ts-expect-error
        return expression.text ?? "";
    }
    catch {
        return "";
    }
}

var emptyConfig = `import { defineConfig } from "@openapi-codegen/cli";

export default defineConfig({});`;

const { factory: f } = ts;
function updateConfig({ sourceFile, existingImports, importsToInsert, configProperty, }) {
    // Split imports in two categories
    const { toInsert, toUpdate } = importsToInsert.reduce((mem, i) => {
        if (existingImports.includes(i.module)) {
            mem.toUpdate.set(i.module, i.namedImports);
        }
        else {
            mem.toInsert.set(i.module, i.namedImports);
        }
        return mem;
    }, {
        toInsert: new Map(),
        toUpdate: new Map(),
    });
    const addImportsAndConfigProperty = (context) => {
        const visit = (node) => {
            node = ts.visitEachChild(node, visit, context);
            if (ts.isImportDeclaration(node) &&
                toUpdate.has(getText(node.moduleSpecifier))) {
                const importClauseNames = toUpdate.get(getText(node.moduleSpecifier));
                node.importClause?.namedBindings?.forEachChild((child) => {
                    if (ts.isImportSpecifier(child) &&
                        !importClauseNames.includes(child.name.text)) {
                        importClauseNames.unshift(child.name.text);
                    }
                });
                return f.createImportDeclaration(node.modifiers, f.createImportClause(false, undefined, f.createNamedImports(importClauseNames.map((i) => f.createImportSpecifier(false, undefined, f.createIdentifier(i))))), node.moduleSpecifier);
            }
            if (ts.isExportAssignment(node) &&
                ts.isCallExpression(node.expression) &&
                ts.isIdentifier(node.expression.expression) &&
                node.expression.expression.escapedText === "defineConfig") {
                const prevProperties = ts.isObjectLiteralExpression(node.expression.arguments[0])
                    ? node.expression.arguments[0].properties
                    : [];
                return f.updateExportAssignment(node, node.decorators, node.modifiers, f.updateCallExpression(node.expression, node.expression.expression, node.expression.typeArguments, [
                    f.createObjectLiteralExpression([...prevProperties, configProperty], true),
                ]));
            }
            return node;
        };
        return (node) => ts.visitNode(node, visit);
    };
    const { transformed: [sourceFileWithImports], } = ts.transform(sourceFile, [addImportsAndConfigProperty]);
    const printer = ts.createPrinter({
        newLine: ts.NewLineKind.LineFeed,
        removeComments: false,
    });
    return ts.createSourceFile("index.ts", createImportStatements(toInsert) + printer.printFile(sourceFileWithImports), ts.ScriptTarget.ESNext);
}
function createImportStatements(imports) {
    if (imports.size === 0)
        return "";
    const sourceFile = ts.createSourceFile("index.ts", "", ts.ScriptTarget.ESNext);
    const printer = ts.createPrinter({
        newLine: ts.NewLineKind.LineFeed,
        removeComments: false,
    });
    const statements = Array.from(imports.entries()).map(([module, namedImports]) => f.createImportDeclaration(undefined, f.createImportClause(false, undefined, f.createNamedImports(namedImports.map((name) => f.createImportSpecifier(false, undefined, f.createIdentifier(name))))), f.createStringLiteral(module), undefined));
    return statements
        .map((statement) => printer.printNode(ts.EmitHint.Unspecified, statement, sourceFile))
        .join("\n");
}
function getText(expression) {
    try {
        // @ts-expect-error
        return expression.text ?? "";
    }
    catch {
        return "";
    }
}

class InitCommand extends Command {
    static paths = [["init"]];
    config = Option.String(`-c,--config`, {
        description: "Configuration file path",
    });
    dryRun = Option.Boolean("--dry-run", {
        description: "Print the file in the stdout",
    });
    prompt = new Prompt();
    hasDependencyInstalled(name, packageJSON) {
        if (typeof packageJSON !== "object")
            return false;
        if (typeof packageJSON.dependencies === "object" &&
            packageJSON.dependencies[name])
            return true;
        if (typeof packageJSON.devDependencies === "object" &&
            packageJSON.devDependencies[name])
            return true;
        return false;
    }
    async getConfigSourceFile(userConfigPath) {
        if (fsExtra.existsSync(userConfigPath)) {
            const sourceText = await fsExtra.readFile(userConfigPath, "utf-8");
            const sourceFile = ts.createSourceFile("openapi-codegen.config.ts", sourceText, ts.ScriptTarget.Latest);
            // Check if the config have `export default defineConfig({})`
            let isValidConfig = false;
            const importModules = new Set();
            const visitor = (node) => {
                if (ts.isExportAssignment(node) &&
                    ts.isCallExpression(node.expression) &&
                    ts.isIdentifier(node.expression.expression) &&
                    node.expression.expression.escapedText === "defineConfig") {
                    isValidConfig = true;
                }
                if (ts.isImportDeclaration(node)) {
                    importModules.add(getText$1(node.moduleSpecifier));
                }
                return node.forEachChild(visitor);
            };
            ts.visitNode(sourceFile, visitor);
            if (isValidConfig) {
                return {
                    isExistingConfig: true,
                    sourceFile,
                    importModules: Array.from(importModules.values()),
                };
            }
        }
        // Load and return emptyConfig.ts
        const sourceFile = ts.createSourceFile("openapi-codegen.config.ts", emptyConfig, ts.ScriptTarget.Latest);
        return {
            isExistingConfig: false,
            sourceFile,
            importModules: ["@openapi-codegen/cli"],
        };
    }
    async askForFile() {
        return {
            relativePath: await this.prompt.input({
                message: "Relative path",
                hint: "Example: ./openapi.json",
            }),
            source: "file",
        };
    }
    async askForUrl() {
        return {
            source: "url",
            url: await this.prompt.input({
                message: "Url",
                hint: "Example: https://.../openapi.json",
            }),
        };
    }
    async execute() {
        const userConfigPath = posix.join(process.cwd(), this.config || "openapi-codegen.config.ts");
        const config = await this.getConfigSourceFile(userConfigPath);
        const source = await this.prompt.select({
            choices: [
                { label: "File", value: "file" },
                { label: "Url", value: "url" },
                // { label: "Github", value: "github" as const },
            ],
            message: "Select the source of your OpenAPI",
        });
        const from = source === "file"
            ? await this.askForFile()
            : source === "url"
                ? await this.askForUrl()
                : await this.prompt.github("todo: inject the token");
        const namespace = format.camel(await this.prompt.input({
            message: "What namespace do you want for your API?",
        }));
        const plugin = await this.prompt.select({
            message: "What do you want to generate?",
            choices: [
                { label: "Types only", value: "typescript/types-only" },
                { label: "Generic Fetchers", value: "typescript/fetch" },
                { label: "React Query components", value: "typescript/react-query" },
            ],
        });
        const outputDir = await this.prompt.input({
            message: "Which folder do you want to generate?",
        });
        this.prompt.close();
        const configProperty = generateConfigProperty({
            namespace,
            options: {
                from,
                outputDir,
                plugin,
            },
        });
        const importsToInsert = getImports(plugin);
        const updatedConfigSourceFile = updateConfig({
            sourceFile: config.sourceFile,
            existingImports: config.importModules,
            importsToInsert,
            configProperty,
        });
        const printer = ts.createPrinter({
            newLine: ts.NewLineKind.LineFeed,
            removeComments: false,
        });
        const prettierConfig = await prettier.resolveConfig(process.cwd());
        const updatedConfig = prettier.format(printer.printFile(updatedConfigSourceFile), { parser: "babel-ts", ...prettierConfig });
        if (this.dryRun) {
            this.context.stdout.write(highlight(updatedConfig, {
                language: "typescript",
            }));
        }
        else {
            const nextSteps = [];
            try {
                const packageJson = await fsExtra.readJSON(posix.join(process.cwd(), "package.json"));
                const hasCli = this.hasDependencyInstalled("@openapi-codegen/cli", packageJson);
                const hasTsPlugin = this.hasDependencyInstalled("@openapi-codegen/typescript", packageJson);
                if (!hasCli && !hasTsPlugin) {
                    nextSteps.push("npm install -D @openapi-codegen/{cli,typescript}");
                }
                else if (!hasCli) {
                    nextSteps.push("npm install -D @openapi-codegen/cli");
                }
                else if (!hasTsPlugin) {
                    nextSteps.push("npm install -D @openapi-codegen/typescript");
                }
            }
            catch {
                nextSteps.push("npm install -D @openapi-codegen/{cli,typescript}");
            }
            nextSteps.push(`npx openapi-codegen gen ${namespace}`);
            await fsExtra.writeFile(userConfigPath, updatedConfig);
            if (config.isExistingConfig) {
                this.context.stdout.write(`The config "${namespace}" has been added to your current config successfully 🥳\n`);
            }
            else {
                this.context.stdout.write(`A new config file has been created!\n`);
            }
            this.context.stdout.write(`\n  Next steps:\n   - ${nextSteps.join("\n   - ")}\n`);
        }
    }
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const [_node, _app, ...args] = process.argv;
const packageJSON = JSON.parse(readFileSync(join(__dirname, "../package.json"), "utf-8"));
const cli = new Cli({
    binaryLabel: `OpenAPI codegen`,
    binaryName: `openapi-codegen`,
    binaryVersion: packageJSON.version,
});
cli.register(InitCommand);
cli.register(GenerateCommand);
cli.runExit(args);
