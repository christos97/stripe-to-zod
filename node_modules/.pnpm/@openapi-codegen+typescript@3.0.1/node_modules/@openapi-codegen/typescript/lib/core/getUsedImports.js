"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUsedImports = void 0;
const tslib_1 = require("tslib");
const case_1 = require("case");
const lodash_1 = require("lodash");
const typescript_1 = (0, tslib_1.__importStar)(require("typescript"));
/**
 * Generate the needed imports regarding the generated nodes usage.
 *
 * @param nodes generated nodes
 * @param files files path for dependencies
 */
const getUsedImports = (nodes, files) => {
    const imports = {
        parameters: {
            used: false,
            namespace: "Parameters",
            from: files.parameters,
        },
        schemas: { used: false, namespace: "Schemas", from: files.schemas },
        requestBodies: {
            used: false,
            namespace: "RequestBodies",
            from: files.requestBodies,
        },
        responses: { used: false, namespace: "Responses", from: files.responses },
    };
    const visitor = (node) => {
        if (typescript_1.default.isQualifiedName(node)) {
            // We canâ€™t use `node.left.getText()` because the node is not compiled (no internal `text` property)
            const text = (0, case_1.camel)((0, lodash_1.get)(node.left, "escapedText", ""));
            if (text in imports) {
                imports[text].used = true;
            }
        }
        return node.forEachChild(visitor);
    };
    typescript_1.default.visitNodes(typescript_1.factory.createNodeArray(nodes), visitor);
    return Object.values(imports)
        .filter((i) => i.used)
        .map((i) => createImportDeclaration(i.namespace, `./${i.from}`));
};
exports.getUsedImports = getUsedImports;
/**
 * Create an `ImportDeclaration` typescript node
 *
 * @param namespace
 * @param from
 * @returns
 */
const createImportDeclaration = (namespace, from) => typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(true, undefined, typescript_1.factory.createNamespaceImport(typescript_1.factory.createIdentifier(namespace))), typescript_1.factory.createStringLiteral(from), undefined);
//# sourceMappingURL=getUsedImports.js.map