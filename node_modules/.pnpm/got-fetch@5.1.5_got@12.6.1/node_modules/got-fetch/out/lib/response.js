/**
 * Spec:
 * https://fetch.spec.whatwg.org/#response-class
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var _GotFetchResponse_bodyUsed;
import { format } from 'util';
import { GotHeaders } from './headers.js';
export class GotFetchResponse {
    constructor(body, init) {
        _GotFetchResponse_bodyUsed.set(this, false);
        if (init && typeof init.status === 'number' && (init.status < 200 || init.status > 599)) {
            throw new RangeError(format('init.status is out of range: %s', init.status));
        }
        this.body = body;
        this.type = init && init.type || 'basic';
        this.headers = new GotHeaders(init ? init.headers : undefined, 'immutable');
        this.status = init && init.status || 0;
        this.statusText = String(init && init.statusText || '');
        this.url = init && init.url || '';
        this.redirected = init && init.redirected || false;
    }
    get bodyUsed() {
        return __classPrivateFieldGet(this, _GotFetchResponse_bodyUsed, "f");
    }
    get ok() {
        return this.status >= 200 && this.status <= 299;
    }
    get trailer() {
        return Promise.reject(new TypeError('`trailer` promise not supported'));
    }
    arrayBuffer() {
        throw new Error("`arrayBuffer` not implemented");
    }
    blob() {
        throw new Error('`blob` not implemented');
    }
    formData() {
        return this.text().then(body => new URLSearchParams(body));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    json() {
        return this.text().then(JSON.parse);
    }
    text() {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _GotFetchResponse_bodyUsed, true, "f");
            if (this.body === null) {
                return Promise.resolve('');
            }
            if (typeof this.body === 'string') {
                return Promise.resolve(this.body);
            }
            else if (Buffer.isBuffer(this.body)) {
                return Promise.resolve(this.body.toString('utf8'));
            }
            else {
                let body = '';
                try {
                    for (var _d = true, _e = __asyncValues(this.body), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                        _c = _f.value;
                        _d = false;
                        try {
                            const chunk = _c;
                            body += chunk;
                        }
                        finally {
                            _d = true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return body;
            }
        });
    }
    clone() {
        throw new Error('clone not implemented');
    }
    static error() {
        return new GotFetchResponse(null, { type: 'error' });
    }
}
_GotFetchResponse_bodyUsed = new WeakMap();
//# sourceMappingURL=response.js.map